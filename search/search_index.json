{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Life is much harder than you think, but you have to stick to it, or you'll never be able to ground off</p>"},{"location":"Algo/v/","title":"Lorem","text":""},{"location":"Algo/Array/Basics%20of%20Array%20Theory/","title":"\u6570\u7ec4\u7406\u8bba","text":"<ol> <li>\u6027\u8d28:<ul> <li>\u6570\u7ec4\u662f\u5b58\u653e\u5728\u8fde\u7eed\u5185\u5b58\u7a7a\u95f4\u4e0a\u7684\u76f8\u540c\u7c7b\u578b\u6570\u636e\u7684\u96c6\u5408\u3002</li> <li>\u6570\u7ec4\u4e0b\u6807\u90fd\u662f\u4ece0\u5f00\u59cb\u7684\u3002</li> <li>\u6570\u7ec4\u5185\u5b58\u7a7a\u95f4\u7684\u5730\u5740\u662f\u8fde\u7eed\u7684\u3002</li> <li>\u6570\u7ec4\u7684\u5143\u7d20\u4e0d\u80fd\u5220\u9664\uff0c\u53ea\u80fd\u8986\u76d6\u3002</li> <li>\u6570\u7ec4\u53ef\u4ee5\u65b9\u4fbf\u7684\u901a\u8fc7\u4e0b\u6807\u7d22\u5f15\u7684\u65b9\u5f0f\u83b7\u53d6\u5230\u4e0b\u6807\u4e0b\u5bf9\u5e94\u7684\u6570\u636e\u3002</li> </ul> </li> </ol>"},{"location":"Algo/Array/Binary%20Search/","title":"Binary Search","text":"<p> Given an array of integers nums which is sorted in ascending order, and an integer target, write a function to search target in nums. If target exists, then return its index. Otherwise, return -1.  You must write an algorithm with O(log n) runtime complexity.</p> <p>Example 1:</p> <pre><code>Input: nums = [-1,0,3,5,9,12], target = 9\nOutput: 4\nExplanation: 9 exists in nums and its index is 4\n</code></pre> <p>Example 2:</p> <pre><code>Input: nums = [-1,0,3,5,9,12], target = 2\nOutput: -1\nExplanation: 2 does not exist in nums so return -1\n</code></pre> <p>Constraints:</p> <pre><code>1 &lt;= nums.length &lt;= 104\n-104 &lt; nums[i], target &lt; 104\nAll the integers in nums are unique.\nnums is sorted in ascending order.\n</code></pre>"},{"location":"Algo/Array/Binary%20Search/#ideas","title":"Ideas","text":"<p>\u2003\u2003 \u4e8c\u5206\u641c\u7d22\u662f\u4e00\u79cd\u5728\u6709\u5e8f\u6570\u7ec4\u4e2d\u641c\u7d22\u67d0\u4e2a\u7279\u5b9a\u5143\u7d20\u7684\u7b97\u6cd5\u3002\u5b83\u7684\u57fa\u672c\u601d\u8def\u662f\uff0c\u5c06\u6570\u7ec4\u5206\u6210\u4e24\u534a\uff0c\u5148\u6bd4\u8f83\u4e2d\u95f4\u7684\u5143\u7d20\u548c\u8981\u641c\u7d22\u7684\u5143\u7d20\uff0c\u5982\u679c\u4e2d\u95f4\u7684\u5143\u7d20\u6b63\u597d\u662f\u8981\u641c\u7d22\u7684\u5143\u7d20\uff0c\u90a3\u4e48\u641c\u7d22\u5c31\u7ed3\u675f\u4e86\uff1b\u5982\u679c\u4e2d\u95f4\u7684\u5143\u7d20\u6bd4\u8981\u641c\u7d22\u7684\u5143\u7d20\u5927\uff0c\u5c31\u5728\u6570\u7ec4\u7684\u5de6\u534a\u90e8\u5206\u7ee7\u7eed\u641c\u7d22\uff1b\u5982\u679c\u4e2d\u95f4\u7684\u5143\u7d20\u6bd4\u8981\u641c\u7d22\u7684\u5143\u7d20\u5c0f\uff0c\u5c31\u5728\u6570\u7ec4\u7684\u53f3\u534a\u90e8\u5206\u7ee7\u7eed\u641c\u7d22\u3002</p> <p>\u2003\u2003 \u4ee3\u7801\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u4e24\u4e2a\u6307\u9488 <code>left</code> \u548c <code>right</code> \u5206\u522b\u6307\u5411\u6570\u7ec4\u7684\u5de6\u7aef\u548c\u53f3\u7aef\uff0c\u6bcf\u6b21\u53d6 <code>mid=left+(right-left)/2</code> \u8ba1\u7b97\u51fa\u6570\u7ec4\u7684\u4e2d\u95f4\u4f4d\u7f6e\u3002\u7136\u540e\u6839\u636e\u4e2d\u95f4\u4f4d\u7f6e\u7684\u6570\u5b57\u548c\u8981\u641c\u7d22\u7684\u6570\u5b57\u7684\u5927\u5c0f\u5173\u7cfb\uff0c\u66f4\u65b0\u5de6\u53f3\u7aef\u70b9\u7684\u4f4d\u7f6e\uff0c\u76f4\u5230\u627e\u5230\u8981\u641c\u7d22\u7684\u6570\u5b57\u6216\u8005 <code>left&gt;right</code> \u4e3a\u6b62\u3002</p> <p>\u2003\u2003 \u4e8c\u5206\u641c\u7d22\u7684\u65f6\u95f4\u590d\u6742\u5ea6\u4e3a <code>O(log n)</code>\uff0c\u56e0\u6b64\u5b83\u662f\u4e00\u79cd\u975e\u5e38\u9ad8\u6548\u7684\u641c\u7d22\u7b97\u6cd5\u3002</p>"},{"location":"Algo/Array/Binary%20Search/#conditions","title":"Conditions","text":"<ol> <li>\u6570\u7ec4\u4e2d\u65e0\u91cd\u590d\u5143\u7d20</li> <li>\u6570\u7ec4\u4e3a\u6709\u5e8f\u6570\u7ec4</li> </ol>"},{"location":"Algo/Array/Binary%20Search/#function","title":"Function","text":""},{"location":"Algo/Array/Binary%20Search/#method-1","title":"Method-1","text":"<ul> <li> <p>\u5b9a\u4e49 <code>target</code> \u662f\u5728\u4e00\u4e2a\u5728\u5de6\u95ed\u53f3\u95ed\u7684\u533a\u95f4\u91cc\uff0c\u4e5f\u5c31\u662f<code>[left, right]</code></p> </li> <li> <p><code>while (left &lt;= right)</code> \u8981\u4f7f\u7528 <code>&lt;=</code> \uff0c\u56e0\u4e3a<code>left == right</code>\u662f\u6709\u610f\u4e49\u7684\uff0c\u6240\u4ee5\u4f7f\u7528 <code>&lt;=</code></p> </li> <li> <p><code>if (nums[middle] &gt; target) right</code> \u8981\u8d4b\u503c\u4e3a <code>middle - 1</code>\uff0c\u56e0\u4e3a\u5f53\u524d\u8fd9\u4e2a<code>nums[middle]</code>\u4e00\u5b9a\u4e0d\u662f<code>target</code>\uff0c\u90a3\u4e48\u63a5\u4e0b\u6765\u8981\u67e5\u627e\u7684\u5de6\u533a\u95f4\u7ed3\u675f\u4e0b\u6807\u4f4d\u7f6e\u5c31\u662f <code>middle - 1</code></p> </li> </ul> <pre><code>// \u7248\u672c\u4e00\nclass Solution {\npublic:\n    int search(vector&lt;int&gt;&amp; nums, int target) {\n        int left = 0;\n        int right = nums.size() - 1; // \u5b9a\u4e49target\u5728\u5de6\u95ed\u53f3\u95ed\u7684\u533a\u95f4\u91cc\uff0c[left, right]\n        while (left &lt;= right) { // \u5f53left==right\uff0c\u533a\u95f4[left, right]\u4f9d\u7136\u6709\u6548\uff0c\u6240\u4ee5\u7528 &lt;=\n            int middle = left + ((right - left) / 2);// \u9632\u6b62\u6ea2\u51fa \u7b49\u540c\u4e8e(left + right)/2\n            if (nums[middle] &gt; target) {\n                right = middle - 1; // target \u5728\u5de6\u533a\u95f4\uff0c\u6240\u4ee5[left, middle - 1]\n            } else if (nums[middle] &lt; target) {\n                left = middle + 1; // target \u5728\u53f3\u533a\u95f4\uff0c\u6240\u4ee5[middle + 1, right]\n            } else { // nums[middle] == target\n                return middle; // \u6570\u7ec4\u4e2d\u627e\u5230\u76ee\u6807\u503c\uff0c\u76f4\u63a5\u8fd4\u56de\u4e0b\u6807\n            }\n        }\n        // \u672a\u627e\u5230\u76ee\u6807\u503c\n        return -1;\n    }\n};\n</code></pre>"},{"location":"Algo/Array/Binary%20Search/#method-2","title":"Method-2","text":"<ul> <li> <p><code>while (left &lt; right)</code>\uff0c\u8fd9\u91cc\u4f7f\u7528 <code>&lt;</code>,\u56e0\u4e3a<code>left == right</code>\u5728\u533a\u95f4<code>[left, right)</code>\u662f\u6ca1\u6709\u610f\u4e49\u7684</p> </li> <li> <p><code>if (nums[middle] &gt; target)</code> <code>right</code> \u66f4\u65b0\u4e3a <code>middle</code>\uff0c\u56e0\u4e3a\u5f53\u524d<code>nums[middle]</code>\u4e0d\u7b49\u4e8e<code>target</code>\uff0c\u53bb\u5de6\u533a\u95f4\u7ee7\u7eed\u5bfb\u627e\uff0c\u800c\u5bfb\u627e\u533a\u95f4\u662f\u5de6\u95ed\u53f3\u5f00\u533a\u95f4\uff0c\u6240\u4ee5<code>right</code>\u66f4\u65b0\u4e3a<code>middle</code>\uff0c\u5373\uff1a\u4e0b\u4e00\u4e2a\u67e5\u8be2\u533a\u95f4\u4e0d\u4f1a\u53bb\u6bd4\u8f83<code>nums[middle]</code></p> </li> </ul> <pre><code>// \u7248\u672c\u4e8c\nclass Solution {\npublic:\n    int search(vector&lt;int&gt;&amp; nums, int target) {\n        int left = 0;\n        int right = nums.size(); // \u5b9a\u4e49target\u5728\u5de6\u95ed\u53f3\u5f00\u7684\u533a\u95f4\u91cc\uff0c\u5373\uff1a[left, right)\n        while (left &lt; right) { // \u56e0\u4e3aleft == right\u7684\u65f6\u5019\uff0c\u5728[left, right)\u662f\u65e0\u6548\u7684\u7a7a\u95f4\uff0c\u6240\u4ee5\u4f7f\u7528 &lt;\n            int middle = left + ((right - left) &gt;&gt; 1);\n            if (nums[middle] &gt; target) {\n                right = middle; // target \u5728\u5de6\u533a\u95f4\uff0c\u5728[left, middle)\u4e2d\n            } else if (nums[middle] &lt; target) {\n                left = middle + 1; // target \u5728\u53f3\u533a\u95f4\uff0c\u5728[middle + 1, right)\u4e2d\n            } else { // nums[middle] == target\n                return middle; // \u6570\u7ec4\u4e2d\u627e\u5230\u76ee\u6807\u503c\uff0c\u76f4\u63a5\u8fd4\u56de\u4e0b\u6807\n            }\n        }\n        // \u672a\u627e\u5230\u76ee\u6807\u503c\n        return -1;\n    }\n};\n</code></pre>"},{"location":"Algo/Array/Binary%20Search/#test","title":"Test","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;vector&gt;\nusing namespace std;\n\nint main() {\n\n    Solution s;\n    vector&lt;int&gt; nums = {1, 2, 3, 4, 5, 6, 7, 8, 9};\n    int target = 5;\n    int index = s.search(nums, target);\n    if (index != -1) {\n        cout &lt;&lt; \"\u627e\u5230\u4e86\uff01\u4e0b\u6807\u4e3a\uff1a\" &lt;&lt; index &lt;&lt; endl;\n    } else {\n        cout &lt;&lt; \"\u6ca1\u6709\u627e\u5230\u3002\" &lt;&lt; endl;\n    }\n    return 0;\n}\n</code></pre>"},{"location":"Algo/Array/Remove%20Element/","title":"Remove Element","text":"<p> \u7ed9\u4f60\u4e00\u4e2a\u6570\u7ec4 <code>nums</code>\u548c\u4e00\u4e2a\u503c <code>val</code>\uff0c\u4f60\u9700\u8981 \u539f\u5730 \u79fb\u9664\u6240\u6709\u6570\u503c\u7b49\u4e8e<code>val</code>\u7684\u5143\u7d20\uff0c\u5e76\u8fd4\u56de\u79fb\u9664\u540e\u6570\u7ec4\u7684\u65b0\u957f\u5ea6\u3002 \u4e0d\u8981\u4f7f\u7528\u989d\u5916\u7684\u6570\u7ec4\u7a7a\u95f4\uff0c\u4f60\u5fc5\u987b\u4ec5\u4f7f\u7528<code>O(1)</code>\u989d\u5916\u7a7a\u95f4\u5e76<code>\u539f\u5730</code>\u4fee\u6539\u8f93\u5165\u6570\u7ec4\u3002 \u5143\u7d20\u7684\u987a\u5e8f\u53ef\u4ee5\u6539\u53d8\uff0c\u4f60\u4e0d\u9700\u8981\u8003\u8651\u6570\u7ec4\u4e2d\u8d85\u51fa\u65b0\u957f\u5ea6\u540e\u9762\u7684\u5143\u7d20\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165\uff1anums = [3,2,2,3], val = 3\n\u8f93\u51fa\uff1a2, nums = [2,2]\n\u89e3\u91ca\uff1a\u51fd\u6570\u5e94\u8be5\u8fd4\u56de\u65b0\u7684\u957f\u5ea6 2, \u5e76\u4e14 nums \u4e2d\u7684\u524d\u4e24\u4e2a\u5143\u7d20\u5747\u4e3a 2\u3002\u4f60\u4e0d\u9700\u8981\u8003\u8651\u6570\u7ec4\u4e2d\u8d85\u51fa\u65b0\u957f\u5ea6\u540e\u9762\u7684\u5143\u7d20\u3002\u4f8b\u5982\uff0c\u51fd\u6570\u8fd4\u56de\u7684\u65b0\u957f\u5ea6\u4e3a 2 \uff0c\u800c nums = [2,2,3,3] \u6216 nums = [2,2,0,0]\uff0c\u4e5f\u4f1a\u88ab\u89c6\u4f5c\u6b63\u786e\u7b54\u6848\u3002\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1anums = [0,1,2,2,3,0,4,2], val = 2\n\u8f93\u51fa\uff1a5, nums = [0,1,4,0,3]\n\u89e3\u91ca\uff1a\u51fd\u6570\u5e94\u8be5\u8fd4\u56de\u65b0\u7684\u957f\u5ea6 5, \u5e76\u4e14 nums \u4e2d\u7684\u524d\u4e94\u4e2a\u5143\u7d20\u4e3a 0, 1, 3, 0, 4\u3002\u6ce8\u610f\u8fd9\u4e94\u4e2a\u5143\u7d20\u53ef\u4e3a\u4efb\u610f\u987a\u5e8f\u3002\u4f60\u4e0d\u9700\u8981\u8003\u8651\u6570\u7ec4\u4e2d\u8d85\u51fa\u65b0\u957f\u5ea6\u540e\u9762\u7684\u5143\u7d20\u3002\n</code></pre> <p>\u63d0\u793a\uff1a</p> <pre><code>0 &lt;= nums.length &lt;= 100\n0 &lt;= nums[i] &lt;= 50\n0 &lt;= val &lt;= 100\n</code></pre>"},{"location":"Algo/Array/Remove%20Element/#_1","title":"\u89e3\u6cd5","text":"<ul> <li> \u66b4\u529b\u7834\u89e3: \u4e24\u5c42for\u5faa\u73af\uff0c\u4e00\u4e2afor\u5faa\u73af\u904d\u5386\u6570\u7ec4\u5143\u7d20 \uff0c\u7b2c\u4e8c\u4e2afor\u5faa\u73af\u66f4\u65b0\u6570\u7ec4\u3002C++  \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2) \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1) <pre><code>class Solution {\npublic:\nint removeElement(vector&lt;int&gt;&amp; nums, int val) {\n    int size = nums.size();\n    for (int i = 0; i &lt; size; i++) {\n        if (nums[i] == val) { // \u53d1\u73b0\u9700\u8981\u79fb\u9664\u7684\u5143\u7d20\uff0c\u5c31\u5c06\u6570\u7ec4\u96c6\u4f53\u5411\u524d\u79fb\u52a8\u4e00\u4f4d\n            for (int j = i + 1; j &lt; size; j++) {\n                nums[j - 1] = nums[j];\n            }\n            i--; // \u56e0\u4e3a\u4e0b\u6807i\u4ee5\u540e\u7684\u6570\u503c\u90fd\u5411\u524d\u79fb\u52a8\u4e86\u4e00\u4f4d\uff0c\u6240\u4ee5i\u4e5f\u5411\u524d\u79fb\u52a8\u4e00\u4f4d\n            size--; // \u6b64\u65f6\u6570\u7ec4\u7684\u5927\u5c0f-1\n        }\n    }\n    return size;\n}\n};\n</code></pre> </li> <li> \u53cc\u6307\u9488: \u53cc\u6307\u9488\u6cd5\uff08\u5feb\u6162\u6307\u9488\u6cd5\uff09\uff1a  <ul> <li>\u901a\u8fc7\u4e00\u4e2a\u5feb\u6307\u9488\u548c\u6162\u6307\u9488\u5728\u4e00\u4e2afor\u5faa\u73af\u4e0b\u5b8c\u6210\u4e24\u4e2afor\u5faa\u73af\u7684\u5de5\u4f5c\u3002</li> </ul> <ul> <li>\u5feb\u6307\u9488\uff1a\u5bfb\u627e\u65b0\u6570\u7ec4\u7684\u5143\u7d20 \uff0c\u65b0\u6570\u7ec4\u5c31\u662f\u4e0d\u542b\u6709\u76ee\u6807\u5143\u7d20\u7684\u6570\u7ec4</li> </ul> <ul> <li>\u6162\u6307\u9488\uff1a\u6307\u5411\u66f4\u65b0 \u65b0\u6570\u7ec4\u4e0b\u6807\u7684\u4f4d\u7f6e</li> </ul> C++  \u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n)   \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1) <pre><code>class Solution {\npublic:\n    int removeElement(vector&lt;int&gt;&amp; nums, int val) {\n        int slowIndex = 0;\n        for (int fastIndex = 0; fastIndex &lt; nums.size(); fastIndex++) {\n            if (val != nums[fastIndex]) {\n                nums[slowIndex++] = nums[fastIndex];\n            }\n        }\n        return slowIndex;\n    }\n};\n</code></pre> </li> </ul>"},{"location":"Algo/Array/Spiral%20Matrix%20II/","title":"Spiral Matrix II","text":"<p> \u7ed9\u4f60\u4e00\u4e2a\u6b63\u6574\u6570 <code>n</code> \uff0c\u751f\u6210\u4e00\u4e2a\u5305\u542b <code>1</code> \u5230 \\(n^2\\)  \u6240\u6709\u5143\u7d20\uff0c\u4e14\u5143\u7d20\u6309\u987a\u65f6\u9488\u987a\u5e8f\u87ba\u65cb\u6392\u5217\u7684 <code>n x n</code> \u6b63\u65b9\u5f62\u77e9\u9635 <code>matrix</code></p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165\uff1an = 3\n\u8f93\u51fa\uff1a[[1,2,3],[8,9,4],[7,6,5]]\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1an = 1\n\u8f93\u51fa\uff1a[[1]]\n</code></pre> <p>\u63d0\u793a\uff1a</p> <pre><code>1 &lt;= n &lt;= 20\n</code></pre>"},{"location":"Algo/Array/Spiral%20Matrix%20II/#_1","title":"\u89e3\u51b3\uff1a","text":"<pre><code>class Solution {\npublic:\n    vector&lt;vector&lt;int&gt;&gt; generateMatrix(int n) {\n        vector&lt;vector&lt;int&gt;&gt; res(n, vector&lt;int&gt;(n, 0)); // \u4f7f\u7528vector\u5b9a\u4e49\u4e00\u4e2a\u4e8c\u7ef4\u6570\u7ec4\n        int startx = 0, starty = 0; // \u5b9a\u4e49\u6bcf\u5faa\u73af\u4e00\u4e2a\u5708\u7684\u8d77\u59cb\u4f4d\u7f6e\n        int loop = n / 2; // \u6bcf\u4e2a\u5708\u5faa\u73af\u51e0\u6b21\uff0c\u4f8b\u5982n\u4e3a\u5947\u65703\uff0c\u90a3\u4e48loop = 1 \u53ea\u662f\u5faa\u73af\u4e00\u5708\uff0c\u77e9\u9635\u4e2d\u95f4\u7684\u503c\u9700\u8981\u5355\u72ec\u5904\u7406\n        int mid = n / 2; // \u77e9\u9635\u4e2d\u95f4\u7684\u4f4d\u7f6e\uff0c\u4f8b\u5982\uff1an\u4e3a3\uff0c \u4e2d\u95f4\u7684\u4f4d\u7f6e\u5c31\u662f(1\uff0c1)\uff0cn\u4e3a5\uff0c\u4e2d\u95f4\u4f4d\u7f6e\u4e3a(2, 2)\n        int count = 1; // \u7528\u6765\u7ed9\u77e9\u9635\u4e2d\u6bcf\u4e00\u4e2a\u7a7a\u683c\u8d4b\u503c\n        int offset = 1; // \u9700\u8981\u63a7\u5236\u6bcf\u4e00\u6761\u8fb9\u904d\u5386\u7684\u957f\u5ea6\uff0c\u6bcf\u6b21\u5faa\u73af\u53f3\u8fb9\u754c\u6536\u7f29\u4e00\u4f4d\n        int i,j;\n        while (loop --) {\n            i = startx;\n            j = starty;\n\n            // \u4e0b\u9762\u5f00\u59cb\u7684\u56db\u4e2afor\u5c31\u662f\u6a21\u62df\u8f6c\u4e86\u4e00\u5708\n            // \u6a21\u62df\u586b\u5145\u4e0a\u884c\u4ece\u5de6\u5230\u53f3(\u5de6\u95ed\u53f3\u5f00)\n            for (j = starty; j &lt; n - offset; j++) {\n                res[startx][j] = count++;\n            }\n            // \u6a21\u62df\u586b\u5145\u53f3\u5217\u4ece\u4e0a\u5230\u4e0b(\u5de6\u95ed\u53f3\u5f00)\n            for (i = startx; i &lt; n - offset; i++) {\n                res[i][j] = count++;\n            }\n            // \u6a21\u62df\u586b\u5145\u4e0b\u884c\u4ece\u53f3\u5230\u5de6(\u5de6\u95ed\u53f3\u5f00)\n            for (; j &gt; starty; j--) {\n                res[i][j] = count++;\n            }\n            // \u6a21\u62df\u586b\u5145\u5de6\u5217\u4ece\u4e0b\u5230\u4e0a(\u5de6\u95ed\u53f3\u5f00)\n            for (; i &gt; startx; i--) {\n                res[i][j] = count++;\n            }\n\n            // \u7b2c\u4e8c\u5708\u5f00\u59cb\u7684\u65f6\u5019\uff0c\u8d77\u59cb\u4f4d\u7f6e\u8981\u5404\u81ea\u52a01\uff0c \u4f8b\u5982\uff1a\u7b2c\u4e00\u5708\u8d77\u59cb\u4f4d\u7f6e\u662f(0, 0)\uff0c\u7b2c\u4e8c\u5708\u8d77\u59cb\u4f4d\u7f6e\u662f(1, 1)\n            startx++;\n            starty++;\n\n            // offset \u63a7\u5236\u6bcf\u4e00\u5708\u91cc\u6bcf\u4e00\u6761\u8fb9\u904d\u5386\u7684\u957f\u5ea6\n            offset += 1;\n        }\n\n        // \u5982\u679cn\u4e3a\u5947\u6570\u7684\u8bdd\uff0c\u9700\u8981\u5355\u72ec\u7ed9\u77e9\u9635\u6700\u4e2d\u95f4\u7684\u4f4d\u7f6e\u8d4b\u503c\n        if (n % 2) {\n            res[mid][mid] = count;\n        }\n        return res;\n    }\n};\n</code></pre>"},{"location":"Algo/Array/Square%20of%20sorted%20array/","title":"Square of sorted array","text":"<p> \u7ed9\u4f60\u4e00\u4e2a\u6309 \u975e\u9012\u51cf\u987a\u5e8f \u6392\u5e8f\u7684\u6574\u6570\u6570\u7ec4 <code>nums</code>\uff0c\u8fd4\u56de\u6bcf\u4e2a\u6570\u5b57\u7684\u5e73\u65b9\u7ec4\u6210\u7684\u65b0\u6570\u7ec4\uff0c\u8981\u6c42\u4e5f\u6309\u975e\u9012\u51cf\u987a\u5e8f\u6392\u5e8f\u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165\uff1anums = [-4,-1,0,3,10]\n\u8f93\u51fa\uff1a[0,1,9,16,100]\n\u89e3\u91ca\uff1a\u5e73\u65b9\u540e\uff0c\u6570\u7ec4\u53d8\u4e3a [16,1,0,9,100]\n\u6392\u5e8f\u540e\uff0c\u6570\u7ec4\u53d8\u4e3a [0,1,9,16,100]\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1anums = [-7,-3,2,3,11]\n\u8f93\u51fa\uff1a[4,9,9,49,121]\n</code></pre> <p>\u63d0\u793a\uff1a</p> <pre><code>1 &lt;= nums.length &lt;= 104\n-104 &lt;= nums[i] &lt;= 104\nnums \u5df2\u6309 \u975e\u9012\u51cf\u987a\u5e8f \u6392\u5e8f\n</code></pre>"},{"location":"Algo/Array/Square%20of%20sorted%20array/#_1","title":"\u89e3\u6cd5","text":"<ul> <li>\u53cc\u6307\u9488\u6cd5:</li> </ul> \u6570\u7ec4\u5e73\u65b9\u7684\u6700\u5927\u503c\u5c31\u5728\u6570\u7ec4\u7684\u4e24\u7aef\uff0c\u4e0d\u662f\u6700\u5de6\u8fb9\u5c31\u662f\u6700\u53f3\u8fb9\uff0c\u4e0d\u53ef\u80fd\u662f\u4e2d\u95f4\u3002 \u6b64\u65f6\u53ef\u4ee5\u8003\u8651\u53cc\u6307\u9488\u6cd5\u4e86\uff0ci\u6307\u5411\u8d77\u59cb\u4f4d\u7f6e\uff0cj\u6307\u5411\u7ec8\u6b62\u4f4d\u7f6e\u3002 \u5b9a\u4e49\u4e00\u4e2a\u65b0\u6570\u7ec4result\uff0c\u548cA\u6570\u7ec4\u4e00\u6837\u7684\u5927\u5c0f\uff0c\u8ba9k\u6307\u5411result\u6570\u7ec4\u7ec8\u6b62\u4f4d\u7f6e\u3002 <ul> <li>\u5982\u679c<code>A[i] * A[i] &lt; A[j] * A[j]</code> \u90a3\u4e48<code>result[k--] = A[j] * A[j]</code>; </li> </ul> <ul> <li>\u5982\u679c<code>A[i] * A[i] &gt;= A[j] * A[j]</code> \u90a3\u4e48<code>result[k--] = A[i] * A[i]</code>; </li> </ul> <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; sortedSquares(vector&lt;int&gt;&amp; A) {\n        int k = A.size() - 1;\n        vector&lt;int&gt; result(A.size(), 0);\n        for (int i = 0, j = A.size() - 1; i &lt;= j;) { // \u6ce8\u610f\u8fd9\u91cc\u8981i &lt;= j\uff0c\u56e0\u4e3a\u6700\u540e\u8981\u5904\u7406\u4e24\u4e2a\u5143\u7d20\n            if (A[i] * A[i] &lt; A[j] * A[j])  {\n                result[k--] = A[j] * A[j];\n                j--;\n            }\n            else {\n                result[k--] = A[i] * A[i];\n                i++;\n            }\n        }\n        return result;\n    }\n};//\u65f6\u95f4\u590d\u6742\u5ea6\u4e3aO(n)\n</code></pre> <ul> <li>\u66b4\u529b\u6392\u5e8f:</li> </ul> \u6bcf\u4e2a\u6570\u5e73\u65b9\u4e4b\u540e\uff0c\u6392\u4e2a\u5e8f <pre><code>class Solution {\npublic:\n    vector&lt;int&gt; sortedSquares(vector&lt;int&gt;&amp; A) {\n        for (int i = 0; i &lt; A.size(); i++) {\n            A[i] *= A[i];\n        }\n        sort(A.begin(), A.end()); // \u5feb\u901f\u6392\u5e8f\n        return A;\n    }\n};\n</code></pre>"},{"location":"Algo/Array/The%20smallest%20subarray/","title":"The smallest subarray","text":"<p> \u7ed9\u5b9a\u4e00\u4e2a\u542b\u6709<code>n</code>\u4e2a\u6b63\u6574\u6570\u7684\u6570\u7ec4\u548c\u4e00\u4e2a\u6b63\u6574\u6570 <code>target</code> , \u627e\u51fa\u8be5\u6570\u7ec4\u4e2d\u6ee1\u8db3\u5176\u548c <code>\u2265</code> <code>target</code> \u7684\u957f\u5ea6\u6700\u5c0f\u7684 \u8fde\u7eed\u5b50\u6570\u7ec4<code>[numsl, numsl+1, ..., numsr-1, numsr]</code> \uff0c\u5e76\u8fd4\u56de\u5176\u957f\u5ea6\u3002\u5982\u679c\u4e0d\u5b58\u5728\u7b26\u5408\u6761\u4ef6\u7684\u5b50\u6570\u7ec4\uff0c\u8fd4\u56de <code>0</code> \u3002</p> <p>\u793a\u4f8b 1\uff1a</p> <pre><code>\u8f93\u5165\uff1atarget = 7, nums = [2,3,1,2,4,3]\n\u8f93\u51fa\uff1a2\n\u89e3\u91ca\uff1a\u5b50\u6570\u7ec4 [4,3] \u662f\u8be5\u6761\u4ef6\u4e0b\u7684\u957f\u5ea6\u6700\u5c0f\u7684\u5b50\u6570\u7ec4\u3002\n</code></pre> <p>\u793a\u4f8b 2\uff1a</p> <pre><code>\u8f93\u5165\uff1atarget = 4, nums = [1,4,4]\n\u8f93\u51fa\uff1a1\n</code></pre> <p>\u793a\u4f8b 3\uff1a</p> <pre><code>\u8f93\u5165\uff1atarget = 11, nums = [1,1,1,1,1,1,1,1]\n\u8f93\u51fa\uff1a0\n</code></pre> <p>\u63d0\u793a\uff1a</p> <pre><code>1 &lt;= target &lt;= 109\n1 &lt;= nums.length &lt;= 105\n1 &lt;= nums[i] &lt;= 105\n</code></pre>"},{"location":"Algo/Array/The%20smallest%20subarray/#_1","title":"\u89e3\u6cd5","text":"<ul> <li> <p>\u6ed1\u52a8\u7a97\u53e3: </p> <p>\u7a97\u53e3\u5c31\u662f \u6ee1\u8db3\u5176\u548c \u2265 s \u7684\u957f\u5ea6\u6700\u5c0f\u7684 \u8fde\u7eed \u5b50\u6570\u7ec4\u3002 \u7a97\u53e3\u7684\u8d77\u59cb\u4f4d\u7f6e\u5982\u4f55\u79fb\u52a8\uff1a\u5982\u679c\u5f53\u524d\u7a97\u53e3\u7684\u503c\u5927\u4e8es\u4e86\uff0c\u7a97\u53e3\u5c31\u8981\u5411\u524d\u79fb\u52a8\u4e86\uff08\u4e5f\u5c31\u662f\u8be5\u7f29\u5c0f\u4e86\uff09\u3002 \u7a97\u53e3\u7684\u7ed3\u675f\u4f4d\u7f6e\u5982\u4f55\u79fb\u52a8\uff1a\u7a97\u53e3\u7684\u7ed3\u675f\u4f4d\u7f6e\u5c31\u662f\u904d\u5386\u6570\u7ec4\u7684\u6307\u9488\uff0c\u4e5f\u5c31\u662ffor\u5faa\u73af\u91cc\u7684\u7d22\u5f15\u3002 </p> </li> </ul> <pre><code>class Solution {\npublic:\n    int minSubArrayLen(int s, vector&lt;int&gt;&amp; nums) {\n        int result = INT32_MAX;\n        int sum = 0; // \u6ed1\u52a8\u7a97\u53e3\u6570\u503c\u4e4b\u548c\n        int i = 0; // \u6ed1\u52a8\u7a97\u53e3\u8d77\u59cb\u4f4d\u7f6e\n        int subLength = 0; // \u6ed1\u52a8\u7a97\u53e3\u7684\u957f\u5ea6\n        for (int j = 0; j &lt; nums.size(); j++) {\n            sum += nums[j];\n            // \u6ce8\u610f\u8fd9\u91cc\u4f7f\u7528while\uff0c\u6bcf\u6b21\u66f4\u65b0 i\uff08\u8d77\u59cb\u4f4d\u7f6e\uff09\uff0c\u5e76\u4e0d\u65ad\u6bd4\u8f83\u5b50\u5e8f\u5217\u662f\u5426\u7b26\u5408\u6761\u4ef6\n            while (sum &gt;= s) {\n                subLength = (j - i + 1); // \u53d6\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\n                result = result &lt; subLength ? result : subLength;\n                sum -= nums[i++]; // \u8fd9\u91cc\u4f53\u73b0\u51fa\u6ed1\u52a8\u7a97\u53e3\u7684\u7cbe\u9ad3\u4e4b\u5904\uff0c\u4e0d\u65ad\u53d8\u66f4i\uff08\u5b50\u5e8f\u5217\u7684\u8d77\u59cb\u4f4d\u7f6e\uff09\n            }\n        }\n        // \u5982\u679cresult\u6ca1\u6709\u88ab\u8d4b\u503c\u7684\u8bdd\uff0c\u5c31\u8fd4\u56de0\uff0c\u8bf4\u660e\u6ca1\u6709\u7b26\u5408\u6761\u4ef6\u7684\u5b50\u5e8f\u5217\n        return result == INT32_MAX ? 0 : result;\n    }\n}; //\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n) \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n</code></pre> <ul> <li> <p>\u66b4\u529b\u89e3\u6cd5: </p> <p>\u53cc\u91cd<code>for</code>\u5faa\u73af\uff0c\u679a\u4e3e\u6240\u6709\u53ef\u80fd\u7684\u7ed3\u679c\uff0c\u7136\u540e\u518d\u6bd4\u8f83\u3002</p> </li> </ul> <pre><code>class Solution {\npublic:\n    int minSubArrayLen(int s, vector&lt;int&gt;&amp; nums) {\n        int result = INT32_MAX; // \u6700\u7ec8\u7684\u7ed3\u679c\n        int sum = 0; // \u5b50\u5e8f\u5217\u7684\u6570\u503c\u4e4b\u548c\n        int subLength = 0; // \u5b50\u5e8f\u5217\u7684\u957f\u5ea6\n        for (int i = 0; i &lt; nums.size(); i++) { // \u8bbe\u7f6e\u5b50\u5e8f\u5217\u8d77\u70b9\u4e3ai\n            sum = 0;\n            for (int j = i; j &lt; nums.size(); j++) { // \u8bbe\u7f6e\u5b50\u5e8f\u5217\u7ec8\u6b62\u4f4d\u7f6e\u4e3aj\n                sum += nums[j];\n                if (sum &gt;= s) { // \u4e00\u65e6\u53d1\u73b0\u5b50\u5e8f\u5217\u548c\u8d85\u8fc7\u4e86s\uff0c\u66f4\u65b0result\n                    subLength = j - i + 1; // \u53d6\u5b50\u5e8f\u5217\u7684\u957f\u5ea6\n                    result = result &lt; subLength ? result : subLength;\n                    break; // \u56e0\u4e3a\u6211\u4eec\u662f\u627e\u7b26\u5408\u6761\u4ef6\u6700\u77ed\u7684\u5b50\u5e8f\u5217\uff0c\u6240\u4ee5\u4e00\u65e6\u7b26\u5408\u6761\u4ef6\u5c31break\n                }\n            }\n        }\n        // \u5982\u679cresult\u6ca1\u6709\u88ab\u8d4b\u503c\u7684\u8bdd\uff0c\u5c31\u8fd4\u56de0\uff0c\u8bf4\u660e\u6ca1\u6709\u7b26\u5408\u6761\u4ef6\u7684\u5b50\u5e8f\u5217\n        return result == INT32_MAX ? 0 : result;\n    }\n}; //\u65f6\u95f4\u590d\u6742\u5ea6\uff1aO(n^2) \u7a7a\u95f4\u590d\u6742\u5ea6\uff1aO(1)\n</code></pre>"},{"location":"Algo/Backtracking/theoretical%20basis/","title":"theoretical basis :","text":"<code>Lorem ipsum dolor sit amet</code> <p>Sed sagittis eleifend rutrum. Donec vitae suscipit est. Nullam tempus tellus non sem sollicitudin, quis rutrum leo facilisis.</p> <code>Cras arcu libero</code> <p>Aliquam metus eros, pretium sed nulla venenatis, faucibus auctor ex. Proin ut eros sed sapien ullamcorper consequat. Nunc ligula ante.</p> <p>Duis mollis est eget nibh volutpat, fermentum aliquet dui mollis. Nam vulputate tincidunt fringilla. Nullam dignissim ultrices urna non auctor.</p> <ol> <li> <p>Vivamus id mi enim. Integer id turpis sapien. Ut condimentum lobortis     sagittis. Aliquam purus tellus, faucibus eget urna at, iaculis venenatis     nulla. Vivamus a pharetra leo.</p> <ol> <li> <p>Vivamus venenatis porttitor tortor sit amet rutrum. Pellentesque aliquet     quam enim, eu volutpat urna rutrum a. Nam vehicula nunc mauris, a     ultricies libero efficitur sed.</p> </li> <li> <p>Morbi eget dapibus felis. Vivamus venenatis porttitor tortor sit amet     rutrum. Pellentesque aliquet quam enim, eu volutpat urna rutrum a.</p> <ol> <li>Mauris dictum mi lacus</li> <li>Ut sit amet placerat ante</li> <li>Suspendisse ac eros arcu</li> </ol> </li> </ol> </li> </ol>"},{"location":"Algo/Binary%20Tree/theoretical%20basis/","title":"theoretical basis :","text":""},{"location":"Algo/Dynamic%20Programming/theoretical%20basis/","title":"theoretical basis :","text":""},{"location":"Algo/Greedy/theoretical%20basis/","title":"theoretical basis :","text":""},{"location":"Algo/Hash%20Table/Hash%20Table%20Theory/","title":"Hash Table Theory","text":""},{"location":"Algo/Linked%20List/Linked%20List%20Theory/","title":"Linked List Theory","text":""},{"location":"Algo/Linked%20List/Linked%20List%20Theory/#_1","title":"\u94fe\u8868\u7406\u8bba","text":"<p>\u2003\u2003 \u94fe\u8868\u662f\u4e00\u79cd\u901a\u8fc7\u6307\u9488\u4e32\u8054\u5728\u4e00\u8d77\u7684\u7ebf\u6027\u7ed3\u6784\uff0c\u6bcf\u4e00\u4e2a\u8282\u70b9\u7531\u4e24\u90e8\u5206\u7ec4\u6210\uff0c\u4e00\u4e2a\u662f\u6570\u636e\u57df\u4e00\u4e2a\u662f\u6307\u9488\u57df\uff08\u5b58\u653e\u6307\u5411\u4e0b\u4e00\u4e2a\u8282\u70b9\u7684\u6307\u9488\uff09\uff0c\u6700\u540e\u4e00\u4e2a\u8282\u70b9\u7684\u6307\u9488\u57df\u6307\u5411null\uff08\u7a7a\u6307\u9488\u7684\u610f\u601d\uff09\u3002\u94fe\u8868\u7684\u5165\u53e3\u8282\u70b9\u79f0\u4e3a\u94fe\u8868\u7684\u5934\u7ed3\u70b9\u4e5f\u5c31\u662fhead\u3002</p>"},{"location":"Algo/Monotonic%20Stack/theoretical%20basis/","title":"theoretical basis :","text":""},{"location":"Algo/String/Reverse%20String/Reverse%20String/","title":"\u53cd\u8f6c\u5b57\u7b26\u4e32","text":""},{"location":"C%2B%2B/Basic/Concept/","title":"Basic","text":"<pre><code>#include &lt;stdint.h&gt;\n#include &lt;stdio.h&gt;\n#include &lt;string.h&gt;\n#include &lt;unistd.h&gt;\n\n#define R(mul,shift,x,y) \\\n  _=x; \\\n  x -= mul*y&gt;&gt;shift; \\\n  y += mul*_&gt;&gt;shift; \\\n  _ = 3145728-x*x-y*y&gt;&gt;11; \\\n  x = x*_&gt;&gt;10; \\\n  y = y*_&gt;&gt;10;\n\nint8_t b[1760], z[1760];\n\nint main() {\n    int sA=1024,cA=0,sB=1024,cB=0,_;\n    for (;;) {\n        memset(b, 32, 1760);  // text buffer\n        memset(z, 127, 1760);   // z buffer\n        int sj=0, cj=1024;\n        for (int j = 0; j &lt; 90; j++) {\n            int si = 0, ci = 1024;  // sine and cosine of angle i\n            for (int i = 0; i &lt; 324; i++) {\n                int R1 = 1, R2 = 2048, K2 = 5120*1024;\n\n                int x0 = R1*cj + R2,\n                        x1 = ci*x0 &gt;&gt; 10,\n                        x2 = cA*sj &gt;&gt; 10,\n                        x3 = si*x0 &gt;&gt; 10,\n                        x4 = R1*x2 - (sA*x3 &gt;&gt; 10),\n                        x5 = sA*sj &gt;&gt; 10,\n                        x6 = K2 + R1*1024*x5 + cA*x3,\n                        x7 = cj*si &gt;&gt; 10,\n                        x = 40 + 30*(cB*x1 - sB*x4)/x6,\n                        y = 12 + 15*(cB*x4 + sB*x1)/x6,\n                        N = (-cA*x7 - cB*((-sA*x7&gt;&gt;10) + x2) - ci*(cj*sB &gt;&gt; 10) &gt;&gt; 10) - x5 &gt;&gt; 7;\n\n                int o = x + 80 * y;\n                int8_t zz = (x6-K2)&gt;&gt;15;\n                if (22 &gt; y &amp;&amp; y &gt; 0 &amp;&amp; x &gt; 0 &amp;&amp; 80 &gt; x &amp;&amp; zz &lt; z[o]) {\n                    z[o] = zz;\n                    b[o] = \".,-~:;=!*#$@\"[N &gt; 0 ? N : 0];\n                }\n                R(5, 8, ci, si)  // rotate i\n            }\n            R(9, 7, cj, sj)  // rotate j\n        }\n        for (int k = 0; 1761 &gt; k; k++)\n            putchar(k % 80 ? b[k] : 10);\n        R(5, 7, cA, sA);\n        R(5, 8, cB, sB);\n        usleep(15000);\n        printf(\"\\x1b[23A\");\n    }\n}\n</code></pre>"},{"location":"C%2B%2B/Core/Concept/","title":"Concept","text":""},{"location":"C%2B%2B/Improve/Concept/","title":"Concept","text":""},{"location":"CS/Courses/Courses/","title":"CS-Awesome-Courses","text":""},{"location":"CS/Courses/Courses/#artificial-intelligence","title":"Artificial Intelligence","text":"<p>\u5434\u6069\u8fbe\u673a\u5668\u5b66\u4e60</p> <p>CS224d: Deep Learning for Natural Language Processing</p> <p>CS221: Artificial Intelligence: Principles and Techniques</p> <p>CS 20: Tensorflow for Deep Learning Research</p> <p>CS234: Reinforcement Learning</p> <p>Amazon \u674e\u6c90\u5927\u795e\u51fa\u7684\u300a\u52a8\u624b\u5b66\u6df1\u5ea6\u5b66\u4e60\u300b</p> <p>\u53f0\u6e7e\u5927\u5b66\u6797\u8f69\u7530\u6559\u6388 \u300a\u673a\u5668\u5b66\u4e60\u57fa\u77f3\u4e0a\u300b\uff0c \u300a\u673a\u5668\u5b66\u4e60\u57fa\u77f3\u4e0b\u300b</p> <p>\u53f0\u6e7e\u5927\u5b66\u300aApplied Deep Learning/Machine Learning and Having It Deep and Structured\u300b</p> <p>UCB CS188</p> <p>MIT 6.034</p> <p>\u65af\u5766\u798f CS229   - \u89c6\u9891   - \u8bb2\u4e49</p> <p>\u65af\u5766\u798f CS231n   - \u89c6\u9891   - \u8bb2\u4e49</p> <p>\u65af\u5766\u798f CS224d   - \u4e3b\u9875   - \u8bb2\u4e49</p> <p>\u65af\u5766\u798f CS20si</p> <p>\u65af\u5766\u798f CS230 / DeepLearningAI   - \u89c6\u9891   - \u7b14\u8bb0</p> <p>MIT 6.S191</p> <p>UCB CS294   - \u89c6\u9891   - \u7b14\u8bb0</p>"},{"location":"CS/Courses/Courses/#operating-system","title":"Operating System","text":"<p>MIT \u5927\u540d\u9f0e\u9f0e\u76846.828</p> <p>\u6e05\u534e\u5927\u5b66\u7684OS\u8bfe\u7a0b ucore,\u89c6\u9891\u5728\u5b66\u5802\u5728\u7ebf\u548cbilibili\u5747\u6709</p> <p>\u6e05\u534e\u5927\u5b66\u7528Rust\u4ece\u96f6\u5f00\u59cb\u5199OS(rCore-Tutorial-v3)\uff0c\u4ee3\u7801\uff0c\u6587\u6863</p> <p>\u5357\u4eac\u5927\u5b66 ICS PA</p> <p>NJU ICS PA Bilibili</p> <p>NJU OS</p> <p>\u4e0a\u6d77\u4ea4\u901a\u5927\u5b66 \u64cd\u4f5c\u7cfb\u7edf (\u9648\u6d77\u6ce2\u3001\u590f\u865e\u658c)   - \u4e0a\u6d77\u4ea4\u901a\u5927\u5b66 SE315   - \u89c6\u9891\u8bfe\u7a0b\uff08\u597d\u5927\u5b66\u5728\u7ebf\uff09    - \u5bf9\u5e94\u6559\u6750 \u300a\u73b0\u4ee3\u64cd\u4f5c\u7cfb\u7edf\u2014\u2014\u539f\u7406\u4e0e\u5b9e\u73b0\u300b   - \u914d\u5957 Lab </p> <p>CMU CSAPP \u5bf9\u5e94\u7684\u8bfe\u7a0b 15213</p> <p>CMU 15410/605</p> <p>Gate Lectures OS</p>"},{"location":"CS/Courses/Courses/#programming-language","title":"Programming Language","text":"<p>Structure and Interpretation of Computer Programs</p> <p>CIS 194(\u5b66\u4e60haskell)</p> <p>\u4f2f\u514b\u5229\u6539\u7684Python\u7248SICP</p> <p>\u534e\u76db\u987f\u5927\u5b66 Programming Languages</p> <p>\u6d53\u7f29\u7248mit 6.001(SICP)</p>"},{"location":"CS/Courses/Courses/#compliers","title":"Compliers","text":"<p>stanford CS143</p> <p>stanford CS243</p> <p>stanford CS343</p> <p>Gate Lectures \u7f16\u8bd1</p>"},{"location":"CS/Courses/Courses/#database-system","title":"Database System","text":"<p>CMU 15445</p> <p>CMU 15721</p> <p>MIT 6.830/6.814</p> <p>pingcap talent-plan </p> <p>instruction</p> <p>cs 245</p> <p>\u65af\u5766\u798f CS346</p> <p>\u4f2f\u514b\u5229 CS 186</p> <p>\u65af\u5766\u798f CS145</p> <p>\u534e\u76db\u987f\u5927\u5b66 CSE444</p>"},{"location":"CS/Courses/Courses/#distributed-system","title":"Distributed System","text":"<p>MIT 6.824</p> <p>Stanford CS244b: Distributed systems</p> <p>CMU 15-440/640, Spring 2016: Distributed Systems</p>"},{"location":"CS/Courses/Courses/#data-structures-and-algorithms","title":"Data Structures and Algorithms","text":"<p>UCB CS61b</p> <p>\u666e\u6797\u65af\u987f Algs4</p> <p>MIT 6.006</p> <p>Gate Lectures \u7b97\u6cd5\u548c\u6570\u636e\u7ed3\u6784</p> <p>\u300a\u7b97\u6cd5 \u7b2c\u56db\u7248\u300b</p> <p>\u666e\u6797\u65af\u987f\u5728 Coursera \u4e0a\u4e5f\u516c\u5f00\u4e86\u4e24\u95e8\u5bf9\u5e94\u8bfe\u7a0b\uff1aAlgorithms, Part I \u548c Algorightmsm, Part2</p> <p>\u65af\u5766\u798f CS106b (broken link)</p>"},{"location":"CS/Courses/Courses/#computer-networking","title":"Computer Networking","text":"<p>cmu15441</p> <p>cs144</p> <p>top to down approach</p> <p>myk's top-to-down</p> <p>\u4f2f\u514b\u5229 EE122</p> <p>Gate Lectures \u8ba1\u7f51</p> <p>\u65af\u5766\u798f CS144</p>"},{"location":"CS/Courses/Courses/#computer-architecture","title":"Computer Architecture","text":"<p>nand2tetris</p> <p>CMU 15-213   - \u89c6\u9891   - \u8bb2\u4e49</p> <p>MIT 6.828   - \u4e3b\u9875   - xv6\u4e2d\u6587\u6587\u6863</p> <p>UCB CS61c</p>"},{"location":"CS/Data%20Structure/Algorithm%20Performance/Algorithm%20Performance/","title":"algorithm performance","text":""},{"location":"CS/Data%20Structure/Linear/Array/Array%20concept/","title":"Array concept","text":""},{"location":"CS/Data%20Structure/Linear/Linear%20Table/Concept/","title":"Concept","text":""},{"location":"CS/Data%20Structure/Linear/Queue/Concept/","title":"concept","text":""},{"location":"CS/Data%20Structure/Linear/Stack/Concept/","title":"Concept","text":""},{"location":"CS/Data%20Structure/Map/Concept/","title":"Concept:","text":""},{"location":"CS/Data%20Structure/Search/Concept/","title":"Concept:","text":""},{"location":"CS/Data%20Structure/Sort/Concept/","title":"Concept:","text":""},{"location":"CS/Data%20Structure/Tree/Concept/","title":"Concept:","text":""},{"location":"CS/Network/Overview/Concept/","title":"Concept","text":""},{"location":"CS/Operating%20System/Overview/Concept/","title":"Concept","text":""},{"location":"CS/Principles%20of%20computer%20composition/System%20Overview/System%20Overview/","title":"System Overview","text":""},{"location":"IELTS/Listen/Concept/","title":"Concept","text":""},{"location":"IELTS/Read/Concept/","title":"Concept","text":""},{"location":"IELTS/Speaking/Concept/","title":"Concept","text":""},{"location":"IELTS/Writing/Concept/","title":"Concept","text":""},{"location":"Math/Calculus/Differential/Limit/Concept/","title":"Concept","text":""},{"location":"Math/Calculus/Integral/Overview/Concept/","title":"Concept","text":""},{"location":"Math/Essence/Concept/","title":"Concept","text":""},{"location":"Math/Linear%20Algebra/Determinant/Concept/","title":"Concept","text":""},{"location":"Math/Probability%20Theory/Random%20Events%20and%20Probability/Concept/","title":"Concept","text":""},{"location":"Notes/Buildsite/","title":"BuildSite","text":"<ol> <li> <p>\u521b\u5efa\u865a\u62df\u73af\u5883 <pre><code>conda create -n venv python=3.9.5\nconda activate venv\n</code></pre></p> </li> <li> <p>\u5b89\u88c5\u6240\u9700\u5e93</p> <ul> <li><code>pip install mkdocs</code></li> <li><code>pip install mkdocs-material</code></li> </ul> </li> <li> <p>\u521b\u5efa\u7f51\u7ad9</p> <ul> <li><code>mkdir xvliote</code></li> <li><code>cd xvliote</code></li> <li><code>mkdocs new mysite</code></li> </ul> </li> <li> <p>\u63d0\u4ea4</p> <ul> <li>\u5728\u5305\u542b<code>.yml</code>\u7684\u6587\u4ef6\u4e2d\u8fdb\u884c<code>git</code>\u64cd\u4f5c</li> <li><code>git init</code> </li> <li><code>git add .</code></li> <li><code>git commit -m \"first commit\"</code></li> <li><code>git remote add origin git@github.com:xvliote/xvliote.github.io.git</code></li> <li><code>git push -u origin main</code></li> <li><code>mkdocs gh-deploy</code></li> </ul> </li> <li> <p>\u4fee\u6539\u63d0\u4ea4</p> <ul> <li><code>git status</code> </li> <li><code>git add .</code></li> <li><code>git commit -m \"xxxxx\"</code></li> <li><code>git push -u origin main</code></li> <li><code>mkdocs gh-deploy</code></li> </ul> </li> </ol> <p>\u8981\u5728 CentOS 7 \u4e0a\u4e0b\u8f7d\u5e76\u5b89\u88c5 GCC 11\uff0c\u60a8\u53ef\u4ee5\u6309\u7167\u4ee5\u4e0b\u6b65\u9aa4\u64cd\u4f5c\uff1a</p> <p>\u542f\u7528 SCL\uff08\u8f6f\u4ef6\u96c6\u5408\uff09\u5b58\u50a8\u5e93\uff1a sudo yum install centos-release-scl \u5b89\u88c5 GCC 11 \u548c G++\uff1a sudo yum install devtoolset-11-gcc devtoolset-11-gcc-c++ \u5207\u6362\u5230\u4f7f\u7528 GCC 11 \u7684 shell\uff1a scl enable devtoolset-11 bash \u9a8c\u8bc1\u5b89\u88c5\uff1a gcc --version g++ --version\u00e5</p>"},{"location":"Notes/Environment/DD/","title":"Server","text":"<p>\u7532\u9aa8\u6587ARM\u548cAMD\u3001\u4e9a\u9a6c\u900aAWS Lightsail \u4ee5\u53ca\u5927\u90e8\u5206VPS\u901a\u7528DD\u65b9\u6cd5 xhj009 \u7cfb\u7edf\u5b89\u88c5ubuntu 20.04 (\u7532\u9aa8\u6587) \u6216\u8005Debian 10\uff08AWS\uff09 ssh\u767b\u5f55\u7cfb\u7edf\u540e\uff0c\u8f93\u5165sudo -i \u5207\u6362\u5230root\u7528\u6237\u3002 \u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u66f4\u65b0\u7cfb\u7edf\u5e76\u5b89\u88c5\u5fc5\u8981\u7684\u8f6f\u4ef6 apt-get update -y &amp;&amp; apt-get install curl wget vim dnsutils telnet -y \u5b89\u88c5\u5b8c\u6210\u540e\uff0c\u8fd0\u884c\u840c\u5496DD\u811a\u672c\uff1a bash &lt;(wget --no-check-certificate -qO- 'https://raw.githubusercontent.com/MoeClub/Note/master/InstallNET.sh') -d 10 -v 64 -p \"\u81ea\u5b9a\u4e49root\u5bc6\u7801\" -port \"\u81ea\u5b9a\u4e49ssh\u7aef\u53e3\" \u6bd4\u5982\uff1a</p> <p>bash &lt;(wget --no-check-certificate -qO- 'https://raw.githubusercontent.com/MoeClub/Note/master/InstallNET.sh') -d 10 -v 64 -p \"password\" -port \"65001\"</p> <p>\u8fd9\u6837DD\u540e\u5c31\u53ef\u4ee5\u4f7f\u7528\u9ad8\u4f4d\u7aef\u53e365001\u6765\u767b\u5f55vps\u4e86\u3002 -d 10 \u4ee3\u8868DD\u7684Debian 10\u7cfb\u7edf\u3002\u4f60\u53ef\u4ee5 -d 12 \u6765DD\u6700\u65b0\u7684Debian 12\u7cfb\u7edf\u3002 \u5982\u679c\u4f60DD\u5176\u4ed6\u7cfb\u7edf\u53ef\u4ee5\u770b\uff1a -firmware \u989d\u5916\u7684\u9a71\u52a8\u652f\u6301</p> <p>-d Debian\u7cfb\u7edf \u540e\u9762\u662f\u7cfb\u7edf\u7248\u672c\u53f7\uff0c\u4f8b\uff1a9\u300110 ...</p> <p>-c Centos\u7cfb\u7edf \u540e\u9762\u662f\u7cfb\u7edf\u7248\u672c\u53f7\uff0c\u4f8b\uff1a6.9\u30016.10 ...</p> <p>-u Ubuntu\u7cfb\u7edf \u540e\u9762\u662f\u7cfb\u7edf\u7248\u672c\u53f7\uff0c\u4f8b\uff1a16.04\u300118.04 ...</p> <p>-v \u7cfb\u7edf\u4f4d\u6570\uff0c64\u4f4d\u621632\u4f4d\uff0c\u53ea\u5199\u6570\u5b57</p> <p>-a auto\uff0c\u5168\u81ea\u52a8\u65e0\u4eba\u503c\u5b88\u5b89\u88c5</p> <p>-mirror \u540e\u9762\u662f\u6307\u5b9a\u955c\u50cf\u6e90\u5730\u5740</p> <p>-p \u540e\u9762\u5199\u81ea\u5b9a\u4e49\u5bc6\u7801</p> <p>-ip-addr ifconfig -a \u540e\u83b7\u53d6\u5230\u7684 \u4f8b\uff1a194.87.xxx.xxx</p> <p>-ip-gate route -n \u540e\u83b7\u53d6\u5230\u7684 \u4f8b 194.87.xxx.xxx</p> <p>-ip-mask 255.255.xxx.xx</p> <p>\u91cd\u70b9\u662f\u8c37\u6b4c\u4e91GCP\u7684DD\u65b9\u6cd5\u6bd4\u8f83\u7279\u6b8a\u3002 \u8c37\u6b4c\u4e91GCP\u6211\u4e5f\u662f\u627e\u4e86\u5f88\u591a\u76f8\u5173\u6559\u7a0b\uff0c\u5931\u8054\u4e86\u5f88\u591a\u6b21\uff0c\u8e29\u4e86\u5f88\u591a\u5751\u3002\u3002\u3002</p> <p>\u73b0\u5728\u7ed9\u5927\u5bb6\u603b\u7ed3\u4e00\u4e0b100%\u6210\u529f\u7684\u65b9\u6cd5\u3002 \u9996\u5148\u5728\u5728\u8c37\u6b4c\u4e91GCP\u540e\u53f0\u4f7f\u7528ssh\u8fdb\u5165\u5230vps\u91cc\u9762 ssh\u767b\u5f55\u7cfb\u7edf\u540e\uff0c\u8f93\u5165sudo -i \u5207\u6362\u5230root\u7528\u6237\u3002 \u8fd0\u884c\u4ee5\u4e0b\u547d\u4ee4\u66f4\u65b0\u7cfb\u7edf\u5e76\u5b89\u88c5\u5fc5\u8981\u7684\u8f6f\u4ef6 apt-get update -y &amp;&amp; apt-get install curl wget vim dnsutils telnet -y \u91cd\u70b9\u6765\u4e86\uff0c\u76f4\u63a5\u6309\u7167\u7532\u9aa8\u6587\u548cAWS\u7684\u65b9\u6cd5\u53bbDD\u4f1a\u5bfc\u81f4VPS\u5931\u8054\u3002\u6309\u7167\u6211\u4e0b\u9762\u7684\u65b9\u6cd5\u4e00\u5b9a\u6210\u529f\uff01 \u9996\u5148\u5728\u8c37\u6b4c\u4e91GCP\u5b9e\u4f8b\u540e\u53f0\u627e\u5230\u4f60VPS\u5b9e\u4f8b\u7684\u5185\u7f51\u5730\u5740\u548c\u7f51\u5173\uff0c\u5982\u4e0b\uff1a</p> <p>\u5927\u90e8\u5206VPS\u4ee5\u53ca\u7532\u9aa8\u6587ARM/AMD\u3001AWS\u3001\u8c37\u6b4c\u4e91GCP\u901a\u7528DD\u65b9\u6cd5\uff01</p> <p>\u6bd4\u5982\u6211\u7684hk\u5b9e\u4f8b\uff0c\u5185\u7f51\u5730\u5740\u5c31\u662f10.170.0.4\uff0c\u90a3\u4e48\u7f51\u5173\u5c31\u662f10.170.0.1</p> <p>\u7136\u540e\u5c06\u5185\u7f51\u5730\u5740\u548c\u7f51\u5173\u586b\u5165DD\u547d\u4ee4\u91cc\uff0c\u5b50\u7f51\u63a9\u7801\u5c31\u662f255.255.255.0 \u5982\u4e0b\uff1a bash &lt;(wget --no-check-certificate -qO- 'https://raw.githubusercontent.com/MoeClub/Note/master/InstallNET.sh') --ip-addr 10.170.0.4 --ip-gate 10.170.0.1 --ip-mask 255.255.255.0 -d 10 -v 64 -a -p \"password\" -port \"65001\" </p>"},{"location":"Notes/Environment/Mambaforge/","title":"Mambaforge","text":"<ol> <li>\u663e\u793a\u73af\u5883<ul> <li><code>conda env list</code></li> </ul> </li> <li>\u521b\u5efa\u73af\u5883<ul> <li><code>conda create -n venv python=3.9.5</code></li> </ul> </li> <li>\u6fc0\u6d3b\u73af\u5883<ul> <li><code>conda activate venv</code></li> </ul> </li> <li>\u5220\u9664\u73af\u5883<ul> <li><code>conda remove -n venv --all</code></li> </ul> </li> </ol>"},{"location":"Notes/Environment/NVM/","title":"NVM","text":"<ol> <li> <p>\u5b89\u88c5nvm</p> <ul> <li><code>brew install nvm</code></li> </ul> </li> <li> <p>\u67e5\u770b\u7248\u672c</p> <ul> <li><code>nvm --version</code></li> </ul> </li> <li> <p>\u5b89\u88c5node</p> <ul> <li><code>nvm install v15\\</code></li> </ul> </li> </ol>"},{"location":"Notes/Environment/VsC%2B%2B/","title":"VsCode C++","text":"<p><code>Settings.json</code></p> <pre><code>{\n    // --------------------------------------------------------------------------------------\n    // Code Runner\n    // To run code:\n    //   use shortcut \"Ctrl Opt N\" *\n    //   or press F1 and then select/type Run Code,\n    //   or right click the Text Editor and then click Run Code in editor context menu\n    //   or click Run Code button in editor title menu\n    //   or click Run Code button in context menu of file explorer\n    // To stop the running code:\n    //   use shortcut \"Ctrl Opt M\" *\n    //   or press F1 and then select/type Stop Code Run\n    //   or right click the Output Channel and then click Stop Code Run in context menu\n    \"code-runner.executorMap\": {\n      // Introduction:\n      //   Make sure the executor PATH of each language is set in the environment variable.\n      //   You could also add entry into \"code-runner.executorMap\" to set the executor PATH.\n      // Supported customized parameters:\n      //   $workspaceRoot: The path of the folder opened in VS Code\n      //   $dir: The directory of the code file being run\n      //   $fullFileName: The full name of the code file being run\n      //   $fileName: The base name of the code file being run, that is the file without the directory\n      //   $fileNameWithoutExt: The base name of the code file being run without its extension\n      /* ------ \u7f16\u8bd1\u3001\u8fd0\u884c\u53ea\u6709\u4e00\u4e2a\u6587\u4ef6\u7684cpp\u6587\u4ef6 ------ */\n      // \u6ce8\uff1a\u8def\u5f84\u4e2d\u6709\u7a7a\u683c\u4e0d\u4f1a\u51fa\u73b0\u95ee\u9898\n      \"cpp\": \"g++ $fullFileName -o $dir\\\"$fileNameWithoutExt\\\"\\\".out\\\" -W -Wall -O2 -std=c++17 &amp;&amp; $dir\\\"$fileNameWithoutExt\\\"\\\".out\\\"\",\n      // \u5176\u4e2d $fullFileName \u662f\u7edd\u5bf9\u8def\u5f84\uff0c\u662f\u4e3b\u6587\u4ef6\n      // \u81ea\u5df1\u51b3\u5b9a\u662f\u5426\u52a0\u5165 &amp;&amp; rm $dir\\\"$fileNameWithoutExt\\\"\\\".out\\\"\uff08\u4e5f\u53ef\u4ee5\u6dfb\u52a0\"files.exclude\"\uff09\n      /* ------ \u7f16\u8bd1\u3001\u8fd0\u884c\u591a\u4e2acpp\u6587\u4ef6 ------ */\n      // \"cpp\": \"g++ $fullFileName &lt;file_to_link&gt; -o $dir\\\"$fileNameWithoutExt\\\"\\\".out\\\" -W -Wall -O2 -std=c++17 &amp;&amp; $dir\\\"$fileNameWithoutExt\\\"\\\".out\\\"\",\n      // &lt;file_to_link&gt;\u7684\u5199\u6cd5\uff1a\n      //   \u4e00\u822c\u7684\uff0c\u4f60\u4e5f\u53ef\u4ee5\u76f4\u63a5\u5199\u7edd\u5bf9\u8def\u5f84\n      //     \\\"/path/xxxx.cpp\\\"\n      //   \u5982\u679c\u4f60\u94fe\u63a5\u7684cpp\u6587\u4ef6\u548c\u4e3b\u6587\u4ef6\u5728\u4e00\u4e2a\u76ee\u5f55\u4e0b\uff1a\n      //     $dir\\\"xxxx.cpp\\\"\n      //   \u66f4\u4e00\u822c\u7684\uff0c\u5982\u679c\u4f60\u94fe\u63a5\u7684cpp\u6587\u4ef6\u4e0d\u548c\u4e3b\u6587\u4ef6\u5728\u4e00\u4e2a\u76ee\u5f55\u4e0b\uff0c\u9700\u8981\u4ece\u5f53\u524dVSCode\u7684\u5de5\u4f5c\u76ee\u5f55\u8865\u5145\u76f8\u5bf9\u8def\u5f84\u4ece\u800c\u5f62\u6210\u7edd\u5bf9\u8def\u5f84\uff1a\n      //     $workspaceRoot\\\"relative/path/xxxx.cpp\\\"\n      /* ------ \u7f16\u8bd1c\u6587\u4ef6 ------ */\n      \"c\": \"gcc $fullFileName -o $dir\\\"$fileNameWithoutExt\\\"\\\".out\\\" -W -Wall -O2 -std=c17 &amp;&amp; $dir\\\"$fileNameWithoutExt\\\"\\\".out\\\"\",\n      // \"c\": \"gcc $fullFileName &lt;file_to_link&gt; -o $dir\\\"$fileNameWithoutExt\\\"\\\".out\\\" -W -Wall -O2 -std=c17 &amp;&amp; $dir\\\"$fileNameWithoutExt\\\"\\\".out\\\"\",\n    },\n    // Whether to clear previous output before each run (default is false):\n    \"code-runner.clearPreviousOutput\": true,\n    // Whether to save all files before running (default is false):\n    \"code-runner.saveAllFilesBeforeRun\": false,\n    // Whether to save the current file before running (default is false):\n    \"code-runner.saveFileBeforeRun\": true,\n    // Whether to show extra execution message like [Running] ... and [Done] ... (default is true):\n    \"code-runner.showExecutionMessage\": true, // cannot see that message is you set \"code-runner.runInTerminal\" to true\n    // Whether to run code in Integrated Terminal (only support to run whole file in Integrated Terminal, neither untitled file nor code snippet) (default is false):\n    \"code-runner.runInTerminal\": true, // cannot input data when setting to false\n    // Whether to preserve focus on code editor after code run is triggered (default is true, the code editor will keep focus; when it is false, Terminal or Output Channel will take focus):\n    \"code-runner.preserveFocus\": false,\n    // Whether to ignore selection to always run entire file. (Default is false)\n    \"code-runner.ignoreSelection\": true,\n    \"C_Cpp.errorSquiggles\": \"disabled\",\n    // --------------------------------------------------------------------------------------\n  }\n</code></pre> <p><code>Tasks.json</code> <pre><code>{\n    \"version\": \"2.0.0\",\n    \"tasks\": [\n        {\n            \"type\": \"shell\",\n            \"label\": \"clang++ build active file\",\n            \"command\": \"/usr/bin/clang++\",\n            \"args\": [\n                \"-std=c++17\",\n                \"-stdlib=libc++\",\n                \"-g\",\n                \"${file}\",\n                \"-o\",\n                \"${fileDirname}/${fileBasenameNoExtension}\"\n            ],\n            \"options\": {\n                \"cwd\": \"${workspaceFolder}\"\n            },\n            \"problemMatcher\": [\n                \"$gcc\"\n            ],\n            \"group\": \"build\"\n        },\n        {\n            \"type\": \"cppbuild\",\n            \"label\": \"C/C++: clang++ \u751f\u6210\u6d3b\u52a8\u6587\u4ef6\",\n            \"command\": \"/usr/bin/clang++\",\n            \"args\": [\n                \"-std=c++11\",\n                \"-fcolor-diagnostics\",\n                \"-fansi-escape-codes\",\n                \"-g\",\n                \"${file}\",\n                \"-o\",\n                \"${fileDirname}/${fileBasenameNoExtension}\"\n            ],\n            \"options\": {\n                \"cwd\": \"${fileDirname}\"\n            },\n            \"problemMatcher\": [\n                \"$gcc\"\n            ],\n            \"group\": {\n                \"kind\": \"build\",\n                \"isDefault\": true\n            },\n            \"detail\": \"\u8c03\u8bd5\u5668\u751f\u6210\u7684\u4efb\u52a1\u3002\"\n        }\n    ]\n}\n</code></pre></p> <p><code>c_cpp_properties.json</code> <pre><code>{\n    \"configurations\": [\n        {\n            \"name\": \"Mac\",\n            \"includePath\": [\n                \"${workspaceFolder}/**\"\n            ],\n            \"defines\": [],\n            \"macFrameworkPath\": [\n                \"/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/System/Library/Frameworks\"\n            ],\n            \"compilerPath\": \"/usr/bin/clang++\",\n            \"cStandard\": \"c17\",\n            \"cppStandard\": \"c++17\",\n            \"intelliSenseMode\": \"macos-clang-arm64\"\n        }\n    ],\n    \"version\": 4\n}\n</code></pre></p>"},{"location":"Notes/Environment/oracle/","title":"Oracle","text":""},{"location":"Notes/Environment/oracle/#_1","title":"\u66f4\u65b0\u7cfb\u7edf","text":"<p>\u9996\u5148\uff0c\u786e\u4fdd\u4f60\u7684\u7cfb\u7edf\u662f\u6700\u65b0\u7684\u3002</p> <pre><code>sudo dnf update -y\nsudo dnf install -y oracle-database-preinstall-19c\n</code></pre>"},{"location":"Notes/Environment/oracle/#gccg-11","title":"\u5b89\u88c5gcc/g++ 11","text":"<ol> <li>\u83b7\u53d6root\u6743\u9650</li> <li> <p>\u786e\u4fdd\u4f60\u6709\u6b63\u786e\u7684\u6743\u9650\uff0c\u53ef\u4ee5\u901a\u8fc7 sudo \u8fd0\u884c\u547d\u4ee4</p> </li> <li> <p>\u542f\u7528\u5f00\u53d1\u5de5\u5177\u7684yum\u4ed3\u5e93</p> </li> <li>\u4e3a\u4e86\u5b89\u88c5\u5f00\u53d1\u76f8\u5173\u7684\u8f6f\u4ef6\u5305\u4ee5\u53ca\u7279\u5b9a\u7248\u672c\u7684 GCC\uff0c\u9700\u8981\u542f\u7528\u5f00\u53d1\u5de5\u5177\u7ec4\uff1a</li> </ol> <pre><code>sudo dnf groupinstall \"Development Tools\"\n</code></pre> <ol> <li>\u5b89\u88c5 GCC/G++ 11</li> <li>\u4f7f\u7528 dnf \u5b89\u88c5\u7279\u5b9a\u7248\u672c\u7684 GCC \u548c G++\uff1a</li> </ol> <pre><code>sudo dnf install gcc-toolset-11-gcc gcc-toolset-11-gcc-c++\n</code></pre> <ol> <li>\u542f\u7528 GCC/G++ 11</li> <li>\u5b89\u88c5\u5b8c\u6210\u540e\uff0c\u542f\u7528 GCC 11 \u7684\u5de5\u5177\u94fe\uff1a</li> </ol> <pre><code>scl enable gcc-toolset-11 bash\n</code></pre> <ol> <li>\u6c38\u4e45\u751f\u6548</li> </ol> <p><pre><code>nano ~/.bashrc\n</code></pre> <pre><code>source /opt/rh/gcc-toolset-11/enable\nsource ~/.bashrc\n</code></pre> 6. \u9a8c\u8bc1\u5b89\u88c5</p> <pre><code>gcc --version\ng++ --version\nwhich gcc\n</code></pre> <ol> <li>\u4f7foracle\u7528\u6237\u53ef\u4ee5\u8bbf\u95eegcc/g++ 11</li> </ol> <p><pre><code>[root@kv4 ~]# which gcc\n</code></pre> <pre><code>/opt/rh/gcc-toolset-11/root/usr/bin/gcc\n</code></pre> <pre><code>su - oracle\n</code></pre> <pre><code>echo 'export PATH=/opt/rh/gcc-toolset-11/root/usr/bin:$PATH' &gt;&gt; ~/.bashrc\n</code></pre> <pre><code>source ~/.bashrc\n</code></pre> <pre><code>gcc --version\n</code></pre></p>"},{"location":"Notes/Environment/oracle/#_2","title":"\u521b\u5efa\u5fc5\u8981\u7684\u76ee\u5f55","text":"<p>\u521b\u5efa\u4e00\u4e2a\u76ee\u5f55\u6765\u5b58\u653e Oracle Database \u8f6f\u4ef6\u548c\u6570\u636e\u6587\u4ef6\u3002 <pre><code>sudo mkdir -p /u01/app/oracle/product/19.0.0/dbhome_1\nsudo chown -R oracle:oinstall /u01\nsudo chmod -R 775 /u01\n</code></pre></p>"},{"location":"Notes/Environment/oracle/#_3","title":"\u8bbe\u7f6e\u73af\u5883\u53d8\u91cf","text":"<p>\u7f16\u8f91 oracle \u7528\u6237\u7684\u73af\u5883\u53d8\u91cf\u6587\u4ef6\uff08.bash_profile \u6216 .bashrc\uff09</p> <pre><code>sudo su - oracle\nnano ~/.bashrc\n</code></pre> <p>\u6dfb\u52a0\u4ee5\u4e0b\u884c\uff1a <pre><code>export ORACLE_BASE=/u01/app/oracle\nexport ORACLE_HOME=$ORACLE_BASE/product/19.0.0/dbhome_1\nexport ORACLE_SID=ORCLCDB\nexport PATH=$ORACLE_HOME/bin:$PATH\nexport LD_LIBRARY_PATH=$ORACLE_HOME/lib:/lib:/usr/lib\nexport CLASSPATH=$ORACLE_HOME/jlib:$ORACLE_HOME/rdbms/jlib\n</code></pre></p> <p>\u4fdd\u5b58\u5e76\u9000\u51fa\u7f16\u8f91\u5668\uff0c\u7136\u540e\u52a0\u8f7d\u65b0\u7684\u914d\u7f6e\uff1a <pre><code>source ~/.bashrc\n</code></pre></p>"},{"location":"Notes/Environment/oracle/#_4","title":"\u89e3\u538b\u5b89\u88c5\u6587\u4ef6","text":"<p>\u5c06\u4e0b\u8f7d\u7684 LINUX.ARM64_1919000_db_home.zip \u6587\u4ef6\u4e0a\u4f20\u5230\u670d\u52a1\u5668\uff08\u4f8b\u5982\u4f7f\u7528 scp \u6216\u5176\u4ed6\u6587\u4ef6\u4f20\u8f93\u5de5\u5177\uff09\uff0c\u7136\u540e\u89e3\u538b\uff1a</p> <pre><code>wget -O LINUX.ARM64_1919000_db_home.zip ''\nunzip LINUX.ARM64_1919000_db_home.zip -d $ORACLE_HOME\n</code></pre>"},{"location":"Notes/Environment/oracle/#_5","title":"\u6269\u5c55\u4ea4\u6362\u533a","text":"<p>\u4e3a\u4e86\u6269\u5c55\u4ea4\u6362\u533a\u5230 16 GiB\uff0c\u53ef\u4ee5\u8fdb\u884c\u4ee5\u4e0b\u6b65\u9aa4\uff1a \u5173\u95ed\u5e76\u79fb\u9664\u5f53\u524d\u7684\u4ea4\u6362\u533a\u6587\u4ef6\u3002 \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u4ea4\u6362\u533a\u6587\u4ef6\u3002 \u8bbe\u7f6e\u65b0\u7684\u4ea4\u6362\u533a\u6587\u4ef6\u3002 \u542f\u7528\u65b0\u7684\u4ea4\u6362\u533a\u3002 \u6c38\u4e45\u542f\u7528\u65b0\u7684\u4ea4\u6362\u533a\u3002 \u4ee5\u4e0b\u662f\u5177\u4f53\u6b65\u9aa4\uff1a 1. \u5173\u95ed\u5e76\u79fb\u9664\u5f53\u524d\u7684\u4ea4\u6362\u533a\u6587\u4ef6\uff1a <pre><code>sudo swapoff /.swapfile\nsudo rm /.swapfile\n</code></pre> 2. \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u4ea4\u6362\u533a\u6587\u4ef6\uff1a \u8fd9\u91cc\u521b\u5efa\u4e00\u4e2a 16 GiB \u7684\u4ea4\u6362\u533a\u6587\u4ef6 <pre><code>sudo dd if=/dev/zero of=/.swapfile bs=1G count=16\n</code></pre> 3. \u8bbe\u7f6e\u65b0\u7684\u4ea4\u6362\u533a\u6587\u4ef6\uff1a <pre><code>sudo chmod 600 /.swapfile\nsudo mkswap /.swapfile\n</code></pre> 4. \u542f\u7528\u65b0\u7684\u4ea4\u6362\u533a\uff1a <pre><code>sudo swapon /.swapfile\n</code></pre> 5. \u786e\u8ba4\u65b0\u7684\u4ea4\u6362\u533a\uff1a</p> <p>\u4f7f\u7528 swapon -s \u6216 free -h \u67e5\u770b\u65b0\u7684\u4ea4\u6362\u533a\u914d\u7f6e\uff0c\u786e\u4fdd\u65b0\u7684\u4ea4\u6362\u533a\u5df2\u542f\u7528\uff1a <pre><code>swapon -s\nfree -h\n</code></pre> 6. \u6c38\u4e45\u542f\u7528\u65b0\u7684\u4ea4\u6362\u533a\uff1a \u4e3a\u4e86\u4f7f\u65b0\u7684\u4ea4\u6362\u533a\u5728\u7cfb\u7edf\u91cd\u542f\u540e\u4f9d\u7136\u6709\u6548\uff0c\u9700\u8981\u4fee\u6539 /etc/fstab \u6587\u4ef6\uff1a <pre><code>echo '/.swapfile none swap sw 0 0' | sudo tee -a /etc/fstab\n</code></pre> \u8fd9\u6837\u505a\u4e4b\u540e\uff0c\u7cfb\u7edf\u5e94\u8be5\u4f1a\u6709\u4e00\u4e2a 16 GiB \u7684\u4ea4\u6362\u533a\u6ee1\u8db3 Oracle \u6570\u636e\u5e93\u7684\u9700\u6c42\u3002</p>"},{"location":"Notes/Environment/oracle/#_6","title":"\u8fd0\u884c\u5b89\u88c5\u7a0b\u5e8f","text":"<p>\u6ce8\u610f\uff1a\u7531\u4e8e\u6ca1\u6709\u56fe\u5f62\u754c\u9762\uff0c\u53ef\u80fd\u9700\u8981\u4f7f\u7528 silent mode \u6765\u8fdb\u884c\u5b89\u88c5\u3002\u4f60\u9700\u8981\u4e00\u4e2a\u54cd\u5e94\u6587\u4ef6\u6765\u63d0\u4f9b\u5b89\u88c5\u9009\u9879\u3002\u53ef\u4ee5\u4f7f\u7528\u9ed8\u8ba4\u7684\u54cd\u5e94\u6587\u4ef6\u6a21\u677f\u5e76\u8fdb\u884c\u7f16\u8f91\uff1a</p> <pre><code>cp $ORACLE_HOME/install/response/db_install.rsp /tmp/db_install.rsp\nnano /tmp/db_install.rsp\n</code></pre> <p>\u6839\u636e\u4f60\u7684\u9700\u6c42\u7f16\u8f91\u54cd\u5e94\u6587\u4ef6\uff08\u5982\u8bbe\u7f6e ORACLE_BASE\u3001ORACLE_HOME \u7b49\uff09\uff0c\u786e\u4fdd\u4ee5\u4e0b\u53c2\u6570\u6b63\u786e\u914d\u7f6e\uff1a</p> <pre><code>oracle.install.option=INSTALL_DB_SWONLY\nUNIX_GROUP_NAME=oinstall\nINVENTORY_LOCATION=/u01/app/oraInventory\nORACLE_HOME=/u01/app/oracle/product/19.0.0/dbhome_1\nORACLE_BASE=/u01/app/oracle\noracle.install.db.InstallEdition=EE\noracle.install.db.OSDBA_GROUP=dba\noracle.install.db.OSBACKUPDBA_GROUP=backupdba\noracle.install.db.OSDGDBA_GROUP=dgdba\noracle.install.db.OSKMDBA_GROUP=kmdba\noracle.install.db.OSRACDBA_GROUP=racdba\n</code></pre> <p>\u7136\u540e\u4ee5\u9759\u9ed8\u6a21\u5f0f\u8fd0\u884c\u5b89\u88c5\u7a0b\u5e8f\uff1a</p> <pre><code>cd $ORACLE_HOME\n./runInstaller -silent -responseFile /tmp/db_install.rsp\n</code></pre>"},{"location":"Notes/Environment/oracle/#root","title":"\u6267\u884c root \u811a\u672c","text":"<p>\u5b89\u88c5\u5b8c\u6210\u540e\uff0c\u4ee5 root \u7528\u6237\u8eab\u4efd\u6267\u884c\u4e24\u4e2a\u811a\u672c\uff1a</p> <pre><code>sudo /u01/app/oraInventory/orainstRoot.sh\nsudo /u01/app/oracle/product/19.0.0/dbhome_1/root.sh\n</code></pre>"},{"location":"Notes/Environment/oracle/#_7","title":"\u542f\u52a8\u76d1\u542c","text":"<ol> <li>\u786e\u8ba4\u7f51\u7edc\u63a5\u53e3\u548cIP\u5730\u5740\u7ed1\u5b9a \u786e\u4fdd\u670d\u52a1\u5668\u7684\u7f51\u7edc\u63a5\u53e3\u914d\u7f6e\u5305\u542b 132.226.31.158\u516c\u5171IP\u5730\u5740\u3002 \u67e5\u770b\u5f53\u524d\u7f51\u7edc\u63a5\u53e3\u548cIP\u5730\u5740: <pre><code>   ip addr show\n</code></pre> \u5982\u679c\u6ca1\u6709\u663e\u793a 132.226.31.158\uff0c\u4f60\u9700\u8981\u624b\u52a8\u5c06\u5176\u6dfb\u52a0\u5230\u7f51\u7edc\u63a5\u53e3\u3002</li> <li>\u624b\u52a8\u7ed1\u5b9aIP\u5730\u5740: \u4ee5\u4e0b\u662f\u4e34\u65f6\u7ed1\u5b9aIP\u5730\u5740\u7684\u547d\u4ee4\uff08\u91cd\u542f\u540e\u5931\u6548): <pre><code>   sudo ip addr add /24 dev enp0s6\n   sudo ip link set dev enp0s6 up\n</code></pre> \u6ce8: \u786e\u4fdd enp0s6 \u662f\u6b63\u786e\u7684\u7f51\u7edc\u63a5\u53e3\u540d\u79f0\u3002</li> <li>\u6c38\u4e45\u914d\u7f6e\u7f51\u7edc\u63a5\u53e3\uff1a \u5982\u679c\u9700\u8981\u6c38\u4e45\u7ed1\u5b9aIP\u5730\u5740\uff0c\u53ef\u4ee5\u7f16\u8f91\u7f51\u7edc\u914d\u7f6e\u6587\u4ef6\u3002\u8fd9\u901a\u5e38\u56e0\u4e0d\u540c\u7684\u64cd\u4f5c\u7cfb\u7edf\u7248\u672c\u800c\u5f02\u3002\u4ee5 CentOS \u4e3a\u4f8b\uff1a <pre><code>   sudo nano /etc/sysconfig/network-scripts/ifcfg-enp0s6\n</code></pre> \u6dfb\u52a0\u4ee5\u4e0b\u6761\u76ee\uff1a <pre><code>   IPADDR=132.226.31.158\n   NETMASK=255.255.255.0\n</code></pre> \u4fdd\u5b58\u5e76\u91cd\u542f\u7f51\u7edc\u670d\u52a1: <pre><code>sudo systemctl restart network\n</code></pre></li> </ol> <p><pre><code>ifconfig\nnano $ORACLE_HOME/network/admin/listener.ora\n\n\nSID_LIST_LISTENER =\n  (SID_LIST =\n    (SID_DESC =\n      (GLOBAL_DBNAME = ORCLCDB)\n      (SID_NAME = ORCLCDB)\n      (ORACLE_HOME = /u01/app/oracle/product/19.0.0/dbhome_1)\n    )\n  )\n\nLISTENER =\n  (DESCRIPTION_LIST =\n    (DESCRIPTION =\n      (ADDRESS = (PROTOCOL = TCP)(HOST = 129.153.209.187)(PORT = 1521))\n      (ADDRESS = (PROTOCOL = TCP)(HOST = 10.0.0.18)(PORT = 1521))\n    )\n  )\n\ntelnet 129.153.209.187 1521\n[root@kh ~]# nc -zv 132.226.31.158 1521\n[root@kh ~]#    sudo firewall-cmd --list-all\n[root@kh ~]#    sudo firewall-cmd --add-port=1521/tcp --permanent\n[root@kh ~]# sudo firewall-cmd --reload\n</code></pre> <pre><code>netca\uff08Oracle Network Configuration Assistant\uff09 \u662f\u4e00\u4e2a\u56fe\u5f62\u7528\u6237\u754c\u9762\u5de5\u5177\uff0c\u9700\u8981\u8bbe\u7f6e DISPLAY \u73af\u5883\u53d8\u91cf\u4ee5\u4fbf\u5728 GUI \u73af\u5883\u4e2d\u8fd0\u884c\u3002\u4f46\u7531\u4e8e\u76ee\u524d\u662f\u5728\u547d\u4ee4\u884c\u73af\u5883\u4e0b\uff0c\u4f60\u53ef\u4ee5\u4fee\u6539\u76d1\u542c\u5668\u914d\u7f6e\u6587\u4ef6\u6765\u624b\u52a8\u914d\u7f6e\u76d1\u542c\u5668\uff0c\u6216\u8005\u4f7f\u7528\u9759\u9ed8\u6a21\u5f0f\u8fd0\u884c netca \u5de5\u5177\u3002\n\u4ee5\u4e0b\u662f\u4e24\u79cd\u89e3\u51b3\u529e\u6cd5\uff1a\n\u65b9\u6cd5 1: \u9759\u9ed8\u6a21\u5f0f\u8fd0\u884c netca\n\u4f60\u53ef\u4ee5\u5728\u547d\u4ee4\u884c\u4e2d\u4f7f\u7528\u9759\u9ed8\u6a21\u5f0f\u8fd0\u884c netca \u5de5\u5177\u6765\u914d\u7f6e\u76d1\u542c\u5668\u3002\n\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\u6765\u9759\u9ed8\u8fd0\u884c netca:\n\nnetca -silent -responseFile $ORACLE_HOME/assistants/netca/netca.rsp\n\u65b9\u6cd5 2: \u624b\u52a8\u914d\u7f6e\u76d1\u542c\u5668\n\u5982\u679c\u4f60\u5e0c\u671b\u624b\u52a8\u914d\u7f6e\u76d1\u542c\u5668\uff0c\u53ef\u4ee5\u4fee\u6539 listener.ora \u6587\u4ef6\u3002\u901a\u5e38\uff0c\u8be5\u6587\u4ef6\u4f4d\u4e8e $ORACLE_HOME/network/admin/ \u76ee\u5f55\u4e2d\u3002\n\u521b\u5efa\u6216\u7f16\u8f91\u6587\u4ef6 $ORACLE_HOME/network/admin/listener.ora\uff0c\u5185\u5bb9\u5982\u4e0b\uff1a\n\nLISTENER =\n  (DESCRIPTION_LIST =\n    (DESCRIPTION =\n      (ADDRESS = (PROTOCOL = TCP)(HOST = your_hostname)(PORT = 1521))\n    )\n  )\n\u8bb0\u5f97\u5c06 your_hostname \u66ff\u6362\u4e3a\u4f60\u7684\u5b9e\u9645\u4e3b\u673a\u540d\u6216IP\u5730\u5740\u3002\n\u7136\u540e\uff0c\u542f\u52a8\u76d1\u542c\u5668\uff1a\n\nlsnrctl start\n\u9a8c\u8bc1\u76d1\u542c\u5668\u914d\u7f6e\n\u4f60\u53ef\u4ee5\u4f7f\u7528\u4ee5\u4e0b\u547d\u4ee4\u6765\u68c0\u67e5\u76d1\u542c\u5668\u7684\u72b6\u6001\uff0c\u4ee5\u786e\u4fdd\u5176\u6b63\u786e\u914d\u7f6e\u5e76\u8fd0\u884c\uff1a\n\nlsnrctl status\n</code></pre></p>"},{"location":"Notes/Environment/oracle/#_8","title":"\u521b\u5efa\u6570\u636e\u5e93","text":"<p>\u521b\u5efa\u4e00\u4e2a\u54cd\u5e94\u6587\u4ef6 /tmp/dbca.rsp \u5e76\u8fdb\u884c\u7f16\u8f91\uff1a</p> <p><pre><code>gdbName=ORCLCDB\nsid=ORCLCDB\ntemplateName=General_Purpose.dbc\ncharacterSet=AL32UTF8\nmemoryPercentage=40\nemConfiguration=DBEXPRESS\nemExpressPort=5500\nsystemPassword=Alertzk-1\nsysPassword=Alertzk-1\n</code></pre> \u4f7f\u7528 dbca \u521b\u5efa\u6570\u636e\u5e93\uff0c\u540c\u6837\u53ef\u4ee5\u4f7f\u7528\u9759\u9ed8\u6a21\u5f0f\uff1a <pre><code>dbca -silent -createDatabase -responseFile /tmp/dbca.rsp\n</code></pre></p>"},{"location":"Notes/Environment/oracle/#_9","title":"\u9a8c\u8bc1\u5b89\u88c5","text":"<p>\u786e\u8ba4\u6570\u636e\u5e93\u5df2\u7ecf\u6b63\u786e\u521b\u5efa\u548c\u542f\u52a8\uff1a <pre><code>sqlplus / as sysdba\n</code></pre> \u5728 SQL*Plus \u4e2d\u8fd0\u884c\uff1a <pre><code>SELECT name, open_mode FROM v$database;\n</code></pre></p>"},{"location":"Notes/Environment/oracle/#_10","title":"\u5220\u9664","text":"<ol> <li>\u505c\u6b62\u6570\u636e\u5e93\u5b9e\u4f8b \u5982\u679c\u6570\u636e\u5e93\u6b63\u5728\u8fd0\u884c\uff0c\u9996\u5148\u9700\u8981\u505c\u6b62\u6570\u636e\u5e93\u5b9e\u4f8b\uff1a <pre><code>sqlplus / as sysdba\n</code></pre> \u5728 SQL*Plus \u4e2d\u6267\u884c\u4ee5\u4e0b\u547d\u4ee4\uff1a <pre><code>shutdown immediate;\nexit;\n</code></pre></li> <li>\u5220\u9664\u6570\u636e\u5e93 \u4f7f\u7528 Oracle DBCA \u5de5\u5177\u53ef\u4ee5\u7b80\u5355\u5730\u5220\u9664\u6570\u636e\u5e93\uff1a <pre><code>dbca -silent -deleteDatabase -sourceDB ORCLCDB\n</code></pre></li> <li>\u5220\u9664\u76f8\u5173\u6587\u4ef6\u548c\u76ee\u5f55 \u53ef\u4ee5\u624b\u52a8\u5220\u9664\u4e0e\u6570\u636e\u5e93\u5b9e\u4f8b\u76f8\u5173\u7684\u7269\u7406\u6587\u4ef6\u548c\u76ee\u5f55\uff1a <pre><code>rm -rf /u01/app/oracle/oradata/ORCLCDB\nrm -rf /u01/app/oracle/flash_recovery_area/ORCLCDB\nrm -rf /u01/app/oracle/admin/ORCLCDB\n</code></pre> \u786e\u4fdd\u6839\u636e\u4f60\u7684\u5177\u4f53 Oracle \u73af\u5883\u8def\u5f84\u4fee\u6539\u8fd9\u4e9b\u547d\u4ee4\u3002</li> <li>\u4ece /etc/oratab \u6587\u4ef6\u4e2d\u5220\u9664\u5bf9\u5e94\u7684\u6761\u76ee \u7f16\u8f91 /etc/oratab \u6587\u4ef6\uff0c\u5220\u9664\u4e0e ORCLCDB \u76f8\u5173\u7684\u884c\uff1a <pre><code>nano /etc/oratab\n</code></pre> \u627e\u5230\u5e76\u5220\u9664\u76f8\u5e94\u7684\u6761\u76ee\uff1a <pre><code>ORCLCDB:/u01/app/oracle/product/19.0.0/dbhome_1:N\n</code></pre></li> </ol>"},{"location":"Notes/Environment/oracle/#_11","title":"\u6570\u636e\u5e93\u5b9e\u4f8b\u6ce8\u518c","text":"<ol> <li>\u68c0\u67e5\u548c\u542f\u52a8\u6570\u636e\u5e93\u5b9e\u4f8b \u786e\u4fdd\u6570\u636e\u5e93\u5b9e\u4f8b\u662f\u542f\u52a8\u72b6\u6001\uff0c\u5e76\u4e14\u6b63\u786e\u5730\u6ce8\u518c\u5230\u4e86\u76d1\u542c\u5668\u4e2d\u3002 <pre><code>sqlplus / as sysdba\n\nSQL&gt; startup\n</code></pre></li> <li>\u8bbe\u7f6e\u672c\u5730\u76d1\u542c\u5668\u53d8\u91cf \u786e\u4fdd LOCAL_LISTENER \u53c2\u6570\u5728\u6570\u636e\u5e93\u5b9e\u4f8b\u4e2d\u6b63\u786e\u914d\u7f6e\u3002 <pre><code>sqlplus / as sysdba\n\nSQL&gt; alter system set LOCAL_LISTENER='(ADDRESS=(PROTOCOL=TCP)(HOST=129.146.30.114)(PORT=1521))';\nSQL&gt; alter system register;\n</code></pre> \u8fd9\u5c06\u624b\u52a8\u6ce8\u518c\u6570\u636e\u5e93\u5b9e\u4f8b\u5230\u76d1\u542c\u5668\u4e2d\uff0c\u5e76\u786e\u4fdd\u76d1\u542c\u5668\u77e5\u9053\u5e94\u8be5\u76d1\u89c6\u54ea\u4e9b\u670d\u52a1\u3002</li> <li>\u4ece\u76d1\u542c\u5668\u65e5\u5fd7\u6587\u4ef6\u4e2d\u786e\u8ba4\u6ce8\u518c\u60c5\u51b5 \u67e5\u770b\u76d1\u542c\u5668\u65e5\u5fd7\u6587\u4ef6\uff0c\u786e\u8ba4\u670d\u52a1\u662f\u5426\u6ce8\u518c\u6210\u529f: <pre><code>tail -f /u01/app/oracle/diag/tnslsnr/kv4/listener/alert/log.xml\n</code></pre> \u4f60\u5e94\u80fd\u770b\u5230\u670d\u52a1\u6ce8\u518c\u7684\u4fe1\u606f\u3002 \u518d\u6b21\u68c0\u67e5\u76d1\u542c\u5668\u72b6\u6001 \u91cd\u65b0\u68c0\u67e5\u76d1\u542c\u5668\u72b6\u6001\uff0c\u786e\u8ba4\u670d\u52a1\u662f\u5426\u6ce8\u518c\u6210\u529f\uff1a <pre><code>lsnrctl status\n</code></pre></li> </ol>"},{"location":"Notes/Environment/oracle/#ssh","title":"\u7f16\u8f91 SSH \u914d\u7f6e\u6587\u4ef6","text":"<p>\u4f7f\u7528\u4f60\u559c\u6b22\u7684\u6587\u672c\u7f16\u8f91\u5668\u7f16\u8f91 /etc/ssh/sshd_config \u6587\u4ef6\u3002\u4f8b\u5982\uff1a <pre><code>sudo nano /etc/ssh/sshd_config\n</code></pre> \u5b8c\u6210\u914d\u7f6e\u6587\u4ef6\u4fee\u6539\u540e\uff0c\u91cd\u542f SSH \u670d\u52a1\u4ee5\u4f7f\u66f4\u6539\u751f\u6548\u3002 <pre><code>sudo systemctl restart sshd\n</code></pre></p>"},{"location":"Project/Backend%20server/ADF/ADF_Library/_cmpublic_h/","title":"_cmpublic_h","text":"<pre><code>#ifndef _cmpublic_H\n#define _cmpublic_H\n\n#include &lt;stdio.h&gt;\n#include &lt;utime.h&gt;\n#include &lt;string.h&gt;\n#include &lt;strings.h&gt;\n#include &lt;ctype.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;fcntl.h&gt;\n#include &lt;limits.h&gt;\n#include &lt;time.h&gt;\n#include &lt;math.h&gt;\n#include &lt;stdarg.h&gt;\n#include &lt;errno.h&gt;\n#include &lt;signal.h&gt;\n#include &lt;netdb.h&gt;\n#include &lt;locale.h&gt;\n#include &lt;dirent.h&gt;\n#include &lt;termios.h&gt;\n#include &lt;pthread.h&gt;\n#include &lt;poll.h&gt;\n#include &lt;semaphore.h&gt;\n#include &lt;sys/stat.h&gt;\n#include &lt;sys/epoll.h&gt;\n#include &lt;sys/time.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;sys/ipc.h&gt;\n#include &lt;sys/sem.h&gt;\n#include &lt;sys/shm.h&gt;\n#include &lt;sys/socket.h&gt;\n#include &lt;netinet/in.h&gt;\n#include &lt;arpa/inet.h&gt;\n#include &lt;sys/timerfd.h&gt;\n#include &lt;sys/signalfd.h&gt;\n\n\n#include &lt;atomic&gt;\n#include &lt;iostream&gt;\n#include &lt;fstream&gt;\n#include &lt;string&gt;\n#include &lt;list&gt;\n#include &lt;map&gt;\n#include&lt;unordered_map&gt;\n#include &lt;forward_list&gt;\n#include &lt;vector&gt;\n#include &lt;deque&gt;\n#include &lt;memory&gt;\n#include &lt;mutex&gt;                      // \u4e92\u65a5\u9501\u7c7b\u7684\u5934\u6587\u4ef6\u3002\n#include &lt;queue&gt;                      // queue\u5bb9\u5668\u7684\u5934\u6587\u4ef6\u3002\n#include &lt;condition_variable&gt;  // \u6761\u4ef6\u53d8\u91cf\u7684\u5934\u6587\u4ef6\u3002\n#include &lt;algorithm&gt;\n#include &lt;thread&gt;                // \u7ebf\u7a0b\u7c7b\u5934\u6587\u4ef6\u3002\n\n#endif\n</code></pre>"},{"location":"Project/Backend%20server/ADF/ADF_Library/_public_cpp/","title":"_public_cpp","text":"<pre><code>#include \"_public.h\"  \n\nnamespace idc\n{\n\nchar *deletelchr(char* str, const int cc)\n{\n    if (str == nullptr) return nullptr;     // \u5982\u679c\u4f20\u8fdb\u6765\u7684\u662f\u7a7a\u5730\u5740\uff0c\u76f4\u63a5\u8fd4\u56de\uff0c\u9632\u6b62\u7a0b\u5e8f\u5d29\u6e83\u3002\n\n    char* p = str;                 // \u6307\u5411\u5b57\u7b26\u4e32\u7684\u9996\u5730\u5740\u3002\n    while (*p == cc)            // \u904d\u5386\u5b57\u7b26\u4e32\uff0cp\u5c06\u6307\u5411\u5de6\u8fb9\u7b2c\u4e00\u4e2a\u4e0d\u662fcc\u7684\u5b57\u7b26\u3002\n        p++;        \n\n    memmove(str, p, strlen(str) - (p - str)+1);  // \u628a\u7ed3\u5c3e\u6807\u5fd70\u4e5f\u62f7\u8fc7\u6765\u3002\n\n    return str;\n}\n\nstring&amp; deletelchr(string &amp;str, const int cc)\n{\n    auto pos=str.find_first_not_of(cc);    // \u4ece\u5b57\u7b26\u4e32\u7684\u5de6\u8fb9\u67e5\u627e\u7b2c\u4e00\u4e2a\u4e0d\u662fcc\u7684\u5b57\u7b26\u7684\u4f4d\u7f6e\u3002\n\n    if (pos!= 0) str.replace(0,pos,\"\");       // \u628a0-pos\u4e4b\u95f4\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u6210\u7a7a\u3002\n\n    return str;\n}\n\nchar* deleterchr(char *str,const int cc)\n{\n    if (str == nullptr) return nullptr; // \u5982\u679c\u4f20\u8fdb\u6765\u7684\u662f\u7a7a\u5730\u5740\uff0c\u76f4\u63a5\u8fd4\u56de\uff0c\u9632\u6b62\u7a0b\u5e8f\u5d29\u6e83\u3002\n\n    char* p = str;              // \u6307\u5411\u5b57\u7b26\u4e32\u7684\u9996\u5730\u5740\u3002\n    char* piscc = 0;          // \u53f3\u8fb9\u5168\u662f\u5b57\u7b26cc\u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u3002\n\n    while (*p != 0)            // \u904d\u5386\u5b57\u7b26\u4e32\u3002\n    {\n        if (*p == cc &amp;&amp; piscc == 0) piscc = p;        // \u8bb0\u4e0b\u5b57\u7b26cc\u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u3002\n        if (*p != cc) piscc = 0;                                  // \u53ea\u8981\u5f53\u524d\u5b57\u7b26\u4e0d\u662fcc\uff0c\u6e05\u7a7apiscc\u3002\n        p++;        \n      }\n\n      if (piscc != 0) *piscc = 0;   // \u628apiscc\u4f4d\u7f6e\u7684\u5b57\u7b26\u7f6e\u4e3a0\uff0c\u8868\u793a\u5b57\u7b26\u4e32\u5df2\u7ed3\u675f\u3002\n\n    return str;\n}\n\nstring&amp; deleterchr(string &amp;str,const int cc)\n{\n    auto pos=str.find_last_not_of(cc);     // \u4ece\u5b57\u7b26\u4e32\u7684\u53f3\u8fb9\u67e5\u627e\u7b2c\u4e00\u4e2a\u4e0d\u662fcc\u7684\u5b57\u7b26\u7684\u4f4d\u7f6e\u3002\n\n    if (pos!= 0) str.erase(pos+1);            // \u628apos\u4e4b\u540e\u7684\u5b57\u7b26\u5220\u6389\u3002\n\n    return str;\n}\n\nchar* deletelrchr(char *str,const int cc)\n{\n    deletelchr(str,cc);\n    deleterchr(str,cc);\n\n    return str;\n}\n\nstring&amp; deletelrchr(string &amp;str,const int cc)\n{\n    deletelchr(str,cc);\n    deleterchr(str,cc);\n\n    return str;\n}\n\nchar* toupper(char *str)\n{\n    if (str == nullptr) return nullptr;\n\n    char* p = str;              // \u6307\u5411\u5b57\u7b26\u4e32\u7684\u9996\u5730\u5740\u3002\n    while (*p != 0)           // \u904d\u5386\u5b57\u7b26\u4e32\u3002\n    {\n        if ( (*p &gt;= 'a') &amp;&amp; (*p &lt;= 'z') ) *p=*p - 32;\n        p++;\n    }\n\n    return str;\n}\n\nstring&amp; toupper(string &amp;str)\n{\n    for (auto &amp;cc:str)\n    {\n        if ( (cc &gt;= 'a') &amp;&amp; (cc &lt;= 'z') ) cc=cc - 32;\n    }\n\n    return str;\n}\n\nchar* tolower(char *str)\n{\n    if (str == nullptr) return nullptr;\n\n    char* p = str;              // \u6307\u5411\u5b57\u7b26\u4e32\u7684\u9996\u5730\u5740\u3002\n    while (*p != 0)           // \u904d\u5386\u5b57\u7b26\u4e32\u3002\n    {\n        if ( (*p &gt;= 'A') &amp;&amp; (*p &lt;= 'Z') ) *p=*p + 32;\n        p++;\n    }\n\n    return str;\n}\n\nstring&amp; tolower(string &amp;str)\n{\n    for (auto &amp;cc:str)\n    {\n        if ( (cc &gt;= 'A') &amp;&amp; (cc &lt;= 'Z') ) cc=cc + 32;\n    }\n\n    return str;\n}\n\nbool replacestr(string &amp;str,const string &amp;str1,const string &amp;str2,bool bloop)\n{\n    // \u5982\u679c\u539f\u5b57\u7b26\u4e32str\u6216\u65e7\u7684\u5185\u5bb9str1\u4e3a\u7a7a\uff0c\u6ca1\u6709\u610f\u4e49\uff0c\u4e0d\u6267\u884c\u66ff\u6362\u3002\n    if ( (str.length() == 0) || (str1.length() == 0) ) return false;\n\n    // \u5982\u679cbloop\u4e3atrue\u5e76\u4e14str2\u4e2d\u5305\u51fd\u4e86str1\u7684\u5185\u5bb9\uff0c\u76f4\u63a5\u8fd4\u56de\uff0c\u56e0\u4e3a\u4f1a\u8fdb\u5165\u6b7b\u5faa\u73af\uff0c\u6700\u7ec8\u5bfc\u81f4\u5185\u5b58\u6ea2\u51fa\u3002\n    if ( (bloop==true) &amp;&amp; (str2.find(str1)!=string::npos) ) return false;\n\n    int pstart=0;      // \u5982\u679cbloop==false\uff0c\u4e0b\u4e00\u6b21\u6267\u884c\u66ff\u6362\u7684\u5f00\u59cb\u4f4d\u7f6e\u3002\n    int ppos=0;        // \u672c\u6b21\u9700\u8981\u66ff\u6362\u7684\u4f4d\u7f6e\u3002\n\n    while (true)\n    {\n        if (bloop == true)\n            ppos=str.find(str1);                      // \u6bcf\u6b21\u4ece\u5b57\u7b26\u4e32\u7684\u6700\u5de6\u8fb9\u5f00\u59cb\u67e5\u627e\u5b50\u4e32str1\u3002\n        else\n            ppos=str.find(str1,pstart);            // \u4ece\u4e0a\u6b21\u6267\u884c\u66ff\u6362\u7684\u4f4d\u7f6e\u540e\u5f00\u59cb\u67e5\u627e\u5b50\u4e32str1\u3002\n\n        if (ppos == string::npos) break;       // \u5982\u679c\u6ca1\u6709\u627e\u5230\u5b50\u4e32str1\u3002\n\n        str.replace(ppos,str1.length(),str2);   // \u628astr1\u66ff\u6362\u6210str2\u3002\n\n        if (bloop == false) pstart=ppos+str2.length();    // \u4e0b\u4e00\u6b21\u6267\u884c\u66ff\u6362\u7684\u5f00\u59cb\u4f4d\u7f6e\u5f80\u53f3\u79fb\u52a8\u3002\n    }\n\n    return true;\n}\n\nbool replacestr(char *str,const string &amp;str1,const string &amp;str2,bool bloop)\n{\n    if (str == nullptr) return false;\n\n    string strtemp(str);\n\n    replacestr(strtemp,str1,str2,bloop);\n\n    strtemp.copy(str,strtemp.length());\n    str[strtemp.length()]=0;    // string\u7684copy\u51fd\u6570\u4e0d\u4f1a\u7ed9C\u98ce\u683c\u5b57\u7b26\u4e32\u7684\u7ed3\u5c3e\u52a00\u3002\n\n    return true;\n}\n\nchar* picknumber(const string &amp;src,char *dest,const bool bsigned,const bool bdot)\n{\n    if (dest==nullptr) return nullptr;    // \u5224\u65ad\u7a7a\u6307\u9488\u3002\n\n    string strtemp=picknumber(src,bsigned,bdot);\n    strtemp.copy(dest,strtemp.length());\n    dest[strtemp.length()]=0;    // string\u7684copy\u51fd\u6570\u4e0d\u4f1a\u7ed9C\u98ce\u683c\u5b57\u7b26\u4e32\u7684\u7ed3\u5c3e\u52a00\u3002\n\n    return dest;\n}\n\nstring&amp; picknumber(const string &amp;src,string &amp;dest,const bool bsigned,const bool bdot)\n{\n    // \u4e3a\u4e86\u652f\u6301src\u548cdest\u662f\u540c\u4e00\u53d8\u91cf\u7684\u60c5\u51b5\uff0c\u5b9a\u4e49str\u4e34\u65f6\u53d8\u91cf\u3002\n    string str;\n\n    for (char cc:src)\n    {\n        // \u5224\u65ad\u662f\u5426\u63d0\u53d6\u7b26\u53f7\u3002\n        if ( (bsigned==true) &amp;&amp; ( (cc == '+') || (cc == '-') ))\n        {\n            str.append(1,cc); continue;\n        }\n\n        // \u5224\u65ad\u662f\u5426\u63d0\u53d6\u5c0f\u6570\u70b9\u3002\n        if ( (bdot==true) &amp;&amp; (cc == '.') )\n        {\n            str.append(1,cc); continue;\n        }\n\n        // \u63d0\u53d6\u6570\u5b57\u3002\n        if (isdigit(cc)) str.append(1,cc);\n    }\n\n    dest=str;\n\n    return dest;\n}\n\nstring picknumber(const string &amp;src,const bool bsigned,const bool bdot)\n{\n    string dest;\n    picknumber(src,dest,bsigned,bdot);\n    return dest;\n}\n\nbool matchstr(const string &amp;str,const string &amp;rules)\n{\n    // \u5982\u679c\u5339\u914d\u89c4\u5219\u8868\u8fbe\u5f0f\u7684\u5185\u5bb9\u662f\u7a7a\u7684\uff0c\u8fd4\u56defalse\u3002\n    if (rules.length() == 0) return false;\n\n    // \u5982\u679c\u5982\u679c\u5339\u914d\u89c4\u5219\u8868\u8fbe\u5f0f\u7684\u5185\u5bb9\u662f\"*\"\uff0c\u76f4\u63a5\u8fd4\u56detrue\u3002\n    if (rules == \"*\") return true;\n\n    int  ii,jj;\n    int  pos1,pos2;\n    ccmdstr cmdstr,cmdsubstr;\n\n    string filename=str;\n    string matchstr=rules;\n\n    // \u628a\u5b57\u7b26\u4e32\u90fd\u8f6c\u6362\u6210\u5927\u5199\u540e\u518d\u6765\u6bd4\u8f83\n    toupper(filename);\n    toupper(matchstr);\n\n    cmdstr.splittocmd(matchstr,\",\");\n\n    for (ii=0;ii&lt;cmdstr.size();ii++)\n    {\n        // \u5982\u679c\u4e3a\u7a7a\uff0c\u5c31\u4e00\u5b9a\u8981\u8df3\u8fc7\uff0c\u5426\u5219\u5c31\u4f1a\u88ab\u5339\u914d\u4e0a\u3002\n        if (cmdstr[ii].empty() == true) continue;\n\n        pos1=pos2=0;\n        cmdsubstr.splittocmd(cmdstr[ii],\"*\");\n\n        for (jj=0;jj&lt;cmdsubstr.size();jj++)\n        {\n            // \u5982\u679c\u662f\u6587\u4ef6\u540d\u7684\u9996\u90e8\n            if (jj == 0)\n                if (filename.substr(0,cmdsubstr[jj].length())!=cmdsubstr[jj]) break;\n\n            // \u5982\u679c\u662f\u6587\u4ef6\u540d\u7684\u5c3e\u90e8\n            if (jj == cmdsubstr.size()-1)\n                if (filename.find(cmdsubstr[jj],filename.length()-cmdsubstr[jj].length()) == string::npos) break;\n\n            pos2=filename.find(cmdsubstr[jj],pos1);\n\n            if (pos2 == string::npos) break;\n\n            pos1=pos2+cmdsubstr[jj].length();\n        }\n\n        if (jj==cmdsubstr.size()) return true;\n    }\n\n    return false;\n}\n\nccmdstr::ccmdstr(const string &amp;buffer,const string &amp;sepstr,const bool bdelspace)\n{\n    splittocmd(buffer,sepstr,bdelspace);\n}\n\n// \u628a\u5b57\u7b26\u4e32\u62c6\u5206\u5230m_cmdstr\u5bb9\u5668\u4e2d\u3002\n// buffer\uff1a\u5f85\u62c6\u5206\u7684\u5b57\u7b26\u4e32\u3002\n// sepstr\uff1abuffer\u5b57\u7b26\u4e32\u4e2d\u5b57\u6bb5\u5185\u5bb9\u7684\u5206\u9694\u7b26\uff0c\u6ce8\u610f\uff0c\u5206\u9694\u7b26\u662f\u5b57\u7b26\u4e32\uff0c\u5982\",\"\u3001\" \"\u3001\"|\"\u3001\"~!~\"\u3002\n// bdelspace\uff1a\u662f\u5426\u5220\u9664\u62c6\u5206\u540e\u7684\u5b57\u6bb5\u5185\u5bb9\u524d\u540e\u7684\u7a7a\u683c\uff0ctrue-\u5220\u9664\uff1bfalse-\u4e0d\u5220\u9664\uff0c\u7f3a\u7701\u4e0d\u5220\u9664\u3002\nvoid ccmdstr::splittocmd(const string &amp;buffer,const string &amp;sepstr,const bool bdelspace)\n{\n    // \u6e05\u9664\u6240\u6709\u7684\u65e7\u6570\u636e\n    m_cmdstr.clear();\n\n    int pos=0;        // \u6bcf\u6b21\u4ecebuffer\u4e2d\u67e5\u627e\u5206\u9694\u7b26\u7684\u8d77\u59cb\u4f4d\u7f6e\u3002\n    int pos1=0;      // \u4ecepos\u7684\u4f4d\u7f6e\u5f00\u59cb\uff0c\u67e5\u627e\u4e0b\u4e00\u4e2a\u5206\u9694\u7b26\u7684\u4f4d\u7f6e\u3002\n    string substr;   // \u5b58\u653e\u6bcf\u6b21\u62c6\u5206\u51fa\u6765\u7684\u5b50\u4e32\u3002\n\n    while ( (pos1=buffer.find(sepstr,pos)) != string::npos)   // \u4ecepos\u7684\u4f4d\u7f6e\u5f00\u59cb\uff0c\u67e5\u627e\u4e0b\u4e00\u4e2a\u5206\u9694\u7b26\u7684\u4f4d\u7f6e\u3002\n    {\n        substr=buffer.substr(pos,pos1-pos);            // \u4ecebuffer\u4e2d\u622a\u53d6\u5b50\u4e32\u3002\n\n        if (bdelspace == true) deletelrchr(substr);   // \u5220\u9664\u5b50\u4e32\u524d\u540e\u7684\u7a7a\u683c\u3002\n\n        m_cmdstr.push_back(std::move(substr));     // \u628a\u5b50\u4e32\u653e\u5165m_cmdstr\u5bb9\u5668\u4e2d\uff0c\u8c03\u7528string\u7c7b\u7684\u79fb\u52a8\u6784\u9020\u51fd\u6570\u3002\n\n        pos=pos1+sepstr.length();                           // \u4e0b\u6b21\u4ecebuffer\u4e2d\u67e5\u627e\u5206\u9694\u7b26\u7684\u8d77\u59cb\u4f4d\u7f6e\u540e\u79fb\u3002\n    }\n\n    // \u5904\u7406\u6700\u540e\u4e00\u4e2a\u5b57\u6bb5\uff08\u6700\u540e\u4e00\u4e2a\u5206\u9694\u7b26\u4e4b\u540e\u7684\u5185\u5bb9\uff09\u3002\n    substr=buffer.substr(pos);\n\n    if (bdelspace == true) deletelrchr(substr);\n\n    m_cmdstr.push_back(std::move(substr));\n\n    return;\n}\n\nbool ccmdstr::getvalue(const int ii,string &amp;value,const int ilen) const\n{\n    if (ii&gt;=m_cmdstr.size()) return false;\n\n    // \u4ecexml\u4e2d\u622a\u53d6\u6570\u636e\u9879\u7684\u5185\u5bb9\u3002\n    // \u89c6\u9891\u4e2d\u662f\u4ee5\u4e0b\u4ee3\u7801\uff1a\n    // value=m_cmdstr[ii];\n    // \u6539\u4e3a\uff1a\n    int itmplen=m_cmdstr[ii].length();\n    if ( (ilen&gt;0) &amp;&amp; (ilen&lt;itmplen) ) itmplen=ilen;\n    value=m_cmdstr[ii].substr(0,itmplen);\n\n    return true;\n}\n\nbool ccmdstr::getvalue(const int ii,char *value,const int len) const\n{\n    if ( (ii&gt;=m_cmdstr.size()) || (value==nullptr) ) return false;\n\n    if (len&gt;0) memset(value,0,len+1);   // \u8c03\u7528\u8005\u5fc5\u987b\u4fdd\u8bc1value\u7684\u7a7a\u95f4\u8db3\u591f\uff0c\u5426\u5219\u8fd9\u91cc\u4f1a\u5185\u5b58\u6ea2\u51fa\u3002\n\n    if ( (m_cmdstr[ii].length()&lt;=(unsigned int)len) || (len==0) )\n    {\n        m_cmdstr[ii].copy(value,m_cmdstr[ii].length());\n        value[m_cmdstr[ii].length()]=0;    // string\u7684copy\u51fd\u6570\u4e0d\u4f1a\u7ed9C\u98ce\u683c\u5b57\u7b26\u4e32\u7684\u7ed3\u5c3e\u52a00\u3002\n    }\n    else\n    {\n        m_cmdstr[ii].copy(value,len);\n        value[len]=0;\n    }\n\n    return true;\n}\n\nbool ccmdstr::getvalue(const int ii,int &amp;value) const\n{\n    if (ii&gt;=m_cmdstr.size()) return false;\n\n    try\n    {\n        value = stoi(picknumber(m_cmdstr[ii],true));  // stoi\u6709\u5f02\u5e38\uff0c\u9700\u8981\u5904\u7406\u5f02\u5e38\u3002\n    }\n    catch(const std::exception&amp; e)\n    {\n        return false;\n    }\n\n    return true;\n}\n\nbool ccmdstr::getvalue(const int ii,unsigned int &amp;value) const\n{\n    if (ii&gt;=m_cmdstr.size()) return false;\n\n    try\n    {\n       value = stoi(picknumber(m_cmdstr[ii]));  // stoi\u6709\u5f02\u5e38\uff0c\u9700\u8981\u5904\u7406\u5f02\u5e38\u3002\u4e0d\u63d0\u53d6\u7b26\u53f7 + -\n    }\n    catch(const std::exception&amp; e)\n    {\n        return false;\n    }\n\n    return true;\n}\n\nbool ccmdstr::getvalue(const int ii,long &amp;value) const\n{\n    if (ii&gt;=m_cmdstr.size()) return false;\n\n    try\n    {\n        value = stol(picknumber(m_cmdstr[ii],true));  // stol\u6709\u5f02\u5e38\uff0c\u9700\u8981\u5904\u7406\u5f02\u5e38\u3002\n    }\n    catch(const std::exception&amp; e)\n    {\n        return false;\n    }\n\n    return true;\n}\n\nbool ccmdstr::getvalue(const int ii,unsigned long &amp;value) const\n{\n    if (ii&gt;=m_cmdstr.size()) return false;\n\n    try\n    {\n        value = stoul(picknumber(m_cmdstr[ii]));  // stoul\u6709\u5f02\u5e38\uff0c\u9700\u8981\u5904\u7406\u5f02\u5e38\u3002\u4e0d\u63d0\u53d6\u7b26\u53f7 + -\n    }\n    catch(const std::exception&amp; e)\n    {\n        return false;\n    }\n\n    return true;\n}\n\nbool ccmdstr::getvalue(const int ii,double &amp;value) const\n{\n    if (ii&gt;=m_cmdstr.size()) return false;\n\n    try\n    {\n        value = stod(picknumber(m_cmdstr[ii],true,true));  // stod\u6709\u5f02\u5e38\uff0c\u9700\u8981\u5904\u7406\u5f02\u5e38\u3002\u63d0\u53d6\u7b26\u53f7\u548c\u5c0f\u6570\u70b9\u3002\n    }\n    catch(const std::exception&amp; e)\n    {\n        return false;\n    }\n\n    return true;\n}\n\nbool ccmdstr::getvalue(const int ii,float &amp;value) const\n{\n    if (ii&gt;=m_cmdstr.size()) return false;\n\n    try\n    {\n        value = stof(picknumber(m_cmdstr[ii],true,true));  // stof\u6709\u5f02\u5e38\uff0c\u9700\u8981\u5904\u7406\u5f02\u5e38\u3002\u63d0\u53d6\u7b26\u53f7\u548c\u5c0f\u6570\u70b9\u3002\n    }\n    catch(const std::exception&amp; e)\n    {\n        return false;\n    }\n\n    return true;\n}\n\nbool ccmdstr::getvalue(const int ii,bool &amp;value) const\n{\n    if (ii&gt;=m_cmdstr.size()) return false;\n\n    string str=m_cmdstr[ii];\n    toupper(str);     // \u8f6c\u6362\u4e3a\u5927\u5199\u6765\u5224\u65ad\u3002\n\n    if (str==\"TRUE\") value=true; \n    else value=false;\n\n    return true;\n}\n\nccmdstr::~ccmdstr()\n{\n    m_cmdstr.clear();\n}\n\nostream&amp; operator&lt;&lt;(ostream&amp; out, const ccmdstr&amp; cmdstr)\n{\n    for (int ii=0;ii&lt;cmdstr.size();ii++)\n        out &lt;&lt; \"[\" &lt;&lt; ii &lt;&lt; \"]=\" &lt;&lt; cmdstr[ii] &lt;&lt; endl;\n\n    return out;\n}\n\nbool getxmlbuffer(const string &amp;xmlbuffer,const string &amp;fieldname,string  &amp;value,const int ilen)\n{\n    string start=\"&lt;\"+fieldname+\"&gt;\";            // \u6570\u636e\u9879\u5f00\u59cb\u7684\u6807\u7b7e\u3002\n    string end=\"&lt;/\"+fieldname+\"&gt;\";            // \u6570\u636e\u9879\u7ed3\u675f\u7684\u6807\u7b7e\u3002\n\n    int startp=xmlbuffer.find(start);               // \u5728xml\u4e2d\u67e5\u627e\u6570\u636e\u9879\u5f00\u59cb\u7684\u6807\u7b7e\u7684\u4f4d\u7f6e\u3002\n    if (startp==string::npos) return false;\n\n    int endp=xmlbuffer.find(end);                 // \u5728xml\u4e2d\u67e5\u627e\u6570\u636e\u9879\u7ed3\u675f\u7684\u6807\u7b7e\u7684\u4f4d\u7f6e\u3002\n    if (endp==string::npos) return false;\n\n    // \u4ecexml\u4e2d\u622a\u53d6\u6570\u636e\u9879\u7684\u5185\u5bb9\u3002\n    // \u89c6\u9891\u4e2d\u662f\u4ee5\u4e0b\u4ee3\u7801\uff1a\n    // value=xmlbuffer.substr(startp+start.length(),endp-startp-start.length());\n    // \u6539\u4e3a\uff1a\n    int itmplen=endp-startp-start.length();\n    if ( (ilen&gt;0) &amp;&amp; (ilen&lt;itmplen) ) itmplen=ilen;\n    value=xmlbuffer.substr(startp+start.length(),itmplen);\n\n    return true;\n}\n\nbool getxmlbuffer(const string &amp;xmlbuffer,const string &amp;fieldname,char *value,const int len)\n{\n    if (value==nullptr) return false;\n\n    if (len&gt;0) memset(value,0,len+1);   // \u8c03\u7528\u8005\u5fc5\u987b\u4fdd\u8bc1value\u7684\u7a7a\u95f4\u8db3\u591f\uff0c\u5426\u5219\u8fd9\u91cc\u4f1a\u5185\u5b58\u6ea2\u51fa\u3002\n\n    string str;\n    getxmlbuffer(xmlbuffer,fieldname,str);\n\n    if ( (str.length()&lt;=(unsigned int)len) || (len==0) )\n    {\n        str.copy(value,str.length());\n        value[str.length()]=0;    // string\u7684copy\u51fd\u6570\u4e0d\u4f1a\u7ed9C\u98ce\u683c\u5b57\u7b26\u4e32\u7684\u7ed3\u5c3e\u52a00\u3002\n    }\n    else\n    {\n        str.copy(value,len);\n        value[len]=0;\n    }\n\n    return true;\n}\n\nbool getxmlbuffer(const string &amp;xmlbuffer,const string &amp;fieldname,bool &amp;value)\n{\n    string str;\n    if (getxmlbuffer(xmlbuffer,fieldname,str)==false) return false;\n\n    toupper(str);    // \u8f6c\u6362\u4e3a\u5927\u5199\u6765\u5224\u65ad\uff08\u4e5f\u53ef\u4ee5\u8f6c\u6362\u4e3a\u5c0f\u5199\uff0c\u6548\u679c\u76f8\u540c\uff09\u3002\n\n    if (str==\"TRUE\") value=true; \n    else value=false;\n\n    return true;\n}\n\nbool getxmlbuffer(const string &amp;xmlbuffer,const string &amp;fieldname,int &amp;value)\n{\n    string str;\n\n    if (getxmlbuffer(xmlbuffer,fieldname,str)==false) return false;\n\n    try\n    {\n       value = stoi(picknumber(str,true));  // stoi\u6709\u5f02\u5e38\uff0c\u9700\u8981\u5904\u7406\u5f02\u5e38\u3002\n    }\n    catch(const std::exception&amp; e)\n    {\n        return false;\n    }\n\n    return true;\n}\n\nbool getxmlbuffer(const string &amp;xmlbuffer,const string &amp;fieldname,unsigned int &amp;value)\n{\n    string str;\n\n    if (getxmlbuffer(xmlbuffer,fieldname,str)==false) return false;\n\n    try\n    {\n       value = stoi(picknumber(str));  // stoi\u6709\u5f02\u5e38\uff0c\u9700\u8981\u5904\u7406\u5f02\u5e38\u3002\u4e0d\u63d0\u53d6\u7b26\u53f7 + -\n    }\n    catch(const std::exception&amp; e)\n    {\n        return false;\n    }\n\n    return true;\n}\n\nbool getxmlbuffer(const string &amp;xmlbuffer,const string &amp;fieldname,long &amp;value)\n{\n    string str;\n\n    if (getxmlbuffer(xmlbuffer,fieldname,str)==false) return false;\n\n    try\n    {\n        value = stol(picknumber(str,true));  // stol\u6709\u5f02\u5e38\uff0c\u9700\u8981\u5904\u7406\u5f02\u5e38\u3002\n    }\n    catch(const std::exception&amp; e)\n    {\n        return false;\n    }\n\n    return true;\n}\n\nbool getxmlbuffer(const string &amp;xmlbuffer,const string &amp;fieldname,unsigned long &amp;value)\n{\n    string str;\n\n    if (getxmlbuffer(xmlbuffer,fieldname,str)==false) return false;\n\n    try\n    {\n        value = stoul(picknumber(str));  // stoul\u6709\u5f02\u5e38\uff0c\u9700\u8981\u5904\u7406\u5f02\u5e38\u3002\u4e0d\u63d0\u53d6\u7b26\u53f7 + -\n    }\n    catch(const std::exception&amp; e)\n    {\n        return false;\n    }\n\n    return true;\n}\n\nbool getxmlbuffer(const string &amp;xmlbuffer,const string &amp;fieldname,double &amp;value)\n{\n    string str;\n\n    if (getxmlbuffer(xmlbuffer,fieldname,str)==false) return false;\n\n    try\n    {\n        value = stod(picknumber(str,true,true));  // stod\u6709\u5f02\u5e38\uff0c\u9700\u8981\u5904\u7406\u5f02\u5e38\u3002\u63d0\u53d6\u7b26\u53f7\u548c\u5c0f\u6570\u70b9\u3002\n    }\n    catch(const std::exception&amp; e)\n    {\n        return false;\n    }\n\n    return true;\n}\n\nbool getxmlbuffer(const string &amp;xmlbuffer,const string &amp;fieldname,float &amp;value)\n{\n    string str;\n\n    if (getxmlbuffer(xmlbuffer,fieldname,str)==false) return false;\n\n    try\n    {\n        value = stof(picknumber(str,true,true));  // stof\u6709\u5f02\u5e38\uff0c\u9700\u8981\u5904\u7406\u5f02\u5e38\u3002\u63d0\u53d6\u7b26\u53f7\u548c\u5c0f\u6570\u70b9\u3002\n    }\n    catch(const std::exception&amp; e)\n    {\n        return false;\n    }\n\n    return true;\n}\n\n// \u628a\u6574\u6570\u8868\u793a\u7684\u65f6\u95f4\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\u8868\u793a\u7684\u65f6\u95f4\u3002\n// ttime\uff1a\u6574\u6570\u8868\u793a\u7684\u65f6\u95f4\u3002\n// strtime\uff1a\u5b57\u7b26\u4e32\u8868\u793a\u7684\u65f6\u95f4\u3002\n// fmt\uff1a\u8f93\u51fa\u5b57\u7b26\u4e32\u65f6\u95f4strtime\u7684\u683c\u5f0f\uff0c\u4e0ettime\u51fd\u6570\u7684fmt\u53c2\u6570\u76f8\u540c\uff0c\u5982\u679cfmt\u7684\u683c\u5f0f\u4e0d\u6b63\u786e\uff0cstrtime\u5c06\u4e3a\u7a7a\u3002\nstring&amp; timetostr(const time_t ttime,string &amp;strtime,const string &amp;fmt)\n{\n    //struct tm sttm = *localtime ( &amp;ttime );        // \u975e\u7ebf\u7a0b\u5b89\u5168\u3002\n    struct tm sttm; localtime_r (&amp;ttime,&amp;sttm);   // \u7ebf\u7a0b\u5b89\u5168\u3002\n    sttm.tm_year=sttm.tm_year+1900;                // tm.tm_year\u6210\u5458\u8981\u52a0\u4e0a1900\u3002\n    sttm.tm_mon++;                                            // sttm.tm_mon\u6210\u5458\u662f\u4ece0\u5f00\u59cb\u7684\uff0c\u8981\u52a01\u3002\n\n    // \u7f3a\u7701\u7684\u65f6\u95f4\u683c\u5f0f\u3002\n    if ( (fmt==\"\") || (fmt==\"yyyy-mm-dd hh24:mi:ss\") )\n    {\n        strtime=sformat(\"%04u-%02u-%02u %02u:%02u:%02u\",sttm.tm_year,sttm.tm_mon,sttm.tm_mday,\\\n                   sttm.tm_hour,sttm.tm_min,sttm.tm_sec);\n        return strtime;\n    }\n\n    if (fmt==\"yyyy-mm-dd hh24:mi\")\n    {\n        strtime=sformat(\"%04u-%02u-%02u %02u:%02u\",sttm.tm_year,sttm.tm_mon,sttm.tm_mday,\\\n                   sttm.tm_hour,sttm.tm_min);\n        return strtime;\n    }\n\n    if (fmt==\"yyyy-mm-dd hh24\")\n    {\n        strtime=sformat(\"%04u-%02u-%02u %02u\",sttm.tm_year,sttm.tm_mon,sttm.tm_mday,sttm.tm_hour);\n        return strtime;\n    }\n\n    if (fmt==\"yyyy-mm-dd\")\n    {\n        strtime=sformat(\"%04u-%02u-%02u\",sttm.tm_year,sttm.tm_mon,sttm.tm_mday); \n        return strtime;\n    }\n\n    if (fmt==\"yyyy-mm\")\n    {\n        strtime=sformat(\"%04u-%02u\",sttm.tm_year,sttm.tm_mon); \n        return strtime;\n    }\n\n    if (fmt==\"yyyymmddhh24miss\") \n    {\n        strtime=sformat(\"%04u%02u%02u%02u%02u%02u\",sttm.tm_year,sttm.tm_mon,sttm.tm_mday,\\\n                   sttm.tm_hour,sttm.tm_min,sttm.tm_sec);\n        return strtime;\n    }\n\n    if (fmt==\"yyyymmddhh24mi\")\n    {\n        strtime=sformat(\"%04u%02u%02u%02u%02u\",sttm.tm_year,sttm.tm_mon,sttm.tm_mday,\\\n                   sttm.tm_hour,sttm.tm_min);\n        return strtime;\n    }\n\n    if (fmt==\"yyyymmddhh24\")\n    {\n        strtime=sformat(\"%04u%02u%02u%02u\",sttm.tm_year,sttm.tm_mon,sttm.tm_mday,sttm.tm_hour);\n        return strtime;\n    }\n\n    if (fmt==\"yyyymmdd\")\n    {\n        strtime=sformat(\"%04u%02u%02u\",sttm.tm_year,sttm.tm_mon,sttm.tm_mday); \n        return strtime;\n    }\n\n    if (fmt==\"hh24miss\")\n    {\n        strtime=sformat(\"%02u%02u%02u\",sttm.tm_hour,sttm.tm_min,sttm.tm_sec); \n        return strtime;\n    }\n\n    if (fmt==\"hh24mi\") \n    {\n        strtime=sformat(\"%02u%02u\",sttm.tm_hour,sttm.tm_min); \n        return strtime;\n    }\n\n    if (fmt==\"hh24\")\n    {\n        strtime=sformat(\"%02u\",sttm.tm_hour); \n        return strtime;\n    }\n\n    if (fmt==\"mi\")\n    {\n        strtime=sformat(\"%02u\",sttm.tm_min); \n        return strtime;\n    }\n\n    return strtime;\n}\n\nchar* timetostr(const time_t ttime,char *strtime,const string &amp;fmt)\n{\n    if (strtime==nullptr) return nullptr;    // \u5224\u65ad\u7a7a\u6307\u9488\u3002\n\n    string str;\n    timetostr(ttime,str,fmt);           // \u76f4\u63a5\u8c03\u7528string&amp; timetostr(const time_t ttime,string &amp;strtime,const string &amp;fmt=\"\");\n    str.copy(strtime,str.length());\n    strtime[str.length()]=0;           // string\u7684copy\u51fd\u6570\u4e0d\u4f1a\u7ed9C\u98ce\u683c\u5b57\u7b26\u4e32\u7684\u7ed3\u5c3e\u52a00\u3002\n\n    return strtime;\n}\n\nstring timetostr1(const time_t ttime,const string &amp;fmt)\n{\n    string str;\n    timetostr(ttime,str,fmt);           // \u76f4\u63a5\u8c03\u7528string&amp; timetostr(const time_t ttime,string &amp;strtime,const string &amp;fmt=\"\");\n    return str;\n}\n\nstring&amp; ltime(string &amp;strtime,const string &amp;fmt,const int timetvl)\n{\n    time_t  timer;\n    time(&amp;timer );                          // \u83b7\u53d6\u7cfb\u7edf\u5f53\u524d\u65f6\u95f4\u3002\n\n    timer=timer+timetvl;              // \u52a0\u4e0a\u65f6\u95f4\u7684\u504f\u79fb\u91cf\u3002\n\n    timetostr(timer,strtime,fmt);   // \u628a\u6574\u6570\u8868\u793a\u7684\u65f6\u95f4\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\u8868\u793a\u7684\u65f6\u95f4\u3002\n\n    return strtime;\n}\n\nchar* ltime(char *strtime,const string &amp;fmt,const int timetvl)\n{\n    if (strtime==nullptr) return nullptr;    // \u5224\u65ad\u7a7a\u6307\u9488\u3002\n\n    time_t  timer;\n    time(&amp;timer );                          // \u83b7\u53d6\u7cfb\u7edf\u5f53\u524d\u65f6\u95f4\u3002\n\n    timer=timer+timetvl;              // \u52a0\u4e0a\u65f6\u95f4\u7684\u504f\u79fb\u91cf\u3002\n\n    timetostr(timer,strtime,fmt);   // \u628a\u6574\u6570\u8868\u793a\u7684\u65f6\u95f4\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\u8868\u793a\u7684\u65f6\u95f4\u3002\n\n    return strtime;\n}\n\nstring ltime1(const string &amp;fmt,const int timetvl)\n{\n    string strtime;\n\n    ltime(strtime,fmt,timetvl);   // \u76f4\u63a5\u8c03\u7528string&amp; ltime(string &amp;strtime,const string &amp;fmt=\"\",const int timetvl=0);\n\n    return strtime;\n}\n\nbool clogfile::open(const string &amp;filename,const ios::openmode mode,const bool bbackup,const bool benbuffer)\n{\n    // \u5982\u679c\u65e5\u5fd7\u6587\u4ef6\u662f\u6253\u5f00\u7684\u72b6\u6001\uff0c\u5148\u5173\u95ed\u5b83\u3002\n    if (fout.is_open()) fout.close();\n\n    m_filename=filename;        // \u65e5\u5fd7\u6587\u4ef6\u540d\u3002\n    m_mode=mode;                 // \u6253\u5f00\u6a21\u5f0f\u3002\n    m_backup=bbackup;          // \u662f\u5426\u81ea\u52a8\u5907\u4efd\u3002\n    m_enbuffer=benbuffer;      // \u662f\u5426\u542f\u7528\u6587\u4ef6\u7f13\u51b2\u533a\u3002\n\n    newdir(m_filename,true);                              // \u5982\u679c\u65e5\u5fd7\u6587\u4ef6\u7684\u76ee\u5f55\u4e0d\u5b58\u5728\uff0c\u521b\u5efa\u5b83\u3002\n\n    fout.open(m_filename,m_mode);                  // \u6253\u5f00\u65e5\u5fd7\u6587\u4ef6\u3002\n\n    if (m_enbuffer==false) fout &lt;&lt; unitbuf;       // \u662f\u5426\u542f\u7528\u6587\u4ef6\u7f13\u51b2\u533a\u3002\n\n    return fout.is_open();\n}\n\nbool clogfile::backup()\n{\n    // \u4e0d\u5907\u4efd\n    if (m_backup == false) return true;\n\n    if (fout.is_open() == false) return false;\n\n    // \u5982\u679c\u5f53\u524d\u65e5\u5fd7\u6587\u4ef6\u7684\u5927\u5c0f\u8d85\u8fc7m_maxsize\uff0c\u5907\u4efd\u65e5\u5fd7\u3002\n    if (fout.tellp() &gt; m_maxsize*1024*1024)\n    {\n        m_splock.lock();       // \u52a0\u9501\u3002\n\n        fout.close();              // \u5173\u95ed\u5f53\u524d\u65e5\u5fd7\u6587\u4ef6\u3002\n\n        // \u62fc\u63a5\u5907\u4efd\u65e5\u5fd7\u6587\u4ef6\u540d\u3002\n        string bak_filename=m_filename+\".\"+ltime1(\"yyyymmddhh24miss\");\n\n        rename(m_filename.c_str(),bak_filename.c_str());   // \u628a\u5f53\u524d\u65e5\u5fd7\u6587\u4ef6\u6539\u540d\u4e3a\u5907\u4efd\u65e5\u5fd7\u6587\u4ef6\u3002\n\n        fout.open(m_filename,m_mode);              // \u91cd\u65b0\u6253\u5f00\u5f53\u524d\u65e5\u5fd7\u6587\u4ef6\u3002\n\n        if (m_enbuffer==false) fout &lt;&lt; unitbuf;   // \u5224\u65ad\u662f\u5426\u542f\u52a8\u6587\u4ef6\u7f13\u51b2\u533a\u3002\n\n        m_splock.unlock();   // \u89e3\u9501\u3002\n\n        return fout.is_open();\n    }\n\n    return true;\n}\n\nbool cifile::open(const string &amp;filename,const ios::openmode mode)\n{\n    // \u5982\u679c\u6587\u4ef6\u662f\u6253\u5f00\u7684\u72b6\u6001\uff0c\u5148\u5173\u95ed\u5b83\u3002\n    if (fin.is_open()) fin.close();\n\n    m_filename=filename;\n\n    fin.open(m_filename,mode);\n\n    return fin.is_open();\n}\n\nint cifile::read(void *buf,const int bufsize)\n{\n    // fin.read((char *)buf,bufsize);\n    fin.read(static_cast&lt;char *&gt;(buf),bufsize);\n\n    return fin.gcount();          // \u8fd4\u56de\u8bfb\u53d6\u7684\u5b57\u8282\u6570\u3002\n}\n\nbool cifile::closeandremove()\n{\n    if (fin.is_open()==false) return false;\n\n    fin.close(); \n\n    if (remove(m_filename.c_str())!=0) return false;\n\n    return true;\n}\n\nvoid cifile::close() \n{ \n    if (fin.is_open()==false) return;\n\n    fin.close(); \n}\n\nbool cifile::readline(string &amp;buf,const string&amp; endbz)\n{\n    buf.clear();            // \u6e05\u7a7abuf\u3002\n\n    string strline;        // \u5b58\u653e\u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u7684\u4e00\u884c\u3002\n\n    while (true)\n    {\n        getline(fin,strline);    // \u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u4e00\u884c\u3002\n\n        if (fin.eof()) break;    // \u5982\u679c\u6587\u4ef6\u5df2\u8bfb\u5b8c\u3002\n\n        buf=buf+strline;      // \u628a\u8bfb\u53d6\u7684\u5185\u5bb9\u62fc\u63a5\u5230buf\u4e2d\u3002\n\n        if (endbz==\"\")\n            return true;          // \u5982\u679c\u884c\u6ca1\u6709\u7ed3\u5c3e\u6807\u5fd7\u3002\n        else \n        {\n            // \u5982\u679c\u884c\u6709\u7ed3\u5c3e\u6807\u5fd7\uff0c\u5224\u65ad\u672c\u6b21\u662f\u5426\u8bfb\u5230\u4e86\u7ed3\u5c3e\u6807\u5fd7\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u7ee7\u7eed\u8bfb\uff0c\u5982\u679c\u6709\uff0c\u8fd4\u56de\u3002\n            if (buf.find(endbz,buf.length()-endbz.length()) != string::npos) return true;\n        }\n\n        buf=buf+\"\\n\";        // getline\u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u4e00\u884c\u7684\u65f6\u5019\uff0c\u4f1a\u5220\u9664\\n\uff0c\u6240\u4ee5\uff0c\u8fd9\u91cc\u8981\u8865\u4e0a\\n\uff0c\u56e0\u4e3a\u8fd9\u4e2a\\n\u4e0d\u5e94\u8be5\u88ab\u5220\u9664\u3002\n    }\n\n    return false;\n}\n\nbool cofile::open(const string &amp;filename,const bool btmp,const ios::openmode mode,const bool benbuffer)\n{\n    // \u5982\u679c\u6587\u4ef6\u662f\u6253\u5f00\u7684\u72b6\u6001\uff0c\u5148\u5173\u95ed\u5b83\u3002\n    if (fout.is_open()) fout.close();\n\n    m_filename=filename;\n\n    newdir(m_filename,true);     // \u5982\u679c\u6587\u4ef6\u7684\u76ee\u5f55\u4e0d\u5b58\u5728\uff0c\u521b\u5efa\u76ee\u5f55\u3002\n\n    if (btmp==true) \n    {   // \u91c7\u7528\u4e34\u65f6\u6587\u4ef6\u7684\u65b9\u6848\u3002\n        m_filenametmp=m_filename+\".tmp\";\n        fout.open(m_filenametmp,mode);\n    }\n    else\n    {   // \u4e0d\u91c7\u7528\u4e34\u65f6\u6587\u4ef6\u7684\u65b9\u6848\u3002\n        m_filenametmp.clear();\n        fout.open(m_filename,mode);\n    }\n\n    // \u4e0d\u542f\u7528\u6587\u4ef6\u7f13\u51b2\u533a\u3002\n    if (benbuffer==false) fout &lt;&lt; unitbuf;\n\n    return fout.is_open();\n}\n\nbool cofile::write(void *buf,int bufsize)\n{\n    if (fout.is_open()==false) return false;\n\n    // fout.write((char *)buf,bufsize);\n    fout.write(static_cast&lt;char *&gt;(buf),bufsize);\n\n    return fout.good();\n}\n\n// \u5173\u95ed\u6587\u4ef6\uff0c\u5e76\u4e14\u628a\u4e34\u65f6\u6587\u4ef6\u540d\u6539\u4e3a\u6b63\u5f0f\u6587\u4ef6\u540d\u3002\nbool cofile::closeandrename()\n{\n    if (fout.is_open()==false) return false;\n\n    fout.close();\n\n    //  \u5982\u679c\u91c7\u7528\u4e86\u4e34\u65f6\u6587\u4ef6\u7684\u65b9\u6848\u3002\n    if (m_filenametmp.empty()==false) \n        if (rename(m_filenametmp.c_str(),m_filename.c_str())!=0) return false;\n\n    return true;\n}\n\n// \u5173\u95ed\u6587\u4ef6\uff0c\u5220\u9664\u4e34\u65f6\u6587\u4ef6\u3002\nvoid cofile::close() \n{ \n    if (fout.is_open()==false) return;\n\n    fout.close(); \n\n    //  \u5982\u679c\u91c7\u7528\u4e86\u4e34\u65f6\u6587\u4ef6\u7684\u65b9\u6848\u3002\n    if (m_filenametmp.empty()==false) \n        remove(m_filenametmp.c_str());\n}\n\nbool newdir(const string &amp;pathorfilename,bool bisfilename)\n{\n    // /tmp/aaa/bbb/ccc/ddd    /tmp    /tmp/aaa    /tmp/aaa/bbb    /tmp/aaa/bbb/ccc \n\n    // \u68c0\u67e5\u76ee\u5f55\u662f\u5426\u5b58\u5728\uff0c\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u9010\u7ea7\u521b\u5efa\u5b50\u76ee\u5f55\n    int pos=1;          // \u4e0d\u8981\u4ece0\u5f00\u59cb\uff0c0\u662f\u6839\u76ee\u5f55/\u3002\n\n    while (true)\n    {\n        int pos1=pathorfilename.find('/',pos);\n        if (pos1==string::npos) break;\n\n        string strpathname=pathorfilename.substr(0,pos1);      // \u622a\u53d6\u76ee\u5f55\u3002\n\n        pos=pos1+1;       // \u4f4d\u7f6e\u540e\u79fb\u3002\n        if (access(strpathname.c_str(),F_OK) != 0)  // \u5982\u679c\u76ee\u5f55\u4e0d\u5b58\u5728\uff0c\u521b\u5efa\u5b83\u3002\n        {\n            // 0755\u662f\u516b\u8fdb\u5236\uff0c\u4e0d\u8981\u5199\u6210755\u3002\n            if (mkdir(strpathname.c_str(),0755) != 0) return false;  // \u5982\u679c\u76ee\u5f55\u4e0d\u5b58\u5728\uff0c\u521b\u5efa\u5b83\u3002\n        }\n    }\n\n    // \u5982\u679cpathorfilename\u4e0d\u662f\u6587\u4ef6\uff0c\u662f\u76ee\u5f55\uff0c\u8fd8\u9700\u8981\u521b\u5efa\u6700\u540e\u4e00\u7ea7\u5b50\u76ee\u5f55\u3002\n    if (bisfilename==false)\n    {\n        if (access(pathorfilename.c_str(),F_OK) != 0)\n        {\n            if (mkdir(pathorfilename.c_str(),0755) != 0) return false;\n        }\n    }\n\n    return true;\n}\n\nint filesize(const string &amp;filename)\n{\n    struct stat st_filestat;      // \u5b58\u653e\u6587\u4ef6\u4fe1\u606f\u7684\u7ed3\u6784\u4f53\u3002\n\n    // \u83b7\u53d6\u6587\u4ef6\u4fe1\u606f\uff0c\u5b58\u653e\u5728\u7ed3\u6784\u4f53\u4e2d\u3002\n    if (stat(filename.c_str(),&amp;st_filestat) &lt; 0) return -1;\n\n    return st_filestat.st_size;   // \u8fd4\u56de\u7ed3\u6784\u4f53\u7684\u6587\u4ef6\u5927\u5c0f\u6210\u5458\u3002\n}\n\nbool setmtime(const string &amp;filename,const string &amp;mtime)\n{\n    struct utimbuf stutimbuf;\n\n    stutimbuf.actime=stutimbuf.modtime=strtotime(mtime);\n\n    if (utime(filename.c_str(),&amp;stutimbuf)!=0) return false;\n\n    return true;\n}\n\ntime_t strtotime(const string &amp;strtime)\n{\n    string strtmp,yyyy,mm,dd,hh,mi,ss;\n\n    picknumber(strtime,strtmp,false,false);    // \u628a\u5b57\u7b26\u4e32\u4e2d\u7684\u6570\u5b57\u5168\u90e8\u63d0\u53d6\u51fa\u6765\u3002\n    // 2021-12-05 08:30:45\n    // 2021/12/05 08:30:45\n    // 20211205083045\n\n    if (strtmp.length() != 14) return -1;           // \u5982\u679c\u65f6\u95f4\u683c\u5f0f\u4e0d\u662fyyyymmddhh24miss\uff0c\u8bf4\u660e\u65f6\u95f4\u683c\u5f0f\u4e0d\u6b63\u786e\u3002\n\n    yyyy=strtmp.substr(0,4);\n    mm=strtmp.substr(4,2);\n    dd=strtmp.substr(6,2);\n    hh=strtmp.substr(8,2);\n    mi=strtmp.substr(10,2);\n    ss=strtmp.substr(12,2);\n\n    struct tm sttm;\n\n    try\n    {\n        sttm.tm_year = stoi(yyyy) - 1900;\n        sttm.tm_mon = stoi(mm) - 1;\n        sttm.tm_mday = stoi(dd);\n        sttm.tm_hour = stoi(hh);\n        sttm.tm_min = stoi(mi);\n        sttm.tm_sec = stoi(ss);\n        sttm.tm_isdst = 0;\n    }\n    catch(const std::exception&amp; e)\n    {\n        return -1;\n    }\n\n    return mktime(&amp;sttm);\n}\n\nbool addtime(const string &amp;in_stime,string &amp;out_stime,const int timetvl,const string &amp;fmt)\n{\n    time_t  timer;\n\n    // \u628a\u5b57\u7b26\u4e32\u8868\u793a\u7684\u65f6\u95f4\u8f6c\u6362\u4e3a\u6574\u6570\u8868\u793a\u7684\u65f6\u95f4\uff0c\u65b9\u4fbf\u8fd0\u7b97\u3002\n    if ( (timer=strtotime(in_stime))==-1) { out_stime=\"\"; return false; }\n\n    timer=timer+timetvl;  // \u65f6\u95f4\u8fd0\u7b97\u3002\n\n    // \u628a\u6574\u6570\u8868\u793a\u7684\u65f6\u95f4\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\u8868\u793a\u7684\u65f6\u95f4\u3002\n    timetostr(timer,out_stime,fmt);\n\n    return true;\n}\n\nbool addtime(const string &amp;in_stime,char *out_stime,const int timetvl,const string &amp;fmt)\n{\n    if (out_stime==nullptr) return false;    // \u5224\u65ad\u7a7a\u6307\u9488\u3002\n\n    time_t  timer;\n\n    // \u628a\u5b57\u7b26\u4e32\u8868\u793a\u7684\u65f6\u95f4\u8f6c\u6362\u4e3a\u6574\u6570\u8868\u793a\u7684\u65f6\u95f4\uff0c\u65b9\u4fbf\u8fd0\u7b97\u3002\n    if ( (timer=strtotime(in_stime))==-1) { strcpy(out_stime,\"\"); return false; }\n\n    timer=timer+timetvl;  // \u65f6\u95f4\u8fd0\u7b97\u3002\n\n    // \u628a\u6574\u6570\u8868\u793a\u7684\u65f6\u95f4\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\u8868\u793a\u7684\u65f6\u95f4\u3002\n    timetostr(timer,out_stime,fmt);\n\n    return true;\n}\n\nbool filemtime(const string &amp;filename,string &amp;mtime,const string &amp;fmt)\n{\n    struct stat st_filestat;      // \u5b58\u653e\u6587\u4ef6\u4fe1\u606f\u7684\u7ed3\u6784\u4f53\u3002\n\n    // \u83b7\u53d6\u6587\u4ef6\u4fe1\u606f\uff0c\u5b58\u653e\u5728\u7ed3\u6784\u4f53\u4e2d\u3002\n    if (stat(filename.c_str(),&amp;st_filestat) &lt; 0) return false;\n\n    // \u628a\u6574\u6570\u8868\u793a\u7684\u65f6\u95f4\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\u8868\u793a\u7684\u65f6\u95f4\u3002\n    timetostr(st_filestat.st_mtime,mtime,fmt);\n\n    return true;\n}\n\nbool filemtime(const string &amp;filename,char *mtime,const string &amp;fmt)\n{\n    struct stat st_filestat;      // \u5b58\u653e\u6587\u4ef6\u4fe1\u606f\u7684\u7ed3\u6784\u4f53\u3002\n\n    // \u83b7\u53d6\u6587\u4ef6\u4fe1\u606f\uff0c\u5b58\u653e\u5728\u7ed3\u6784\u4f53\u4e2d\u3002\n    if (stat(filename.c_str(),&amp;st_filestat) &lt; 0) return false;\n\n    // \u628a\u6574\u6570\u8868\u793a\u7684\u65f6\u95f4\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\u8868\u793a\u7684\u65f6\u95f4\u3002\n    timetostr(st_filestat.st_mtime,mtime,fmt);\n\n    return true;\n}\n\nvoid cdir::setfmt(const string &amp;fmt)\n{\n    m_fmt=fmt;\n}\n\nbool cdir::opendir(const string &amp;dirname,const string &amp;rules,const int maxfiles,const bool bandchild,bool bsort)\n{\n    m_filelist.clear();    // \u6e05\u7a7a\u6587\u4ef6\u5217\u8868\u5bb9\u5668\u3002\n    m_pos=0;              // \u4ece\u6587\u4ef6\u5217\u8868\u4e2d\u5df2\u8bfb\u53d6\u6587\u4ef6\u7684\u4f4d\u7f6e\u5f520\u3002\n\n    // \u5982\u679c\u76ee\u5f55\u4e0d\u5b58\u5728\uff0c\u521b\u5efa\u5b83\u3002\n    if (newdir(dirname,false) == false) return false;\n\n    // \u6253\u5f00\u76ee\u5f55\uff0c\u83b7\u53d6\u76ee\u5f55\u4e2d\u7684\u6587\u4ef6\u5217\u8868\uff0c\u5b58\u653e\u5728m_filelist\u5bb9\u5668\u4e2d\u3002\n    bool ret=_opendir(dirname,rules,maxfiles,bandchild);\n\n    if (bsort==true)    // \u5bf9\u6587\u4ef6\u5217\u8868\u6392\u5e8f\u3002\n    {\n      sort(m_filelist.begin(), m_filelist.end());\n    }\n\n    return ret;\n}\n\n// \u8fd9\u662f\u4e00\u4e2a\u9012\u5f52\u51fd\u6570\uff0c\u5728opendir()\u4e2d\u8c03\u7528\uff0ccdir\u7c7b\u7684\u5916\u90e8\u4e0d\u9700\u8981\u8c03\u7528\u5b83\u3002\nbool cdir::_opendir(const string &amp;dirname,const string &amp;rules,const int maxfiles,const bool bandchild)\n{\n    DIR *dir;   // \u76ee\u5f55\u6307\u9488\u3002\n\n    // \u6253\u5f00\u76ee\u5f55\u3002\n    if ( (dir=::opendir(dirname.c_str())) == nullptr ) return false; // opendir\u4e0e\u5e93\u51fd\u6570\u91cd\u540d\uff0c\u9700\u8981\u52a0::\n\n    string strffilename;            // \u5168\u8def\u5f84\u7684\u6587\u4ef6\u540d\u3002\n    struct dirent *stdir;            // \u5b58\u653e\u4ece\u76ee\u5f55\u4e2d\u8bfb\u53d6\u7684\u5185\u5bb9\u3002\n\n    // \u7528\u5faa\u73af\u8bfb\u53d6\u76ee\u5f55\u7684\u5185\u5bb9\uff0c\u5c06\u5f97\u5230\u76ee\u5f55\u4e2d\u7684\u6587\u4ef6\u540d\u548c\u5b50\u76ee\u5f55\u3002\n    while ((stdir=::readdir(dir)) != 0) // readdir\u4e0e\u5e93\u51fd\u6570\u91cd\u540d\uff0c\u9700\u8981\u52a0::\n    {\n        // \u5224\u65ad\u5bb9\u5668\u4e2d\u7684\u6587\u4ef6\u6570\u91cf\u662f\u5426\u8d85\u51famaxfiles\u53c2\u6570\u3002\n        if ( m_filelist.size()&gt;=maxfiles ) break;\n\n        // \u6587\u4ef6\u540d\u4ee5\".\"\u6253\u5934\u7684\u6587\u4ef6\u4e0d\u5904\u7406\u3002.\u662f\u5f53\u524d\u76ee\u5f55\uff0c..\u662f\u4e0a\u4e00\u7ea7\u76ee\u5f55\uff0c\u5176\u5b83\u4ee5.\u6253\u5934\u7684\u90fd\u662f\u7279\u6b8a\u76ee\u5f55\u548c\u6587\u4ef6\u3002\n        if (stdir-&gt;d_name[0]=='.') continue;\n\n        // \u62fc\u63a5\u5168\u8def\u5f84\u7684\u6587\u4ef6\u540d\u3002\n        strffilename=dirname+'/'+stdir-&gt;d_name;  \n\n        // \u5982\u679c\u662f\u76ee\u5f55\uff0c\u5904\u7406\u5404\u7ea7\u5b50\u76ee\u5f55\u3002\n        if (stdir-&gt;d_type==4)\n        {\n            if (bandchild == true)      // \u6253\u5f00\u5404\u7ea7\u5b50\u76ee\u5f55\u3002\n            {\n                if (_opendir(strffilename,rules,maxfiles,bandchild) == false)   // \u9012\u5f52\u8c03\u7528_opendir\u51fd\u6570\u3002\n                {\n                    closedir(dir); return false;\n                }\n            }\n        }\n\n        // \u5982\u679c\u662f\u666e\u901a\u6587\u4ef6\uff0c\u653e\u5165\u5bb9\u5668\u4e2d\u3002\n        if (stdir-&gt;d_type==8)\n        {\n            // \u628a\u80fd\u5339\u914d\u4e0a\u7684\u6587\u4ef6\u653e\u5165m_filelist\u5bb9\u5668\u4e2d\u3002\n            if (matchstr(stdir-&gt;d_name,rules) == false) continue;\n\n            m_filelist.push_back(std::move(strffilename));\n        }\n    }\n\n    closedir(dir);   // \u5173\u95ed\u76ee\u5f55\u3002\n\n    return true;\n}\n\nbool cdir::readdir()\n{\n    // \u5982\u679c\u5df2\u8bfb\u5b8c\uff0c\u6e05\u7a7a\u5bb9\u5668\n    if (m_pos &gt;= m_filelist.size()) \n    {\n      m_pos=0; m_filelist.clear(); return false;\n    }\n\n    // \u6587\u4ef6\u5168\u540d\uff0c\u5305\u62ec\u8def\u5f84\n    m_ffilename=m_filelist[m_pos];\n\n    // \u4ece\u7edd\u5bf9\u8def\u5f84\u7684\u6587\u4ef6\u540d\u4e2d\u89e3\u6790\u51fa\u76ee\u5f55\u540d\u548c\u6587\u4ef6\u540d\u3002\n    int pp=m_ffilename.find_last_of(\"/\");\n    m_dirname=m_ffilename.substr(0,pp);\n    m_filename=m_ffilename.substr(pp+1);\n\n    // \u83b7\u53d6\u6587\u4ef6\u7684\u4fe1\u606f\u3002\n    struct stat st_filestat;\n    stat(m_ffilename.c_str(),&amp;st_filestat);\n    m_filesize=st_filestat.st_size;                                     // \u6587\u4ef6\u5927\u5c0f\u3002\n    m_mtime=timetostr1(st_filestat.st_mtime,m_fmt);   // \u6587\u4ef6\u6700\u540e\u4e00\u6b21\u88ab\u4fee\u6539\u7684\u65f6\u95f4\u3002\n    m_ctime=timetostr1(st_filestat.st_ctime,m_fmt);      // \u6587\u4ef6\u751f\u6210\u7684\u65f6\u95f4\u3002\n    m_atime=timetostr1(st_filestat.st_atime,m_fmt);      // \u6587\u4ef6\u6700\u540e\u4e00\u6b21\u88ab\u8bbf\u95ee\u7684\u65f6\u95f4\u3002\n\n    m_pos++;       // \u5df2\u8bfb\u53d6\u6587\u4ef6\u7684\u4f4d\u7f6e\u540e\u79fb\u3002\n\n    return true;\n}\n\ncdir::~cdir()\n{\n    m_filelist.clear();\n}\n\nbool renamefile(const string &amp;srcfilename,const string &amp;dstfilename)\n{\n    // \u5982\u679c\u539f\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u76f4\u63a5\u8fd4\u56de\u5931\u8d25\u3002\n    if (access(srcfilename.c_str(),R_OK) != 0) return false;\n\n    // \u521b\u5efa\u76ee\u6807\u6587\u4ef6\u7684\u76ee\u5f55\u3002\n    if (newdir(dstfilename,true) == false) return false;\n\n    // \u8c03\u7528\u64cd\u4f5c\u7cfb\u7edf\u7684\u5e93\u51fd\u6570rename\u91cd\u547d\u540d\u6587\u4ef6\u3002 mv\n    if (rename(srcfilename.c_str(),dstfilename.c_str()) == 0) return true;\n\n    return false;\n}\n\n// \u5ffd\u7565\u5173\u95ed\u5168\u90e8\u7684\u4fe1\u53f7\u3001\u5173\u95ed\u5168\u90e8\u7684IO\uff0c\u7f3a\u7701\u53ea\u5ffd\u7565\u4fe1\u53f7\uff0c\u4e0d\u5173IO\u3002 \n// \u4e0d\u5e0c\u671b\u540e\u53f0\u670d\u52a1\u7a0b\u5e8f\u88ab\u4fe1\u53f7\u6253\u6270\uff0c\u9700\u8981\u4ec0\u4e48\u4fe1\u53f7\u53ef\u4ee5\u5728\u7a0b\u5e8f\u4e2d\u8bbe\u7f6e\u3002\n// \u5b9e\u9645\u4e0a\u5173\u95ed\u7684IO\u662f0\u30011\u30012\u3002\nvoid closeioandsignal(bool bcloseio)\n{\n    int ii=0;\n\n    for (ii=0;ii&lt;64;ii++)\n    {\n        if (bcloseio==true) close(ii);\n\n        signal(ii,SIG_IGN); \n    }\n}\n\nbool ctcpclient::connect(const string &amp;ip,const int port)\n{\n    // \u5982\u679c\u5df2\u8fde\u63a5\u5230\u670d\u52a1\u7aef\uff0c\u5219\u65ad\u5f00\uff0c\u8fd9\u79cd\u5904\u7406\u65b9\u6cd5\u6ca1\u6709\u7279\u522b\u7684\u539f\u56e0\uff0c\u4e0d\u8981\u7ea0\u7ed3\u3002\n    if (m_connfd!=-1) { ::close(m_connfd); m_connfd=-1; }\n\n    // \u5ffd\u7565SIGPIPE\u4fe1\u53f7\uff0c\u9632\u6b62\u7a0b\u5e8f\u5f02\u5e38\u9000\u51fa\u3002\n    // \u5982\u679csend\u5230\u4e00\u4e2adisconnected socket\u4e0a\uff0c\u5185\u6838\u5c31\u4f1a\u53d1\u51faSIGPIPE\u4fe1\u53f7\u3002\u8fd9\u4e2a\u4fe1\u53f7\n    // \u7684\u7f3a\u7701\u5904\u7406\u65b9\u6cd5\u662f\u7ec8\u6b62\u8fdb\u7a0b\uff0c\u5927\u591a\u6570\u65f6\u5019\u8fd9\u90fd\u4e0d\u662f\u6211\u4eec\u671f\u671b\u7684\u3002\u6211\u4eec\u91cd\u65b0\u5b9a\u4e49\u8fd9\n    // \u4e2a\u4fe1\u53f7\u7684\u5904\u7406\u65b9\u6cd5\uff0c\u5927\u591a\u6570\u60c5\u51b5\u662f\u76f4\u63a5\u5c4f\u853d\u5b83\u3002\n    signal(SIGPIPE,SIG_IGN);   \n\n    m_ip=ip;\n    m_port=port;\n\n    struct hostent* h;\n    struct sockaddr_in servaddr;\n\n    if ( (m_connfd = socket(AF_INET,SOCK_STREAM,0) ) &lt; 0) return false;\n\n    if ( !(h = gethostbyname(m_ip.c_str())) )\n    {\n        ::close(m_connfd);  m_connfd=-1; return false;\n    }\n\n    memset(&amp;servaddr,0,sizeof(servaddr));\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(m_port);  // \u6307\u5b9a\u670d\u52a1\u7aef\u7684\u901a\u8baf\u7aef\u53e3\n    memcpy(&amp;servaddr.sin_addr,h-&gt;h_addr,h-&gt;h_length);\n\n    if (::connect(m_connfd, (struct sockaddr *)&amp;servaddr,sizeof(servaddr)) != 0)\n    {\n        ::close(m_connfd);  m_connfd=-1; return false;\n    }\n\n    return true;\n}\n\nvoid ctcpclient::close()\n{\n    if (m_connfd &gt;= 0) ::close(m_connfd); \n\n    m_connfd=-1;\n    m_port=0;\n}\n\nctcpclient::~ctcpclient()\n{\n    close();\n}\n\nbool ctcpserver::initserver(const unsigned int port,const int backlog)\n{\n    // \u5982\u679c\u670d\u52a1\u7aef\u7684socket&gt;0\uff0c\u5173\u6389\u5b83\uff0c\u8fd9\u79cd\u5904\u7406\u65b9\u6cd5\u6ca1\u6709\u7279\u522b\u7684\u539f\u56e0\uff0c\u4e0d\u8981\u7ea0\u7ed3\u3002\n    if (m_listenfd &gt; 0) { ::close(m_listenfd); m_listenfd=-1; }\n\n    if ( (m_listenfd = socket(AF_INET,SOCK_STREAM,0))&lt;=0) return false;\n\n    // \u5ffd\u7565SIGPIPE\u4fe1\u53f7\uff0c\u9632\u6b62\u7a0b\u5e8f\u5f02\u5e38\u9000\u51fa\u3002\n    // \u5982\u679c\u5f80\u5df2\u5173\u95ed\u7684socket\u7ee7\u7eed\u5199\u6570\u636e\uff0c\u4f1a\u4ea7\u751fSIGPIPE\u4fe1\u53f7\uff0c\u5b83\u7684\u7f3a\u7701\u884c\u4e3a\u662f\u7ec8\u6b62\u7a0b\u5e8f\uff0c\u6240\u4ee5\u8981\u5ffd\u7565\u5b83\u3002\n    signal(SIGPIPE,SIG_IGN);   \n\n    // \u6253\u5f00SO_REUSEADDR\u9009\u9879\uff0c\u5f53\u670d\u52a1\u7aef\u8fde\u63a5\u5904\u4e8eTIME_WAIT\u72b6\u6001\u65f6\u53ef\u4ee5\u518d\u6b21\u542f\u52a8\u670d\u52a1\u5668\uff0c\n    // \u5426\u5219bind()\u53ef\u80fd\u4f1a\u4e0d\u6210\u529f\uff0c\u62a5\uff1aAddress already in use\u3002\n    int opt = 1; \n    setsockopt(m_listenfd,SOL_SOCKET,SO_REUSEADDR,&amp;opt,sizeof(opt));    \n\n    memset(&amp;m_servaddr,0,sizeof(m_servaddr));\n    m_servaddr.sin_family = AF_INET;\n    m_servaddr.sin_addr.s_addr = htonl(INADDR_ANY);   // \u4efb\u610fip\u5730\u5740\u3002\n    m_servaddr.sin_port = htons(port);\n    if (bind(m_listenfd,(struct sockaddr *)&amp;m_servaddr,sizeof(m_servaddr)) != 0 )\n    {\n        closelisten(); return false;\n    }\n\n    if (listen(m_listenfd,backlog) != 0 )\n    {\n        closelisten(); return false;\n    }\n\n    return true;\n}\n\nbool ctcpserver::accept()\n{\n    if (m_listenfd==-1) return false;\n\n    int m_socklen = sizeof(struct sockaddr_in);\n    if ((m_connfd=::accept(m_listenfd,(struct sockaddr *)&amp;m_clientaddr,(socklen_t*)&amp;m_socklen)) &lt; 0)\n        return false;\n\n    return true;\n}\n\nchar *ctcpserver::getip()\n{\n    return(inet_ntoa(m_clientaddr.sin_addr));\n}\n\nbool ctcpserver::read(void *buffer,const int ibuflen,const int itimeout)   // \u63a5\u6536\u4e8c\u8fdb\u5236\u6570\u636e\u3002\n{\n    if (m_connfd==-1) return false;\n\n    return(tcpread(m_connfd,buffer,ibuflen,itimeout));\n}\n\nbool ctcpserver::read(string &amp;buffer,const int itimeout)  // \u63a5\u6536\u6587\u672c\u6570\u636e\u3002\n{\n    if (m_connfd==-1) return false;\n\n    return(tcpread(m_connfd,buffer,itimeout));\n}\n\nbool ctcpclient::read(void *buffer,const int ibuflen,const int itimeout)   // \u63a5\u6536\u4e8c\u8fdb\u5236\u6570\u636e\u3002\n{\n    if (m_connfd==-1) return false;\n\n    return(tcpread(m_connfd,buffer,ibuflen,itimeout));\n}\n\nbool ctcpclient::read(string &amp;buffer,const int itimeout)  // \u63a5\u6536\u6587\u672c\u6570\u636e\u3002\n{\n    if (m_connfd==-1) return false;\n\n    return(tcpread(m_connfd,buffer,itimeout));\n}\n\nbool ctcpserver::write(const void *buffer,const int ibuflen)  // \u53d1\u9001\u4e8c\u8fdb\u5236\u6570\u636e\u3002\n{\n    if (m_connfd==-1) return false;\n\n    return(tcpwrite(m_connfd,(char*)buffer,ibuflen));\n}\n\nbool ctcpserver::write(const string &amp;buffer)\n{\n    if (m_connfd==-1) return false;\n\n    return(tcpwrite(m_connfd,buffer));\n}\n\nbool ctcpclient::write(const void *buffer,const int ibuflen)\n{\n    if (m_connfd==-1) return false;\n\n    return(tcpwrite(m_connfd,(char*)buffer,ibuflen));\n}\n\nbool ctcpclient::write(const string &amp;buffer)\n{\n    if (m_connfd==-1) return false;\n\n    return(tcpwrite(m_connfd,buffer));\n}\n\nvoid ctcpserver::closelisten()\n{\n    if (m_listenfd &gt;= 0)\n    {\n        ::close(m_listenfd); m_listenfd=-1;\n    }\n}\n\nvoid ctcpserver::closeclient()\n{\n    if (m_connfd &gt;= 0)\n    {\n        ::close(m_connfd); m_connfd=-1; \n    }\n}\n\nctcpserver::~ctcpserver()\n{\n    closelisten(); closeclient();\n}\n\nbool tcpread(const int sockfd,void *buffer,const int ibuflen,const int itimeout)    // \u63a5\u6536\u4e8c\u8fdb\u5236\u6570\u636e\u3002\n{\n    if (sockfd==-1) return false;\n\n    // \u5982\u679citimeout&gt;0\uff0c\u8868\u793a\u9700\u8981\u7b49\u5f85itimeout\u79d2\uff0c\u5982\u679citimeout\u79d2\u540e\u8fd8\u6ca1\u6709\u6570\u636e\u5230\u8fbe\uff0c\u8fd4\u56defalse\u3002\n    if (itimeout&gt;0)\n    {\n        struct pollfd fds;\n        fds.fd=sockfd;\n        fds.events=POLLIN;\n        if ( poll(&amp;fds,1,itimeout*1000) &lt;= 0 ) return false;\n    }\n\n    // \u5982\u679citimeout==-1\uff0c\u8868\u793a\u4e0d\u7b49\u5f85\uff0c\u7acb\u5373\u5224\u65adsocket\u7684\u7f13\u51b2\u533a\u4e2d\u662f\u5426\u6709\u6570\u636e\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u8fd4\u56defalse\u3002\n    if (itimeout==-1)\n    {\n        struct pollfd fds;\n        fds.fd=sockfd;\n        fds.events=POLLIN;\n        if ( poll(&amp;fds,1,0) &lt;= 0 ) return false;\n    }\n\n    // \u8bfb\u53d6\u62a5\u6587\u5185\u5bb9\u3002\n    if (readn(sockfd,(char*)buffer,ibuflen) == false) return false;\n\n    return true;\n}\n\nbool tcpread(const int sockfd,string &amp;buffer,const int itimeout)    // \u63a5\u6536\u6587\u672c\u6570\u636e\u3002\n{\n    if (sockfd==-1) return false;\n\n    // \u5982\u679citimeout&gt;0\uff0c\u8868\u793a\u7b49\u5f85itimeout\u79d2\uff0c\u5982\u679citimeout\u79d2\u540e\u63a5\u6536\u7f13\u51b2\u533a\u4e2d\u8fd8\u6ca1\u6709\u6570\u636e\uff0c\u8fd4\u56defalse\u3002\n    if (itimeout&gt;0)\n    {\n        struct pollfd fds;\n        fds.fd=sockfd;\n        fds.events=POLLIN;\n        if ( poll(&amp;fds,1,itimeout*1000) &lt;= 0 ) return false;\n    }\n\n    // \u5982\u679citimeout==-1\uff0c\u8868\u793a\u4e0d\u7b49\u5f85\uff0c\u7acb\u5373\u5224\u65adsocket\u7684\u63a5\u6536\u7f13\u51b2\u533a\u4e2d\u662f\u5426\u6709\u6570\u636e\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u8fd4\u56defalse\u3002\n    if (itimeout==-1)\n    {\n        struct pollfd fds;\n        fds.fd=sockfd;\n        fds.events=POLLIN;\n        if ( poll(&amp;fds,1,0) &lt;= 0 ) return false;\n    }\n\n    int buflen=0;\n\n    // \u5148\u8bfb\u53d6\u62a5\u6587\u957f\u5ea6\uff0c4\u4e2a\u5b57\u8282\u3002\n    if (readn(sockfd,(char*)&amp;buflen,4) == false) return false;\n\n    buffer.resize(buflen);   // \u8bbe\u7f6ebuffer\u7684\u5927\u5c0f\u3002\n\n    // \u518d\u8bfb\u53d6\u62a5\u6587\u5185\u5bb9\u3002\n    if (readn(sockfd,&amp;buffer[0],buflen) == false) return false;\n\n    return true;\n}\n\nbool tcpwrite(const int sockfd,const void *buffer,const int ibuflen)        // \u53d1\u9001\u4e8c\u8fdb\u5236\u6570\u636e\u3002\n{\n    if (sockfd==-1) return false;\n\n    if (writen(sockfd,(char*)buffer,ibuflen) == false) return false;\n\n    return true;\n}\n\nbool tcpwrite(const int sockfd,const string &amp;buffer)      // \u53d1\u9001\u6587\u672c\u6570\u636e\u3002\n{\n    if (sockfd==-1) return false;\n\n    int buflen=buffer.size();\n\n    // \u5148\u53d1\u9001\u62a5\u5934\u3002\n    if (writen(sockfd,(char*)&amp;buflen,4) == false) return false;\n\n    // \u518d\u53d1\u9001\u62a5\u6587\u4f53\u3002\n    if (writen(sockfd,buffer.c_str(),buflen) == false) return false;\n\n    return true;\n}\n\n// \u4ece\u5df2\u7ecf\u51c6\u5907\u597d\u7684socket\u4e2d\u8bfb\u53d6\u6570\u636e\u3002\n// sockfd\uff1a\u5df2\u7ecf\u51c6\u5907\u597d\u7684socket\u8fde\u63a5\u3002\n// buffer\uff1a\u63a5\u6536\u6570\u636e\u7f13\u51b2\u533a\u7684\u5730\u5740\u3002\n// n\uff1a\u672c\u6b21\u63a5\u6536\u6570\u636e\u7684\u5b57\u8282\u6570\u3002\n// \u8fd4\u56de\u503c\uff1a\u6210\u529f\u63a5\u6536\u5230n\u5b57\u8282\u7684\u6570\u636e\u540e\u8fd4\u56detrue\uff0csocket\u8fde\u63a5\u4e0d\u53ef\u7528\u8fd4\u56defalse\u3002\nbool readn(const int sockfd,char *buffer,const size_t n)\n{\n    int nleft=n;    // \u5269\u4f59\u9700\u8981\u8bfb\u53d6\u7684\u5b57\u8282\u6570\u3002\n    int idx=0;       // \u5df2\u6210\u529f\u8bfb\u53d6\u7684\u5b57\u8282\u6570\u3002\n    int nread;       // \u6bcf\u6b21\u8c03\u7528recv()\u51fd\u6570\u8bfb\u5230\u7684\u5b57\u8282\u6570\u3002\n\n    while(nleft &gt; 0)\n    {\n        if ( (nread=recv(sockfd,buffer+idx,nleft,0)) &lt;= 0) return false;\n\n        idx=idx+nread;\n        nleft=nleft-nread;\n    }\n\n    return true;\n}\n\n// \u5411\u5df2\u7ecf\u51c6\u5907\u597d\u7684socket\u4e2d\u5199\u5165\u6570\u636e\u3002\n// sockfd\uff1a\u5df2\u7ecf\u51c6\u5907\u597d\u7684socket\u8fde\u63a5\u3002\n// buffer\uff1a\u5f85\u53d1\u9001\u6570\u636e\u7f13\u51b2\u533a\u7684\u5730\u5740\u3002\n// n\uff1a\u5f85\u53d1\u9001\u6570\u636e\u7684\u5b57\u8282\u6570\u3002\n// \u8fd4\u56de\u503c\uff1a\u6210\u529f\u53d1\u9001\u5b8cn\u5b57\u8282\u7684\u6570\u636e\u540e\u8fd4\u56detrue\uff0csocket\u8fde\u63a5\u4e0d\u53ef\u7528\u8fd4\u56defalse\u3002\nbool writen(const int sockfd,const char *buffer,const size_t n)\n{\n    int nleft=n;       // \u5269\u4f59\u9700\u8981\u5199\u5165\u7684\u5b57\u8282\u6570\u3002\n    int idx=0;          // \u5df2\u6210\u529f\u5199\u5165\u7684\u5b57\u8282\u6570\u3002\n    int nwritten;      // \u6bcf\u6b21\u8c03\u7528send()\u51fd\u6570\u5199\u5165\u7684\u5b57\u8282\u6570\u3002\n\n    while(nleft &gt; 0 )\n    {    \n      if ( (nwritten=send(sockfd,buffer+idx,nleft,0)) &lt;= 0) return false;      \n\n      nleft=nleft-nwritten;\n      idx=idx+nwritten;\n    }\n\n    return true;\n}\n\nbool copyfile(const string &amp;srcfilename,const string &amp;dstfilename)\n{\n    // \u521b\u5efa\u76ee\u6807\u6587\u4ef6\u7684\u76ee\u5f55\u3002\n    if (newdir(dstfilename,true) == false) return false;\n\n    cifile ifile;\n    cofile ofile;\n    int ifilesize=filesize(srcfilename);\n\n    int  total_bytes=0;\n    int  onread=0;\n    char buffer[5000];\n\n    if (ifile.open(srcfilename,ios::in|ios::binary)==false) return false;\n\n    if (ofile.open(dstfilename,ios::out|ios::binary)==false) return false;\n\n    while (true)\n    {\n        if ((ifilesize-total_bytes) &gt; 5000) onread=5000;\n        else onread=ifilesize-total_bytes;\n\n        memset(buffer,0,sizeof(buffer));\n        ifile.read(buffer,onread);\n        ofile.write(buffer,onread);\n\n        total_bytes = total_bytes + onread;\n\n        if (total_bytes == ifilesize) break;\n    }\n\n    ifile.close();\n    ofile.closeandrename();\n\n    // \u66f4\u6539\u6587\u4ef6\u7684\u4fee\u6539\u65f6\u95f4\u5c5e\u6027\n    string strmtime;\n    filemtime(srcfilename,strmtime);\n    setmtime(dstfilename,strmtime);\n\n    return true;\n}\n\nctimer::ctimer()\n{\n    start();   // \u8ba1\u65f6\u5f00\u59cb\u3002\n}\n\n// \u8ba1\u65f6\u5f00\u59cb\u3002\nvoid ctimer::start()\n{\n    memset(&amp;m_start,0,sizeof(struct timeval));\n    memset(&amp;m_end,0,sizeof(struct timeval));\n\n    gettimeofday(&amp;m_start, 0);    // \u83b7\u53d6\u5f53\u524d\u65f6\u95f4\uff0c\u7cbe\u786e\u5230\u5fae\u79d2\u3002\n}\n\n// \u8ba1\u7b97\u5df2\u901d\u53bb\u7684\u65f6\u95f4\uff0c\u5355\u4f4d\uff1a\u79d2\uff0c\u5c0f\u6570\u70b9\u540e\u9762\u662f\u5fae\u79d2\n// \u6bcf\u8c03\u7528\u4e00\u6b21\u672c\u65b9\u6cd5\u4e4b\u540e\uff0c\u81ea\u52a8\u8c03\u7528Start\u65b9\u6cd5\u91cd\u65b0\u5f00\u59cb\u8ba1\u65f6\u3002\ndouble ctimer::elapsed()\n{\n    gettimeofday(&amp;m_end,0);     // \u83b7\u53d6\u5f53\u524d\u65f6\u95f4\u4f5c\u4e3a\u8ba1\u65f6\u7ed3\u675f\u7684\u65f6\u95f4\uff0c\u7cbe\u786e\u5230\u5fae\u79d2\u3002\n\n    string str;\n    str=sformat(\"%ld.%06ld\",m_start.tv_sec,m_start.tv_usec);\n    double dstart=stod(str);      // \u628a\u8ba1\u65f6\u5f00\u59cb\u7684\u65f6\u95f4\u70b9\u8f6c\u6362\u4e3adouble\u3002\n\n    str=sformat(\"%ld.%06ld\",m_end.tv_sec,m_end.tv_usec);\n    double dend=stod(str);       // \u628a\u8ba1\u65f6\u7ed3\u675f\u7684\u65f6\u95f4\u70b9\u8f6c\u6362\u4e3adouble\u3002\n\n    start();                                  // \u91cd\u65b0\u5f00\u59cb\u8ba1\u65f6\u3002\n\n    return dend-dstart;\n}\n\n cpactive::cpactive()\n {\n     m_shmid=0;\n     m_pos=-1;\n     m_shm=0;\n }\n\n // \u628a\u5f53\u524d\u8fdb\u7a0b\u7684\u4fe1\u606f\u52a0\u5165\u5171\u4eab\u5185\u5b58\u8fdb\u7a0b\u7ec4\u4e2d\u3002\n bool cpactive::addpinfo(const int timeout,const string &amp;pname,clogfile *logfile)\n {\n    if (m_pos!=-1) return true;\n\n    // \u521b\u5efa/\u83b7\u53d6\u5171\u4eab\u5185\u5b58\uff0c\u952e\u503c\u4e3aSHMKEYP\uff0c\u5927\u5c0f\u4e3aMAXNUMP\u4e2ast_procinfo\u7ed3\u6784\u4f53\u7684\u5927\u5c0f\u3002\n    if ( (m_shmid = shmget((key_t)SHMKEYP, MAXNUMP*sizeof(struct st_procinfo), 0666|IPC_CREAT)) == -1)\n    { \n        if (logfile!=nullptr) logfile-&gt;write(\"\u521b\u5efa/\u83b7\u53d6\u5171\u4eab\u5185\u5b58(%x)\u5931\u8d25\u3002\\n\",SHMKEYP); \n        else printf(\"\u521b\u5efa/\u83b7\u53d6\u5171\u4eab\u5185\u5b58(%x)\u5931\u8d25\u3002\\n\",SHMKEYP);\n\n        return false; \n    }\n\n    // \u5c06\u5171\u4eab\u5185\u5b58\u8fde\u63a5\u5230\u5f53\u524d\u8fdb\u7a0b\u7684\u5730\u5740\u7a7a\u95f4\u3002\n    m_shm=(struct st_procinfo *)shmat(m_shmid, 0, 0);\n\n    /*\n    struct st_procinfo stprocinfo;    // \u5f53\u524d\u8fdb\u7a0b\u5fc3\u8df3\u4fe1\u606f\u7684\u7ed3\u6784\u4f53\u3002\n    memset(&amp;stprocinfo,0,sizeof(stprocinfo));\n    stprocinfo.pid=getpid();            // \u5f53\u524d\u8fdb\u7a0b\u53f7\u3002\n    stprocinfo.timeout=timeout;         // \u8d85\u65f6\u65f6\u95f4\u3002\n    stprocinfo.atime=time(0);           // \u5f53\u524d\u65f6\u95f4\u3002\n    strncpy(stprocinfo.pname,pname.c_str(),50); // \u8fdb\u7a0b\u540d\u3002\n    */\n    st_procinfo stprocinfo(getpid(),pname.c_str(),timeout,time(0));    // \u5f53\u524d\u8fdb\u7a0b\u5fc3\u8df3\u4fe1\u606f\u7684\u7ed3\u6784\u4f53\u3002\n\n    // \u8fdb\u7a0bid\u662f\u5faa\u73af\u4f7f\u7528\u7684\uff0c\u5982\u679c\u66fe\u7ecf\u6709\u4e00\u4e2a\u8fdb\u7a0b\u5f02\u5e38\u9000\u51fa\uff0c\u6ca1\u6709\u6e05\u7406\u81ea\u5df1\u7684\u5fc3\u8df3\u4fe1\u606f\uff0c\n    // \u5b83\u7684\u8fdb\u7a0b\u4fe1\u606f\u5c06\u6b8b\u7559\u5728\u5171\u4eab\u5185\u5b58\u4e2d\uff0c\u4e0d\u5de7\u7684\u662f\uff0c\u5982\u679c\u5f53\u524d\u8fdb\u7a0b\u91cd\u7528\u4e86\u5b83\u7684id\uff0c\n    // \u5b88\u62a4\u8fdb\u7a0b\u68c0\u67e5\u5230\u6b8b\u7559\u8fdb\u7a0b\u7684\u4fe1\u606f\u65f6\uff0c\u4f1a\u5411\u8fdb\u7a0bid\u53d1\u9001\u9000\u51fa\u4fe1\u53f7\uff0c\u5c06\u8bef\u6740\u5f53\u524d\u8fdb\u7a0b\u3002\n    // \u6240\u4ee5\uff0c\u5982\u679c\u5171\u4eab\u5185\u5b58\u4e2d\u5df2\u5b58\u5728\u5f53\u524d\u8fdb\u7a0b\u7f16\u53f7\uff0c\u4e00\u5b9a\u662f\u5176\u5b83\u8fdb\u7a0b\u6b8b\u7559\u7684\u4fe1\u606f\uff0c\u5f53\u524d\u8fdb\u7a0b\u5e94\u8be5\u91cd\u7528\u8fd9\u4e2a\u4f4d\u7f6e\u3002\n    for (int ii=0;ii&lt;MAXNUMP;ii++)\n    {\n        if ( (m_shm+ii)-&gt;pid==stprocinfo.pid ) { m_pos=ii; break; }\n    }\n\n    csemp semp;                       // \u7528\u4e8e\u7ed9\u5171\u4eab\u5185\u5b58\u52a0\u9501\u7684\u4fe1\u53f7\u91cfid\u3002\n\n    if (semp.init(SEMKEYP) == false)  // \u521d\u59cb\u5316\u4fe1\u53f7\u91cf\u3002\n    {\n        if (logfile!=nullptr) logfile-&gt;write(\"\u521b\u5efa/\u83b7\u53d6\u4fe1\u53f7\u91cf(%x)\u5931\u8d25\u3002\\n\",SEMKEYP); \n        else printf(\"\u521b\u5efa/\u83b7\u53d6\u4fe1\u53f7\u91cf(%x)\u5931\u8d25\u3002\\n\",SEMKEYP);\n\n        return false;\n    }\n\n    semp.wait();  // \u7ed9\u5171\u4eab\u5185\u5b58\u4e0a\u9501\u3002\n\n    // \u5982\u679cm_pos==-1\uff0c\u8868\u793a\u5171\u4eab\u5185\u5b58\u7684\u8fdb\u7a0b\u7ec4\u4e2d\u4e0d\u5b58\u5728\u5f53\u524d\u8fdb\u7a0b\u7f16\u53f7\uff0c\u90a3\u5c31\u627e\u4e00\u4e2a\u7a7a\u4f4d\u7f6e\u3002\n    if (m_pos==-1)\n    {\n        for (int ii=0;ii&lt;MAXNUMP;ii++)\n            if ( (m_shm+ii)-&gt;pid==0 ) { m_pos=ii; break; }\n    }\n\n    // \u5982\u679cm_pos==-1\uff0c\u8868\u793a\u6ca1\u627e\u5230\u7a7a\u4f4d\u7f6e\uff0c\u8bf4\u660e\u5171\u4eab\u5185\u5b58\u7684\u7a7a\u95f4\u5df2\u7528\u5b8c\u3002\n    if (m_pos==-1) \n    { \n        if (logfile!=0) logfile-&gt;write(\"\u5171\u4eab\u5185\u5b58\u7a7a\u95f4\u5df2\u7528\u5b8c\u3002\\n\");\n        else printf(\"\u5171\u4eab\u5185\u5b58\u7a7a\u95f4\u5df2\u7528\u5b8c\u3002\\n\");\n\n        semp.post();  // \u89e3\u9501\u3002\n\n        return false; \n    }\n\n    // \u628a\u5f53\u524d\u8fdb\u7a0b\u7684\u5fc3\u8df3\u4fe1\u606f\u5b58\u5165\u5171\u4eab\u5185\u5b58\u7684\u8fdb\u7a0b\u7ec4\u4e2d\u3002\n    memcpy(m_shm+m_pos,&amp;stprocinfo,sizeof(struct st_procinfo)); \n\n    semp.post();   // \u89e3\u9501\u3002\n\n    return true;\n }\n\n // \u66f4\u65b0\u5171\u4eab\u5185\u5b58\u8fdb\u7a0b\u7ec4\u4e2d\u5f53\u524d\u8fdb\u7a0b\u7684\u5fc3\u8df3\u65f6\u95f4\u3002\n bool cpactive::uptatime()\n {\n    if (m_pos==-1) return false;\n\n    (m_shm+m_pos)-&gt;atime=time(0);\n\n    return true;\n }\n\n cpactive::~cpactive()\n {\n    // \u628a\u5f53\u524d\u8fdb\u7a0b\u4ece\u5171\u4eab\u5185\u5b58\u7684\u8fdb\u7a0b\u7ec4\u4e2d\u79fb\u53bb\u3002\n    if (m_pos!=-1) memset(m_shm+m_pos,0,sizeof(struct st_procinfo));\n\n    // \u628a\u5171\u4eab\u5185\u5b58\u4ece\u5f53\u524d\u8fdb\u7a0b\u4e2d\u5206\u79bb\u3002\n    if (m_shm!=0) shmdt(m_shm);\n }\n\n// \u5982\u679c\u4fe1\u53f7\u91cf\u5df2\u5b58\u5728\uff0c\u83b7\u53d6\u4fe1\u53f7\u91cf\uff1b\u5982\u679c\u4fe1\u53f7\u91cf\u4e0d\u5b58\u5728\uff0c\u5219\u521b\u5efa\u5b83\u5e76\u521d\u59cb\u5316\u4e3avalue\u3002\n// \u5982\u679c\u7528\u4e8e\u4e92\u65a5\u9501\uff0cvalue\u586b1\uff0csem_flg\u586bSEM_UNDO\u3002\n// \u5982\u679c\u7528\u4e8e\u751f\u4ea7\u6d88\u8d39\u8005\u6a21\u578b\uff0cvalue\u586b0\uff0csem_flg\u586b0\u3002\nbool csemp::init(key_t key,unsigned short value,short sem_flg)\n{\n    if (m_semid!=-1) return false; // \u5982\u679c\u5df2\u7ecf\u521d\u59cb\u5316\u4e86\uff0c\u4e0d\u5fc5\u518d\u6b21\u521d\u59cb\u5316\u3002\n\n    m_sem_flg=sem_flg;\n\n    // \u4fe1\u53f7\u91cf\u7684\u521d\u59cb\u5316\u4e0d\u80fd\u76f4\u63a5\u7528semget(key,1,0666|IPC_CREAT)\n    // \u56e0\u4e3a\u4fe1\u53f7\u91cf\u521b\u5efa\u540e\uff0c\u521d\u59cb\u503c\u662f0\uff0c\u5982\u679c\u7528\u4e8e\u4e92\u65a5\u9501\uff0c\u9700\u8981\u628a\u5b83\u7684\u521d\u59cb\u503c\u8bbe\u7f6e\u4e3a1\uff0c\n    // \u800c\u83b7\u53d6\u4fe1\u53f7\u91cf\u5219\u4e0d\u9700\u8981\u8bbe\u7f6e\u521d\u59cb\u503c\uff0c\u6240\u4ee5\uff0c\u521b\u5efa\u4fe1\u53f7\u91cf\u548c\u83b7\u53d6\u4fe1\u53f7\u91cf\u7684\u6d41\u7a0b\u4e0d\u540c\u3002\n\n    // \u4fe1\u53f7\u91cf\u7684\u521d\u59cb\u5316\u5206\u4e09\u4e2a\u6b65\u9aa4\uff1a\n    // 1\uff09\u83b7\u53d6\u4fe1\u53f7\u91cf\uff0c\u5982\u679c\u6210\u529f\uff0c\u51fd\u6570\u8fd4\u56de\u3002\n    // 2\uff09\u5982\u679c\u5931\u8d25\uff0c\u5219\u521b\u5efa\u4fe1\u53f7\u91cf\u3002\n    // 3) \u8bbe\u7f6e\u4fe1\u53f7\u91cf\u7684\u521d\u59cb\u503c\u3002\n\n    // \u83b7\u53d6\u4fe1\u53f7\u91cf\u3002\n    if ( (m_semid=semget(key,1,0666)) == -1)\n    {\n        // \u5982\u679c\u4fe1\u53f7\u91cf\u4e0d\u5b58\u5728\uff0c\u521b\u5efa\u5b83\u3002\n        if (errno==ENOENT)\n        {\n            // \u7528IPC_EXCL\u6807\u5fd7\u786e\u4fdd\u53ea\u6709\u4e00\u4e2a\u8fdb\u7a0b\u521b\u5efa\u5e76\u521d\u59cb\u5316\u4fe1\u53f7\u91cf\uff0c\u5176\u5b83\u8fdb\u7a0b\u53ea\u80fd\u83b7\u53d6\u3002\n            if ( (m_semid=semget(key,1,0666|IPC_CREAT|IPC_EXCL)) == -1)\n            {\n                if (errno==EEXIST) // \u5982\u679c\u9519\u8bef\u4ee3\u7801\u662f\u4fe1\u53f7\u91cf\u5df2\u5b58\u5728\uff0c\u5219\u518d\u6b21\u83b7\u53d6\u4fe1\u53f7\u91cf\u3002\n                {\n                    if ( (m_semid=semget(key,1,0666)) == -1)\n                    { \n                        perror(\"init 1 semget()\"); return false; \n                    }\n                    return true;\n                }\n                else  // \u5982\u679c\u662f\u5176\u5b83\u9519\u8bef\uff0c\u8fd4\u56de\u5931\u8d25\u3002\n                {\n                    perror(\"init 2 semget()\"); return false;\n                }\n            }\n\n            // \u4fe1\u53f7\u91cf\u521b\u5efa\u6210\u529f\u540e\uff0c\u8fd8\u9700\u8981\u628a\u5b83\u521d\u59cb\u5316\u6210value\u3002\n            union semun sem_union;\n            sem_union.val = value;   // \u8bbe\u7f6e\u4fe1\u53f7\u91cf\u7684\u521d\u59cb\u503c\u3002\n            if (semctl(m_semid,0,SETVAL,sem_union) &lt;  0) \n            { \n                perror(\"init semctl()\"); return false; \n            }\n        }\n        else\n        { perror(\"init 3 semget()\"); return false; }\n    }\n\n    return true;\n}\n\n// \u4fe1\u53f7\u91cf\u7684P\u64cd\u4f5c\uff08\u628a\u4fe1\u53f7\u91cf\u7684\u503c\u51cfvalue\uff09\uff0c\u5982\u679c\u4fe1\u53f7\u91cf\u7684\u503c\u662f0\uff0c\u5c06\u963b\u585e\u7b49\u5f85\uff0c\u76f4\u5230\u4fe1\u53f7\u91cf\u7684\u503c\u5927\u4e8e0\u3002\nbool csemp::wait(short value)\n{\n    if (m_semid==-1) return false;\n\n    struct sembuf sem_b;\n    sem_b.sem_num = 0;      // \u4fe1\u53f7\u91cf\u7f16\u53f7\uff0c0\u4ee3\u8868\u7b2c\u4e00\u4e2a\u4fe1\u53f7\u91cf\u3002\n    sem_b.sem_op = value;   // P\u64cd\u4f5c\u7684value\u5fc5\u987b\u5c0f\u4e8e0\u3002\n    sem_b.sem_flg = m_sem_flg;\n    if (semop(m_semid,&amp;sem_b,1) == -1) { perror(\"p semop()\"); return false; }\n\n    return true;\n}\n\n// \u4fe1\u53f7\u91cf\u7684V\u64cd\u4f5c\uff08\u628a\u4fe1\u53f7\u91cf\u7684\u503c\u51cfvalue\uff09\u3002\nbool csemp::post(short value)\n{\n    if (m_semid==-1) return false;\n\n    struct sembuf sem_b;\n    sem_b.sem_num = 0;     // \u4fe1\u53f7\u91cf\u7f16\u53f7\uff0c0\u4ee3\u8868\u7b2c\u4e00\u4e2a\u4fe1\u53f7\u91cf\u3002\n    sem_b.sem_op = value;  // V\u64cd\u4f5c\u7684value\u5fc5\u987b\u5927\u4e8e0\u3002\n    sem_b.sem_flg = m_sem_flg;\n    if (semop(m_semid,&amp;sem_b,1) == -1) { perror(\"V semop()\"); return false; }\n\n    return true;\n}\n\n// \u83b7\u53d6\u4fe1\u53f7\u91cf\u7684\u503c\uff0c\u6210\u529f\u8fd4\u56de\u4fe1\u53f7\u91cf\u7684\u503c\uff0c\u5931\u8d25\u8fd4\u56de-1\u3002\nint csemp::getvalue()\n{\n    return semctl(m_semid,0,GETVAL);\n}\n\n// \u9500\u6bc1\u4fe1\u53f7\u91cf\u3002\nbool csemp::destroy()\n{\n    if (m_semid==-1) return false;\n\n    if (semctl(m_semid,0,IPC_RMID) == -1) { perror(\"destroy semctl()\"); return false; }\n\n    return true;\n}\n\ncsemp::~csemp()\n{\n}\n\n\n} // namespace\n</code></pre>"},{"location":"Project/Backend%20server/ADF/ADF_Library/_public_h/","title":"_public.h","text":"<pre><code>#ifndef __PUBLIC_HH\n#define __PUBLIC_HH 1\n\n#include \"_cmpublic.h\"    // C/C++\u3001Linux\u7f16\u7a0b\u5e38\u7528\u7684\u5934\u6587\u4ef6\uff0c\u65b0\u7684\u5934\u6587\u4ef6\u8bf7\u5728_cmpublic.h\u4e2d\u6dfb\u52a0\u3002\n\nusing namespace std;\n\nnamespace idc\n{\n\n///////////////////////////////////// /////////////////////////////////////\n// C++\u98ce\u683c\u5b57\u7b26\u4e32\u64cd\u4f5c\u7684\u82e5\u5e72\u51fd\u6570\u3002\n// \u5220\u9664\u5b57\u7b26\u4e32\u5de6\u8fb9\u6307\u5b9a\u7684\u5b57\u7b26\u3002\n// str\uff1a\u5f85\u5904\u7406\u7684\u5b57\u7b26\u4e32\u3002\n// cc\uff1a\u9700\u8981\u5220\u9664\u7684\u5b57\u7b26\uff0c\u7f3a\u7701\u5220\u9664\u7a7a\u683c\u3002\nchar*     deletelchr(char* str, const int cc=' ');\nstring&amp; deletelchr(string &amp;str, const int cc=' ');\n\n// \u5220\u9664\u5b57\u7b26\u4e32\u53f3\u8fb9\u6307\u5b9a\u7684\u5b57\u7b26\u3002\n// str\uff1a\u5f85\u5904\u7406\u7684\u5b57\u7b26\u4e32\u3002\n// cc\uff1a\u9700\u8981\u5220\u9664\u7684\u5b57\u7b26\uff0c\u7f3a\u7701\u5220\u9664\u7a7a\u683c\u3002\nchar*     deleterchr(char *str,const int cc=' ');\nstring&amp; deleterchr(string &amp;str,const int cc=' ');\n\n// \u5220\u9664\u5b57\u7b26\u4e32\u5de6\u53f3\u4e24\u8fb9\u6307\u5b9a\u7684\u5b57\u7b26\u3002\n// str\uff1a\u5f85\u5904\u7406\u7684\u5b57\u7b26\u4e32\u3002\n// chr\uff1a\u9700\u8981\u5220\u9664\u7684\u5b57\u7b26\uff0c\u7f3a\u7701\u5220\u9664\u7a7a\u683c\u3002\nchar*     deletelrchr(char *str,const int cc=' ');\nstring&amp; deletelrchr(string &amp;str,const int cc=' ');\n\n// \u628a\u5b57\u7b26\u4e32\u4e2d\u7684\u5c0f\u5199\u5b57\u6bcd\u8f6c\u6362\u6210\u5927\u5199\uff0c\u5ffd\u7565\u4e0d\u662f\u5b57\u6bcd\u7684\u5b57\u7b26\u3002\n// str\uff1a\u5f85\u8f6c\u6362\u7684\u5b57\u7b26\u4e32\u3002\nchar*     toupper(char *str);\nstring&amp; toupper(string &amp;str);\n\n// \u628a\u5b57\u7b26\u4e32\u4e2d\u7684\u5927\u5199\u5b57\u6bcd\u8f6c\u6362\u6210\u5c0f\u5199\uff0c\u5ffd\u7565\u4e0d\u662f\u5b57\u6bcd\u7684\u5b57\u7b26\u3002\n// str\uff1a\u5f85\u8f6c\u6362\u7684\u5b57\u7b26\u4e32\u3002\nchar*     tolower(char *str);\nstring&amp; tolower(string &amp;str);\n\n// \u5b57\u7b26\u4e32\u66ff\u6362\u51fd\u6570\u3002\n// \u5728\u5b57\u7b26\u4e32str\u4e2d\uff0c\u5982\u679c\u5b58\u5728\u5b57\u7b26\u4e32str1\uff0c\u5c31\u66ff\u6362\u4e3a\u5b57\u7b26\u4e32str2\u3002\n// str\uff1a\u5f85\u5904\u7406\u7684\u5b57\u7b26\u4e32\u3002\n// str1\uff1a\u65e7\u7684\u5185\u5bb9\u3002\n// str2\uff1a\u65b0\u7684\u5185\u5bb9\u3002\n// bloop\uff1a\u662f\u5426\u5faa\u73af\u6267\u884c\u66ff\u6362\u3002\n// \u6ce8\u610f\uff1a\n// 1\u3001\u5982\u679cstr2\u6bd4str1\u8981\u957f\uff0c\u66ff\u6362\u540estr\u4f1a\u53d8\u957f\uff0c\u6240\u4ee5\u5fc5\u987b\u4fdd\u8bc1str\u6709\u8db3\u591f\u7684\u7a7a\u95f4\uff0c\u5426\u5219\u5185\u5b58\u4f1a\u6ea2\u51fa\uff08C++\u98ce\u683c\u5b57\u7b26\u4e32\u4e0d\u5b58\u5728\u8fd9\u4e2a\u95ee\u9898\uff09\u3002\n// 2\u3001\u5982\u679cstr2\u4e2d\u5305\u542b\u4e86str1\u7684\u5185\u5bb9\uff0c\u4e14bloop\u4e3atrue\uff0c\u8fd9\u79cd\u505a\u6cd5\u5b58\u5728\u903b\u8f91\u9519\u8bef\uff0creplacestr\u5c06\u4ec0\u4e48\u4e5f\u4e0d\u505a\u3002\n// 3\u3001\u5982\u679cstr2\u4e3a\u7a7a\uff0c\u8868\u793a\u5220\u9664str\u4e2dstr1\u7684\u5185\u5bb9\u3002\nbool replacestr(char *str   ,const string &amp;str1,const string &amp;str2,const bool bloop=false);\nbool replacestr(string &amp;str,const string &amp;str1,const string &amp;str2,const bool bloop=false);\n\n// \u4ece\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d\u63d0\u53d6\u51fa\u6570\u5b57\u3001\u7b26\u53f7\u548c\u5c0f\u6570\u70b9\uff0c\u5b58\u653e\u5230\u53e6\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d\u3002\n// src\uff1a\u539f\u5b57\u7b26\u4e32\u3002\n// dest\uff1a\u76ee\u6807\u5b57\u7b26\u4e32\u3002\n// bsigned\uff1a\u662f\u5426\u63d0\u53d6\u7b26\u53f7\uff08+\u548c-\uff09\uff0ctrue-\u5305\u62ec\uff1bfalse-\u4e0d\u5305\u62ec\u3002\n// bdot\uff1a\u662f\u5426\u63d0\u53d6\u5c0f\u6570\u70b9\uff08.\uff09\uff0ctrue-\u5305\u62ec\uff1bfalse-\u4e0d\u5305\u62ec\u3002\n// \u6ce8\u610f\uff1asrc\u548cdest\u53ef\u4ee5\u662f\u540c\u4e00\u4e2a\u53d8\u91cf\u3002\nchar*     picknumber(const string &amp;src,char *dest,const bool bsigned=false,const bool bdot=false);\nstring&amp; picknumber(const string &amp;src,string &amp;dest,const bool bsigned=false,const bool bdot=false);\nstring    picknumber(const string &amp;src,const bool bsigned=false,const bool bdot=false);\n\n// \u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u5224\u65ad\u4e00\u4e2a\u5b57\u7b26\u4e32\u662f\u5426\u5339\u914d\u53e6\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002\n// str\uff1a\u9700\u8981\u5224\u65ad\u7684\u5b57\u7b26\u4e32\uff0c\u662f\u7cbe\u786e\u8868\u793a\u7684\uff0c\u5982\u6587\u4ef6\u540d\"_public.cpp\"\u3002\n// rules\uff1a\u5339\u914d\u89c4\u5219\u7684\u8868\u8fbe\u5f0f\uff0c\u7528\u661f\u53f7\"*\"\u4ee3\u8868\u4efb\u610f\u5b57\u7b26\uff0c\u591a\u4e2a\u8868\u8fbe\u5f0f\u4e4b\u95f4\u7528\u534a\u89d2\u7684\u9017\u53f7\u5206\u9694\uff0c\u5982\"*.h,*.cpp\"\u3002\n// \u6ce8\u610f\uff1a1\uff09str\u53c2\u6570\u4e0d\u9700\u8981\u652f\u6301\"*\"\uff0crules\u53c2\u6570\u652f\u6301\"*\"\uff1b2\uff09\u51fd\u6570\u5728\u5224\u65adstr\u662f\u5426\u5339\u914drules\u7684\u65f6\u5019\uff0c\u4f1a\u5ffd\u7565\u5b57\u6bcd\u7684\u5927\u5c0f\u5199\u3002\nbool matchstr(const string &amp;str,const string &amp;rules);\n///////////////////////////////////// /////////////////////////////////////\n\n///////////////////////////////////// /////////////////////////////////////\n// ccmdstr\u7c7b\u7528\u4e8e\u62c6\u5206\u6709\u5206\u9694\u7b26\u7684\u5b57\u7b26\u4e32\u3002\n// \u5b57\u7b26\u4e32\u7684\u683c\u5f0f\u4e3a\uff1a\u5b57\u6bb5\u5185\u5bb91+\u5206\u9694\u7b26+\u5b57\u6bb5\u5185\u5bb92+\u5206\u9694\u7b26+\u5b57\u6bb5\u5185\u5bb93+\u5206\u9694\u7b26+...+\u5b57\u6bb5\u5185\u5bb9n\u3002\n// \u4f8b\u5982\uff1a\"messi,10,striker,30,1.72,68.5,Barcelona\"\uff0c\u8fd9\u662f\u8db3\u7403\u8fd0\u52a8\u5458\u6885\u897f\u7684\u8d44\u6599\u3002\n// \u5305\u62ec\uff1a\u59d3\u540d\u3001\u7403\u8863\u53f7\u7801\u3001\u573a\u4e0a\u4f4d\u7f6e\u3001\u5e74\u9f84\u3001\u8eab\u9ad8\u3001\u4f53\u91cd\u548c\u6548\u529b\u7684\u4ff1\u4e50\u90e8\uff0c\u5b57\u6bb5\u4e4b\u95f4\u7528\u534a\u89d2\u7684\u9017\u53f7\u5206\u9694\u3002\nclass ccmdstr\n{\nprivate:\n    vector&lt;string&gt; m_cmdstr;  // \u5b58\u653e\u62c6\u5206\u540e\u7684\u5b57\u6bb5\u5185\u5bb9\u3002\n\n    ccmdstr(const ccmdstr &amp;) = delete;                      // \u7981\u7528\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u3002\n    ccmdstr &amp;operator=(const ccmdstr &amp;) = delete;  // \u7981\u7528\u8d4b\u503c\u51fd\u6570\u3002\npublic:\n    ccmdstr()  { } // \u6784\u9020\u51fd\u6570\u3002\n    ccmdstr(const string &amp;buffer,const string &amp;sepstr,const bool bdelspace=false);\n\n    const string&amp; operator[](int ii) const     // \u91cd\u8f7d[]\u8fd0\u7b97\u7b26\uff0c\u53ef\u4ee5\u50cf\u8bbf\u95ee\u6570\u7ec4\u4e00\u6837\u8bbf\u95eem_cmdstr\u6210\u5458\u3002\n    {\n        return m_cmdstr[ii];\n    }\n\n    // \u628a\u5b57\u7b26\u4e32\u62c6\u5206\u5230m_cmdstr\u5bb9\u5668\u4e2d\u3002\n    // buffer\uff1a\u5f85\u62c6\u5206\u7684\u5b57\u7b26\u4e32\u3002\n    // sepstr\uff1abuffer\u4e2d\u91c7\u7528\u7684\u5206\u9694\u7b26\uff0c\u6ce8\u610f\uff0csepstr\u53c2\u6570\u7684\u6570\u636e\u7c7b\u578b\u4e0d\u662f\u5b57\u7b26\uff0c\u662f\u5b57\u7b26\u4e32\uff0c\u5982\",\"\u3001\" \"\u3001\"|\"\u3001\"~!~\"\u3002\n    // bdelspace\uff1a\u62c6\u5206\u540e\u662f\u5426\u5220\u9664\u5b57\u6bb5\u5185\u5bb9\u524d\u540e\u7684\u7a7a\u683c\uff0ctrue-\u5220\u9664\uff1bfalse-\u4e0d\u5220\u9664\uff0c\u7f3a\u7701\u4e0d\u5220\u9664\u3002\n    void splittocmd(const string &amp;buffer,const string &amp;sepstr,const bool bdelspace=false);\n\n    // \u83b7\u53d6\u62c6\u5206\u540e\u5b57\u6bb5\u7684\u4e2a\u6570\uff0c\u5373m_cmdstr\u5bb9\u5668\u7684\u5927\u5c0f\u3002\n    int size() const { return m_cmdstr.size(); }\n    int cmdcount() const { return m_cmdstr.size(); }      // \u517c\u5bb9\u4ee5\u524d\u7684\u9879\u76ee\u3002\n\n    // \u4ecem_cmdstr\u5bb9\u5668\u83b7\u53d6\u5b57\u6bb5\u5185\u5bb9\u3002\n    // ii\uff1a\u5b57\u6bb5\u7684\u987a\u5e8f\u53f7\uff0c\u7c7b\u4f3c\u6570\u7ec4\u7684\u4e0b\u6807\uff0c\u4ece0\u5f00\u59cb\u3002\n    // value\uff1a\u4f20\u5165\u53d8\u91cf\u7684\u5730\u5740\uff0c\u7528\u4e8e\u5b58\u653e\u5b57\u6bb5\u5185\u5bb9\u3002\n    // \u8fd4\u56de\u503c\uff1atrue-\u6210\u529f\uff1b\u5982\u679cii\u7684\u53d6\u503c\u8d85\u51fa\u4e86m_cmdstr\u5bb9\u5668\u7684\u5927\u5c0f\uff0c\u8fd4\u56de\u5931\u8d25\u3002\n    bool getvalue(const int ii,string &amp;value,const int ilen=0) const;      // C++\u98ce\u683c\u5b57\u7b26\u4e32\u3002\u89c6\u9891\u4e2d\u6ca1\u6709\u7b2c\u4e09\u4e2a\u53c2\u6570\uff0c\u52a0\u4e0a\u7b2c\u4e09\u4e2a\u53c2\u6570\u66f4\u597d\u3002\n    bool getvalue(const int ii,char *value,const int ilen=0) const;          // C\u98ce\u683c\u5b57\u7b26\u4e32\uff0cilen\u7f3a\u7701\u503c\u4e3a0-\u5168\u90e8\u957f\u5ea6\u3002 \n    bool getvalue(const int ii,int  &amp;value) const;                                    // int\u6574\u6570\u3002\n    bool getvalue(const int ii,unsigned int &amp;value) const;                     // unsigned int\u6574\u6570\u3002\n    bool getvalue(const int ii,long &amp;value) const;                                  // long\u6574\u6570\u3002\n    bool getvalue(const int ii,unsigned long &amp;value) const;                  // unsigned long\u6574\u6570\u3002\n    bool getvalue(const int ii,double &amp;value) const;                              // \u53cc\u7cbe\u5ea6double\u3002\n    bool getvalue(const int ii,float &amp;value) const;                                  // \u5355\u7cbe\u5ea6float\u3002\n    bool getvalue(const int ii,bool &amp;value) const;                                  // bool\u578b\u3002\n\n    ~ccmdstr(); // \u6790\u6784\u51fd\u6570\u3002\n};\n\n// \u91cd\u8f7d&lt;&lt;\u8fd0\u7b97\u7b26\uff0c\u8f93\u51faccmdstr::m_cmdstr\u4e2d\u7684\u5185\u5bb9\uff0c\u65b9\u4fbf\u8c03\u8bd5\u3002\nostream&amp; operator&lt;&lt;(ostream&amp; out, const ccmdstr&amp; cc);\n///////////////////////////////////// /////////////////////////////////////\n\n///////////////////////////////////// /////////////////////////////////////\n// \u89e3\u6790xml\u683c\u5f0f\u5b57\u7b26\u4e32\u7684\u51fd\u6570\u65cf\u3002\n// xml\u683c\u5f0f\u7684\u5b57\u7b26\u4e32\u7684\u5185\u5bb9\u5982\u4e0b\uff1a\n// &lt;filename&gt;/tmp/_public.h&lt;/filename&gt;&lt;mtime&gt;2020-01-01 12:20:35&lt;/mtime&gt;&lt;size&gt;18348&lt;/size&gt;\n// &lt;filename&gt;/tmp/_public.cpp&lt;/filename&gt;&lt;mtime&gt;2020-01-01 10:10:15&lt;/mtime&gt;&lt;size&gt;50945&lt;/size&gt;\n// xmlbuffer\uff1a\u5f85\u89e3\u6790\u7684xml\u683c\u5f0f\u5b57\u7b26\u4e32\u3002\n// fieldname\uff1a\u5b57\u6bb5\u7684\u6807\u7b7e\u540d\u3002\n// value\uff1a\u4f20\u5165\u53d8\u91cf\u7684\u5730\u5740\uff0c\u7528\u4e8e\u5b58\u653e\u5b57\u6bb5\u5185\u5bb9\uff0c\u652f\u6301bool\u3001int\u3001insigned int\u3001long\u3001\n//       unsigned long\u3001double\u548cchar[]\u3002\n// \u6ce8\u610f\uff1a\u5f53value\u53c2\u6570\u7684\u6570\u636e\u7c7b\u578b\u4e3achar []\u65f6\uff0c\u5fc5\u987b\u4fdd\u8bc1value\u6570\u7ec4\u7684\u5185\u5b58\u8db3\u591f\uff0c\u5426\u5219\u53ef\u80fd\u53d1\u751f\u5185\u5b58\u6ea2\u51fa\u7684\u95ee\u9898\uff0c\n//           \u4e5f\u53ef\u4ee5\u7528ilen\u53c2\u6570\u9650\u5b9a\u83b7\u53d6\u5b57\u6bb5\u5185\u5bb9\u7684\u957f\u5ea6\uff0cilen\u7684\u7f3a\u7701\u503c\u4e3a0\uff0c\u8868\u793a\u4e0d\u9650\u957f\u5ea6\u3002\n// \u8fd4\u56de\u503c\uff1atrue-\u6210\u529f\uff1b\u5982\u679cfieldname\u53c2\u6570\u6307\u5b9a\u7684\u6807\u7b7e\u540d\u4e0d\u5b58\u5728\uff0c\u8fd4\u56de\u5931\u8d25\u3002\nbool getxmlbuffer(const string &amp;xmlbuffer,const string &amp;fieldname,string &amp;value,const int ilen=0);    // \u89c6\u9891\u4e2d\u6ca1\u6709\u7b2c\u4e09\u4e2a\u53c2\u6570\uff0c\u52a0\u4e0a\u7b2c\u4e09\u4e2a\u53c2\u6570\u66f4\u597d\u3002\nbool getxmlbuffer(const string &amp;xmlbuffer,const string &amp;fieldname,char *value,const int ilen=0);\nbool getxmlbuffer(const string &amp;xmlbuffer,const string &amp;fieldname,bool &amp;value);\nbool getxmlbuffer(const string &amp;xmlbuffer,const string &amp;fieldname,int  &amp;value);\nbool getxmlbuffer(const string &amp;xmlbuffer,const string &amp;fieldname,unsigned int &amp;value);\nbool getxmlbuffer(const string &amp;xmlbuffer,const string &amp;fieldname,long &amp;value);\nbool getxmlbuffer(const string &amp;xmlbuffer,const string &amp;fieldname,unsigned long &amp;value);\nbool getxmlbuffer(const string &amp;xmlbuffer,const string &amp;fieldname,double &amp;value);\nbool getxmlbuffer(const string &amp;xmlbuffer,const string &amp;fieldname,float &amp;value);\n///////////////////////////////////// /////////////////////////////////////\n\n// C++\u683c\u5f0f\u5316\u8f93\u51fa\u51fd\u6570\u6a21\u677f\u3002\ntemplate&lt; typename... Args &gt;\nbool sformat(string &amp;str,const char* fmt, Args... args ) \n{\n    int len = snprintf( nullptr, 0, fmt, args... );      // \u5f97\u5230\u683c\u5f0f\u5316\u8f93\u51fa\u540e\u5b57\u7b26\u4e32\u7684\u603b\u957f\u5ea6\u3002\n    if (len &lt; 0) return false;                                  // \u5982\u679c\u8c03\u7528snprintf\u5931\u8d25\uff0c\u8fd4\u56de-1\u3002\n    if (len == 0) { str.clear(); return true; }            // \u5982\u679c\u8c03\u7528snprintf\u8fd4\u56de0\uff0c\u8868\u793a\u683c\u5f0f\u5316\u8f93\u51fa\u7684\u5185\u5bb9\u4e3a\u7a7a\u3002\n\n    str.resize(len);                                                 // \u4e3astring\u5206\u914d\u5185\u5b58\u3002\n    snprintf(&amp;str[0], len + 1, fmt, args... );           // linux\u5e73\u53f0\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662flen+1\uff0cwindows\u5e73\u53f0\u662flen\u3002\n    return true;\n}\ntemplate&lt; typename... Args &gt;\nstring sformat(const char* fmt, Args... args ) \n{\n    string str;\n\n    int len = snprintf( nullptr, 0, fmt, args... );      // \u5f97\u5230\u683c\u5f0f\u5316\u540e\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u3002\n    if (len &lt; 0) return str;              // \u5982\u679c\u8c03\u7528snprintf\u5931\u8d25\uff0c\u8fd4\u56de-1\u3002\n    if (len == 0) return str;           // \u5982\u679c\u8c03\u7528snprintf\u8fd4\u56de0\uff0c\u8868\u793a\u683c\u5f0f\u5316\u8f93\u51fa\u7684\u5185\u5bb9\u4e3a\u7a7a\u3002;\n\n    str.resize(len);                                                // \u4e3astring\u5206\u914d\u5185\u5b58\u3002\n    snprintf(&amp;str[0], len + 1, fmt, args... );          // linux\u5e73\u53f0\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662flen+1\uff0cwindows\u5e73\u53f0\u662flen\u3002\n    return str;\n}\n\n///////////////////////////////////// /////////////////////////////////////\n// \u65f6\u95f4\u64cd\u4f5c\u7684\u82e5\u5e72\u51fd\u6570\u3002\n/*\n  \u53d6\u64cd\u4f5c\u7cfb\u7edf\u7684\u65f6\u95f4\uff08\u7528\u5b57\u7b26\u4e32\u8868\u793a\uff09\u3002\n  strtime\uff1a\u7528\u4e8e\u5b58\u653e\u83b7\u53d6\u5230\u7684\u65f6\u95f4\u3002\n  timetvl\uff1a\u65f6\u95f4\u7684\u504f\u79fb\u91cf\uff0c\u5355\u4f4d\uff1a\u79d2\uff0c0\u662f\u7f3a\u7701\u503c\uff0c\u8868\u793a\u5f53\u524d\u65f6\u95f4\uff0c30\u8868\u793a\u5f53\u524d\u65f6\u95f430\u79d2\u4e4b\u540e\u7684\u65f6\u95f4\u70b9\uff0c-30\u8868\u793a\u5f53\u524d\u65f6\u95f430\u79d2\u4e4b\u524d\u7684\u65f6\u95f4\u70b9\u3002\n  fmt\uff1a\u8f93\u51fa\u65f6\u95f4\u7684\u683c\u5f0f\uff0cfmt\u6bcf\u90e8\u5206\u7684\u542b\u4e49\uff1ayyyy-\u5e74\u4efd\uff1bmm-\u6708\u4efd\uff1bdd-\u65e5\u671f\uff1bhh24-\u5c0f\u65f6\uff1bmi-\u5206\u949f\uff1bss-\u79d2\uff0c\n  \u7f3a\u7701\u662f\"yyyy-mm-dd hh24:mi:ss\"\uff0c\u76ee\u524d\u652f\u6301\u4ee5\u4e0b\u683c\u5f0f\uff1a\n  \"yyyy-mm-dd hh24:mi:ss\"\n  \"yyyymmddhh24miss\"\n  \"yyyy-mm-dd\"\n  \"yyyymmdd\"\n  \"hh24:mi:ss\"\n  \"hh24miss\"\n  \"hh24:mi\"\n  \"hh24mi\"\n  \"hh24\"\n  \"mi\"\n  \u6ce8\u610f\uff1a\n    1\uff09\u5c0f\u65f6\u7684\u8868\u793a\u65b9\u6cd5\u662fhh24\uff0c\u4e0d\u662fhh\uff0c\u8fd9\u4e48\u505a\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u4fdd\u6301\u4e0e\u6570\u636e\u5e93\u7684\u65f6\u95f4\u8868\u793a\u65b9\u6cd5\u4e00\u81f4\uff1b\n    2\uff09\u4ee5\u4e0a\u5217\u51fa\u4e86\u5e38\u7528\u7684\u65f6\u95f4\u683c\u5f0f\uff0c\u5982\u679c\u4e0d\u80fd\u6ee1\u8db3\u4f60\u5e94\u7528\u5f00\u53d1\u7684\u9700\u6c42\uff0c\u8bf7\u4fee\u6539\u6e90\u4ee3\u7801timetostr()\u51fd\u6570\u589e\u52a0\u66f4\u591a\u7684\u683c\u5f0f\u652f\u6301\uff1b\n    3\uff09\u8c03\u7528\u51fd\u6570\u7684\u65f6\u5019\uff0c\u5982\u679cfmt\u4e0e\u4e0a\u8ff0\u683c\u5f0f\u90fd\u5339\u914d\uff0cstrtime\u7684\u5185\u5bb9\u5c06\u4e3a\u7a7a\u3002\n    4\uff09\u65f6\u95f4\u7684\u5e74\u4efd\u662f\u56db\u4f4d\uff0c\u5176\u5b83\u7684\u53ef\u80fd\u662f\u4e00\u4f4d\u548c\u4e24\u4f4d\uff0c\u5982\u679c\u4e0d\u8db3\u4e24\u4f4d\uff0c\u5728\u524d\u9762\u88650\u3002\n*/\nstring&amp; ltime(string &amp;strtime,const string &amp;fmt=\"\",const int timetvl=0);\nchar *    ltime(char *strtime   ,const string &amp;fmt=\"\",const int timetvl=0);\n// \u4e3a\u4e86\u907f\u514d\u91cd\u8f7d\u7684\u5c90\u4e49\uff0c\u589e\u52a0ltime1()\u51fd\u6570\u3002\nstring    ltime1(const string &amp;fmt=\"\",const int timetvl=0);\n\n// \u628a\u6574\u6570\u8868\u793a\u7684\u65f6\u95f4\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\u8868\u793a\u7684\u65f6\u95f4\u3002\n// ttime\uff1a\u6574\u6570\u8868\u793a\u7684\u65f6\u95f4\u3002\n// strtime\uff1a\u5b57\u7b26\u4e32\u8868\u793a\u7684\u65f6\u95f4\u3002\n// fmt\uff1a\u8f93\u51fa\u5b57\u7b26\u4e32\u65f6\u95f4strtime\u7684\u683c\u5f0f\uff0c\u4e0eltime()\u51fd\u6570\u7684fmt\u53c2\u6570\u76f8\u540c\uff0c\u5982\u679cfmt\u7684\u683c\u5f0f\u4e0d\u6b63\u786e\uff0cstrtime\u5c06\u4e3a\u7a7a\u3002\nstring&amp; timetostr(const time_t ttime,string &amp;strtime,const string &amp;fmt=\"\");\nchar*     timetostr(const time_t ttime,char *strtime   ,const string &amp;fmt=\"\");\n// \u4e3a\u4e86\u907f\u514d\u91cd\u8f7d\u7684\u5c90\u4e49\uff0c\u589e\u52a0timetostr1()\u51fd\u6570\u3002\nstring    timetostr1(const time_t ttime,const string &amp;fmt=\"\");\n\n// \u628a\u5b57\u7b26\u4e32\u8868\u793a\u7684\u65f6\u95f4\u8f6c\u6362\u4e3a\u6574\u6570\u8868\u793a\u7684\u65f6\u95f4\u3002\n// strtime\uff1a\u5b57\u7b26\u4e32\u8868\u793a\u7684\u65f6\u95f4\uff0c\u683c\u5f0f\u4e0d\u9650\uff0c\u4f46\u4e00\u5b9a\u8981\u5305\u62ecyyyymmddhh24miss\uff0c\u4e00\u4e2a\u90fd\u4e0d\u80fd\u5c11\uff0c\u987a\u5e8f\u4e5f\u4e0d\u80fd\u53d8\u3002\n// \u8fd4\u56de\u503c\uff1a\u6574\u6570\u8868\u793a\u7684\u65f6\u95f4\uff0c\u5982\u679cstrtime\u7684\u683c\u5f0f\u4e0d\u6b63\u786e\uff0c\u8fd4\u56de-1\u3002\ntime_t strtotime(const string &amp;strtime);\n\n// \u628a\u5b57\u7b26\u4e32\u8868\u793a\u7684\u65f6\u95f4\u52a0\u4e0a\u4e00\u4e2a\u504f\u79fb\u7684\u79d2\u6570\u540e\u5f97\u5230\u4e00\u4e2a\u65b0\u7684\u5b57\u7b26\u4e32\u8868\u793a\u7684\u65f6\u95f4\u3002\n// in_stime\uff1a\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u683c\u5f0f\u7684\u65f6\u95f4\uff0c\u683c\u5f0f\u4e0d\u9650\uff0c\u4f46\u4e00\u5b9a\u8981\u5305\u62ecyyyymmddhh24miss\uff0c\u4e00\u4e2a\u90fd\u4e0d\u80fd\u5c11\uff0c\u987a\u5e8f\u4e5f\u4e0d\u80fd\u53d8\u3002\n// out_stime\uff1a\u8f93\u51fa\u7684\u5b57\u7b26\u4e32\u683c\u5f0f\u7684\u65f6\u95f4\u3002\n// timetvl\uff1a\u9700\u8981\u504f\u79fb\u7684\u79d2\u6570\uff0c\u6b63\u6570\u5f80\u540e\u504f\u79fb\uff0c\u8d1f\u6570\u5f80\u524d\u504f\u79fb\u3002\n// fmt\uff1a\u8f93\u51fa\u5b57\u7b26\u4e32\u65f6\u95f4out_stime\u7684\u683c\u5f0f\uff0c\u4e0eltime()\u51fd\u6570\u7684fmt\u53c2\u6570\u76f8\u540c\u3002\n// \u6ce8\u610f\uff1ain_stime\u548cout_stime\u53c2\u6570\u53ef\u4ee5\u662f\u540c\u4e00\u4e2a\u53d8\u91cf\u7684\u5730\u5740\uff0c\u5982\u679c\u8c03\u7528\u5931\u8d25\uff0cout_stime\u7684\u5185\u5bb9\u4f1a\u6e05\u7a7a\u3002\n// \u8fd4\u56de\u503c\uff1atrue-\u6210\u529f\uff0cfalse-\u5931\u8d25\uff0c\u5982\u679c\u8fd4\u56de\u5931\u8d25\uff0c\u53ef\u4ee5\u8ba4\u4e3a\u662fin_stime\u7684\u683c\u5f0f\u4e0d\u6b63\u786e\u3002\nbool addtime(const string &amp;in_stime,char *out_stime    ,const int timetvl,const string &amp;fmt=\"\");\nbool addtime(const string &amp;in_stime,string &amp;out_stime,const int timetvl,const string &amp;fmt=\"\");\n///////////////////////////////////// /////////////////////////////////////\n\n///////////////////////////////////// /////////////////////////////////////\n// \u8fd9\u662f\u4e00\u4e2a\u7cbe\u786e\u5230\u5fae\u79d2\u7684\u8ba1\u65f6\u5668\u3002\nclass ctimer\n{\nprivate:\n    struct timeval m_start;    // \u8ba1\u65f6\u5f00\u59cb\u7684\u65f6\u95f4\u70b9\u3002\n    struct timeval m_end;     // \u8ba1\u65f6\u7ed3\u675f\u7684\u65f6\u95f4\u70b9\u3002\npublic:\n    ctimer();          // \u6784\u9020\u51fd\u6570\u4e2d\u4f1a\u8c03\u7528start\u65b9\u6cd5\u3002\n\n    void start();     // \u5f00\u59cb\u8ba1\u65f6\u3002\n\n    // \u8ba1\u7b97\u5df2\u901d\u53bb\u7684\u65f6\u95f4\uff0c\u5355\u4f4d\uff1a\u79d2\uff0c\u5c0f\u6570\u70b9\u540e\u9762\u662f\u5fae\u79d2\u3002\n    // \u6bcf\u8c03\u7528\u4e00\u6b21\u672c\u65b9\u6cd5\u4e4b\u540e\uff0c\u81ea\u52a8\u8c03\u7528start\u65b9\u6cd5\u91cd\u65b0\u5f00\u59cb\u8ba1\u65f6\u3002\n    double elapsed();\n};\n///////////////////////////////////////////////////////////////////////////////////////////////////\n\n// \u6839\u636e\u7edd\u5bf9\u8def\u5f84\u7684\u6587\u4ef6\u540d\u6216\u76ee\u5f55\u540d\u9010\u7ea7\u7684\u521b\u5efa\u76ee\u5f55\u3002\n// pathorfilename\uff1a\u7edd\u5bf9\u8def\u5f84\u7684\u6587\u4ef6\u540d\u6216\u76ee\u5f55\u540d\u3002\n// bisfilename\uff1a\u6307\u5b9apathorfilename\u7684\u7c7b\u578b\uff0ctrue-pathorfilename\u662f\u6587\u4ef6\u540d\uff0c\u5426\u5219\u662f\u76ee\u5f55\u540d\uff0c\u7f3a\u7701\u503c\u4e3atrue\u3002\n// \u8fd4\u56de\u503c\uff1atrue-\u6210\u529f\uff0cfalse-\u5931\u8d25\uff0c\u5982\u679c\u8fd4\u56de\u5931\u8d25\uff0c\u539f\u56e0\u6709\u5927\u6982\u6709\u4e09\u79cd\u60c5\u51b5\uff1a\n// 1\uff09\u6743\u9650\u4e0d\u8db3\uff1b2\uff09pathorfilename\u53c2\u6570\u4e0d\u662f\u5408\u6cd5\u7684\u6587\u4ef6\u540d\u6216\u76ee\u5f55\u540d\uff1b3\uff09\u78c1\u76d8\u7a7a\u95f4\u4e0d\u8db3\u3002\nbool newdir(const string &amp;pathorfilename,bool bisfilename=true);\n\n///////////////////////////////////// /////////////////////////////////////\n// \u6587\u4ef6\u64cd\u4f5c\u76f8\u5173\u7684\u51fd\u6570\n\n// \u91cd\u547d\u540d\u6587\u4ef6\uff0c\u7c7b\u4f3cLinux\u7cfb\u7edf\u7684mv\u547d\u4ee4\u3002\n// srcfilename\uff1a\u539f\u6587\u4ef6\u540d\uff0c\u5efa\u8bae\u91c7\u7528\u7edd\u5bf9\u8def\u5f84\u7684\u6587\u4ef6\u540d\u3002\n// dstfilename\uff1a\u76ee\u6807\u6587\u4ef6\u540d\uff0c\u5efa\u8bae\u91c7\u7528\u7edd\u5bf9\u8def\u5f84\u7684\u6587\u4ef6\u540d\u3002\n// \u8fd4\u56de\u503c\uff1atrue-\u6210\u529f\uff1bfalse-\u5931\u8d25\uff0c\u5931\u8d25\u7684\u4e3b\u8981\u539f\u56e0\u662f\u6743\u9650\u4e0d\u8db3\u6216\u78c1\u76d8\u7a7a\u95f4\u4e0d\u591f\uff0c\u5982\u679c\u539f\u6587\u4ef6\u548c\u76ee\u6807\u6587\u4ef6\u4e0d\u5728\u540c\u4e00\u4e2a\u78c1\u76d8\u5206\u533a\uff0c\u91cd\u547d\u540d\u4e5f\u53ef\u80fd\u5931\u8d25\u3002\n// \u6ce8\u610f\uff0c\u5728\u91cd\u547d\u540d\u6587\u4ef6\u4e4b\u524d\uff0c\u4f1a\u81ea\u52a8\u521b\u5efadstfilename\u53c2\u6570\u4e2d\u5305\u542b\u7684\u76ee\u5f55\u3002\n// \u5728\u5e94\u7528\u5f00\u53d1\u4e2d\uff0c\u53ef\u4ee5\u7528renamefile()\u51fd\u6570\u4ee3\u66ffrename()\u5e93\u51fd\u6570\u3002\nbool renamefile(const string &amp;srcfilename,const string &amp;dstfilename);\n\n// \u590d\u5236\u6587\u4ef6\uff0c\u7c7b\u4f3cLinux\u7cfb\u7edf\u7684cp\u547d\u4ee4\u3002\n// srcfilename\uff1a\u539f\u6587\u4ef6\u540d\uff0c\u5efa\u8bae\u91c7\u7528\u7edd\u5bf9\u8def\u5f84\u7684\u6587\u4ef6\u540d\u3002\n// dstfilename\uff1a\u76ee\u6807\u6587\u4ef6\u540d\uff0c\u5efa\u8bae\u91c7\u7528\u7edd\u5bf9\u8def\u5f84\u7684\u6587\u4ef6\u540d\u3002\n// \u8fd4\u56de\u503c\uff1atrue-\u6210\u529f\uff1bfalse-\u5931\u8d25\uff0c\u5931\u8d25\u7684\u4e3b\u8981\u539f\u56e0\u662f\u6743\u9650\u4e0d\u8db3\u6216\u78c1\u76d8\u7a7a\u95f4\u4e0d\u591f\u3002\n// \u6ce8\u610f\uff1a\n// 1\uff09\u5728\u590d\u5236\u6587\u4ef6\u4e4b\u524d\uff0c\u4f1a\u81ea\u52a8\u521b\u5efadstfilename\u53c2\u6570\u4e2d\u7684\u76ee\u5f55\u540d\u3002\n// 2\uff09\u590d\u5236\u6587\u4ef6\u7684\u8fc7\u7a0b\u4e2d\uff0c\u91c7\u7528\u4e34\u65f6\u6587\u4ef6\u547d\u540d\u7684\u65b9\u6cd5\uff0c\u590d\u5236\u5b8c\u6210\u540e\u518d\u6539\u540d\u4e3adstfilename\uff0c\u907f\u514d\u4e2d\u95f4\u72b6\u6001\u7684\u6587\u4ef6\u88ab\u8bfb\u53d6\u3002\n// 3\uff09\u590d\u5236\u540e\u7684\u6587\u4ef6\u7684\u65f6\u95f4\u4e0e\u539f\u6587\u4ef6\u76f8\u540c\uff0c\u8fd9\u4e00\u70b9\u4e0eLinux\u7cfb\u7edfcp\u547d\u4ee4\u4e0d\u540c\u3002\nbool copyfile(const string &amp;srcfilename,const string &amp;dstfilename);\n\n// \u83b7\u53d6\u6587\u4ef6\u7684\u5927\u5c0f\u3002\n// filename\uff1a\u5f85\u83b7\u53d6\u7684\u6587\u4ef6\u540d\uff0c\u5efa\u8bae\u91c7\u7528\u7edd\u5bf9\u8def\u5f84\u7684\u6587\u4ef6\u540d\u3002\n// \u8fd4\u56de\u503c\uff1a\u5982\u679c\u6587\u4ef6\u4e0d\u5b58\u5728\u6216\u6ca1\u6709\u8bbf\u95ee\u6743\u9650\uff0c\u8fd4\u56de-1\uff0c\u6210\u529f\u8fd4\u56de\u6587\u4ef6\u7684\u5927\u5c0f\uff0c\u5355\u4f4d\u662f\u5b57\u8282\u3002\nint filesize(const string &amp;filename);\n\n// \u83b7\u53d6\u6587\u4ef6\u7684\u65f6\u95f4\u3002\n// filename\uff1a\u5f85\u83b7\u53d6\u7684\u6587\u4ef6\u540d\uff0c\u5efa\u8bae\u91c7\u7528\u7edd\u5bf9\u8def\u5f84\u7684\u6587\u4ef6\u540d\u3002\n// mtime\uff1a\u7528\u4e8e\u5b58\u653e\u6587\u4ef6\u7684\u65f6\u95f4\uff0c\u5373stat\u7ed3\u6784\u4f53\u7684st_mtime\u3002\n// fmt\uff1a\u8bbe\u7f6e\u65f6\u95f4\u7684\u8f93\u51fa\u683c\u5f0f\uff0c\u4e0eltime()\u51fd\u6570\u76f8\u540c\uff0c\u4f46\u7f3a\u7701\u662f\"yyyymmddhh24miss\"\u3002\n// \u8fd4\u56de\u503c\uff1a\u5982\u679c\u6587\u4ef6\u4e0d\u5b58\u5728\u6216\u6ca1\u6709\u8bbf\u95ee\u6743\u9650\uff0c\u8fd4\u56defalse\uff0c\u6210\u529f\u8fd4\u56detrue\u3002\nbool filemtime(const string &amp;filename,char *mtime    ,const string &amp;fmt=\"yyyymmddhh24miss\");\nbool filemtime(const string &amp;filename,string &amp;mtime,const string &amp;fmt=\"yyyymmddhh24miss\");\n\n// \u91cd\u7f6e\u6587\u4ef6\u7684\u4fee\u6539\u65f6\u95f4\u5c5e\u6027\u3002\n// filename\uff1a\u5f85\u91cd\u7f6e\u7684\u6587\u4ef6\u540d\uff0c\u5efa\u8bae\u91c7\u7528\u7edd\u5bf9\u8def\u5f84\u7684\u6587\u4ef6\u540d\u3002\n// mtime\uff1a\u5b57\u7b26\u4e32\u8868\u793a\u7684\u65f6\u95f4\uff0c\u683c\u5f0f\u4e0d\u9650\uff0c\u4f46\u4e00\u5b9a\u8981\u5305\u62ecyyyymmddhh24miss\uff0c\u4e00\u4e2a\u90fd\u4e0d\u80fd\u5c11\uff0c\u987a\u5e8f\u4e5f\u4e0d\u80fd\u53d8\u3002\n// \u8fd4\u56de\u503c\uff1atrue-\u6210\u529f\uff1bfalse-\u5931\u8d25\uff0c\u5931\u8d25\u7684\u539f\u56e0\u4fdd\u5b58\u5728errno\u4e2d\u3002\nbool setmtime(const string &amp;filename,const string &amp;mtime);\n///////////////////////////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////// /////////////////////////////////////\n// \u83b7\u53d6\u67d0\u76ee\u5f55\u53ca\u5176\u5b50\u76ee\u5f55\u4e2d\u7684\u6587\u4ef6\u5217\u8868\u7684\u7c7b\u3002\nclass cdir\n{\nprivate:\n    vector&lt;string&gt; m_filelist;  // \u5b58\u653e\u6587\u4ef6\u5217\u8868\u7684\u5bb9\u5668\uff08\u7edd\u5bf9\u8def\u5f84\u7684\u6587\u4ef6\u540d\uff09\u3002\n    int m_pos;                          // \u4ece\u6587\u4ef6\u5217\u8868m_filelist\u4e2d\u5df2\u8bfb\u53d6\u6587\u4ef6\u7684\u4f4d\u7f6e\u3002\n    string m_fmt;                     // \u6587\u4ef6\u65f6\u95f4\u683c\u5f0f\uff0c\u7f3a\u7701\"yyyymmddhh24miss\"\u3002\n\n    cdir(const cdir &amp;) = delete;                      // \u7981\u7528\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u3002\n    cdir &amp;operator=(const cdir &amp;) = delete;  // \u7981\u7528\u8d4b\u503c\u51fd\u6570\u3002\npublic:\n    // /project/public/_public.h\n    string m_dirname;        // \u76ee\u5f55\u540d\uff0c\u4f8b\u5982\uff1a/project/public\n    string m_filename;       // \u6587\u4ef6\u540d\uff0c\u4e0d\u5305\u62ec\u76ee\u5f55\u540d\uff0c\u4f8b\u5982\uff1a_public.h\n    string m_ffilename;      // \u7edd\u5bf9\u8def\u5f84\u7684\u6587\u4ef6\uff0c\u4f8b\u5982\uff1a/project/public/_public.h\n    int      m_filesize;          // \u6587\u4ef6\u7684\u5927\u5c0f\uff0c\u5355\u4f4d\uff1a\u5b57\u8282\u3002\n    string m_mtime;           // \u6587\u4ef6\u6700\u540e\u4e00\u6b21\u88ab\u4fee\u6539\u7684\u65f6\u95f4\uff0c\u5373stat\u7ed3\u6784\u4f53\u7684st_mtime\u6210\u5458\u3002\n    string m_ctime;            // \u6587\u4ef6\u751f\u6210\u7684\u65f6\u95f4\uff0c\u5373stat\u7ed3\u6784\u4f53\u7684st_ctime\u6210\u5458\u3002\n    string m_atime;            // \u6587\u4ef6\u6700\u540e\u4e00\u6b21\u88ab\u8bbf\u95ee\u7684\u65f6\u95f4\uff0c\u5373stat\u7ed3\u6784\u4f53\u7684st_atime\u6210\u5458\u3002\n\n    cdir():m_pos(0),m_fmt(\"yyyymmddhh24miss\") {}  // \u6784\u9020\u51fd\u6570\u3002\n\n    // \u8bbe\u7f6e\u6587\u4ef6\u65f6\u95f4\u7684\u683c\u5f0f\uff0c\u652f\u6301\"yyyy-mm-dd hh24:mi:ss\"\u548c\"yyyymmddhh24miss\"\u4e24\u79cd\uff0c\u7f3a\u7701\u662f\u540e\u8005\u3002\n    void setfmt(const string &amp;fmt);\n\n    // \u6253\u5f00\u76ee\u5f55\uff0c\u83b7\u53d6\u76ee\u5f55\u4e2d\u6587\u4ef6\u7684\u5217\u8868\uff0c\u5b58\u653e\u5728m_filelist\u5bb9\u5668\u4e2d\u3002\n    // dirname\uff0c\u76ee\u5f55\u540d\uff0c\u91c7\u7528\u7edd\u5bf9\u8def\u5f84\uff0c\u5982/tmp/root\u3002\n    // rules\uff0c\u6587\u4ef6\u540d\u7684\u5339\u914d\u89c4\u5219\uff0c\u4e0d\u5339\u914d\u7684\u6587\u4ef6\u5c06\u88ab\u5ffd\u7565\u3002\n    // maxfiles\uff0c\u672c\u6b21\u83b7\u53d6\u6587\u4ef6\u7684\u6700\u5927\u6570\u91cf\uff0c\u7f3a\u7701\u503c\u4e3a10000\u4e2a\uff0c\u5982\u679c\u6587\u4ef6\u592a\u591a\uff0c\u53ef\u80fd\u6d88\u8017\u592a\u591a\u7684\u5185\u5b58\u3002\n    // bandchild\uff0c\u662f\u5426\u6253\u5f00\u5404\u7ea7\u5b50\u76ee\u5f55\uff0c\u7f3a\u7701\u503c\u4e3afalse-\u4e0d\u6253\u5f00\u5b50\u76ee\u5f55\u3002\n    // bsort\uff0c\u662f\u5426\u6309\u6587\u4ef6\u540d\u6392\u5e8f\uff0c\u7f3a\u7701\u503c\u4e3afalse-\u4e0d\u6392\u5e8f\u3002\n    // \u8fd4\u56de\u503c\uff1atrue-\u6210\u529f\uff0cfalse-\u5931\u8d25\u3002\n    bool opendir(const string &amp;dirname,const string &amp;rules,const int maxfiles=10000,const bool bandchild=false,bool bsort=false);\n\nprivate:\n    // \u8fd9\u662f\u4e00\u4e2a\u9012\u5f52\u51fd\u6570\uff0c\u88abopendir()\u7684\u8c03\u7528\uff0c\u5728cdir\u7c7b\u7684\u5916\u90e8\u4e0d\u9700\u8981\u8c03\u7528\u5b83\u3002\n    bool _opendir(const string &amp;dirname,const string &amp;rules,const int maxfiles,const bool bandchild);\n\npublic:\n    // \u4ecem_filelist\u5bb9\u5668\u4e2d\u83b7\u53d6\u4e00\u6761\u8bb0\u5f55\uff08\u6587\u4ef6\u540d\uff09\uff0c\u540c\u65f6\u83b7\u53d6\u8be5\u6587\u4ef6\u7684\u5927\u5c0f\u3001\u4fee\u6539\u65f6\u95f4\u7b49\u4fe1\u606f\u3002\n    // \u8c03\u7528opendir\u65b9\u6cd5\u65f6\uff0cm_filelist\u5bb9\u5668\u88ab\u6e05\u7a7a\uff0cm_pos\u5f52\u96f6\uff0c\u6bcf\u8c03\u7528\u4e00\u6b21readdir\u65b9\u6cd5m_pos\u52a01\u3002\n    // \u5f53m_pos\u5c0f\u4e8em_filelist.size()\uff0c\u8fd4\u56detrue\uff0c\u5426\u5219\u8fd4\u56defalse\u3002\n    bool readdir();\n\n    unsigned int size() { return m_filelist.size(); }\n\n    ~cdir();  // \u6790\u6784\u51fd\u6570\u3002\n};\n///////////////////////////////////// /////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////////////////////////\n// \u5199\u6587\u4ef6\u7684\u7c7b\u3002\nclass cofile  // class out file\n{\nprivate:\n    ofstream fout;                  // \u5199\u5165\u6587\u4ef6\u7684\u5bf9\u8c61\u3002\n    string   m_filename;         // \u6587\u4ef6\u540d\uff0c\u5efa\u8bae\u91c7\u7528\u7edd\u5bf9\u8def\u5f84\u3002\n    string   m_filenametmp;  // \u4e34\u65f6\u6587\u4ef6\u540d\uff0c\u5728m_filename\u540e\u9762\u52a0\".tmp\"\u3002\npublic:\n    cofile() {}\n    bool isopen() const { return fout.is_open(); }     // \u6587\u4ef6\u662f\u5426\u5df2\u6253\u5f00\u3002\n\n    // \u6253\u5f00\u6587\u4ef6\u3002\n    // filename\uff0c\u5f85\u6253\u5f00\u7684\u6587\u4ef6\u540d\u3002\n    // btmp\uff0c\u662f\u5426\u91c7\u7528\u4e34\u65f6\u6587\u4ef6\u7684\u65b9\u6848\u3002\n    // mode\uff0c\u6253\u5f00\u6587\u4ef6\u7684\u6a21\u5f0f\u3002\n    // benbuffer\uff0c\u662f\u5426\u542f\u7528\u6587\u4ef6\u7f13\u51b2\u533a\u3002\n     bool open(const string &amp;filename,const bool btmp=true,const ios::openmode mode=ios::out,const bool benbuffer=true);\n\n    // \u628a\u6570\u636e\u4ee5\u6587\u672c\u7684\u65b9\u5f0f\u683c\u5f0f\u5316\u8f93\u51fa\u5230\u6587\u4ef6\u3002\n    template&lt; typename... Args &gt;\n    bool writeline(const char* fmt, Args... args) \n    {\n        if (fout.is_open()==false) return false;\n\n        fout &lt;&lt; sformat(fmt,args...);\n\n        return fout.good();\n    }\n\n    // \u91cd\u8f7d&lt;&lt;\u8fd0\u7b97\u7b26\uff0c\u628a\u6570\u636e\u4ee5\u6587\u672c\u7684\u65b9\u5f0f\u8f93\u51fa\u5230\u6587\u4ef6\u3002\n    // \u6ce8\u610f\uff1a\u6362\u884c\u53ea\u80fd\u7528\\n\uff0c\u4e0d\u80fd\u7528endl\u3002\n    template&lt;typename T&gt;\n    cofile&amp; operator&lt;&lt;(const T &amp;value)\n    {\n        fout &lt;&lt; value; return *this;\n    }\n\n    // \u628a\u4e8c\u8fdb\u5236\u6570\u636e\u5199\u5165\u6587\u4ef6\u3002\n    bool write(void *buf,int bufsize);\n\n    // \u5173\u95ed\u6587\u4ef6\uff0c\u5e76\u4e14\u628a\u4e34\u65f6\u6587\u4ef6\u540d\u6539\u4e3a\u6b63\u5f0f\u6587\u4ef6\u540d\u3002\n    bool closeandrename();\n\n    // \u5173\u95ed\u6587\u4ef6\uff0c\u5982\u679c\u6709\u4e34\u65f6\u6587\u4ef6\uff0c\u5219\u5220\u9664\u5b83\u3002\n    void close();\n\n    ~cofile() { close(); };\n};\n///////////////////////////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////////////////////////\n// \u8bfb\u53d6\u6587\u4ef6\u7684\u7c7b\u3002\nclass cifile    // class in file\n{\nprivate:\n    ifstream fin;                     // \u8bfb\u53d6\u6587\u4ef6\u7684\u5bf9\u8c61\u3002\n    string   m_filename;         // \u6587\u4ef6\u540d\uff0c\u5efa\u8bae\u91c7\u7528\u7edd\u5bf9\u8def\u5f84\u3002\npublic:\n    cifile() {}\n\n    // \u5224\u65ad\u6587\u4ef6\u662f\u5426\u5df2\u6253\u5f00\u3002\n    bool isopen() const { return fin.is_open(); }\n\n    // \u6253\u5f00\u6587\u4ef6\u3002\n    // filename\uff0c\u5f85\u6253\u5f00\u7684\u6587\u4ef6\u540d\u3002\n    // mode\uff0c\u6253\u5f00\u6587\u4ef6\u7684\u6a21\u5f0f\u3002\n    bool open(const string &amp;filename,const ios::openmode mode=ios::in);\n\n    // \u4ee5\u884c\u7684\u65b9\u5f0f\u8bfb\u53d6\u6587\u672c\u6587\u4ef6\uff0cendbz\u6307\u5b9a\u884c\u7684\u7ed3\u5c3e\u6807\u5fd7\uff0c\u7f3a\u7701\u4e3a\u7a7a\uff0c\u6ca1\u6709\u7ed3\u5c3e\u6807\u5fd7\u3002\n    bool readline(string &amp;buf,const string&amp; endbz=\"\");\n\n    // \u8bfb\u53d6\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u8fd4\u56de\u5b9e\u9645\u8bfb\u53d6\u5230\u7684\u5b57\u8282\u6570\u3002\n    int read(void *buf,const int bufsize);\n\n    // \u5173\u95ed\u5e76\u5220\u9664\u6587\u4ef6\u3002\n    bool closeandremove();\n\n    // \u53ea\u5173\u95ed\u6587\u4ef6\u3002\n    void close();\n\n    ~cifile() { close(); }\n};\n///////////////////////////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////////////////////////\n// \u81ea\u65cb\u9501\u3002\nclass spinlock_mutex\n{\nprivate:\n    atomic_flag flag;\n\n    spinlock_mutex(const spinlock_mutex&amp;) = delete;\n    spinlock_mutex&amp; operator=(const spinlock_mutex) = delete;\npublic:\n    spinlock_mutex() \n    {\n        flag.clear();\n    }\n    void lock()           // \u52a0\u9501\u3002\n    {\n        while (flag.test_and_set())\n            ;\n    }\n    void unlock()      // \u89e3\u9501\u3002\n    {\n        flag.clear();\n    }\n};\n\n///////////////////////////////////// /////////////////////////////////////\n// \u65e5\u5fd7\u6587\u4ef6\u3002\nclass clogfile\n{\n    ofstream fout;                       // \u65e5\u5fd7\u6587\u4ef6\u5bf9\u8c61\u3002\n    string   m_filename;              // \u65e5\u5fd7\u6587\u4ef6\u540d\uff0c\u5efa\u8bae\u91c7\u7528\u7edd\u5bf9\u8def\u5f84\u3002\n    ios::openmode m_mode;      // \u65e5\u5fd7\u6587\u4ef6\u7684\u6253\u5f00\u6a21\u5f0f\u3002\n    bool     m_backup;                // \u662f\u5426\u81ea\u52a8\u5207\u6362\u65e5\u5fd7\u3002\n    int        m_maxsize;               // \u5f53\u65e5\u5fd7\u6587\u4ef6\u7684\u5927\u5c0f\u8d85\u8fc7\u672c\u53c2\u6570\u65f6\uff0c\u81ea\u52a8\u5207\u6362\u65e5\u5fd7\u3002\n    bool     m_enbuffer;              // \u662f\u5426\u542f\u7528\u6587\u4ef6\u7f13\u51b2\u533a\u3002\n    spinlock_mutex m_splock;    // \u81ea\u65cb\u9501\uff0c\u7528\u4e8e\u591a\u7ebf\u7a0b\u7a0b\u5e8f\u4e2d\u7ed9\u5199\u65e5\u5fd7\u7684\u64cd\u4f5c\u52a0\u9501\u3002\n\npublic:\n    // \u6784\u9020\u51fd\u6570\uff0c\u65e5\u5fd7\u6587\u4ef6\u7684\u5927\u5c0f\u7f3a\u7701100M\u3002\n    clogfile(int maxsize=100):m_maxsize(maxsize){}\n\n    // \u6253\u5f00\u65e5\u5fd7\u6587\u4ef6\u3002\n    // filename\uff1a\u65e5\u5fd7\u6587\u4ef6\u540d\uff0c\u5efa\u8bae\u91c7\u7528\u7edd\u5bf9\u8def\u5f84\uff0c\u5982\u679c\u6587\u4ef6\u540d\u4e2d\u7684\u76ee\u5f55\u4e0d\u5b58\u5728\uff0c\u5c31\u5148\u521b\u5efa\u76ee\u5f55\u3002\n    // openmode\uff1a\u65e5\u5fd7\u6587\u4ef6\u7684\u6253\u5f00\u6a21\u5f0f\uff0c\u7f3a\u7701\u503c\u662fios::app\u3002\n    // bbackup\uff1a\u662f\u5426\u81ea\u52a8\u5207\u6362\uff08\u5907\u4efd\uff09\uff0ctrue-\u5207\u6362\uff0cfalse-\u4e0d\u5207\u6362\uff0c\u5728\u591a\u8fdb\u7a0b\u7684\u670d\u52a1\u7a0b\u5e8f\u4e2d\uff0c\u5982\u679c\u591a\u4e2a\u8fdb\u7a0b\u5171\u7528\u4e00\u4e2a\u65e5\u5fd7\u6587\u4ef6\uff0cbbackup\u5fc5\u987b\u4e3afalse\u3002\n    // benbuffer\uff1a\u662f\u5426\u542f\u7528\u6587\u4ef6\u7f13\u51b2\u673a\u5236\uff0ctrue-\u542f\u7528\uff0cfalse-\u4e0d\u542f\u7528\uff0c\u5982\u679c\u542f\u7528\u7f13\u51b2\u533a\uff0c\u90a3\u4e48\u5199\u8fdb\u65e5\u5fd7\u6587\u4ef6\u4e2d\u7684\u5185\u5bb9\u4e0d\u4f1a\u7acb\u5373\u5199\u5165\u6587\u4ef6\uff0c\u7f3a\u7701\u662f\u4e0d\u542f\u7528\u3002\n    // \u6ce8\u610f\uff0c\u5728\u591a\u8fdb\u7a0b\u7684\u7a0b\u5e8f\u4e2d\uff0c\u591a\u4e2a\u8fdb\u7a0b\u5f80\u540c\u4e00\u65e5\u5fd7\u6587\u4ef6\u5199\u5165\u5927\u91cf\u7684\u65e5\u5fd7\u65f6\uff0c\u53ef\u80fd\u4f1a\u51fa\u73b0\u5c0f\u6df7\u4e71\uff0c\u4f46\u662f\uff0c\u591a\u7ebf\u7a0b\u4e0d\u4f1a\u3002\n    // 1\uff09\u591a\u4e2a\u8fdb\u7a0b\u5f80\u540c\u4e00\u65e5\u5fd7\u6587\u4ef6\u5199\u5165\u5927\u91cf\u7684\u65e5\u5fd7\u65f6\uff0c\u53ef\u80fd\u4f1a\u51fa\u73b0\u5c0f\u6df7\u4e71\uff0c\u8fd9\u4e2a\u95ee\u9898\u5e76\u4e0d\u4e25\u91cd\uff0c\u53ef\u4ee5\u5bb9\u5fcd\uff1b\n    // 2\uff09\u53ea\u6709\u540c\u65f6\u5199\u5927\u91cf\u65e5\u5fd7\u65f6\u624d\u4f1a\u51fa\u73b0\u6df7\u4e71\uff0c\u5728\u5b9e\u9645\u5f00\u53d1\u4e2d\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0d\u591a\u89c1\u3002\n    // 3\uff09\u5982\u679c\u4e1a\u52a1\u65e0\u6cd5\u5bb9\u5fcd\uff0c\u53ef\u4ee5\u7528\u4fe1\u53f7\u91cf\u52a0\u9501\u3002\n    bool open(const string &amp;filename,const ios::openmode mode=ios::app,const bool bbackup=true,const bool benbuffer=false);\n\n    // \u628a\u65e5\u5fd7\u5185\u5bb9\u4ee5\u6587\u672c\u7684\u65b9\u5f0f\u683c\u5f0f\u5316\u8f93\u51fa\u5230\u65e5\u5fd7\u6587\u4ef6\uff0c\u5e76\u4e14\uff0c\u5728\u65e5\u5fd7\u5185\u5bb9\u524d\u9762\u5199\u5165\u65f6\u95f4\u3002\n    template&lt; typename... Args &gt;\n    bool write(const char* fmt, Args... args) \n    {\n        if (fout.is_open()==false) return false;\n\n        backup();                   // \u5224\u65ad\u662f\u5426\u9700\u8981\u5207\u6362\u65e5\u5fd7\u6587\u4ef6\u3002\n\n        m_splock.lock();        // \u52a0\u9501\u3002\n        fout &lt;&lt; ltime1() &lt;&lt; \" \" &lt;&lt; sformat(fmt,args...);      // \u628a\u5f53\u524d\u65f6\u95f4\u548c\u65e5\u5fd7\u5185\u5bb9\u5199\u5165\u65e5\u5fd7\u6587\u4ef6\u3002\n        m_splock.unlock();    // \u89e3\u9501\u3002\n\n        return fout.good();\n    }\n\n    // \u91cd\u8f7d&lt;&lt;\u8fd0\u7b97\u7b26\uff0c\u628a\u65e5\u5fd7\u5185\u5bb9\u4ee5\u6587\u672c\u7684\u65b9\u5f0f\u8f93\u51fa\u5230\u65e5\u5fd7\u6587\u4ef6\uff0c\u4e0d\u4f1a\u5728\u65e5\u5fd7\u5185\u5bb9\u524d\u9762\u5199\u65f6\u95f4\u3002\n    // \u6ce8\u610f\uff1a\u5185\u5bb9\u6362\u884c\u7528\\n\uff0c\u4e0d\u80fd\u7528endl\u3002\n    template&lt;typename T&gt;\n    clogfile&amp; operator&lt;&lt;(const T &amp;value)\n    {\n        m_splock.lock();\n        fout &lt;&lt; value; \n        m_splock.unlock();\n\n        return *this;\n    }\n\nprivate:\n    // \u5982\u679c\u65e5\u5fd7\u6587\u4ef6\u7684\u5927\u5c0f\u8d85\u8fc7m_maxsize\u7684\u503c\uff0c\u5c31\u628a\u5f53\u524d\u7684\u65e5\u5fd7\u6587\u4ef6\u540d\u6539\u4e3a\u5386\u53f2\u65e5\u5fd7\u6587\u4ef6\u540d\uff0c\u518d\u521b\u5efa\u65b0\u7684\u5f53\u524d\u65e5\u5fd7\u6587\u4ef6\u3002\n    // \u5907\u4efd\u540e\u7684\u6587\u4ef6\u4f1a\u5728\u65e5\u5fd7\u6587\u4ef6\u540d\u540e\u52a0\u4e0a\u65e5\u671f\u65f6\u95f4\uff0c\u5982/tmp/log/filetodb.log.20200101123025\u3002\n    // \u6ce8\u610f\uff0c\u5728\u591a\u8fdb\u7a0b\u7684\u7a0b\u5e8f\u4e2d\uff0c\u65e5\u5fd7\u6587\u4ef6\u4e0d\u53ef\u5207\u6362\uff0c\u591a\u7ebf\u7684\u7a0b\u5e8f\u4e2d\uff0c\u65e5\u5fd7\u6587\u4ef6\u53ef\u4ee5\u5207\u6362\u3002\n    bool backup();\npublic:\n    void close() { fout.close(); }\n\n    ~clogfile() { close(); };\n};\n///////////////////////////////////////////////////////////////////////////////////////////////////\n\n///////////////////////////////////////////////////////////////////////////////////////////////////\n// \u4ee5\u4e0b\u662fsocket\u901a\u8baf\u7684\u51fd\u6570\u548c\u7c7b\n\n// socket\u901a\u8baf\u7684\u5ba2\u6237\u7aef\u7c7b\nclass ctcpclient\n{\nprivate:\n    int  m_connfd;    // \u5ba2\u6237\u7aef\u7684socket.\n    string m_ip;        // \u670d\u52a1\u7aef\u7684ip\u5730\u5740\u3002\n    int  m_port;        // \u670d\u52a1\u7aef\u901a\u8baf\u7684\u7aef\u53e3\u3002\npublic:\n    ctcpclient(): m_connfd(-1),m_port(0) { }  // \u6784\u9020\u51fd\u6570\u3002\n\n    // \u5411\u670d\u52a1\u7aef\u53d1\u8d77\u8fde\u63a5\u8bf7\u6c42\u3002\n    // ip\uff1a\u670d\u52a1\u7aef\u7684ip\u5730\u5740\u3002\n    // port\uff1a\u670d\u52a1\u7aef\u901a\u8baf\u7684\u7aef\u53e3\u3002\n    // \u8fd4\u56de\u503c\uff1atrue-\u6210\u529f\uff1bfalse-\u5931\u8d25\u3002\n    bool connect(const string &amp;ip,const int port);\n\n    // \u63a5\u6536\u5bf9\u7aef\u53d1\u9001\u8fc7\u6765\u7684\u6570\u636e\u3002\n    // buffer\uff1a\u5b58\u653e\u63a5\u6536\u6570\u636e\u7f13\u51b2\u533a\u3002\n    // ibuflen: \u6253\u7b97\u63a5\u6536\u6570\u636e\u7684\u5927\u5c0f\u3002\n    // itimeout\uff1a\u7b49\u5f85\u6570\u636e\u7684\u8d85\u65f6\u65f6\u95f4\uff08\u79d2\uff09\uff1a-1-\u4e0d\u7b49\u5f85\uff1b0-\u65e0\u9650\u7b49\u5f85\uff1b&gt;0-\u7b49\u5f85\u7684\u79d2\u6570\u3002\n    // \u8fd4\u56de\u503c\uff1atrue-\u6210\u529f\uff1bfalse-\u5931\u8d25\uff0c\u5931\u8d25\u6709\u4e24\u79cd\u60c5\u51b5\uff1a1\uff09\u7b49\u5f85\u8d85\u65f6\uff1b2\uff09socket\u8fde\u63a5\u5df2\u4e0d\u53ef\u7528\u3002\n    bool read(string &amp;buffer,const int itimeout=0);                           // \u63a5\u6536\u6587\u672c\u6570\u636e\u3002\n    bool read(void *buffer,const int ibuflen,const int itimeout=0);   // \u63a5\u6536\u4e8c\u8fdb\u5236\u6570\u636e\u3002\n\n    // \u5411\u5bf9\u7aef\u53d1\u9001\u6570\u636e\u3002\n    // buffer\uff1a\u5f85\u53d1\u9001\u6570\u636e\u7f13\u51b2\u533a\u3002\n    // ibuflen\uff1a\u5f85\u53d1\u9001\u6570\u636e\u7684\u5927\u5c0f\u3002\n    // \u8fd4\u56de\u503c\uff1atrue-\u6210\u529f\uff1bfalse-\u5931\u8d25\uff0c\u5982\u679c\u5931\u8d25\uff0c\u8868\u793asocket\u8fde\u63a5\u5df2\u4e0d\u53ef\u7528\u3002\n    bool write(const string &amp;buffer);                          // \u53d1\u9001\u6587\u672c\u6570\u636e\u3002\n    bool write(const void *buffer,const int ibuflen);   // \u53d1\u9001\u4e8c\u8fdb\u5236\u6570\u636e\u3002\n\n    // \u65ad\u5f00\u4e0e\u670d\u52a1\u7aef\u7684\u8fde\u63a5\n    void close();\n\n    ~ctcpclient();  // \u6790\u6784\u51fd\u6570\u81ea\u52a8\u5173\u95edsocket\uff0c\u91ca\u653e\u8d44\u6e90\u3002\n};\n\n// socket\u901a\u8baf\u7684\u670d\u52a1\u7aef\u7c7b\nclass ctcpserver\n{\nprivate:\n    int m_socklen;                                // \u7ed3\u6784\u4f53struct sockaddr_in\u7684\u5927\u5c0f\u3002\n    struct sockaddr_in m_clientaddr;   // \u5ba2\u6237\u7aef\u7684\u5730\u5740\u4fe1\u606f\u3002\n    struct sockaddr_in m_servaddr;     // \u670d\u52a1\u7aef\u7684\u5730\u5740\u4fe1\u606f\u3002\n    int  m_listenfd;                               // \u670d\u52a1\u7aef\u7528\u4e8e\u76d1\u542c\u7684socket\u3002\n    int  m_connfd;                                // \u5ba2\u6237\u7aef\u8fde\u63a5\u4e0a\u6765\u7684socket\u3002\npublic:\n    ctcpserver():m_listenfd(-1),m_connfd(-1) {}  // \u6784\u9020\u51fd\u6570\u3002\n\n    // \u670d\u52a1\u7aef\u521d\u59cb\u5316\u3002\n    // port\uff1a\u6307\u5b9a\u670d\u52a1\u7aef\u7528\u4e8e\u76d1\u542c\u7684\u7aef\u53e3\u3002\n    // \u8fd4\u56de\u503c\uff1atrue-\u6210\u529f\uff1bfalse-\u5931\u8d25\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u53ea\u8981port\u8bbe\u7f6e\u6b63\u786e\uff0c\u6ca1\u6709\u88ab\u5360\u7528\uff0c\u521d\u59cb\u5316\u90fd\u4f1a\u6210\u529f\u3002\n    bool initserver(const unsigned int port,const int backlog=5); \n\n    // \u4ece\u5df2\u8fde\u63a5\u961f\u5217\u4e2d\u83b7\u53d6\u4e00\u4e2a\u5ba2\u6237\u7aef\u8fde\u63a5\uff0c\u5982\u679c\u5df2\u8fde\u63a5\u961f\u5217\u4e3a\u7a7a\uff0c\u5c06\u963b\u585e\u7b49\u5f85\u3002\n    // \u8fd4\u56de\u503c\uff1atrue-\u6210\u529f\u7684\u83b7\u53d6\u4e86\u4e00\u4e2a\u5ba2\u6237\u7aef\u8fde\u63a5\uff0cfalse-\u5931\u8d25\uff0c\u5982\u679caccept\u5931\u8d25\uff0c\u53ef\u4ee5\u91cd\u65b0accept\u3002\n    bool accept();\n\n    // \u83b7\u53d6\u5ba2\u6237\u7aef\u7684ip\u5730\u5740\u3002\n    // \u8fd4\u56de\u503c\uff1a\u5ba2\u6237\u7aef\u7684ip\u5730\u5740\uff0c\u5982\"192.168.1.100\"\u3002\n    char *getip();\n\n    // \u63a5\u6536\u5bf9\u7aef\u53d1\u9001\u8fc7\u6765\u7684\u6570\u636e\u3002\n    // buffer\uff1a\u5b58\u653e\u63a5\u6536\u6570\u636e\u7684\u7f13\u51b2\u533a\u3002\n    // ibuflen: \u6253\u7b97\u63a5\u6536\u6570\u636e\u7684\u5927\u5c0f\u3002\n    // itimeout\uff1a\u7b49\u5f85\u6570\u636e\u7684\u8d85\u65f6\u65f6\u95f4\uff08\u79d2\uff09\uff1a-1-\u4e0d\u7b49\u5f85\uff1b0-\u65e0\u9650\u7b49\u5f85\uff1b&gt;0-\u7b49\u5f85\u7684\u79d2\u6570\u3002\n    // \u8fd4\u56de\u503c\uff1atrue-\u6210\u529f\uff1bfalse-\u5931\u8d25\uff0c\u5931\u8d25\u6709\u4e24\u79cd\u60c5\u51b5\uff1a1\uff09\u7b49\u5f85\u8d85\u65f6\uff1b2\uff09socket\u8fde\u63a5\u5df2\u4e0d\u53ef\u7528\u3002\n    bool read(string &amp;buffer,const int itimeout=0);                           // \u63a5\u6536\u6587\u672c\u6570\u636e\u3002\n    bool read(void *buffer,const int ibuflen,const int itimeout=0);   // \u63a5\u6536\u4e8c\u8fdb\u5236\u6570\u636e\u3002\n\n    // \u5411\u5bf9\u7aef\u53d1\u9001\u6570\u636e\u3002\n    // buffer\uff1a\u5f85\u53d1\u9001\u6570\u636e\u7f13\u51b2\u533a\u3002\n    // ibuflen\uff1a\u5f85\u53d1\u9001\u6570\u636e\u7684\u5927\u5c0f\u3002\n    // \u8fd4\u56de\u503c\uff1atrue-\u6210\u529f\uff1bfalse-\u5931\u8d25\uff0c\u5982\u679c\u5931\u8d25\uff0c\u8868\u793asocket\u8fde\u63a5\u5df2\u4e0d\u53ef\u7528\u3002\n    bool write(const string &amp;buffer);                          // \u53d1\u9001\u6587\u672c\u6570\u636e\u3002\n    bool write(const void *buffer,const int ibuflen);   // \u53d1\u9001\u4e8c\u8fdb\u5236\u6570\u636e\u3002\n\n    // \u5173\u95ed\u76d1\u542c\u7684socket\uff0c\u5373m_listenfd\uff0c\u5e38\u7528\u4e8e\u591a\u8fdb\u7a0b\u670d\u52a1\u7a0b\u5e8f\u7684\u5b50\u8fdb\u7a0b\u4ee3\u7801\u4e2d\u3002\n    void closelisten();\n\n    // \u5173\u95ed\u5ba2\u6237\u7aef\u7684socket\uff0c\u5373m_connfd\uff0c\u5e38\u7528\u4e8e\u591a\u8fdb\u7a0b\u670d\u52a1\u7a0b\u5e8f\u7684\u7236\u8fdb\u7a0b\u4ee3\u7801\u4e2d\u3002\n    void closeclient();\n\n    ~ctcpserver();  // \u6790\u6784\u51fd\u6570\u81ea\u52a8\u5173\u95edsocket\uff0c\u91ca\u653e\u8d44\u6e90\u3002\n};\n\n// \u63a5\u6536socket\u7684\u5bf9\u7aef\u53d1\u9001\u8fc7\u6765\u7684\u6570\u636e\u3002\n// sockfd\uff1a\u53ef\u7528\u7684socket\u8fde\u63a5\u3002\n// buffer\uff1a\u63a5\u6536\u6570\u636e\u7f13\u51b2\u533a\u7684\u5730\u5740\u3002\n// ibuflen\uff1a\u672c\u6b21\u6210\u529f\u63a5\u6536\u6570\u636e\u7684\u5b57\u8282\u6570\u3002\n// itimeout\uff1a\u8bfb\u53d6\u6570\u636e\u8d85\u65f6\u7684\u65f6\u95f4\uff0c\u5355\u4f4d\uff1a\u79d2\uff0c-1-\u4e0d\u7b49\u5f85\uff1b0-\u65e0\u9650\u7b49\u5f85\uff1b&gt;0-\u7b49\u5f85\u7684\u79d2\u6570\u3002\n// \u8fd4\u56de\u503c\uff1atrue-\u6210\u529f\uff1bfalse-\u5931\u8d25\uff0c\u5931\u8d25\u6709\u4e24\u79cd\u60c5\u51b5\uff1a1\uff09\u7b49\u5f85\u8d85\u65f6\uff1b2\uff09socket\u8fde\u63a5\u5df2\u4e0d\u53ef\u7528\u3002\nbool tcpread(const int sockfd,string &amp;buffer,const int itimeout=0);                            // \u8bfb\u53d6\u6587\u672c\u6570\u636e\u3002\nbool tcpread(const int sockfd,void *buffer,const int ibuflen,const int itimeout=0);     // \u8bfb\u53d6\u4e8c\u8fdb\u5236\u6570\u636e\u3002\n\n// \u5411socket\u7684\u5bf9\u7aef\u53d1\u9001\u6570\u636e\u3002\n// sockfd\uff1a\u53ef\u7528\u7684socket\u8fde\u63a5\u3002\n// buffer\uff1a\u5f85\u53d1\u9001\u6570\u636e\u7f13\u51b2\u533a\u7684\u5730\u5740\u3002\n// ibuflen\uff1a\u5f85\u53d1\u9001\u6570\u636e\u7684\u5b57\u8282\u6570\u3002\n// \u8fd4\u56de\u503c\uff1atrue-\u6210\u529f\uff1bfalse-\u5931\u8d25\uff0c\u5982\u679c\u5931\u8d25\uff0c\u8868\u793asocket\u8fde\u63a5\u5df2\u4e0d\u53ef\u7528\u3002\nbool tcpwrite(const int sockfd,const string &amp;buffer);                             // \u5199\u5165\u6587\u672c\u6570\u636e\u3002\nbool tcpwrite(const int sockfd,const void *buffer,const int ibuflen);      // \u5199\u5165\u4e8c\u8fdb\u5236\u6570\u636e\u3002\n\n// \u4ece\u5df2\u7ecf\u51c6\u5907\u597d\u7684socket\u4e2d\u8bfb\u53d6\u6570\u636e\u3002\n// sockfd\uff1a\u5df2\u7ecf\u51c6\u5907\u597d\u7684socket\u8fde\u63a5\u3002\n// buffer\uff1a\u5b58\u653e\u6570\u636e\u7684\u5730\u5740\u3002\n// n\uff1a\u672c\u6b21\u6253\u7b97\u8bfb\u53d6\u6570\u636e\u7684\u5b57\u8282\u6570\u3002\n// \u8fd4\u56de\u503c\uff1a\u6210\u529f\u63a5\u6536\u5230n\u5b57\u8282\u7684\u6570\u636e\u540e\u8fd4\u56detrue\uff0csocket\u8fde\u63a5\u4e0d\u53ef\u7528\u8fd4\u56defalse\u3002\nbool readn(const int sockfd,char *buffer,const size_t n);\n\n// \u5411\u5df2\u7ecf\u51c6\u5907\u597d\u7684socket\u4e2d\u5199\u5165\u6570\u636e\u3002\n// sockfd\uff1a\u5df2\u7ecf\u51c6\u5907\u597d\u7684socket\u8fde\u63a5\u3002\n// buffer\uff1a\u5f85\u5199\u5165\u6570\u636e\u7684\u5730\u5740\u3002\n// n\uff1a\u5f85\u5199\u5165\u6570\u636e\u7684\u5b57\u8282\u6570\u3002\n// \u8fd4\u56de\u503c\uff1a\u6210\u529f\u5199\u5165\u5b8cn\u5b57\u8282\u7684\u6570\u636e\u540e\u8fd4\u56detrue\uff0csocket\u8fde\u63a5\u4e0d\u53ef\u7528\u8fd4\u56defalse\u3002\nbool writen(const int sockfd,const char *buffer,const size_t n);\n\n// \u4ee5\u4e0a\u662fsocket\u901a\u8baf\u7684\u51fd\u6570\u548c\u7c7b\n///////////////////////////////////// /////////////////////////////////////\n\n// \u5ffd\u7565\u5173\u95ed\u5168\u90e8\u7684\u4fe1\u53f7\u3001\u5173\u95ed\u5168\u90e8\u7684IO\uff0c\u7f3a\u7701\u53ea\u5ffd\u7565\u4fe1\u53f7\uff0c\u4e0d\u5173IO\u3002\nvoid closeioandsignal(bool bcloseio=false);\n\n// \u5faa\u73af\u961f\u5217\u3002\ntemplate &lt;class TT, int MaxLength&gt;\nclass squeue\n{\nprivate:\n    bool m_inited;              // \u961f\u5217\u88ab\u521d\u59cb\u5316\u6807\u5fd7\uff0ctrue-\u5df2\u521d\u59cb\u5316\uff1bfalse-\u672a\u521d\u59cb\u5316\u3002\n    TT   m_data[MaxLength];     // \u7528\u6570\u7ec4\u5b58\u50a8\u5faa\u73af\u961f\u5217\u4e2d\u7684\u5143\u7d20\u3002\n    int  m_head;                // \u961f\u5217\u7684\u5934\u6307\u9488\u3002\n    int  m_tail;                // \u961f\u5217\u7684\u5c3e\u6307\u9488\uff0c\u6307\u5411\u961f\u5c3e\u5143\u7d20\u3002\n    int  m_length;              // \u961f\u5217\u7684\u5b9e\u9645\u957f\u5ea6\u3002    \n    squeue(const squeue &amp;) = delete;             // \u7981\u7528\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u3002\n    squeue &amp;operator=(const squeue &amp;) = delete;  // \u7981\u7528\u8d4b\u503c\u51fd\u6570\u3002\npublic:\n\n    squeue() { init(); }  // \u6784\u9020\u51fd\u6570\u3002\n\n    // \u5faa\u73af\u961f\u5217\u7684\u521d\u59cb\u5316\u64cd\u4f5c\u3002\n    // \u6ce8\u610f\uff1a\u5982\u679c\u7528\u4e8e\u5171\u4eab\u5185\u5b58\u7684\u961f\u5217\uff0c\u4e0d\u4f1a\u8c03\u7528\u6784\u9020\u51fd\u6570\uff0c\u5fc5\u987b\u8c03\u7528\u6b64\u51fd\u6570\u521d\u59cb\u5316\u3002\n    void init()  \n    { \n        if (m_inited!=true)               // \u5faa\u73af\u961f\u5217\u7684\u521d\u59cb\u5316\u53ea\u80fd\u6267\u884c\u4e00\u6b21\u3002\n        { \n            m_head=0;                      // \u5934\u6307\u9488\u3002\n            m_tail=MaxLength-1;     // \u4e3a\u4e86\u65b9\u4fbf\u5199\u4ee3\u7801\uff0c\u521d\u59cb\u5316\u65f6\uff0c\u5c3e\u6307\u9488\u6307\u5411\u961f\u5217\u7684\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u3002\n            m_length=0;                   // \u961f\u5217\u7684\u5b9e\u9645\u957f\u5ea6\u3002\n            memset(m_data,0,sizeof(m_data));  // \u6570\u7ec4\u5143\u7d20\u6e05\u96f6\u3002\n            m_inited=true; \n        }\n    }\n\n    // \u5143\u7d20\u5165\u961f\uff0c\u8fd4\u56de\u503c\uff1afalse-\u5931\u8d25\uff1btrue-\u6210\u529f\u3002\n    bool push(const TT &amp;ee)\n    {\n        if (full() == true)\n        {\n            cout &lt;&lt; \"\u5faa\u73af\u961f\u5217\u5df2\u6ee1\uff0c\u5165\u961f\u5931\u8d25\u3002\\n\"; return false;\n        }\n\n        // \u5148\u79fb\u52a8\u961f\u5c3e\u6307\u9488\uff0c\u7136\u540e\u518d\u62f7\u8d1d\u6570\u636e\u3002\n        m_tail=(m_tail+1)%MaxLength;  // \u961f\u5c3e\u6307\u9488\u540e\u79fb\u3002\n        m_data[m_tail]=ee;\n        m_length++;    \n\n      return true;\n    }\n\n    // \u6c42\u5faa\u73af\u961f\u5217\u7684\u957f\u5ea6\uff0c\u8fd4\u56de\u503c\uff1a&gt;=0-\u961f\u5217\u4e2d\u5143\u7d20\u7684\u4e2a\u6570\u3002\n    int  size()                   \n    {\n        return m_length;    \n    }\n\n    // \u5224\u65ad\u5faa\u73af\u961f\u5217\u662f\u5426\u4e3a\u7a7a\uff0c\u8fd4\u56de\u503c\uff1atrue-\u7a7a\uff0cfalse-\u975e\u7a7a\u3002\n    bool empty()                    \n    {\n      if (m_length == 0) return true;    \n\n      return false;\n    }\n\n    // \u5224\u65ad\u5faa\u73af\u961f\u5217\u662f\u5426\u5df2\u6ee1\uff0c\u8fd4\u56de\u503c\uff1atrue-\u5df2\u6ee1\uff0cfalse-\u672a\u6ee1\u3002\n    bool full()\n    {\n        if (m_length == MaxLength) return true;    \n\n      return false;\n    }\n\n    // \u67e5\u770b\u961f\u5934\u5143\u7d20\u7684\u503c\uff0c\u5143\u7d20\u4e0d\u51fa\u961f\u3002\n    TT&amp; front()\n    {\n        return m_data[m_head];\n    }\n\n    // \u5143\u7d20\u51fa\u961f\uff0c\u8fd4\u56de\u503c\uff1afalse-\u5931\u8d25\uff1btrue-\u6210\u529f\u3002\n    bool pop()\n    {\n        if (empty() == true) return false;\n\n        m_head=(m_head+1)%MaxLength;  // \u961f\u5217\u5934\u6307\u9488\u540e\u79fb\u3002\n        m_length--;    \n\n        return true;\n    }\n\n    // \u663e\u793a\u5faa\u73af\u961f\u5217\u4e2d\u5168\u90e8\u7684\u5143\u7d20\u3002\n    // \u8fd9\u662f\u4e00\u4e2a\u4e34\u65f6\u7684\u7528\u4e8e\u8c03\u8bd5\u7684\u51fd\u6570\uff0c\u961f\u5217\u4e2d\u5143\u7d20\u7684\u6570\u636e\u7c7b\u578b\u652f\u6301cout\u8f93\u51fa\u624d\u53ef\u7528\u3002\n    void printqueue()                    \n    {\n        for (int ii = 0; ii &lt; size(); ii++)\n        {\n            cout &lt;&lt; \"m_data[\" &lt;&lt; (m_head+ii)%MaxLength &lt;&lt; \"],value=\" \\\n                 &lt;&lt; m_data[(m_head+ii)%MaxLength] &lt;&lt; endl;\n        }\n    }\n};\n\n// \u4fe1\u53f7\u91cf\u3002\nclass csemp\n{\nprivate:\n    union semun  // \u7528\u4e8e\u4fe1\u53f7\u91cf\u64cd\u4f5c\u7684\u5171\u540c\u4f53\u3002\n    {\n      int val;\n      struct semid_ds *buf;\n      unsigned short  *arry;\n    };\n\n    int   m_semid;         // \u4fe1\u53f7\u91cfid\uff08\u63cf\u8ff0\u7b26\uff09\u3002\n\n    // \u5982\u679c\u628asem_flg\u8bbe\u7f6e\u4e3aSEM_UNDO\uff0c\u64cd\u4f5c\u7cfb\u7edf\u5c06\u8ddf\u8e2a\u8fdb\u7a0b\u5bf9\u4fe1\u53f7\u91cf\u7684\u4fee\u6539\u60c5\u51b5\uff0c\n    // \u5728\u5168\u90e8\u4fee\u6539\u8fc7\u4fe1\u53f7\u91cf\u7684\u8fdb\u7a0b\uff08\u6b63\u5e38\u6216\u5f02\u5e38\uff09\u7ec8\u6b62\u540e\uff0c\u64cd\u4f5c\u7cfb\u7edf\u5c06\u628a\u4fe1\u53f7\u91cf\u6062\u590d\u4e3a\u521d\u59cb\u503c\u3002\n    // \u5982\u679c\u4fe1\u53f7\u91cf\u7528\u4e8e\u4e92\u65a5\u9501\uff0c\u8bbe\u7f6e\u4e3aSEM_UNDO\u3002\n    // \u5982\u679c\u4fe1\u53f7\u91cf\u7528\u4e8e\u751f\u4ea7\u6d88\u8d39\u8005\u6a21\u578b\uff0c\u8bbe\u7f6e\u4e3a0\u3002\n    short m_sem_flg;\n\n    csemp(const csemp &amp;) = delete;                      // \u7981\u7528\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u3002\n    csemp &amp;operator=(const csemp &amp;) = delete;  // \u7981\u7528\u8d4b\u503c\u51fd\u6570\u3002\npublic:\n    csemp():m_semid(-1){}\n\n    // \u5982\u679c\u4fe1\u53f7\u91cf\u5df2\u5b58\u5728\uff0c\u83b7\u53d6\u4fe1\u53f7\u91cf\uff1b\u5982\u679c\u4fe1\u53f7\u91cf\u4e0d\u5b58\u5728\uff0c\u5219\u521b\u5efa\u5b83\u5e76\u521d\u59cb\u5316\u4e3avalue\u3002\n    // \u5982\u679c\u7528\u4e8e\u4e92\u65a5\u9501\uff0cvalue\u586b1\uff0csem_flg\u586bSEM_UNDO\u3002\n    // \u5982\u679c\u7528\u4e8e\u751f\u4ea7\u6d88\u8d39\u8005\u6a21\u578b\uff0cvalue\u586b0\uff0csem_flg\u586b0\u3002\n    bool init(key_t key,unsigned short value=1,short sem_flg=SEM_UNDO);\n    bool wait(short value=-1);    // \u4fe1\u53f7\u91cf\u7684P\u64cd\u4f5c\uff0c\u5982\u679c\u4fe1\u53f7\u91cf\u7684\u503c\u662f0\uff0c\u5c06\u963b\u585e\u7b49\u5f85\uff0c\u76f4\u5230\u4fe1\u53f7\u91cf\u7684\u503c\u5927\u4e8e0\u3002\n    bool post(short value=1);     // \u4fe1\u53f7\u91cf\u7684V\u64cd\u4f5c\u3002\n    int  getvalue();                       // \u83b7\u53d6\u4fe1\u53f7\u91cf\u7684\u503c\uff0c\u6210\u529f\u8fd4\u56de\u4fe1\u53f7\u91cf\u7684\u503c\uff0c\u5931\u8d25\u8fd4\u56de-1\u3002\n    bool destroy();                       // \u9500\u6bc1\u4fe1\u53f7\u91cf\u3002\n    ~csemp();\n};\n\n// \u8fdb\u7a0b\u5fc3\u8df3\u4fe1\u606f\u7684\u7ed3\u6784\u4f53\u3002\nstruct st_procinfo\n{\n    int      pid=0;                      // \u8fdb\u7a0bid\u3002\n    char   pname[51]={0};        // \u8fdb\u7a0b\u540d\u79f0\uff0c\u53ef\u4ee5\u4e3a\u7a7a\u3002\n    int      timeout=0;              // \u8d85\u65f6\u65f6\u95f4\uff0c\u5355\u4f4d\uff1a\u79d2\u3002\n    time_t atime=0;                 // \u6700\u540e\u4e00\u6b21\u5fc3\u8df3\u7684\u65f6\u95f4\uff0c\u7528\u6574\u6570\u8868\u793a\u3002\n    st_procinfo() = default;     // \u6709\u4e86\u81ea\u5b9a\u4e49\u7684\u6784\u9020\u51fd\u6570\uff0c\u7f16\u8bd1\u5668\u5c06\u4e0d\u63d0\u4f9b\u9ed8\u8ba4\u6784\u9020\u51fd\u6570\uff0c\u6240\u4ee5\u542f\u7528\u9ed8\u8ba4\u6784\u9020\u51fd\u6570\u3002\n    st_procinfo(const int in_pid,const string &amp; in_pname,const int in_timeout, const time_t in_atime)\n                    :pid(in_pid),timeout(in_timeout),atime(in_atime) { strncpy(pname,in_pname.c_str(),50); }\n};\n\n// \u4ee5\u4e0b\u51e0\u4e2a\u5b8f\u7528\u4e8e\u8fdb\u7a0b\u7684\u5fc3\u8df3\u3002\n#define MAXNUMP     1000     // \u6700\u5927\u7684\u8fdb\u7a0b\u6570\u91cf\u3002\n#define SHMKEYP    0x5095     // \u5171\u4eab\u5185\u5b58\u7684key\u3002\n#define SEMKEYP     0x5095     // \u4fe1\u53f7\u91cf\u7684key\u3002\n\n// \u67e5\u770b\u5171\u4eab\u5185\u5b58\uff1a  ipcs -m\n// \u5220\u9664\u5171\u4eab\u5185\u5b58\uff1a  ipcrm -m shmid\n// \u67e5\u770b\u4fe1\u53f7\u91cf\uff1a      ipcs -s\n// \u5220\u9664\u4fe1\u53f7\u91cf\uff1a      ipcrm sem semid\n\n// \u8fdb\u7a0b\u5fc3\u8df3\u64cd\u4f5c\u7c7b\u3002\nclass cpactive\n{\n private:\n     int  m_shmid;                   // \u5171\u4eab\u5185\u5b58\u7684id\u3002\n     int  m_pos;                       // \u5f53\u524d\u8fdb\u7a0b\u5728\u5171\u4eab\u5185\u5b58\u8fdb\u7a0b\u7ec4\u4e2d\u7684\u4f4d\u7f6e\u3002\n     st_procinfo *m_shm;        // \u6307\u5411\u5171\u4eab\u5185\u5b58\u7684\u5730\u5740\u7a7a\u95f4\u3002\n\n public:\n     cpactive();  // \u521d\u59cb\u5316\u6210\u5458\u53d8\u91cf\u3002\n\n     // \u628a\u5f53\u524d\u8fdb\u7a0b\u7684\u4fe1\u606f\u52a0\u5165\u5171\u4eab\u5185\u5b58\u8fdb\u7a0b\u7ec4\u4e2d\u3002\n     bool addpinfo(const int timeout,const string &amp;pname=\"\",clogfile *logfile=nullptr);\n\n     // \u66f4\u65b0\u5171\u4eab\u5185\u5b58\u8fdb\u7a0b\u7ec4\u4e2d\u5f53\u524d\u8fdb\u7a0b\u7684\u5fc3\u8df3\u65f6\u95f4\u3002\n     bool uptatime();\n\n     ~cpactive();  // \u4ece\u5171\u4eab\u5185\u5b58\u4e2d\u5220\u9664\u5f53\u524d\u8fdb\u7a0b\u7684\u5fc3\u8df3\u8bb0\u5f55\u3002\n};\n\n}\n#endif\n</code></pre>"},{"location":"Project/Backend%20server/ADF/D-File/Cdir/","title":"\u83b7\u53d6\u67d0\u76ee\u5f55\u53ca\u5176\u5b50\u76ee\u5f55\u4e2d\u6587\u4ef6\u5217\u8868","text":""},{"location":"Project/Backend%20server/ADF/D-File/Cdir/#_2","title":"\u5b9a\u4e49","text":"<pre><code>class cdir\n{\nprivate:\n    vector&lt;string&gt; m_filelist;  // \u5b58\u653e\u6587\u4ef6\u5217\u8868\u7684\u5bb9\u5668\uff08\u7edd\u5bf9\u8def\u5f84\u7684\u6587\u4ef6\u540d\uff09\u3002\n    int m_pos;                          // \u4ece\u6587\u4ef6\u5217\u8868m_filelist\u4e2d\u5df2\u8bfb\u53d6\u6587\u4ef6\u7684\u4f4d\u7f6e\u3002\n    string m_fmt;                     // \u6587\u4ef6\u65f6\u95f4\u683c\u5f0f\uff0c\u7f3a\u7701\"yyyymmddhh24miss\"\u3002\n\n    cdir(const cdir &amp;) = delete;                      // \u7981\u7528\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u3002\n    cdir &amp;operator=(const cdir &amp;) = delete;  // \u7981\u7528\u8d4b\u503c\u51fd\u6570\u3002\npublic:\n    // /project/public/_public.h\n    string m_dirname;        // \u76ee\u5f55\u540d\uff0c\u4f8b\u5982\uff1a/project/public\n    string m_filename;       // \u6587\u4ef6\u540d\uff0c\u4e0d\u5305\u62ec\u76ee\u5f55\u540d\uff0c\u4f8b\u5982\uff1a_public.h\n    string m_ffilename;      // \u7edd\u5bf9\u8def\u5f84\u7684\u6587\u4ef6\uff0c\u4f8b\u5982\uff1a/project/public/_public.h\n    int      m_filesize;          // \u6587\u4ef6\u7684\u5927\u5c0f\uff0c\u5355\u4f4d\uff1a\u5b57\u8282\u3002\n    string m_mtime;           // \u6587\u4ef6\u6700\u540e\u4e00\u6b21\u88ab\u4fee\u6539\u7684\u65f6\u95f4\uff0c\u5373stat\u7ed3\u6784\u4f53\u7684st_mtime\u6210\u5458\u3002\n    string m_ctime;            // \u6587\u4ef6\u751f\u6210\u7684\u65f6\u95f4\uff0c\u5373stat\u7ed3\u6784\u4f53\u7684st_ctime\u6210\u5458\u3002\n    string m_atime;            // \u6587\u4ef6\u6700\u540e\u4e00\u6b21\u88ab\u8bbf\u95ee\u7684\u65f6\u95f4\uff0c\u5373stat\u7ed3\u6784\u4f53\u7684st_atime\u6210\u5458\u3002\n\n    cdir():m_pos(0),m_fmt(\"yyyymmddhh24miss\") {}  // \u6784\u9020\u51fd\u6570\u3002\n\n    // \u8bbe\u7f6e\u6587\u4ef6\u65f6\u95f4\u7684\u683c\u5f0f\uff0c\u652f\u6301\"yyyy-mm-dd hh24:mi:ss\"\u548c\"yyyymmddhh24miss\"\u4e24\u79cd\uff0c\u7f3a\u7701\u662f\u540e\u8005\u3002\n    void setfmt(const string &amp;fmt);\n\n    // \u6253\u5f00\u76ee\u5f55\uff0c\u83b7\u53d6\u76ee\u5f55\u4e2d\u6587\u4ef6\u7684\u5217\u8868\uff0c\u5b58\u653e\u5728m_filelist\u5bb9\u5668\u4e2d\u3002\n    // dirname\uff0c\u76ee\u5f55\u540d\uff0c\u91c7\u7528\u7edd\u5bf9\u8def\u5f84\uff0c\u5982/tmp/root\u3002\n    // rules\uff0c\u6587\u4ef6\u540d\u7684\u5339\u914d\u89c4\u5219\uff0c\u4e0d\u5339\u914d\u7684\u6587\u4ef6\u5c06\u88ab\u5ffd\u7565\u3002\n    // maxfiles\uff0c\u672c\u6b21\u83b7\u53d6\u6587\u4ef6\u7684\u6700\u5927\u6570\u91cf\uff0c\u7f3a\u7701\u503c\u4e3a10000\u4e2a\uff0c\u5982\u679c\u6587\u4ef6\u592a\u591a\uff0c\u53ef\u80fd\u6d88\u8017\u592a\u591a\u7684\u5185\u5b58\u3002\n    // bandchild\uff0c\u662f\u5426\u6253\u5f00\u5404\u7ea7\u5b50\u76ee\u5f55\uff0c\u7f3a\u7701\u503c\u4e3afalse-\u4e0d\u6253\u5f00\u5b50\u76ee\u5f55\u3002\n    // bsort\uff0c\u662f\u5426\u6309\u6587\u4ef6\u540d\u6392\u5e8f\uff0c\u7f3a\u7701\u503c\u4e3afalse-\u4e0d\u6392\u5e8f\u3002\n    // \u8fd4\u56de\u503c\uff1atrue-\u6210\u529f\uff0cfalse-\u5931\u8d25\u3002\n    bool opendir(const string &amp;dirname,const string &amp;rules,const int maxfiles=10000,const bool bandchild=false,bool bsort=false);\n\nprivate:\n    // \u8fd9\u662f\u4e00\u4e2a\u9012\u5f52\u51fd\u6570\uff0c\u88abopendir()\u7684\u8c03\u7528\uff0c\u5728cdir\u7c7b\u7684\u5916\u90e8\u4e0d\u9700\u8981\u8c03\u7528\u5b83\u3002\n    bool _opendir(const string &amp;dirname,const string &amp;rules,const int maxfiles,const bool bandchild);\n\npublic:\n    // \u4ecem_filelist\u5bb9\u5668\u4e2d\u83b7\u53d6\u4e00\u6761\u8bb0\u5f55\uff08\u6587\u4ef6\u540d\uff09\uff0c\u540c\u65f6\u83b7\u53d6\u8be5\u6587\u4ef6\u7684\u5927\u5c0f\u3001\u4fee\u6539\u65f6\u95f4\u7b49\u4fe1\u606f\u3002\n    // \u8c03\u7528opendir\u65b9\u6cd5\u65f6\uff0cm_filelist\u5bb9\u5668\u88ab\u6e05\u7a7a\uff0cm_pos\u5f52\u96f6\uff0c\u6bcf\u8c03\u7528\u4e00\u6b21readdir\u65b9\u6cd5m_pos\u52a01\u3002\n    // \u5f53m_pos\u5c0f\u4e8em_filelist.size()\uff0c\u8fd4\u56detrue\uff0c\u5426\u5219\u8fd4\u56defalse\u3002\n    bool readdir();\n\n    unsigned int size() { return m_filelist.size(); }\n\n    ~cdir();  // \u6790\u6784\u51fd\u6570\u3002\n};\n</code></pre>"},{"location":"Project/Backend%20server/ADF/D-File/Cdir/#_3","title":"\u5b9e\u73b0","text":"<p><pre><code>void cdir::setfmt(const string &amp;fmt)\n{\n    m_fmt=fmt;\n}\n</code></pre> <pre><code>bool cdir::opendir(const string &amp;dirname,const string &amp;rules,const int maxfiles,const bool bandchild,bool bsort)\n{\n    m_filelist.clear();    // \u6e05\u7a7a\u6587\u4ef6\u5217\u8868\u5bb9\u5668\u3002\n    m_pos=0;              // \u4ece\u6587\u4ef6\u5217\u8868\u4e2d\u5df2\u8bfb\u53d6\u6587\u4ef6\u7684\u4f4d\u7f6e\u5f520\u3002\n\n    // \u5982\u679c\u76ee\u5f55\u4e0d\u5b58\u5728\uff0c\u521b\u5efa\u5b83\u3002\n    if (newdir(dirname,false) == false) return false;\n\n    // \u6253\u5f00\u76ee\u5f55\uff0c\u83b7\u53d6\u76ee\u5f55\u4e2d\u7684\u6587\u4ef6\u5217\u8868\uff0c\u5b58\u653e\u5728m_filelist\u5bb9\u5668\u4e2d\u3002\n    bool ret=_opendir(dirname,rules,maxfiles,bandchild);\n\n    if (bsort==true)    // \u5bf9\u6587\u4ef6\u5217\u8868\u6392\u5e8f\u3002\n    {\n      sort(m_filelist.begin(), m_filelist.end());\n    }\n\n    return ret;\n}\n</code></pre></p> <pre><code>// \u8fd9\u662f\u4e00\u4e2a\u9012\u5f52\u51fd\u6570\uff0c\u5728opendir()\u4e2d\u8c03\u7528\uff0ccdir\u7c7b\u7684\u5916\u90e8\u4e0d\u9700\u8981\u8c03\u7528\u5b83\u3002\nbool cdir::_opendir(const string &amp;dirname,const string &amp;rules,const int maxfiles,const bool bandchild)\n{\n    DIR *dir;   // \u76ee\u5f55\u6307\u9488\u3002\n\n    // \u6253\u5f00\u76ee\u5f55\u3002\n    if ( (dir=::opendir(dirname.c_str())) == nullptr ) return false; // opendir\u4e0e\u5e93\u51fd\u6570\u91cd\u540d\uff0c\u9700\u8981\u52a0::\n\n    string strffilename;            // \u5168\u8def\u5f84\u7684\u6587\u4ef6\u540d\u3002\n    struct dirent *stdir;            // \u5b58\u653e\u4ece\u76ee\u5f55\u4e2d\u8bfb\u53d6\u7684\u5185\u5bb9\u3002\n\n    // \u7528\u5faa\u73af\u8bfb\u53d6\u76ee\u5f55\u7684\u5185\u5bb9\uff0c\u5c06\u5f97\u5230\u76ee\u5f55\u4e2d\u7684\u6587\u4ef6\u540d\u548c\u5b50\u76ee\u5f55\u3002\n    while ((stdir=::readdir(dir)) != 0) // readdir\u4e0e\u5e93\u51fd\u6570\u91cd\u540d\uff0c\u9700\u8981\u52a0::\n    {\n        // \u5224\u65ad\u5bb9\u5668\u4e2d\u7684\u6587\u4ef6\u6570\u91cf\u662f\u5426\u8d85\u51famaxfiles\u53c2\u6570\u3002\n        if ( m_filelist.size()&gt;=maxfiles ) break;\n\n        // \u6587\u4ef6\u540d\u4ee5\".\"\u6253\u5934\u7684\u6587\u4ef6\u4e0d\u5904\u7406\u3002.\u662f\u5f53\u524d\u76ee\u5f55\uff0c..\u662f\u4e0a\u4e00\u7ea7\u76ee\u5f55\uff0c\u5176\u5b83\u4ee5.\u6253\u5934\u7684\u90fd\u662f\u7279\u6b8a\u76ee\u5f55\u548c\u6587\u4ef6\u3002\n        if (stdir-&gt;d_name[0]=='.') continue;\n\n        // \u62fc\u63a5\u5168\u8def\u5f84\u7684\u6587\u4ef6\u540d\u3002\n        strffilename=dirname+'/'+stdir-&gt;d_name;  \n\n        // \u5982\u679c\u662f\u76ee\u5f55\uff0c\u5904\u7406\u5404\u7ea7\u5b50\u76ee\u5f55\u3002\n        if (stdir-&gt;d_type==4)\n        {\n            if (bandchild == true)      // \u6253\u5f00\u5404\u7ea7\u5b50\u76ee\u5f55\u3002\n            {\n                if (_opendir(strffilename,rules,maxfiles,bandchild) == false)   // \u9012\u5f52\u8c03\u7528_opendir\u51fd\u6570\u3002\n                {\n                    closedir(dir); return false;\n                }\n            }\n        }\n\n        // \u5982\u679c\u662f\u666e\u901a\u6587\u4ef6\uff0c\u653e\u5165\u5bb9\u5668\u4e2d\u3002\n        if (stdir-&gt;d_type==8)\n        {\n            // \u628a\u80fd\u5339\u914d\u4e0a\u7684\u6587\u4ef6\u653e\u5165m_filelist\u5bb9\u5668\u4e2d\u3002\n            if (matchstr(stdir-&gt;d_name,rules) == false) continue;\n\n            m_filelist.push_back(std::move(strffilename));\n        }\n    }\n\n    closedir(dir);   // \u5173\u95ed\u76ee\u5f55\u3002\n\n    return true;\n}\n</code></pre> <pre><code>bool cdir::readdir()\n{\n    // \u5982\u679c\u5df2\u8bfb\u5b8c\uff0c\u6e05\u7a7a\u5bb9\u5668\n    if (m_pos &gt;= m_filelist.size()) \n    {\n      m_pos=0; m_filelist.clear(); return false;\n    }\n\n    // \u6587\u4ef6\u5168\u540d\uff0c\u5305\u62ec\u8def\u5f84\n    m_ffilename=m_filelist[m_pos];\n\n    // \u4ece\u7edd\u5bf9\u8def\u5f84\u7684\u6587\u4ef6\u540d\u4e2d\u89e3\u6790\u51fa\u76ee\u5f55\u540d\u548c\u6587\u4ef6\u540d\u3002\n    int pp=m_ffilename.find_last_of(\"/\");\n    m_dirname=m_ffilename.substr(0,pp);\n    m_filename=m_ffilename.substr(pp+1);\n\n    // \u83b7\u53d6\u6587\u4ef6\u7684\u4fe1\u606f\u3002\n    struct stat st_filestat;\n    stat(m_ffilename.c_str(),&amp;st_filestat);\n    m_filesize=st_filestat.st_size;                                     // \u6587\u4ef6\u5927\u5c0f\u3002\n    m_mtime=timetostr1(st_filestat.st_mtime,m_fmt);   // \u6587\u4ef6\u6700\u540e\u4e00\u6b21\u88ab\u4fee\u6539\u7684\u65f6\u95f4\u3002\n    m_ctime=timetostr1(st_filestat.st_ctime,m_fmt);      // \u6587\u4ef6\u751f\u6210\u7684\u65f6\u95f4\u3002\n    m_atime=timetostr1(st_filestat.st_atime,m_fmt);      // \u6587\u4ef6\u6700\u540e\u4e00\u6b21\u88ab\u8bbf\u95ee\u7684\u65f6\u95f4\u3002\n\n    m_pos++;       // \u5df2\u8bfb\u53d6\u6587\u4ef6\u7684\u4f4d\u7f6e\u540e\u79fb\u3002\n\n    return true;\n}\n</code></pre> <pre><code>cdir::~cdir()\n{\n    m_filelist.clear();\n}\n</code></pre>"},{"location":"Project/Backend%20server/ADF/D-File/Cdir/#_4","title":"\u6d4b\u8bd5","text":"<pre><code>// cdir\u7c7b\u83b7\u53d6\u67d0\u76ee\u5f55\u53ca\u5176\u5b50\u76ee\u5f55\u4e2d\u7684\u6587\u4ef6\u5217\u8868\u4fe1\u606f\u3002\n\n#include \"../_public.h\"\nusing namespace std;\nusing namespace idc;\n\nint main(int argc,char *argv[])\n{\n    if (argc != 3) \n    { \n        printf(\"Using:./demo34 pathname matchstr\\n\");\n        printf(\"Sample:./demo34 /project \\\"*.h,*.cpp\\\"\\n\");\n        return -1;\n    }\n\n    cdir dir;       // \u521b\u5efa\u8bfb\u53d6\u76ee\u5f55\u7684\u5bf9\u8c61\u3002\n\n    if (dir.opendir(argv[1],argv[2],100,false,true)==false)             // \u6253\u5f00\u76ee\u5f55\uff0c\u83b7\u53d6\u76ee\u5f55\u4e2d\u6587\u4ef6\u7684\u5217\u8868\u3002\n    {   \n        printf(\"dir.opendir(%s) failed.\\n\",argv[1]); return -1; \n    }\n\n    while(dir.readdir()==true)        // \u904d\u5386\u6587\u4ef6\u5217\u8868\u3002\n    {\n        cout &lt;&lt; \"filename=\" &lt;&lt; dir.m_ffilename &lt;&lt; \",mtime=\" &lt;&lt; dir.m_mtime &lt;&lt; \",size=\" &lt;&lt; dir.m_filesize &lt;&lt; endl;\n    }\n}\n</code></pre>"},{"location":"Project/Backend%20server/ADF/D-File/Create-Directory/","title":"\u521b\u5efa\u76ee\u5f55","text":""},{"location":"Project/Backend%20server/ADF/D-File/Create-Directory/#_2","title":"\u5b9a\u4e49","text":"<p><pre><code>// \u6839\u636e\u7edd\u5bf9\u8def\u5f84\u7684\u6587\u4ef6\u540d\u6216\u76ee\u5f55\u540d\u9010\u7ea7\u7684\u521b\u5efa\u76ee\u5f55\u3002\n// pathorfilename\uff1a\u7edd\u5bf9\u8def\u5f84\u7684\u6587\u4ef6\u540d\u6216\u76ee\u5f55\u540d\u3002\n// bisfilename\uff1a\u6307\u5b9apathorfilename\u7684\u7c7b\u578b\uff0ctrue-pathorfilename\u662f\u6587\u4ef6\u540d\uff0c\u5426\u5219\u662f\u76ee\u5f55\u540d\uff0c\u7f3a\u7701\u503c\u4e3atrue\u3002\n// \u8fd4\u56de\u503c\uff1atrue-\u6210\u529f\uff0cfalse-\u5931\u8d25\uff0c\u5982\u679c\u8fd4\u56de\u5931\u8d25\uff0c\u539f\u56e0\u6709\u5927\u6982\u6709\u4e09\u79cd\u60c5\u51b5\uff1a\n// 1\uff09\u6743\u9650\u4e0d\u8db3\uff1b2\uff09pathorfilename\u53c2\u6570\u4e0d\u662f\u5408\u6cd5\u7684\u6587\u4ef6\u540d\u6216\u76ee\u5f55\u540d\uff1b3\uff09\u78c1\u76d8\u7a7a\u95f4\u4e0d\u8db3\u3002\n</code></pre> <pre><code>bool newdir(const string &amp;pathorfilename,bool bisfilename=true);\n</code></pre></p>"},{"location":"Project/Backend%20server/ADF/D-File/Create-Directory/#_3","title":"\u5b9e\u73b0","text":"<pre><code>bool newdir(const string &amp;pathorfilename,bool bisfilename)\n{\n    // /tmp/aaa/bbb/ccc/ddd    /tmp    /tmp/aaa    /tmp/aaa/bbb    /tmp/aaa/bbb/ccc \n\n    // \u68c0\u67e5\u76ee\u5f55\u662f\u5426\u5b58\u5728\uff0c\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u9010\u7ea7\u521b\u5efa\u5b50\u76ee\u5f55\n    int pos=1;          // \u4e0d\u8981\u4ece0\u5f00\u59cb\uff0c0\u662f\u6839\u76ee\u5f55/\u3002\n\n    while (true)\n    {\n        int pos1=pathorfilename.find('/',pos);\n        if (pos1==string::npos) break;\n\n        string strpathname=pathorfilename.substr(0,pos1);      // \u622a\u53d6\u76ee\u5f55\u3002\n\n        pos=pos1+1;       // \u4f4d\u7f6e\u540e\u79fb\u3002\n        if (access(strpathname.c_str(),F_OK) != 0)  // \u5982\u679c\u76ee\u5f55\u4e0d\u5b58\u5728\uff0c\u521b\u5efa\u5b83\u3002\n        {\n            // 0755\u662f\u516b\u8fdb\u5236\uff0c\u4e0d\u8981\u5199\u6210755\u3002\n            if (mkdir(strpathname.c_str(),0755) != 0) return false;  // \u5982\u679c\u76ee\u5f55\u4e0d\u5b58\u5728\uff0c\u521b\u5efa\u5b83\u3002\n        }\n    }\n\n    // \u5982\u679cpathorfilename\u4e0d\u662f\u6587\u4ef6\uff0c\u662f\u76ee\u5f55\uff0c\u8fd8\u9700\u8981\u521b\u5efa\u6700\u540e\u4e00\u7ea7\u5b50\u76ee\u5f55\u3002\n    if (bisfilename==false)\n    {\n        if (access(pathorfilename.c_str(),F_OK) != 0)\n        {\n            if (mkdir(pathorfilename.c_str(),0755) != 0) return false;\n        }\n    }\n\n    return true;\n}\n</code></pre>"},{"location":"Project/Backend%20server/ADF/D-File/Create-Directory/#_4","title":"\u6d4b\u8bd5","text":"<pre><code>//newdir\u51fd\u6570\u6839\u636e\u7edd\u5bf9\u8def\u5f84\u7684\u6587\u4ef6\u540d\u6216\u76ee\u5f55\u540d\u9010\u7ea7\u7684\u521b\u5efa\u76ee\u5f55\u3002\n\n#include \"../_public.h\"\nusing namespace std;\nusing namespace idc;\n\nint main()\n{\n    // /tmp/aaa/bbb/ccc/ddd    /tmp    /tmp/aaa    /tmp/aaa/bbb    /tmp/aaa/bbb/ccc   /tmp/aaa/bbb/ccc/ddd\n    newdir(\"/tmp/aaa/bbb/ccc/ddd\",false);   // \u521b\u5efa\"/tmp/aaa/bbb/ccc/ddd\"\u76ee\u5f55\u3002\n\n    newdir(\"/tmp/111/222/333/444/data.xml\",true);   // \u521b\u5efa\"/tmp/111/222/333/444\"\u76ee\u5f55\u3002\n}\n</code></pre>"},{"location":"Project/Backend%20server/ADF/D-File/File%20operation/","title":"\u6587\u4ef6\u64cd\u4f5c\u76f8\u5173\u7684\u51fd\u6570","text":""},{"location":"Project/Backend%20server/ADF/D-File/File%20operation/#_2","title":"\u5b9a\u4e49","text":"<pre><code>// \u91cd\u547d\u540d\u6587\u4ef6\uff0c\u7c7b\u4f3cLinux\u7cfb\u7edf\u7684mv\u547d\u4ee4\u3002\n// srcfilename\uff1a\u539f\u6587\u4ef6\u540d\uff0c\u5efa\u8bae\u91c7\u7528\u7edd\u5bf9\u8def\u5f84\u7684\u6587\u4ef6\u540d\u3002\n// dstfilename\uff1a\u76ee\u6807\u6587\u4ef6\u540d\uff0c\u5efa\u8bae\u91c7\u7528\u7edd\u5bf9\u8def\u5f84\u7684\u6587\u4ef6\u540d\u3002\n// \u8fd4\u56de\u503c\uff1atrue-\u6210\u529f\uff1bfalse-\u5931\u8d25\uff0c\u5931\u8d25\u7684\u4e3b\u8981\u539f\u56e0\u662f\u6743\u9650\u4e0d\u8db3\u6216\u78c1\u76d8\u7a7a\u95f4\u4e0d\u591f\uff0c\u5982\u679c\u539f\u6587\u4ef6\u548c\u76ee\u6807\u6587\u4ef6\u4e0d\u5728\u540c\u4e00\u4e2a\u78c1\u76d8\u5206\u533a\uff0c\u91cd\u547d\u540d\u4e5f\u53ef\u80fd\u5931\u8d25\u3002\n// \u6ce8\u610f\uff0c\u5728\u91cd\u547d\u540d\u6587\u4ef6\u4e4b\u524d\uff0c\u4f1a\u81ea\u52a8\u521b\u5efadstfilename\u53c2\u6570\u4e2d\u5305\u542b\u7684\u76ee\u5f55\u3002\n// \u5728\u5e94\u7528\u5f00\u53d1\u4e2d\uff0c\u53ef\u4ee5\u7528renamefile()\u51fd\u6570\u4ee3\u66ffrename()\u5e93\u51fd\u6570\u3002\n</code></pre> <pre><code>bool renamefile(const string &amp;srcfilename,const string &amp;dstfilename);\n</code></pre> <p><pre><code>// \u590d\u5236\u6587\u4ef6\uff0c\u7c7b\u4f3cLinux\u7cfb\u7edf\u7684cp\u547d\u4ee4\u3002\n// srcfilename\uff1a\u539f\u6587\u4ef6\u540d\uff0c\u5efa\u8bae\u91c7\u7528\u7edd\u5bf9\u8def\u5f84\u7684\u6587\u4ef6\u540d\u3002\n// dstfilename\uff1a\u76ee\u6807\u6587\u4ef6\u540d\uff0c\u5efa\u8bae\u91c7\u7528\u7edd\u5bf9\u8def\u5f84\u7684\u6587\u4ef6\u540d\u3002\n// \u8fd4\u56de\u503c\uff1atrue-\u6210\u529f\uff1bfalse-\u5931\u8d25\uff0c\u5931\u8d25\u7684\u4e3b\u8981\u539f\u56e0\u662f\u6743\u9650\u4e0d\u8db3\u6216\u78c1\u76d8\u7a7a\u95f4\u4e0d\u591f\u3002\n// \u6ce8\u610f\uff1a\n// 1\uff09\u5728\u590d\u5236\u6587\u4ef6\u4e4b\u524d\uff0c\u4f1a\u81ea\u52a8\u521b\u5efadstfilename\u53c2\u6570\u4e2d\u7684\u76ee\u5f55\u540d\u3002\n// 2\uff09\u590d\u5236\u6587\u4ef6\u7684\u8fc7\u7a0b\u4e2d\uff0c\u91c7\u7528\u4e34\u65f6\u6587\u4ef6\u547d\u540d\u7684\u65b9\u6cd5\uff0c\u590d\u5236\u5b8c\u6210\u540e\u518d\u6539\u540d\u4e3adstfilename\uff0c\u907f\u514d\u4e2d\u95f4\u72b6\u6001\u7684\u6587\u4ef6\u88ab\u8bfb\u53d6\u3002\n// 3\uff09\u590d\u5236\u540e\u7684\u6587\u4ef6\u7684\u65f6\u95f4\u4e0e\u539f\u6587\u4ef6\u76f8\u540c\uff0c\u8fd9\u4e00\u70b9\u4e0eLinux\u7cfb\u7edfcp\u547d\u4ee4\u4e0d\u540c\u3002\n</code></pre> <pre><code>bool copyfile(const string &amp;srcfilename,const string &amp;dstfilename);\n</code></pre> <pre><code>// \u83b7\u53d6\u6587\u4ef6\u7684\u5927\u5c0f\u3002\n// filename\uff1a\u5f85\u83b7\u53d6\u7684\u6587\u4ef6\u540d\uff0c\u5efa\u8bae\u91c7\u7528\u7edd\u5bf9\u8def\u5f84\u7684\u6587\u4ef6\u540d\u3002\n// \u8fd4\u56de\u503c\uff1a\u5982\u679c\u6587\u4ef6\u4e0d\u5b58\u5728\u6216\u6ca1\u6709\u8bbf\u95ee\u6743\u9650\uff0c\u8fd4\u56de-1\uff0c\u6210\u529f\u8fd4\u56de\u6587\u4ef6\u7684\u5927\u5c0f\uff0c\u5355\u4f4d\u662f\u5b57\u8282\u3002\n</code></pre> <pre><code>int filesize(const string &amp;filename);\n</code></pre> <pre><code>// \u83b7\u53d6\u6587\u4ef6\u7684\u65f6\u95f4\u3002\n// filename\uff1a\u5f85\u83b7\u53d6\u7684\u6587\u4ef6\u540d\uff0c\u5efa\u8bae\u91c7\u7528\u7edd\u5bf9\u8def\u5f84\u7684\u6587\u4ef6\u540d\u3002\n// mtime\uff1a\u7528\u4e8e\u5b58\u653e\u6587\u4ef6\u7684\u65f6\u95f4\uff0c\u5373stat\u7ed3\u6784\u4f53\u7684st_mtime\u3002\n// fmt\uff1a\u8bbe\u7f6e\u65f6\u95f4\u7684\u8f93\u51fa\u683c\u5f0f\uff0c\u4e0eltime()\u51fd\u6570\u76f8\u540c\uff0c\u4f46\u7f3a\u7701\u662f\"yyyymmddhh24miss\"\u3002\n// \u8fd4\u56de\u503c\uff1a\u5982\u679c\u6587\u4ef6\u4e0d\u5b58\u5728\u6216\u6ca1\u6709\u8bbf\u95ee\u6743\u9650\uff0c\u8fd4\u56defalse\uff0c\u6210\u529f\u8fd4\u56detrue\u3002\n</code></pre></p> <pre><code>bool filemtime(const string &amp;filename,char *mtime    ,const string &amp;fmt=\"yyyymmddhh24miss\");\nbool filemtime(const string &amp;filename,string &amp;mtime,const string &amp;fmt=\"yyyymmddhh24miss\");\n</code></pre> <pre><code>// \u91cd\u7f6e\u6587\u4ef6\u7684\u4fee\u6539\u65f6\u95f4\u5c5e\u6027\u3002\n// filename\uff1a\u5f85\u91cd\u7f6e\u7684\u6587\u4ef6\u540d\uff0c\u5efa\u8bae\u91c7\u7528\u7edd\u5bf9\u8def\u5f84\u7684\u6587\u4ef6\u540d\u3002\n// mtime\uff1a\u5b57\u7b26\u4e32\u8868\u793a\u7684\u65f6\u95f4\uff0c\u683c\u5f0f\u4e0d\u9650\uff0c\u4f46\u4e00\u5b9a\u8981\u5305\u62ecyyyymmddhh24miss\uff0c\u4e00\u4e2a\u90fd\u4e0d\u80fd\u5c11\uff0c\u987a\u5e8f\u4e5f\u4e0d\u80fd\u53d8\u3002\n// \u8fd4\u56de\u503c\uff1atrue-\u6210\u529f\uff1bfalse-\u5931\u8d25\uff0c\u5931\u8d25\u7684\u539f\u56e0\u4fdd\u5b58\u5728errno\u4e2d\u3002\n</code></pre> <pre><code>bool setmtime(const string &amp;filename,const string &amp;mtime);\n</code></pre>"},{"location":"Project/Backend%20server/ADF/D-File/File%20operation/#_3","title":"\u5b9e\u73b0","text":"<pre><code>bool renamefile(const string &amp;srcfilename,const string &amp;dstfilename)\n{\n    // \u5982\u679c\u539f\u6587\u4ef6\u4e0d\u5b58\u5728\uff0c\u76f4\u63a5\u8fd4\u56de\u5931\u8d25\u3002\n    if (access(srcfilename.c_str(),R_OK) != 0) return false;\n\n    // \u521b\u5efa\u76ee\u6807\u6587\u4ef6\u7684\u76ee\u5f55\u3002\n    if (newdir(dstfilename,true) == false) return false;\n\n    // \u8c03\u7528\u64cd\u4f5c\u7cfb\u7edf\u7684\u5e93\u51fd\u6570rename\u91cd\u547d\u540d\u6587\u4ef6\u3002 mv\n    if (rename(srcfilename.c_str(),dstfilename.c_str()) == 0) return true;\n\n    return false;\n}\n</code></pre> <pre><code>bool copyfile(const string &amp;srcfilename,const string &amp;dstfilename)\n{\n    // \u521b\u5efa\u76ee\u6807\u6587\u4ef6\u7684\u76ee\u5f55\u3002\n    if (newdir(dstfilename,true) == false) return false;\n\n    cifile ifile;\n    cofile ofile;\n    int ifilesize=filesize(srcfilename);\n\n    int  total_bytes=0;\n    int  onread=0;\n    char buffer[5000];\n\n    if (ifile.open(srcfilename,ios::in|ios::binary)==false) return false;\n\n    if (ofile.open(dstfilename,ios::out|ios::binary)==false) return false;\n\n    while (true)\n    {\n        if ((ifilesize-total_bytes) &gt; 5000) onread=5000;\n        else onread=ifilesize-total_bytes;\n\n        memset(buffer,0,sizeof(buffer));\n        ifile.read(buffer,onread);\n        ofile.write(buffer,onread);\n\n        total_bytes = total_bytes + onread;\n\n        if (total_bytes == ifilesize) break;\n    }\n\n    ifile.close();\n    ofile.closeandrename();\n\n    // \u66f4\u6539\u6587\u4ef6\u7684\u4fee\u6539\u65f6\u95f4\u5c5e\u6027\n    string strmtime;\n    filemtime(srcfilename,strmtime);\n    setmtime(dstfilename,strmtime);\n\n    return true;\n}\n</code></pre> <pre><code>int filesize(const string &amp;filename)\n{\n    struct stat st_filestat;      // \u5b58\u653e\u6587\u4ef6\u4fe1\u606f\u7684\u7ed3\u6784\u4f53\u3002\n\n    // \u83b7\u53d6\u6587\u4ef6\u4fe1\u606f\uff0c\u5b58\u653e\u5728\u7ed3\u6784\u4f53\u4e2d\u3002\n    if (stat(filename.c_str(),&amp;st_filestat) &lt; 0) return -1;\n\n    return st_filestat.st_size;   // \u8fd4\u56de\u7ed3\u6784\u4f53\u7684\u6587\u4ef6\u5927\u5c0f\u6210\u5458\u3002\n}\n</code></pre> <pre><code>bool filemtime(const string &amp;filename,string &amp;mtime,const string &amp;fmt)\n{\n    struct stat st_filestat;      // \u5b58\u653e\u6587\u4ef6\u4fe1\u606f\u7684\u7ed3\u6784\u4f53\u3002\n\n    // \u83b7\u53d6\u6587\u4ef6\u4fe1\u606f\uff0c\u5b58\u653e\u5728\u7ed3\u6784\u4f53\u4e2d\u3002\n    if (stat(filename.c_str(),&amp;st_filestat) &lt; 0) return false;\n\n    // \u628a\u6574\u6570\u8868\u793a\u7684\u65f6\u95f4\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\u8868\u793a\u7684\u65f6\u95f4\u3002\n    timetostr(st_filestat.st_mtime,mtime,fmt);\n\n    return true;\n}\n</code></pre> <pre><code>bool filemtime(const string &amp;filename,char *mtime,const string &amp;fmt)\n{\n    struct stat st_filestat;      // \u5b58\u653e\u6587\u4ef6\u4fe1\u606f\u7684\u7ed3\u6784\u4f53\u3002\n\n    // \u83b7\u53d6\u6587\u4ef6\u4fe1\u606f\uff0c\u5b58\u653e\u5728\u7ed3\u6784\u4f53\u4e2d\u3002\n    if (stat(filename.c_str(),&amp;st_filestat) &lt; 0) return false;\n\n    // \u628a\u6574\u6570\u8868\u793a\u7684\u65f6\u95f4\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\u8868\u793a\u7684\u65f6\u95f4\u3002\n    timetostr(st_filestat.st_mtime,mtime,fmt);\n\n    return true;\n}\n</code></pre> <pre><code>bool setmtime(const string &amp;filename,const string &amp;mtime)\n{\n    struct utimbuf stutimbuf;\n\n    stutimbuf.actime=stutimbuf.modtime=strtotime(mtime);\n\n    if (utime(filename.c_str(),&amp;stutimbuf)!=0) return false;\n\n    return true;\n}\n</code></pre>"},{"location":"Project/Backend%20server/ADF/D-File/File%20operation/#_4","title":"\u6d4b\u8bd5","text":"<pre><code>#include \"../_public.h\"\nusing namespace std;\nusing namespace idc;\n\nint main()\n{\n    // \u91cd\u547d\u540d\u6587\u4ef6\u3002\n    if (renamefile(\"/project/public/lib_public.so\",\"/tmp/aaa/bbb/ccc/lib_public.so\")==false)\n    {\n        printf(\"renamefile(/project/public/lib_public.so) %d:%s\\n\",errno,strerror(errno));\n    }\n\n    // \u590d\u5236\u6587\u4ef6\u3002\n    if (copyfile(\"/project/public/libftp.a\",\"/tmp/aaa/ddd/ccc/libftp.a\")==false)\n    {\n        printf(\"copyfile(/project/public/libftp.a) %d:%s\\n\",errno,strerror(errno));\n    }\n\n    // \u83b7\u53d6\u6587\u4ef6\u7684\u5927\u5c0f\u3002\n    printf(\"size=%d\\n\",filesize(\"/project/public/_public.h\"));\n\n    // \u91cd\u7f6e\u6587\u4ef6\u7684\u65f6\u95f4\u3002\n    setmtime(\"/project/public/_public.h\",\"2020-01-05 13:37:29\");\n\n    // \u83b7\u53d6\u6587\u4ef6\u7684\u65f6\u95f4\u3002\n    string mtime;\n    filemtime(\"/project/public/_public.h\",mtime,\"yyyy-mm-dd hh24:mi:ss\");\n    cout &lt;&lt; \"mtime=\" &lt;&lt; mtime &lt;&lt; endl;   // \u8f93\u51famtime=2020-01-05 13:37:29\n    filemtime(\"/project/public/_public.h\",mtime);\n    cout &lt;&lt; \"mtime=\" &lt;&lt; mtime &lt;&lt; endl;   // \u8f93\u51famtime=20200105133729\n}\n</code></pre>"},{"location":"Project/Backend%20server/ADF/D-File/Wrf/","title":"\u8bfb\u5199\u6587\u4ef6","text":""},{"location":"Project/Backend%20server/ADF/D-File/Wrf/#_2","title":"\u5b9a\u4e49","text":"<pre><code>// \u5199\u6587\u4ef6\u7684\u7c7b\n//\u6b65\u9aa4\uff1a\n// 1) \u6253\u5f00\u4e34\u65f6\u6587\u4ef6\u3002\n// 2) \u5411\u4e34\u65f6\u6587\u4ef6\u4e2d\u5199\u5165\u6570\u636e\u3002\n// 3\uff09\u5173\u95ed\u4e34\u65f6\u6587\u4ef6\u3002\n// 4\uff09\u628a\u4e34\u65f6\u6587\u4ef6\u540d\u6539\u540d\u4e3a\u6b63\u5f0f\u7684\u6587\u4ef6\u540d\u3002\n</code></pre> <pre><code>class cofile  // class out file\n{\nprivate:\n    ofstream fout;                  // \u5199\u5165\u6587\u4ef6\u7684\u5bf9\u8c61\u3002\n    string   m_filename;         // \u6587\u4ef6\u540d\uff0c\u5efa\u8bae\u91c7\u7528\u7edd\u5bf9\u8def\u5f84\u3002\n    string   m_filenametmp;  // \u4e34\u65f6\u6587\u4ef6\u540d\uff0c\u5728m_filename\u540e\u9762\u52a0\".tmp\"\u3002\npublic:\n    cofile() {}\n    bool isopen() const { return fout.is_open(); }     // \u6587\u4ef6\u662f\u5426\u5df2\u6253\u5f00\u3002\n\n    // \u6253\u5f00\u6587\u4ef6\u3002\n    // filename\uff0c\u5f85\u6253\u5f00\u7684\u6587\u4ef6\u540d\u3002\n    // btmp\uff0c\u662f\u5426\u91c7\u7528\u4e34\u65f6\u6587\u4ef6\u7684\u65b9\u6848\u3002\n    // mode\uff0c\u6253\u5f00\u6587\u4ef6\u7684\u6a21\u5f0f\u3002\n    // benbuffer\uff0c\u662f\u5426\u542f\u7528\u6587\u4ef6\u7f13\u51b2\u533a\u3002\n     bool open(const string &amp;filename,const bool btmp=true,const ios::openmode mode=ios::out,const bool benbuffer=true);\n\n    // \u628a\u6570\u636e\u4ee5\u6587\u672c\u7684\u65b9\u5f0f\u683c\u5f0f\u5316\u8f93\u51fa\u5230\u6587\u4ef6\u3002\n    template&lt; typename... Args &gt;\n    bool writeline(const char* fmt, Args... args) \n    {\n        if (fout.is_open()==false) return false;\n\n        fout &lt;&lt; sformat(fmt,args...);\n\n        return fout.good();\n    }\n\n    // \u91cd\u8f7d&lt;&lt;\u8fd0\u7b97\u7b26\uff0c\u628a\u6570\u636e\u4ee5\u6587\u672c\u7684\u65b9\u5f0f\u8f93\u51fa\u5230\u6587\u4ef6\u3002\n    // \u6ce8\u610f\uff1a\u6362\u884c\u53ea\u80fd\u7528\\n\uff0c\u4e0d\u80fd\u7528endl\u3002\n    template&lt;typename T&gt;\n    cofile&amp; operator&lt;&lt;(const T &amp;value)\n    {\n        fout &lt;&lt; value; return *this;\n    }\n\n    // \u628a\u4e8c\u8fdb\u5236\u6570\u636e\u5199\u5165\u6587\u4ef6\u3002\n    bool write(void *buf,int bufsize);\n\n    // \u5173\u95ed\u6587\u4ef6\uff0c\u5e76\u4e14\u628a\u4e34\u65f6\u6587\u4ef6\u540d\u6539\u4e3a\u6b63\u5f0f\u6587\u4ef6\u540d\u3002\n    bool closeandrename();\n\n    // \u5173\u95ed\u6587\u4ef6\uff0c\u5982\u679c\u6709\u4e34\u65f6\u6587\u4ef6\uff0c\u5219\u5220\u9664\u5b83\u3002\n    void close();\n\n    ~cofile() { close(); };\n};\n</code></pre> <pre><code>// \u8bfb\u53d6\u6587\u4ef6\u7684\u7c7b\n</code></pre> <pre><code>class cifile    // class in file\n{\nprivate:\n    ifstream fin;                     // \u8bfb\u53d6\u6587\u4ef6\u7684\u5bf9\u8c61\u3002\n    string   m_filename;         // \u6587\u4ef6\u540d\uff0c\u5efa\u8bae\u91c7\u7528\u7edd\u5bf9\u8def\u5f84\u3002\npublic:\n    cifile() {}\n\n    // \u5224\u65ad\u6587\u4ef6\u662f\u5426\u5df2\u6253\u5f00\u3002\n    bool isopen() const { return fin.is_open(); }\n\n    // \u6253\u5f00\u6587\u4ef6\u3002\n    // filename\uff0c\u5f85\u6253\u5f00\u7684\u6587\u4ef6\u540d\u3002\n    // mode\uff0c\u6253\u5f00\u6587\u4ef6\u7684\u6a21\u5f0f\u3002\n    bool open(const string &amp;filename,const ios::openmode mode=ios::in);\n\n    // \u4ee5\u884c\u7684\u65b9\u5f0f\u8bfb\u53d6\u6587\u672c\u6587\u4ef6\uff0cendbz\u6307\u5b9a\u884c\u7684\u7ed3\u5c3e\u6807\u5fd7\uff0c\u7f3a\u7701\u4e3a\u7a7a\uff0c\u6ca1\u6709\u7ed3\u5c3e\u6807\u5fd7\u3002\n    bool readline(string &amp;buf,const string&amp; endbz=\"\");\n\n    // \u8bfb\u53d6\u4e8c\u8fdb\u5236\u6587\u4ef6\uff0c\u8fd4\u56de\u5b9e\u9645\u8bfb\u53d6\u5230\u7684\u5b57\u8282\u6570\u3002\n    int read(void *buf,const int bufsize);\n\n    // \u5173\u95ed\u5e76\u5220\u9664\u6587\u4ef6\u3002\n    bool closeandremove();\n\n    // \u53ea\u5173\u95ed\u6587\u4ef6\u3002\n    void close();\n\n    ~cifile() { close(); }\n};\n</code></pre>"},{"location":"Project/Backend%20server/ADF/D-File/Wrf/#_3","title":"\u5b9e\u73b0","text":"<pre><code>bool cofile::open(const string &amp;filename,const bool btmp,const ios::openmode mode,const bool benbuffer)\n{\n    // \u5982\u679c\u6587\u4ef6\u662f\u6253\u5f00\u7684\u72b6\u6001\uff0c\u5148\u5173\u95ed\u5b83\u3002\n    if (fout.is_open()) fout.close();\n\n    m_filename=filename;\n\n    newdir(m_filename,true);     // \u5982\u679c\u6587\u4ef6\u7684\u76ee\u5f55\u4e0d\u5b58\u5728\uff0c\u521b\u5efa\u76ee\u5f55\u3002\n\n    if (btmp==true) \n    {   // \u91c7\u7528\u4e34\u65f6\u6587\u4ef6\u7684\u65b9\u6848\u3002\n        m_filenametmp=m_filename+\".tmp\";\n        fout.open(m_filenametmp,mode);\n    }\n    else\n    {   // \u4e0d\u91c7\u7528\u4e34\u65f6\u6587\u4ef6\u7684\u65b9\u6848\u3002\n        m_filenametmp.clear();\n        fout.open(m_filename,mode);\n    }\n\n    // \u4e0d\u542f\u7528\u6587\u4ef6\u7f13\u51b2\u533a\u3002\n    if (benbuffer==false) fout &lt;&lt; unitbuf;\n\n    return fout.is_open();\n}\n\nbool cofile::write(void *buf,int bufsize)\n{\n    if (fout.is_open()==false) return false;\n\n    // fout.write((char *)buf,bufsize);\n    fout.write(static_cast&lt;char *&gt;(buf),bufsize);\n\n    return fout.good();\n}\n\n// \u5173\u95ed\u6587\u4ef6\uff0c\u5e76\u4e14\u628a\u4e34\u65f6\u6587\u4ef6\u540d\u6539\u4e3a\u6b63\u5f0f\u6587\u4ef6\u540d\u3002\nbool cofile::closeandrename()\n{\n    if (fout.is_open()==false) return false;\n\n    fout.close();\n\n    //  \u5982\u679c\u91c7\u7528\u4e86\u4e34\u65f6\u6587\u4ef6\u7684\u65b9\u6848\u3002\n    if (m_filenametmp.empty()==false) \n        if (rename(m_filenametmp.c_str(),m_filename.c_str())!=0) return false;\n\n    return true;\n}\n\n// \u5173\u95ed\u6587\u4ef6\uff0c\u5220\u9664\u4e34\u65f6\u6587\u4ef6\u3002\nvoid cofile::close() \n{ \n    if (fout.is_open()==false) return;\n\n    fout.close(); \n\n    //  \u5982\u679c\u91c7\u7528\u4e86\u4e34\u65f6\u6587\u4ef6\u7684\u65b9\u6848\u3002\n    if (m_filenametmp.empty()==false) \n        remove(m_filenametmp.c_str());\n}\n</code></pre> <pre><code>bool cifile::open(const string &amp;filename,const ios::openmode mode)\n{\n    // \u5982\u679c\u6587\u4ef6\u662f\u6253\u5f00\u7684\u72b6\u6001\uff0c\u5148\u5173\u95ed\u5b83\u3002\n    if (fin.is_open()) fin.close();\n\n    m_filename=filename;\n\n    fin.open(m_filename,mode);\n\n    return fin.is_open();\n}\n\nint cifile::read(void *buf,const int bufsize)\n{\n    // fin.read((char *)buf,bufsize);\n    fin.read(static_cast&lt;char *&gt;(buf),bufsize);\n\n    return fin.gcount();          // \u8fd4\u56de\u8bfb\u53d6\u7684\u5b57\u8282\u6570\u3002\n}\n\nbool cifile::closeandremove()\n{\n    if (fin.is_open()==false) return false;\n\n    fin.close(); \n\n    if (remove(m_filename.c_str())!=0) return false;\n\n    return true;\n}\n\nvoid cifile::close() \n{ \n    if (fin.is_open()==false) return;\n\n    fin.close(); \n}\n\nbool cifile::readline(string &amp;buf,const string&amp; endbz)\n{\n    buf.clear();            // \u6e05\u7a7abuf\u3002\n\n    string strline;        // \u5b58\u653e\u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u7684\u4e00\u884c\u3002\n\n    while (true)\n    {\n        getline(fin,strline);    // \u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u4e00\u884c\u3002\n\n        if (fin.eof()) break;    // \u5982\u679c\u6587\u4ef6\u5df2\u8bfb\u5b8c\u3002\n\n        buf=buf+strline;      // \u628a\u8bfb\u53d6\u7684\u5185\u5bb9\u62fc\u63a5\u5230buf\u4e2d\u3002\n\n        if (endbz==\"\")\n            return true;          // \u5982\u679c\u884c\u6ca1\u6709\u7ed3\u5c3e\u6807\u5fd7\u3002\n        else \n        {\n            // \u5982\u679c\u884c\u6709\u7ed3\u5c3e\u6807\u5fd7\uff0c\u5224\u65ad\u672c\u6b21\u662f\u5426\u8bfb\u5230\u4e86\u7ed3\u5c3e\u6807\u5fd7\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u7ee7\u7eed\u8bfb\uff0c\u5982\u679c\u6709\uff0c\u8fd4\u56de\u3002\n            if (buf.find(endbz,buf.length()-endbz.length()) != string::npos) return true;\n        }\n\n        buf=buf+\"\\n\";        // getline\u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u4e00\u884c\u7684\u65f6\u5019\uff0c\u4f1a\u5220\u9664\\n\uff0c\u6240\u4ee5\uff0c\u8fd9\u91cc\u8981\u8865\u4e0a\\n\uff0c\u56e0\u4e3a\u8fd9\u4e2a\\n\u4e0d\u5e94\u8be5\u88ab\u5220\u9664\u3002\n    }\n\n    return false;\n}\n</code></pre>"},{"location":"Project/Backend%20server/ADF/D-File/Wrf/#_4","title":"\u6d4b\u8bd5","text":"<pre><code>//cofile\u7c7b\u5411\u6587\u4ef6\u4e2d\u5199\u5165\u6587\u672c\u6570\u636e\u3002\n\n#include \"../_public.h\"\nusing namespace std;\nusing namespace idc;  \n\nint main()\n{\n    cofile ofile;      \n\n    // \u521b\u5efa\u6587\u4ef6\uff0c\u5b9e\u9645\u521b\u5efa\u7684\u662f\u4e34\u65f6\u6587\u4ef6\uff0c\u4f8b\u5982/tmp/data/girl.xml.tmp\u3002\n    if (ofile.open(\"/tmp/data/girl.xml\")==false)\n    {\n        printf(\"ofile.open(/tmp/data/girl.xml) failed.\\n\"); return -1;\n    }\n\n    // \u7528&lt;&lt;\u8f93\u51fa\u5230\u6587\u4ef6\uff0c\u4e0ecout\u7684\u7528\u6cd5\u76f8\u540c\u3002\n    ofile &lt;&lt; \"&lt;data&gt;\" &lt;&lt; \"\\n\";         // \u6362\u884c\u53ea\u80fd\u7528\\n\uff0c\u4e0d\u80fd\u7528endl,endl\u5728\u8f93\u51fa\u6d41\u4e2d\u63d2\u5165\u4e00\u4e2a\u6362\u884c\u7b26(\\n)\u5e76\u5237\u65b0\u8f93\u51fa\u7f13\u51b2\u533a\n\n    // \u683c\u5f0f\u5316\u8f93\u51fa\u5230\u6587\u4ef6\u3002\n    ofile.writeline(\"&lt;name&gt;%s&lt;/name&gt;&lt;age&gt;%d&lt;/age&gt;&lt;sc&gt;%s&lt;/sc&gt;&lt;yz&gt;%s&lt;/yz&gt;&lt;memo&gt;%s&lt;/memo&gt;&lt;endl/&gt;\\n\",\\\n                           \"\u59b2\u5df2\",28,\"\u706b\u8fa3\",\"\u6f02\u4eae\",\"\u5546\u8981\u4ea1\uff0c\u5173\u6211\u4ec0\u4e48\u4e8b\u3002\");\n    ofile.writeline(\"&lt;name&gt;%s&lt;/name&gt;&lt;age&gt;25&lt;/age&gt;&lt;sc&gt;\u706b\u8fa3&lt;/sc&gt;&lt;yz&gt;\u6f02\u4eae&lt;/yz&gt;&lt;memo&gt;1\u3001\u4e2d\u56fd\u6392\u540d\u7b2c\u4e00\u7684\u7f8e\u5973\uff1b\\n\"\\\n         \"2\u3001\u7537\u670b\u53cb\u662f\u8303\u8821\uff1b\\n\"\\\n         \"3\u3001\u8001\u516c\u662f\u592b\u5dee\uff0c\u88ab\u52fe\u8df5\u5f04\u6b7b\u4e86\u3002&lt;/memo&gt;&lt;endl/&gt;\\n\",\"\u897f\u65bd\");\n\n    ofile &lt;&lt; \"&lt;/data&gt;\\n\";                 // \u6362\u884c\u53ea\u80fd\u7528\\n\uff0c\u4e0d\u80fd\u7528endl\u3002\n\n    // sleep(10);   // \u7528ls /tmp/data/*.tmp\u53ef\u4ee5\u770b\u5230\u751f\u6210\u7684\u4e34\u65f6\u6587\u4ef6\u3002\n\n    // \u5173\u95ed\u6587\u4ef6\uff0c\u5e76\u628a\u4e34\u65f6\u6587\u4ef6\u540d\u6539\u4e3a\u6b63\u5f0f\u7684\u6587\u4ef6\u540d\u3002\n    ofile.closeandrename();\n}\n</code></pre> <pre><code>//cifile\u7c7b\u4ece\u6587\u672c\u6587\u4ef6\u4e2d\u8bfb\u53d6\u6570\u636e\u3002\n\n#include \"../_public.h\"\nusing namespace std;\nusing namespace idc;\n\nint main()\n{\n    cifile ifile;\n\n    // \u6253\u5f00\u6587\u4ef6\u3002\n    if (ifile.open(\"/tmp/data/girl.xml\")==false)\n    {\n        printf(\"ofile.open(/tmp/data/girl.xml) failed.\\n\"); return -1;\n    }\n\n    string strline;   // \u5b58\u653e\u4ece\u6587\u672c\u6587\u4ef6\u4e2d\u8bfb\u53d6\u7684\u4e00\u884c\u3002\n\n    while (true)\n    {\n        // \u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u4e00\u884c\u3002\n        if (ifile.readline(strline,\"&lt;endl/&gt;\")==false) break;\n\n        cout &lt;&lt; \"=\" &lt;&lt; strline &lt;&lt; \"=\\n\";\n    }\n\n    // ifile.closeandremove();     // \u5173\u95ed\u5e76\u5220\u9664\u6587\u4ef6\u3002\n    ifile.close();                       // \u5173\u95ed\u6587\u4ef6\u3002\n}\n</code></pre> <pre><code>//cofile\u7c7b\u5411\u6587\u4ef6\u4e2d\u5199\u5165\u4e8c\u8fdb\u5236\u6570\u636e\n\n#include \"../_public.h\"\nusing namespace std;\nusing namespace idc;\n\nint main()\n{\n    cofile ofile;\n\n    // \u521b\u5efa\u6587\u4ef6\uff0c\u5b9e\u9645\u521b\u5efa\u7684\u662f\u4e34\u65f6\u6587\u4ef6\uff0c\u4f8b\u5982/tmp/data/girl.dat.tmp\u3002\n    if (ofile.open(\"/tmp/data/girl.dat\",true,ios::binary)==false)\n    {\n        printf(\"ofile.open(/tmp/data/girl.dat) failed.\\n\"); return -1;\n    }\n\n    struct st_girl\n    {\n        int bh;\n        char name[21];\n    }girl;\n\n    memset(&amp;girl,0,sizeof(girl));\n    girl.bh=8;\n    strcpy(girl.name,\"\u897f\u65bd\");\n    ofile.write(&amp;girl,sizeof(girl));\n\n    // sleep(30);   // \u7528ls /tmp/data/*.tmp\u53ef\u4ee5\u770b\u5230\u751f\u6210\u7684\u4e34\u65f6\u6587\u4ef6\u3002\n\n    // \u5173\u95ed\u6587\u4ef6\uff0c\u5e76\u628a\u4e34\u65f6\u6587\u4ef6\u540d\u6539\u4e3a\u6b63\u5f0f\u7684\u6587\u4ef6\u540d\u3002\n    ofile.closeandrename();\n}\n</code></pre>"},{"location":"Project/Backend%20server/ADF/Log-File/LogFile/","title":"\u65e5\u5fd7\u6587\u4ef6","text":""},{"location":"Project/Backend%20server/ADF/Log-File/LogFile/#_2","title":"\u5b9a\u4e49","text":"<pre><code>// \u81ea\u65cb\u9501\nclass spinlock_mutex\n{\nprivate:\n    atomic_flag flag;\n\n    spinlock_mutex(const spinlock_mutex&amp;) = delete;\n    spinlock_mutex&amp; operator=(const spinlock_mutex) = delete;\npublic:\n    spinlock_mutex() \n    {\n        flag.clear();\n    }\n    void lock()           // \u52a0\u9501\u3002\n    {\n        while (flag.test_and_set())\n            ;\n    }\n    void unlock()      // \u89e3\u9501\u3002\n    {\n        flag.clear();\n    }\n};\n</code></pre> <pre><code>// \u65e5\u5fd7\u6587\u4ef6\nclass clogfile\n{\n    ofstream fout;                       // \u65e5\u5fd7\u6587\u4ef6\u5bf9\u8c61\u3002\n    string   m_filename;              // \u65e5\u5fd7\u6587\u4ef6\u540d\uff0c\u5efa\u8bae\u91c7\u7528\u7edd\u5bf9\u8def\u5f84\u3002\n    ios::openmode m_mode;      // \u65e5\u5fd7\u6587\u4ef6\u7684\u6253\u5f00\u6a21\u5f0f\u3002\n    bool     m_backup;                // \u662f\u5426\u81ea\u52a8\u5207\u6362\u65e5\u5fd7\u3002\n    int        m_maxsize;               // \u5f53\u65e5\u5fd7\u6587\u4ef6\u7684\u5927\u5c0f\u8d85\u8fc7\u672c\u53c2\u6570\u65f6\uff0c\u81ea\u52a8\u5207\u6362\u65e5\u5fd7\u3002\n    bool     m_enbuffer;              // \u662f\u5426\u542f\u7528\u6587\u4ef6\u7f13\u51b2\u533a\u3002\n    spinlock_mutex m_splock;    // \u81ea\u65cb\u9501\uff0c\u7528\u4e8e\u591a\u7ebf\u7a0b\u7a0b\u5e8f\u4e2d\u7ed9\u5199\u65e5\u5fd7\u7684\u64cd\u4f5c\u52a0\u9501\u3002\n\npublic:\n    // \u6784\u9020\u51fd\u6570\uff0c\u65e5\u5fd7\u6587\u4ef6\u7684\u5927\u5c0f\u7f3a\u7701100M\u3002\n    clogfile(int maxsize=100):m_maxsize(maxsize){}\n\n    // \u6253\u5f00\u65e5\u5fd7\u6587\u4ef6\u3002\n    // filename\uff1a\u65e5\u5fd7\u6587\u4ef6\u540d\uff0c\u5efa\u8bae\u91c7\u7528\u7edd\u5bf9\u8def\u5f84\uff0c\u5982\u679c\u6587\u4ef6\u540d\u4e2d\u7684\u76ee\u5f55\u4e0d\u5b58\u5728\uff0c\u5c31\u5148\u521b\u5efa\u76ee\u5f55\u3002\n    // openmode\uff1a\u65e5\u5fd7\u6587\u4ef6\u7684\u6253\u5f00\u6a21\u5f0f\uff0c\u7f3a\u7701\u503c\u662fios::app\u3002\n    // bbackup\uff1a\u662f\u5426\u81ea\u52a8\u5207\u6362\uff08\u5907\u4efd\uff09\uff0ctrue-\u5207\u6362\uff0cfalse-\u4e0d\u5207\u6362\uff0c\u5728\u591a\u8fdb\u7a0b\u7684\u670d\u52a1\u7a0b\u5e8f\u4e2d\uff0c\u5982\u679c\u591a\u4e2a\u8fdb\u7a0b\u5171\u7528\u4e00\u4e2a\u65e5\u5fd7\u6587\u4ef6\uff0cbbackup\u5fc5\u987b\u4e3afalse\u3002\n    // benbuffer\uff1a\u662f\u5426\u542f\u7528\u6587\u4ef6\u7f13\u51b2\u673a\u5236\uff0ctrue-\u542f\u7528\uff0cfalse-\u4e0d\u542f\u7528\uff0c\u5982\u679c\u542f\u7528\u7f13\u51b2\u533a\uff0c\u90a3\u4e48\u5199\u8fdb\u65e5\u5fd7\u6587\u4ef6\u4e2d\u7684\u5185\u5bb9\u4e0d\u4f1a\u7acb\u5373\u5199\u5165\u6587\u4ef6\uff0c\u7f3a\u7701\u662f\u4e0d\u542f\u7528\u3002\n    // \u6ce8\u610f\uff0c\u5728\u591a\u8fdb\u7a0b\u7684\u7a0b\u5e8f\u4e2d\uff0c\u591a\u4e2a\u8fdb\u7a0b\u5f80\u540c\u4e00\u65e5\u5fd7\u6587\u4ef6\u5199\u5165\u5927\u91cf\u7684\u65e5\u5fd7\u65f6\uff0c\u53ef\u80fd\u4f1a\u51fa\u73b0\u5c0f\u6df7\u4e71\uff0c\u4f46\u662f\uff0c\u591a\u7ebf\u7a0b\u4e0d\u4f1a\u3002\n    // 1\uff09\u591a\u4e2a\u8fdb\u7a0b\u5f80\u540c\u4e00\u65e5\u5fd7\u6587\u4ef6\u5199\u5165\u5927\u91cf\u7684\u65e5\u5fd7\u65f6\uff0c\u53ef\u80fd\u4f1a\u51fa\u73b0\u5c0f\u6df7\u4e71\uff0c\u8fd9\u4e2a\u95ee\u9898\u5e76\u4e0d\u4e25\u91cd\uff0c\u53ef\u4ee5\u5bb9\u5fcd\uff1b\n    // 2\uff09\u53ea\u6709\u540c\u65f6\u5199\u5927\u91cf\u65e5\u5fd7\u65f6\u624d\u4f1a\u51fa\u73b0\u6df7\u4e71\uff0c\u5728\u5b9e\u9645\u5f00\u53d1\u4e2d\uff0c\u8fd9\u79cd\u60c5\u51b5\u4e0d\u591a\u89c1\u3002\n    // 3\uff09\u5982\u679c\u4e1a\u52a1\u65e0\u6cd5\u5bb9\u5fcd\uff0c\u53ef\u4ee5\u7528\u4fe1\u53f7\u91cf\u52a0\u9501\u3002\n    bool open(const string &amp;filename,const ios::openmode mode=ios::app,const bool bbackup=true,const bool benbuffer=false);\n\n    // \u628a\u65e5\u5fd7\u5185\u5bb9\u4ee5\u6587\u672c\u7684\u65b9\u5f0f\u683c\u5f0f\u5316\u8f93\u51fa\u5230\u65e5\u5fd7\u6587\u4ef6\uff0c\u5e76\u4e14\uff0c\u5728\u65e5\u5fd7\u5185\u5bb9\u524d\u9762\u5199\u5165\u65f6\u95f4\u3002\n    template&lt; typename... Args &gt;\n    bool write(const char* fmt, Args... args) \n    {\n        if (fout.is_open()==false) return false;\n\n        backup();                   // \u5224\u65ad\u662f\u5426\u9700\u8981\u5207\u6362\u65e5\u5fd7\u6587\u4ef6\u3002\n\n        m_splock.lock();        // \u52a0\u9501\u3002\n        fout &lt;&lt; ltime1() &lt;&lt; \" \" &lt;&lt; sformat(fmt,args...);      // \u628a\u5f53\u524d\u65f6\u95f4\u548c\u65e5\u5fd7\u5185\u5bb9\u5199\u5165\u65e5\u5fd7\u6587\u4ef6\u3002\n        m_splock.unlock();    // \u89e3\u9501\u3002\n\n        return fout.good();\n    }\n\n    // \u91cd\u8f7d&lt;&lt;\u8fd0\u7b97\u7b26\uff0c\u628a\u65e5\u5fd7\u5185\u5bb9\u4ee5\u6587\u672c\u7684\u65b9\u5f0f\u8f93\u51fa\u5230\u65e5\u5fd7\u6587\u4ef6\uff0c\u4e0d\u4f1a\u5728\u65e5\u5fd7\u5185\u5bb9\u524d\u9762\u5199\u65f6\u95f4\u3002\n    // \u6ce8\u610f\uff1a\u5185\u5bb9\u6362\u884c\u7528\\n\uff0c\u4e0d\u80fd\u7528endl\u3002\n    template&lt;typename T&gt;\n    clogfile&amp; operator&lt;&lt;(const T &amp;value)\n    {\n        m_splock.lock();\n        fout &lt;&lt; value; \n        m_splock.unlock();\n\n        return *this;\n    }\n\nprivate:\n    // \u5982\u679c\u65e5\u5fd7\u6587\u4ef6\u7684\u5927\u5c0f\u8d85\u8fc7m_maxsize\u7684\u503c\uff0c\u5c31\u628a\u5f53\u524d\u7684\u65e5\u5fd7\u6587\u4ef6\u540d\u6539\u4e3a\u5386\u53f2\u65e5\u5fd7\u6587\u4ef6\u540d\uff0c\u518d\u521b\u5efa\u65b0\u7684\u5f53\u524d\u65e5\u5fd7\u6587\u4ef6\u3002\n    // \u5907\u4efd\u540e\u7684\u6587\u4ef6\u4f1a\u5728\u65e5\u5fd7\u6587\u4ef6\u540d\u540e\u52a0\u4e0a\u65e5\u671f\u65f6\u95f4\uff0c\u5982/tmp/log/filetodb.log.20200101123025\u3002\n    // \u6ce8\u610f\uff0c\u5728\u591a\u8fdb\u7a0b\u7684\u7a0b\u5e8f\u4e2d\uff0c\u65e5\u5fd7\u6587\u4ef6\u4e0d\u53ef\u5207\u6362\uff0c\u591a\u7ebf\u7684\u7a0b\u5e8f\u4e2d\uff0c\u65e5\u5fd7\u6587\u4ef6\u53ef\u4ee5\u5207\u6362\u3002\n    bool backup();\npublic:\n    void close() { fout.close(); }\n\n    ~clogfile() { close(); };\n};\n</code></pre>"},{"location":"Project/Backend%20server/ADF/Log-File/LogFile/#_3","title":"\u5b9e\u73b0","text":"<pre><code>bool clogfile::open(const string &amp;filename,const ios::openmode mode,const bool bbackup,const bool benbuffer)\n{\n    // \u5982\u679c\u65e5\u5fd7\u6587\u4ef6\u662f\u6253\u5f00\u7684\u72b6\u6001\uff0c\u5148\u5173\u95ed\u5b83\u3002\n    if (fout.is_open()) fout.close();\n\n    m_filename=filename;        // \u65e5\u5fd7\u6587\u4ef6\u540d\u3002\n    m_mode=mode;                 // \u6253\u5f00\u6a21\u5f0f\u3002\n    m_backup=bbackup;          // \u662f\u5426\u81ea\u52a8\u5907\u4efd\u3002\n    m_enbuffer=benbuffer;      // \u662f\u5426\u542f\u7528\u6587\u4ef6\u7f13\u51b2\u533a\u3002\n\n    newdir(m_filename,true);                              // \u5982\u679c\u65e5\u5fd7\u6587\u4ef6\u7684\u76ee\u5f55\u4e0d\u5b58\u5728\uff0c\u521b\u5efa\u5b83\u3002\n\n    fout.open(m_filename,m_mode);                  // \u6253\u5f00\u65e5\u5fd7\u6587\u4ef6\u3002\n\n    if (m_enbuffer==false) fout &lt;&lt; unitbuf;       // \u662f\u5426\u542f\u7528\u6587\u4ef6\u7f13\u51b2\u533a\u3002\n\n    return fout.is_open();\n}\n</code></pre> <pre><code>bool clogfile::backup()\n{\n    // \u4e0d\u5907\u4efd\n    if (m_backup == false) return true;\n\n    if (fout.is_open() == false) return false;\n\n    // \u5982\u679c\u5f53\u524d\u65e5\u5fd7\u6587\u4ef6\u7684\u5927\u5c0f\u8d85\u8fc7m_maxsize\uff0c\u5907\u4efd\u65e5\u5fd7\u3002\n    if (fout.tellp() &gt; m_maxsize*1024*1024)\n    {\n        m_splock.lock();       // \u52a0\u9501\u3002\n\n        fout.close();              // \u5173\u95ed\u5f53\u524d\u65e5\u5fd7\u6587\u4ef6\u3002\n\n        // \u62fc\u63a5\u5907\u4efd\u65e5\u5fd7\u6587\u4ef6\u540d\u3002\n        string bak_filename=m_filename+\".\"+ltime1(\"yyyymmddhh24miss\");\n\n        rename(m_filename.c_str(),bak_filename.c_str());   // \u628a\u5f53\u524d\u65e5\u5fd7\u6587\u4ef6\u6539\u540d\u4e3a\u5907\u4efd\u65e5\u5fd7\u6587\u4ef6\u3002\n\n        fout.open(m_filename,m_mode);              // \u91cd\u65b0\u6253\u5f00\u5f53\u524d\u65e5\u5fd7\u6587\u4ef6\u3002\n\n        if (m_enbuffer==false) fout &lt;&lt; unitbuf;   // \u5224\u65ad\u662f\u5426\u542f\u52a8\u6587\u4ef6\u7f13\u51b2\u533a\u3002\n\n        m_splock.unlock();   // \u89e3\u9501\u3002\n\n        return fout.is_open();\n    }\n\n    return true;\n}\n</code></pre>"},{"location":"Project/Backend%20server/ADF/Log-File/LogFile/#_4","title":"\u6d4b\u8bd5","text":"<pre><code>// clogfile\u7c7b\u8bb0\u5f55\u7a0b\u5e8f\u7684\u8fd0\u884c\u65e5\u5fd7\u3002\n\n#include \"../_public.h\"\nusing namespace std;\nusing namespace idc;\n\nint main()\n{\n    clogfile logfile;      // \u521b\u5efa\u65e5\u5fd7\u5bf9\u8c61\u3002\n\n    // \u6253\u5f00\u65e5\u5fd7\u6587\u4ef6\u3002\n    if (logfile.open(\"/tmp/log/demo42.log\",ios::out,false)==false)\n    {\n        printf(\"logfile.open(/tmp/log/demo42.log) failed.\\n\");  return -1;\n    }\n\n    logfile.write(\"\u7a0b\u5e8f\u5f00\u59cb\u8fd0\u884c\u3002\\n\");\n\n    for (int ii=0;ii&lt;5000000;ii++)\n    {\n        logfile.write(\"\u8fd9\u662f\u7b2c%d\u4e2a%s...ok.\\n\",ii,\"\u8d85\u7ea7\u5973\u751f\");\n        //logfile.write(\"\u7b2c%d\u4e2a\u8d85\u5973\u5f00\u59cb\u8868\u6f14...\",ii);  // \u8868\u6f14\u524d\uff0c\u5199\u4e00\u884c\u65e5\u5fd7\uff0c...\u8868\u793a\u6b63\u5728\u8868\u6f14\u4e2d\u3002\n        //sleep(2);                                // \u8d85\u5973\u5728\u8868\u6f14\u4e2d\u3002\n        //logfile &lt;&lt; \"ok.\\n\";                      / \u8868\u6f14\u5b8c\u6210\u540e\uff0c\u5199\u5165ok\u3002\n    }\n\n    logfile.write(\"\u7a0b\u5e8f\u8fd0\u884c\u7ed3\u675f\u3002\\n\");\n}\n</code></pre>"},{"location":"Project/Backend%20server/ADF/Monitor-scheduling/Business%20requirements/","title":"\u670d\u52a1\u7a0b\u5e8f\u50f5\u6b7b","text":""},{"location":"Project/Backend%20server/ADF/Monitor-scheduling/Business%20requirements/#_2","title":"\u670d\u52a1\u7a0b\u5e8f\u7684\u76d1\u63a7\u548c\u8c03\u5ea6","text":"<ul> <li> <p>\u5468\u671f\u6027\u7684\u8fd0\u884c\u670d\u52a1\u7a0b\u5e8f</p> </li> <li> <p>\u68c0\u67e5\u670d\u52a1\u7a0b\u5e8f\u662f\u5426\u6d3b\u7740\uff0c\u5982\u679c\u6b7b\u4e86\uff0c\u7ec8\u6b62\u5b83</p> </li> <li> <p>\u5982\u679c\u670d\u52a1\u7a0b\u5e8f\u5df2\u7ec8\u6b62\uff0c\u91cd\u542f\u5b83</p> </li> <li>\u4e3a\u4fdd\u8bc1\u7cfb\u7edf\u7684\u7a33\u5b9a\u8fd0\u884c\uff0c\u8c03\u5ea6\u6a21\u5757\u3001\u8fdb\u7a0b\u5fc3\u8df3\u3001\u8fdb\u7a0b\u76d1\u63a7\u534f\u540c\u5de5\u4f5c</li> </ul>"},{"location":"Project/Backend%20server/ADF/Monitor-scheduling/Guardian%20module/","title":"\u5b88\u62a4\u6a21\u5757","text":""},{"location":"Project/Backend%20server/ADF/Monitor-scheduling/Guardian%20module/#_2","title":"\u5b9a\u4e49","text":"<ul> <li>\u68c0\u67e5\u5171\u4eab\u5185\u5b58\u4e2d\u8fdb\u7a0b\u7684\u5fc3\u8df3\uff0c\u5982\u679c\u8d85\u65f6\uff0c\u5219\u7ec8\u6b62\u8fdb\u7a0b</li> <li>\u8d85\u65f6\u88ab\u7ec8\u6b62\u7684\u8fdb\u7a0b\u5c06\u7531\u8c03\u5ea6\u6a21\u5757\uff08procctl\uff09 \u91cd\u542f</li> </ul>"},{"location":"Project/Backend%20server/ADF/Monitor-scheduling/Guardian%20module/#_3","title":"\u5b9e\u73b0","text":"<pre><code>// \u5b88\u62a4\u7a0b\u5e8f\uff1a\u68c0\u67e5\u5171\u4eab\u5185\u5b58\u4e2d\u8fdb\u7a0b\u7684\u5fc3\u8df3\uff0c\u5982\u679c\u8d85\u65f6\uff0c\u5219\u7ec8\u6b62\u8fdb\u7a0b\u3002\n#include \"_public.h\"\nusing namespace idc;\n\nint main(int argc,char *argv[])\n{\n    // \u7a0b\u5e8f\u7684\u5e2e\u52a9\u3002\n    if (argc != 2)\n    {\n        printf(\"\\n\");\n        printf(\"Using:./checkproc logfilename\\n\");\n\n        printf(\"Example:/project/tools/bin/procctl 10 /project/tools/bin/checkproc /tmp/log/checkproc.log\\n\\n\");\n\n        printf(\"\u672c\u7a0b\u5e8f\u7528\u4e8e\u68c0\u67e5\u540e\u53f0\u670d\u52a1\u7a0b\u5e8f\u662f\u5426\u8d85\u65f6\uff0c\u5982\u679c\u5df2\u8d85\u65f6\uff0c\u5c31\u7ec8\u6b62\u5b83\u3002\\n\");\n        printf(\"\u6ce8\u610f\uff1a\\n\");\n        printf(\"  1\uff09\u672c\u7a0b\u5e8f\u7531procctl\u542f\u52a8\uff0c\u8fd0\u884c\u5468\u671f\u5efa\u8bae\u4e3a10\u79d2\u3002\\n\");\n        printf(\"  2\uff09\u4e3a\u4e86\u907f\u514d\u88ab\u666e\u901a\u7528\u6237\u8bef\u6740\uff0c\u672c\u7a0b\u5e8f\u5e94\u8be5\u7528root\u7528\u6237\u542f\u52a8\u3002\\n\");\n        printf(\"  3\uff09\u5982\u679c\u8981\u505c\u6b62\u672c\u7a0b\u5e8f\uff0c\u53ea\u80fd\u7528killall -9 \u7ec8\u6b62\u3002\\n\\n\\n\");\n\n        return 0;\n    }\n\n    // \u5ffd\u7565\u5168\u90e8\u7684\u4fe1\u53f7\u548cIO\uff0c\u4e0d\u5904\u7406\u7a0b\u5e8f\u7684\u9000\u51fa\u4fe1\u53f7\u3002\n    closeioandsignal(true);\n\n    // \u6253\u5f00\u65e5\u5fd7\u6587\u4ef6\u3002\n    clogfile logfile;  // \u7a0b\u5e8f\u8fd0\u884c\u7684\u65e5\u5fd7\u3002\n    if (logfile.open(argv[1])==false) \n    { \n        printf(\"logfile.open(%s) failed.\\n\",argv[1]);   return -1; \n    }\n\n    // \u521b\u5efa/\u83b7\u53d6\u5171\u4eab\u5185\u5b58\uff0c\u952e\u503c\u4e3aSHMKEYP\uff0c\u5927\u5c0f\u4e3aMAXNUMP\u4e2ast_procinfo\u7ed3\u6784\u4f53\u7684\u5927\u5c0f\u3002\n    int shmid=0;\n    if ( (shmid = shmget((key_t)SHMKEYP, MAXNUMP*sizeof(struct st_procinfo), 0666|IPC_CREAT)) == -1)\n    {\n        logfile.write(\"\u521b\u5efa/\u83b7\u53d6\u5171\u4eab\u5185\u5b58(%x)\u5931\u8d25\u3002\\n\",SHMKEYP); return false;\n    }\n\n    // \u5c06\u5171\u4eab\u5185\u5b58\u8fde\u63a5\u5230\u5f53\u524d\u8fdb\u7a0b\u7684\u5730\u5740\u7a7a\u95f4\u3002\n    struct st_procinfo *shm=(struct st_procinfo *)shmat(shmid, 0, 0);\n\n    // \u904d\u5386\u5171\u4eab\u5185\u5b58\u4e2d\u5168\u90e8\u7684\u8bb0\u5f55\uff0c\u5982\u679c\u8fdb\u7a0b\u5df2\u8d85\u65f6\uff0c\u7ec8\u6b62\u5b83\u3002\n    for (int ii=0;ii&lt;MAXNUMP;ii++)\n    {\n        // \u5982\u679c\u8bb0\u5f55\u7684pid==0\uff0c\u8868\u793a\u7a7a\u8bb0\u5f55\uff0ccontinue;\n        if (shm[ii].pid==0) continue;\n\n        // \u5982\u679c\u8bb0\u5f55\u7684pid!=0\uff0c\u8868\u793a\u662f\u670d\u52a1\u7a0b\u5e8f\u7684\u5fc3\u8df3\u8bb0\u5f55\u3002\n\n        // \u663e\u793a\u8fdb\u7a0b\u4fe1\u606f\uff0c\u7a0b\u5e8f\u7a33\u5b9a\u8fd0\u884c\u540e\uff0c\u4ee5\u4e0b\u4e24\u884c\u4ee3\u7801\u53ef\u4ee5\u6ce8\u91ca\u6389\u3002\n        //logfile.write(\"ii=%d,pid=%d,pname=%s,timeout=%d,atime=%d\\n\",\\\n        //               ii,shm[ii].pid,shm[ii].pname,shm[ii].timeout,shm[ii].atime);\n\n        // \u5982\u679c\u8fdb\u7a0b\u5df2\u7ecf\u4e0d\u5b58\u5728\u4e86\uff0c\u5171\u4eab\u5185\u5b58\u4e2d\u662f\u6b8b\u7559\u7684\u5fc3\u8df3\u4fe1\u606f\u3002\n        // \u5411\u8fdb\u7a0b\u53d1\u9001\u4fe1\u53f70\uff0c\u5224\u65ad\u5b83\u662f\u5426\u8fd8\u5b58\u5728\uff0c\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u4ece\u5171\u4eab\u5185\u5b58\u4e2d\u5220\u9664\u8be5\u8bb0\u5f55\uff0ccontinue;\n        int iret=kill(shm[ii].pid,0);\n        if (iret==-1)\n        {\n            logfile.write(\"\u8fdb\u7a0bpid=%d(%s)\u5df2\u7ecf\u4e0d\u5b58\u5728\u3002\\n\",shm[ii].pid,shm[ii].pname);\n            memset(&amp;shm[ii],0,sizeof(struct st_procinfo));   // \u4ece\u5171\u4eab\u5185\u5b58\u4e2d\u5220\u9664\u8be5\u8bb0\u5f55\u3002\n            continue;\n        } \n\n        // \u5224\u65ad\u8fdb\u7a0b\u7684\u5fc3\u8df3\u662f\u5426\u8d85\u65f6\uff0c\u5982\u679c\u8d85\u65f6\u4e86\uff0c\u5c31\u7ec8\u6b62\u5b83\u3002\n\n        time_t now=time(0);   // \u83b7\u53d6\u5f53\u524d\u65f6\u95f4\u3002\n\n        // \u5982\u679c\u8fdb\u7a0b\u672a\u8d85\u65f6\uff0ccontinue;\n        if (now-shm[ii].atime&lt;shm[ii].timeout) continue;\n\n        // \u4e00\u5b9a\u8981\u628a\u8fdb\u7a0b\u7684\u7ed3\u6784\u4f53\u5907\u4efd\u51fa\u6765\uff0c\u4e0d\u80fd\u76f4\u63a5\u7528\u5171\u4eab\u5185\u5b58\u4e2d\u7684\u503c\uff0c\n        // \u9632\u6b62kill(shm[ii].pid,15);\u7acb\u5373\u7ed3\u675f\u8fdb\u7a0b,\u5c06shm[ii].pid\u81f3\u4e3a0\n        struct st_procinfo tmp=shm[ii];\n        if (tmp.pid==0) continue;  \n\n        // \u5982\u679c\u5df2\u8d85\u65f6\u3002\n        logfile.write(\"\u8fdb\u7a0bpid=%d(%s)\u5df2\u7ecf\u8d85\u65f6\u3002\\n\",tmp.pid,tmp.pname);\n\n        // \u53d1\u9001\u4fe1\u53f715\uff0c\u5c1d\u8bd5\u6b63\u5e38\u7ec8\u6b62\u5df2\u8d85\u65f6\u7684\u8fdb\u7a0b\u3002\n        kill(tmp.pid,15);     \n\n        // \u6bcf\u96941\u79d2\u5224\u65ad\u4e00\u6b21\u8fdb\u7a0b\u662f\u5426\u5b58\u5728\uff0c\u7d2f\u8ba15\u79d2\uff0c\u4e00\u822c\u6765\u8bf4\uff0c5\u79d2\u7684\u65f6\u95f4\u8db3\u591f\u8ba9\u8fdb\u7a0b\u9000\u51fa\u3002\n        for (int jj=0;jj&lt;5;jj++)\n        {\n            sleep(1);\n            iret=kill(tmp.pid,0);     // \u5411\u8fdb\u7a0b\u53d1\u9001\u4fe1\u53f70\uff0c\u5224\u65ad\u5b83\u662f\u5426\u8fd8\u5b58\u5728\u3002\n            if (iret==-1) break;         // \u8fdb\u7a0b\u5df2\u9000\u51fa\u3002\n        }\n\n        if (iret==-1)\n            logfile.write(\"\u8fdb\u7a0bpid=%d(%s)\u5df2\u7ecf\u6b63\u5e38\u7ec8\u6b62\u3002\\n\",tmp.pid,tmp.pname);\n        else\n        {   \n            // \u5982\u679c\u8fdb\u7a0b\u4ecd\u5b58\u5728\uff0c\u5c31\u53d1\u9001\u4fe1\u53f79\uff0c\u5f3a\u5236\u7ec8\u6b62\u5b83\u3002\n            kill(tmp.pid,9);  \n            logfile.write(\"\u8fdb\u7a0bpid=%d(%s)\u5df2\u7ecf\u5f3a\u5236\u7ec8\u6b62\u3002\\n\",tmp.pid,tmp.pname);\n\n            // \u4ece\u5171\u4eab\u5185\u5b58\u4e2d\u5220\u9664\u5df2\u8d85\u65f6\u8fdb\u7a0b\u7684\u5fc3\u8df3\u8bb0\u5f55\u3002\n            memset(shm+ii,0,sizeof(struct st_procinfo));\n        }\n    }\n\n    // \u628a\u5171\u4eab\u5185\u5b58\u4ece\u5f53\u524d\u8fdb\u7a0b\u4e2d\u5206\u79bb\u3002\n    shmdt(shm);\n\n    return 0;\n}\n</code></pre>"},{"location":"Project/Backend%20server/ADF/Monitor-scheduling/Process%20heartbeat/","title":"\u8fdb\u7a0b\u5fc3\u8df3","text":""},{"location":"Project/Backend%20server/ADF/Monitor-scheduling/Process%20heartbeat/#_2","title":"\u5b9a\u4e49","text":"<ul> <li>\u8fdb\u7a0b\u5fc3\u8df3\u7684\u8bbe\u8ba1:<ul> <li>\u5f00\u8f9f\u4e00\u5757\u5171\u7528\u5185\u5b58\uff0c\u6570\u636e\u7ed3\u6784\u7528\u7ed3\u6784\u4f53\u6570\u7ec4\uff0c\u670d\u52a1\u7a0b\u5e8f\u542f\u52a8\u7684\u65f6\u5019\uff0c\u5728\u6570\u7ec4\u4e2d\u67e5\u627e\u4e00\u4e2a\u7a7a\u7684\u4f4d\u7f6e\uff0c\u628a\u81ea\u5df1\u7684\u8fdb\u7a0b\u4fe1\u606f\u5199\u8fdb\u53bb\uff0c\u670d\u52a1\u7a0b\u5e8f\u5728\u8fd0\u884c\u7684\u8fc7\u7a0b\u4e2d\uff0c\u8981\u5b9a\u65f6\u66f4\u65b0\u81ea\u5df1\u7684\u4fe1\u606f\uff0c\u8868\u793a\u81ea\u5df1\u8fd8\u6d3b\u7740\uff0c\u670d\u52a1\u7a0b\u5e8f\u6b63\u5e38\u9000\u51fa\u7684\u65f6\u5019\uff0c\u4ece\u6570\u7ec4\u4e2d\u5220\u9664\u81ea\u5df1\u7684\u8fdb\u7a0b\u4fe1\u606f </li> <li>\u8fdb\u7a0b\u4fe1\u606f\u7684\u7ed3\u6784\u4f53 <pre><code>struct st_procinfo\n{\n    int pid=0;                  //\u8fdb\u7a0bid\n    char pname[51];             //\u8fdb\u7a0b\u540d\u79f0\uff0c\u53ef\u4ee5\u4e3a\u7a7a\n    int timeout=0;              //\u8d85\u65f6\u65f6\u95f4\uff0c\u5355\u4f4d\uff0c\u79d2\n    time_t atime=0;             //\u6700\u540e\u4e00\u6b21\u5fc3\u8df3\u7684\u65f6\u95f4\n}\n</code></pre></li> </ul> </li> </ul>"},{"location":"Project/Backend%20server/ADF/Monitor-scheduling/Process%20heartbeat/#_3","title":"\u5b9e\u73b0","text":"<pre><code>#include \"_public.h\"\nusing namespace idc;\n\n// \u8fdb\u7a0b\u5fc3\u8df3\u4fe1\u606f\u7684\u7ed3\u6784\u4f53\u3002\nstruct stprocinfo\n{\n    int      pid=0;                 // \u8fdb\u7a0bid\u3002\n    char   pname[51]={0};   // \u8fdb\u7a0b\u540d\u79f0\uff0c\u53ef\u4ee5\u4e3a\u7a7a\u3002\n    int      timeout=0;         // \u8d85\u65f6\u65f6\u95f4\uff0c\u5355\u4f4d\uff1a\u79d2\u3002\n    time_t atime=0;           // \u6700\u540e\u4e00\u6b21\u5fc3\u8df3\u7684\u65f6\u95f4\uff0c\u7528\u6574\u6570\u8868\u793a\u3002\n    stprocinfo() = default;   // \u6709\u4e86\u81ea\u5b9a\u4e49\u7684\u6784\u9020\u51fd\u6570\uff0c\u7f16\u8bd1\u5668\u5c06\u4e0d\u63d0\u4f9b\u9ed8\u8ba4\u6784\u9020\u51fd\u6570\uff0c\u6240\u4ee5\u542f\u7528\u9ed8\u8ba4\u6784\u9020\u51fd\u6570\u3002\n    stprocinfo(const int in_pid,const string &amp; in_pname,const int in_timeout, const time_t in_atime) \n                     : pid(in_pid),timeout(in_timeout),atime(in_atime) \n    { \n        strncpy(pname,in_pname.c_str(),50); \n    }\n};\n\nint  m_shmid=-1;                   // \u5171\u4eab\u5185\u5b58\u7684id\u3002\nstprocinfo *m_shm=nullptr;  // \u6307\u5411\u5171\u4eab\u5185\u5b58\u7684\u5730\u5740\u7a7a\u95f4\u3002\nint m_pos=-1;                        // \u7528\u4e8e\u5b58\u653e\u5f53\u524d\u8fdb\u7a0b\u5728\u6570\u7ec4\u4e2d\u7684\u4e0b\u6807\u3002\n\nvoid EXIT(int sig);    // \u9000\u51fa\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u3002\n\nint main()\n{\n    // \u5904\u7406\u7a0b\u5e8f\u7684\u9000\u51fa\u4fe1\u53f7\u3002\n    signal(SIGINT,EXIT); signal(SIGTERM,EXIT);\n\n    // \u521b\u5efa/\u83b7\u53d6\u5171\u4eab\u5185\u5b58\u3002\n    if ( (m_shmid = shmget((key_t)0x5095, 1000*sizeof(struct stprocinfo), 0666|IPC_CREAT)) == -1)\n    { \n        printf(\"\u521b\u5efa/\u83b7\u53d6\u5171\u4eab\u5185\u5b58(%x)\u5931\u8d25\u3002\\n\",0x5095); return -1; \n    }\n\n    // \u5c06\u5171\u4eab\u5185\u5b58\u8fde\u63a5\u5230\u5f53\u524d\u8fdb\u7a0b\u7684\u5730\u5740\u7a7a\u95f4\u3002\n    m_shm=(struct stprocinfo *)shmat(m_shmid, 0, 0);\n\n    // \u628a\u5171\u4eab\u5185\u5b58\u4e2d\u5168\u90e8\u8fdb\u7a0b\u7684\u4fe1\u606f\u663e\u793a\u51fa\u6765\uff0c\u7528\u4e8e\u8c03\u8bd5\u3002\n    for (int ii=0;ii&lt;1000;ii++)\n    {\n        if ( m_shm[ii].pid!=0 )  // \u53ea\u663e\u793a\u8fdb\u7a0b\u5df2\u4f7f\u7528\u7684\u4f4d\u7f6e\uff0c\u7a7a\u4f4d\u7f6e\u4e0d\u663e\u793a\u3002\n        { \n            printf(\"ii=%d,pid=%d,pname=%s,timeout=%d,atime=%d\\n\",\n                        ii,m_shm[ii].pid,m_shm[ii].pname,m_shm[ii].timeout,m_shm[ii].atime);\n        }\n    }\n\n    // \u628a\u5f53\u524d\u8fdb\u7a0b\u7684\u4fe1\u606f\u586b\u5145\u5230\u7ed3\u6784\u4f53\u4e2d\u3002\n    //stprocinfo procinfo;\n    //memset(&amp;procinfo,0,sizeof(struct stprocinfo));\n    //procinfo.pid=getpid();                           // \u5f53\u524d\u8fdb\u7a0b\u53f7\u3002\n    //strncpy(procinfo.pname,\"server1\",50);  // \u8fdb\u7a0b\u540d\u3002\n    //procinfo.timeout=30;                            // \u8d85\u65f6\u65f6\u95f4\u3002\n    //procinfo.atime=time(0);                        // \u7528\u5f53\u524d\u65f6\u95f4\u586b\u5145\u6700\u540e\u4e00\u6b21\u5fc3\u8df3\u7684\u65f6\u95f4\u3002\n    stprocinfo procinfo(getpid(),\"server1\",30,time(0));\n\n    csemp semlock;                             // \u7528\u4e8e\u7ed9\u5171\u4eab\u5185\u5b58\u52a0\u9501\u7684\u4fe1\u53f7\u91cfid\u3002\n\n    if (semlock.init(0x5095) == false)  // \u521d\u59cb\u5316\u4fe1\u53f7\u91cf\u3002\n    {\n        printf(\"\u521b\u5efa/\u83b7\u53d6\u4fe1\u53f7\u91cf(%x)\u5931\u8d25\u3002\\n\",0x5095); EXIT(-1);\n    }\n\n    semlock.wait();              // \u7ed9\u5171\u4eab\u5185\u5b58\u52a0\u9501\u3002\n\n    // \u8fdb\u7a0bid\u662f\u5faa\u73af\u4f7f\u7528\u7684\uff0c\u5982\u679c\u66fe\u7ecf\u6709\u4e00\u4e2a\u8fdb\u7a0b\u5f02\u5e38\u9000\u51fa\uff0c\u6ca1\u6709\u6e05\u7406\u81ea\u5df1\u7684\u5fc3\u8df3\u4fe1\u606f\uff0c\n    // \u5b83\u7684\u8fdb\u7a0b\u4fe1\u606f\u5c06\u6b8b\u7559\u5728\u5171\u4eab\u5185\u5b58\u4e2d\uff0c\u4e0d\u5de7\u7684\u662f\uff0c\u5982\u679c\u5f53\u524d\u8fdb\u7a0b\u91cd\u7528\u4e86\u5b83\u7684id\uff0c\n    // \u6240\u4ee5\uff0c\u5982\u679c\u5171\u4eab\u5185\u5b58\u4e2d\u5df2\u5b58\u5728\u5f53\u524d\u8fdb\u7a0b\u7f16\u53f7\uff0c\u4e00\u5b9a\u662f\u5176\u5b83\u8fdb\u7a0b\u6b8b\u7559\u7684\u4fe1\u606f\uff0c\u5f53\u524d\u8fdb\u7a0b\u5e94\u8be5\u91cd\u7528\u8fd9\u4e2a\u4f4d\u7f6e\u3002\n    for (int ii=0;ii&lt;1000;ii++)\n    {\n        if ( m_shm[ii].pid==procinfo.pid ) \n        { \n            m_pos=ii; \n            printf(\"\u627e\u5230\u65e7\u4f4d\u7f6eii=%d\\n\",ii);\n            break; \n        }\n    }\n\n    if (m_pos==-1)\n    {\n        // \u5728\u5171\u4eab\u5185\u5b58\u4e2d\u5bfb\u627e\u4e00\u4e2a\u7a7a\u7684\u4f4d\u7f6e\uff0c\u628a\u5f53\u524d\u8fdb\u7a0b\u7684\u7ed3\u6784\u4f53\u4fdd\u5b58\u5230\u5171\u4eab\u5185\u5b58\u4e2d\u3002\n        for (int ii=0;ii&lt;1000;ii++)\n            if ( m_shm[ii].pid==0 )  // \u5982\u679cpid\u662f\u7a7a\u7684\uff0c\u8868\u793a\u8fd9\u662f\u4e00\u4e2a\u7a7a\u4f4d\u7f6e\u3002\n            { \n                m_pos=ii; \n                printf(\"\u627e\u5230\u65b0\u4f4d\u7f6eii=%d\\n\",ii);\n                break; \n            }\n    }\n\n    // \u5982\u679cm_pos==-1\uff0c\u8868\u793a\u6ca1\u627e\u5230\u7a7a\u4f4d\u7f6e\uff0c\u8bf4\u660e\u5171\u4eab\u5185\u5b58\u7684\u7a7a\u95f4\u5df2\u7528\u5b8c\u3002\n    if (m_pos==-1) \n    { \n        semlock.post();    (\"\u5171\u4eab\u5185\u5b58\u7a7a\u95f4\u5df2\u7528\u5b8c\u3002\\n\");  EXIT(-1); \n    }\n\n    // \u628a\u5f53\u524d\u8fdb\u7a0b\u7684\u7ed3\u6784\u4f53\u4fdd\u5b58\u5230\u5171\u4eab\u5185\u5b58\u4e2d\u3002\n    //memcpy(m_shm+m_pos,&amp;procinfo,sizeof(struct st_procinfo)); \n    memcpy(&amp;m_shm[m_pos],&amp;procinfo,sizeof(struct st_procinfo)); \n\n    semlock.post();       // \u89e3\u9501\u3002\n\n    while (1)\n    {\n        printf(\"\u670d\u52a1\u7a0b\u5e8f\u6b63\u5728\u8fd0\u884c\u4e2d...\\n\");\n        // \u66f4\u65b0\u8fdb\u7a0b\u7684\u5fc3\u8df3\u4fe1\u606f\u3002\n        sleep(25);\n        m_shm[m_pos].atime=time(0);\n        sleep(25);\n        m_shm[m_pos].atime=time(0);\n    }\n\n    return 0;\n}\n\n// \u7a0b\u5e8f\u9000\u51fa\u548c\u4fe1\u53f72\u300115\u7684\u5904\u7406\u51fd\u6570\u3002\nvoid EXIT(int sig)\n{\n    printf(\"sig=%d\\n\",sig);\n\n    // \u4ece\u5171\u4eab\u5185\u5b58\u4e2d\u5220\u9664\u5f53\u524d\u8fdb\u7a0b\u7684\u5fc3\u8df3\u4fe1\u606f\u3002\n    if (m_pos!=-1) memset(m_shm+m_pos,0,sizeof(struct stprocinfo)); \n\n    // \u628a\u5171\u4eab\u5185\u5b58\u4ece\u5f53\u524d\u8fdb\u7a0b\u5206\u79bb\u3002\n    if (m_shm!=0) shmdt(m_shm);\n\n    exit(0);\n}\n</code></pre>"},{"location":"Project/Backend%20server/ADF/Monitor-scheduling/Scheduling%20module/","title":"\u8c03\u5ea6\u6a21\u5757","text":""},{"location":"Project/Backend%20server/ADF/Monitor-scheduling/Scheduling%20module/#_2","title":"\u670d\u52a1\u7a0b\u5e8f\u7684\u8fd0\u884c\u65b9\u5f0f","text":"<ul> <li>\u5468\u671f\u6027\u8fd0\u884c\u7684\u670d\u52a1\u7a0b\u5e8f                  \u751f\u6210\u6d4b\u8bd5\u6570\u636e\u7684\u7a0b\u5e8f<ul> <li>\u5468\u671f\u6027\u542f\u52a8                        kill -9 \u8c03\u5ea6\u7a0b\u5e8fid</li> </ul> </li> <li> <p>\u5e38\u9a7b\u5185\u5b58\u4e2d\u7684\u670d\u52a1\u7a0b\u5e8f                  \u7f51\u7edc\u901a\u8baf\u7684\u670d\u52a1\u7aef\u7a0b\u5e8f</p> <ul> <li>\u5728\u6b63\u5e38/\u5f02\u5e38\u7ec8\u6b62\u540e\u91cd\u65b0\u8fd0\u884c\u5b83          kill -9 \u8c03\u5ea6\u7a0b\u5e8fid \u5185\u5b58\u4e2d\u7684\u670d\u52a1\u7a0b\u5e8fid</li> </ul> </li> <li> <p>\u5728\u670d\u52a1\u5668\u7a0b\u5e8f\u6b63\u5e38/\u5f02\u5e38\u7ec8\u6b62\u540e\u91cd\u65b0\u8fd0\u884c\u5b83    \u5468\u671f\u6027/\u7acb\u5373</p> </li> </ul>"},{"location":"Project/Backend%20server/ADF/Monitor-scheduling/Scheduling%20module/#_3","title":"\u5b9e\u73b0","text":"<pre><code>// \u672c\u7a0b\u5e8f\u4e0d\u9700\u8981\u5305\u542b_public.h\uff0c\u6ca1\u5fc5\u8981\u4f9d\u8d56\u90a3\u4e48\u591a\u5934\u6587\u4ef6\u3002\n#include &lt;cstdio&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;sys/wait.h&gt;\n\nint main(int argc,char *argv[])\n{\n    if (argc&lt;3)\n    {\n        printf(\"Using:./procctl timetvl program argv ...\\n\");\n        printf(\"Example:/project/tools/bin/procctl 10 /usr/bin/tar zcvf /tmp/tmp.tgz /usr/include\\n\");\n        printf(\"Example:/project/tools/bin/procctl 60 /project/idc/bin/crtsurfdata /project/idc/ini/stcode.ini /tmp/idc/surfdata /log/idc/crtsurfdata.log csv,xml,json\\n\");\n\n        printf(\"\u672c\u7a0b\u5e8f\u662f\u670d\u52a1\u7a0b\u5e8f\u7684\u8c03\u5ea6\u7a0b\u5e8f\uff0c\u5468\u671f\u6027\u542f\u52a8\u670d\u52a1\u7a0b\u5e8f\u6216shell\u811a\u672c\u3002\\n\");\n        printf(\"timetvl \u8fd0\u884c\u5468\u671f\uff0c\u5355\u4f4d\uff1a\u79d2\u3002\\n\");\n        printf(\"        \u88ab\u8c03\u5ea6\u7684\u7a0b\u5e8f\u8fd0\u884c\u7ed3\u675f\u540e\uff0c\u5728timetvl\u79d2\u540e\u4f1a\u88abprocctl\u91cd\u65b0\u542f\u52a8\u3002\\n\");\n        printf(\"        \u5982\u679c\u88ab\u8c03\u5ea6\u7684\u7a0b\u5e8f\u662f\u5468\u671f\u6027\u7684\u4efb\u52a1\uff0ctimetvl\u8bbe\u7f6e\u4e3a\u8fd0\u884c\u5468\u671f\u3002\\n\");\n        printf(\"        \u5982\u679c\u88ab\u8c03\u5ea6\u7684\u7a0b\u5e8f\u662f\u5e38\u9a7b\u5185\u5b58\u7684\u670d\u52a1\u7a0b\u5e8f\uff0ctimetvl\u8bbe\u7f6e\u5c0f\u4e8e5\u79d2\u3002\\n\");\n        printf(\"program \u88ab\u8c03\u5ea6\u7684\u7a0b\u5e8f\u540d\uff0c\u5fc5\u987b\u4f7f\u7528\u5168\u8def\u5f84\u3002\\n\");\n        printf(\"...     \u88ab\u8c03\u5ea6\u7684\u7a0b\u5e8f\u7684\u53c2\u6570\u3002\\n\");\n        printf(\"\u6ce8\u610f\uff0c\u672c\u7a0b\u5e8f\u4e0d\u4f1a\u88abkill\u6740\u6b7b\uff0c\u4f46\u53ef\u4ee5\u7528kill -9\u5f3a\u884c\u6740\u6b7b\u3002\\n\\n\\n\");\n\n        return -1;\n    }\n\n    // \u5173\u95ed\u4fe1\u53f7\u548cI/O\uff0c\u672c\u7a0b\u5e8f\u4e0d\u5e0c\u671b\u88ab\u6253\u6270\u3002\n    // \u6ce8\u610f\uff1a1\uff09\u4e3a\u4e86\u9632\u8c03\u5ea6\u7a0b\u5e8f\u88ab\u8bef\u6740\uff0c\u4e0d\u5904\u7406\u9000\u51fa\u4fe1\u53f7\uff1b\n    //           2\uff09\u5982\u679c\u5ffd\u7565\u548c\u4fe1\u53f7\u548c\u5173\u95ed\u4e86I/O\uff0c\u5c06\u5f71\u54cd\u88ab\u8c03\u5ea6\u7684\u7a0b\u5e8f\uff08\u4e5f\u4f1a\u5ffd\u7565\u548c\u4fe1\u53f7\u548c\u5173\u95ed\u4e86I/O\uff09\u3002 why\uff1f\u56e0\u4e3a\u88ab\u8c03\u5ea6\u7684\u7a0b\u5e8f\u53d6\u4ee3\u4e86\u5b50\u8fdb\u7a0b\uff0c\u5b50\u8fdb\u7a0b\u4f1a\u7ee7\u627f\u7236\u8fdb\u7a0b\u7684\u4fe1\u53f7\u5904\u7406\u65b9\u5f0f\u548cI/O\u3002\n    for (int ii=0;ii&lt;64;ii++)\n    {\n        signal(ii,SIG_IGN);  close(ii);\n    }\n\n    // \u751f\u6210\u5b50\u8fdb\u7a0b\uff0c\u7236\u8fdb\u7a0b\u9000\u51fa\uff0c\u8ba9\u7a0b\u5e8f\u8fd0\u884c\u5728\u540e\u53f0\uff0c\u7531\u7cfb\u7edf1\u53f7\u8fdb\u7a0b\u6258\u7ba1\uff0c\u4e0d\u53d7shell\u7684\u63a7\u5236\u3002\n    if (fork()!=0) exit(0);\n\n    // \u628a\u5b50\u8fdb\u7a0b\u9000\u51fa\u7684\u4fe1\u53f7SIGCHLD\u6062\u590d\u4e3a\u9ed8\u8ba4\u884c\u4e3a\uff0c\u8ba9\u7236\u8fdb\u7a0b\u53ef\u4ee5\u8c03\u7528wait()\u51fd\u6570\u7b49\u5f85\u5b50\u8fdb\u7a0b\u9000\u51fa\u3002\n    signal(SIGCHLD,SIG_DFL);\n\n    // \u5b9a\u4e49\u4e00\u4e2a\u548cargv\u4e00\u6837\u5927\u7684\u6307\u9488\u6570\u7ec4\uff0c\u5b58\u653e\u88ab\u8c03\u5ea6\u7a0b\u5e8f\u540d\u53ca\u5176\u53c2\u6570\u3002\n    char *pargv[argc];\n    for (int ii=2;ii&lt;argc;ii++)\n        pargv[ii-2]=argv[ii];\n\n    pargv[argc-2]=nullptr; // \u7a7a\u8868\u793a\u53c2\u6570\u5df2\u7ed3\u675f\u3002\n\n    while (true)\n    {\n        if (fork()==0)\n        {\n            // \u5b50\u8fdb\u7a0b\u8fd0\u884c\u88ab\u8c03\u5ea6\u7684\u7a0b\u5e8f\u3002\n            execv(argv[2],pargv);\n            exit(0);  // \u5982\u679c\u88ab\u8c03\u5ea6\u7684\u7a0b\u5e8f\u8fd0\u884c\u5931\u8d25\uff0c\u624d\u4f1a\u6267\u884c\u8fd9\u884c\u4ee3\u7801\u3002\n        }\n        else\n        {\n            // \u7236\u8fdb\u7a0b\u7b49\u5f85\u5b50\u8fdb\u7a0b\u7ec8\u6b62\uff08\u88ab\u8c03\u5ea6\u7684\u7a0b\u5e8f\u8fd0\u884c\u7ed3\u675f\uff09\u3002\n            //int status;\n            //wait(&amp;status);           // wait()\u51fd\u6570\u4f1a\u963b\u585e\uff0c\u76f4\u5230\u88ab\u8c03\u5ea6\u7684\u7a0b\u5e8f\u7ec8\u6b62\u3002\n            wait(nullptr);           // wait()\u51fd\u6570\u4f1a\u963b\u585e\uff0c\u76f4\u5230\u88ab\u8c03\u5ea6\u7684\u7a0b\u5e8f\u7ec8\u6b62\u3002\n            sleep(atoi(argv[1]));  // \u4f11\u7720timetvl\u79d2\uff0c\u7136\u540e\u56de\u5230\u5faa\u73af\u3002\n        }\n    }\n}\n</code></pre>"},{"location":"Project/Backend%20server/ADF/Monitor-scheduling/Service%20strategy/","title":"\u670d\u52a1\u7a0b\u5e8f\u8fd0\u884c\u7b56\u7565","text":""},{"location":"Project/Backend%20server/ADF/Monitor-scheduling/Service%20strategy/#_2","title":"\u5b9a\u4e49","text":"<ul> <li>\u5168\u90e8\u7684\u670d\u52a1\u7a0b\u5e8f\u542f\u7528\u5fc3\u8df3\u673a\u5236\uff0c\u8c03\u5ea6\u6a21\u5757\u548c\u5b88\u62a4\u6a21\u5757\u9664\u5916</li> <li>\u5168\u90e8\u7684\u670d\u52a1\u7a0b\u5e8f\u7528\u8c03\u5ea6\u6a21\u5757\uff08procctl\uff09\u542f\u52a8</li> <li>\u542f\u52a8\u5b88\u62a4\u6a21\u5757\uff08checkproc\uff09\uff0c\u5982\u679c\u670d\u52a1\u7a0b\u5e8f\u8d85\u65f6\uff0c\u7ec8\u6b62\u5b83</li> </ul>"},{"location":"Project/Backend%20server/ADF/Monitor-scheduling/Service%20strategy/#_3","title":"\u793a\u4f8b","text":"<p><pre><code>/*\n * \u751f\u6210\u6c14\u8c61\u7ad9\u70b9\u89c2\u6d4b\u7684\u5206\u949f\u6570\u636e\n*/\n#include \"_public.h\"\nusing namespace idc;\n\n// \u7701   \u7ad9\u53f7  \u7ad9\u540d \u7eac\u5ea6   \u7ecf\u5ea6  \u6d77\u62d4\u9ad8\u5ea6\n// \u5b89\u5fbd,58015,\u7800\u5c71,34.27,116.2,44.2\nstruct st_stcode    // \u7ad9\u70b9\u53c2\u6570\u7684\u7ed3\u6784\u4f53\u3002\n{\n    char provname[31];     // \u7701\u3002    string  \u64cd\u4f5c\u65b9\u4fbf\u3001\u81ea\u52a8\u6269\u5bb9  \u64cd\u4f5c\u6570\u636e\u5e93\u65f6\uff0cstring\u6ca1\u6709\u4f18\u52bf\u3002\n    char obtid[11];             // \u7ad9\u53f7\u3002\n    char obtname[31];       // \u7ad9\u540d\uff0c\u540c\u57ce\u5e02\u540d\u3002\n    double lat;                   // \u7eac\u5ea6\uff1a\u5ea6\u3002\n    double lon;                  // \u7ecf\u5ea6\uff1a\u5ea6\u3002\n    double height;            // \u6d77\u62d4\u9ad8\u5ea6\uff1a\u7c73\u3002\n};\nlist&lt;struct st_stcode&gt; stlist;        // \u5b58\u653e\u5168\u90e8\u7684\u7ad9\u70b9\u53c2\u6570\u3002\nbool loadstcode(const string &amp;inifile);   // \u628a\u7ad9\u70b9\u53c2\u6570\u6587\u4ef6\u52a0\u8f7d\u5230stlist\u5bb9\u5668\u4e2d\u3002\n\n// \u6c14\u8c61\u7ad9\u89c2\u6d4b\u6570\u636e\u7684\u7ed3\u6784\u4f53\nstruct st_surfdata\n{\n    char obtid[11];          // \u7ad9\u70b9\u4ee3\u7801\u3002\n    char ddatetime[15];  // \u6570\u636e\u65f6\u95f4\uff1a\u683c\u5f0fyyyymmddhh24miss\uff0c\u7cbe\u786e\u5230\u5206\u949f\uff0c\u79d2\u56fa\u5b9a\u586b00\u3002\n    int  t;                         // \u6c14\u6e29\uff1a\u5355\u4f4d\uff0c0.1\u6444\u6c0f\u5ea6\u3002\n    int  p;                        // \u6c14\u538b\uff1a0.1\u767e\u5e15\u3002\n    int  u;                        // \u76f8\u5bf9\u6e7f\u5ea6\uff0c0-100\u4e4b\u95f4\u7684\u503c\u3002\n    int  wd;                     // \u98ce\u5411\uff0c0-360\u4e4b\u95f4\u7684\u503c\u3002\n    int  wf;                      // \u98ce\u901f\uff1a\u5355\u4f4d0.1m/s\n    int  r;                        // \u964d\u96e8\u91cf\uff1a0.1mm\u3002\n    int  vis;                     // \u80fd\u89c1\u5ea6\uff1a0.1\u7c73\u3002\n};\nlist&lt;struct st_surfdata&gt;  datalist;           // \u5b58\u653e\u89c2\u6d4b\u6570\u636e\u7684\u5bb9\u5668\u3002\nvoid crtsurfdata();                                  // \u6839\u636estlist\u5bb9\u5668\u4e2d\u7684\u7ad9\u70b9\u53c2\u6570\uff0c\u751f\u6210\u7ad9\u70b9\u89c2\u6d4b\u6570\u636e\uff0c\u5b58\u653e\u5728datalist\u4e2d\u3002\n\nchar strddatetime[15];   // \u6570\u636e\u65f6\u95f4\uff1a\u683c\u5f0fyyyymmddhh24miss\uff0c\u7cbe\u786e\u5230\u5206\u949f\uff0c\u79d2\u56fa\u5b9a\u586b00\u3002\n\n// \u628a\u5bb9\u5668datalist\u4e2d\u7684\u6c14\u8c61\u89c2\u6d4b\u6570\u636e\u5199\u5165\u6587\u4ef6\uff0coutpath-\u6570\u636e\u6587\u4ef6\u5b58\u653e\u7684\u76ee\u5f55\uff1bdatafmt-\u6570\u636e\u6587\u4ef6\u7684\u683c\u5f0f\uff0c\u53d6\u503c\uff1acsv\u3001xml\u548cjson\u3002\nbool crtsurffile(const string&amp; outpath,const string&amp; datafmt);\n\nclogfile logfile;               // \u672c\u7a0b\u5e8f\u8fd0\u884c\u7684\u65e5\u5fd7\u3002\n\nvoid EXIT(int sig);           // \u7a0b\u5e8f\u9000\u51fa\u548c\u4fe1\u53f72\u300115\u7684\u5904\u7406\u51fd\u6570\u3002\n\ncpactive pactive;             // \u8fdb\u7a0b\u7684\u5fc3\u8df3\u3002\n</code></pre> <pre><code>int main(int argc,char *argv[])\n{\n    // \u7ad9\u70b9\u53c2\u6570\u6587\u4ef6  \u751f\u6210\u7684\u6d4b\u8bd5\u6570\u636e\u5b58\u653e\u7684\u76ee\u5f55 \u672c\u7a0b\u5e8f\u8fd0\u884c\u7684\u65e5\u5fd7 \u8f93\u51fa\u6570\u636e\u6587\u4ef6\u7684\u683c\u5f0f\n    if (argc!=5)\n    {\n        // \u5982\u679c\u53c2\u6570\u975e\u6cd5\uff0c\u7ed9\u51fa\u5e2e\u52a9\u6587\u6863\u3002\n        cout &lt;&lt; \"Using:./crtsurfdata inifile outpath logfile datafmt\\n\";\n        cout &lt;&lt; \"Examples:/project/tools/bin/procctl 60 /project/idc/bin/crtsurfdata /project/idc/ini/stcode.ini /tmp/idc/surfdata /log/idc/crtsurfdata.log csv,xml,json\\n\\n\";\n\n        cout &lt;&lt; \"\u672c\u7a0b\u5e8f\u7528\u4e8e\u751f\u6210\u6c14\u8c61\u7ad9\u70b9\u89c2\u6d4b\u7684\u5206\u949f\u6570\u636e\uff0c\u7a0b\u5e8f\u6bcf\u5206\u949f\u8fd0\u884c\u4e00\u6b21\uff0c\u7531\u8c03\u5ea6\u6a21\u5757\u542f\u52a8\u3002\\n\";\n        cout &lt;&lt; \"inifile  \u6c14\u8c61\u7ad9\u70b9\u53c2\u6570\u6587\u4ef6\u540d\u3002\\n\";\n        cout &lt;&lt; \"outpath  \u6c14\u8c61\u7ad9\u70b9\u6570\u636e\u6587\u4ef6\u5b58\u653e\u7684\u76ee\u5f55\u3002\\n\";\n        cout &lt;&lt; \"logfile  \u672c\u7a0b\u5e8f\u8fd0\u884c\u7684\u65e5\u5fd7\u6587\u4ef6\u540d\u3002\\n\";\n        cout &lt;&lt; \"datafmt  \u8f93\u51fa\u6570\u636e\u6587\u4ef6\u7684\u683c\u5f0f\uff0c\u652f\u6301csv\u3001xml\u548cjson\uff0c\u4e2d\u95f4\u7528\u9017\u53f7\u5206\u9694\u3002\\n\\n\";\n\n        return -1;  \n    }\n\n    // \u8bbe\u7f6e\u4fe1\u53f7,\u5728shell\u72b6\u6001\u4e0b\u53ef\u7528 \"kill + \u8fdb\u7a0b\u53f7\" \u6b63\u5e38\u7ec8\u6b62\u4e9b\u8fdb\u7a0b\u3002\n    // \u4f46\u8bf7\u4e0d\u8981\u7528 \"kill -9 +\u8fdb\u7a0b\u53f7\" \u5f3a\u884c\u7ec8\u6b62\u3002\n    closeioandsignal(true);       // \u5173\u95ed0\u30011\u30012\u548c\u5ffd\u7565\u5168\u90e8\u7684\u4fe1\u53f7\uff0c\u5728\u8c03\u8bd5\u9636\u6bb5\uff0c\u8fd9\u884c\u4ee3\u7801\u53ef\u4ee5\u4e0d\u542f\u7528\u3002\n    signal(SIGINT,EXIT); signal(SIGTERM,EXIT);\n\n    pactive.addpinfo(10,\"crtsurfdata\");         // \u628a\u5f53\u524d\u8fdb\u7a0b\u7684\u5fc3\u8df3\u52a0\u5165\u5171\u4eab\u5185\u5b58\u3002\n\n    if (logfile.open(argv[3])==false)\n    {\n        cout &lt;&lt; \"logfile.open(\" &lt;&lt; argv[3] &lt;&lt; \") failed.\\n\";  return -1;\n    }\n\n    logfile.write(\"crtsurfdata \u5f00\u59cb\u8fd0\u884c\u3002\\n\");\n\n    // \u5728\u8fd9\u91cc\u7f16\u5199\u5904\u7406\u4e1a\u52a1\u7684\u4ee3\u7801\u3002\n    // 1\uff09\u4ece\u7ad9\u70b9\u53c2\u6570\u6587\u4ef6\u4e2d\u52a0\u8f7d\u7ad9\u70b9\u53c2\u6570\uff0c\u5b58\u653e\u4e8estlist\u5bb9\u5668\u4e2d\uff1b\n    if (loadstcode(argv[1]) ==  false) EXIT(-1);   \n\n    // // \u83b7\u53d6\u89c2\u6d4b\u6570\u636e\u7684\u65f6\u95f4\u3002\n    memset(strddatetime,0,sizeof(strddatetime));\n    ltime(strddatetime,\"yyyymmddhh24miss\");   // \u83b7\u53d6\u7cfb\u7edf\u5f53\u524d\u65f6\u95f4\u3002\n    strncpy(strddatetime+12,\"00\",2);                   // \u628a\u6570\u636e\u65f6\u95f4\u4e2d\u7684\u79d2\u56fa\u5b9a\u586b00\u3002\n\n    // 2\uff09\u6839\u636estlist\u5bb9\u5668\u4e2d\u7684\u7ad9\u70b9\u53c2\u6570\uff0c\u751f\u6210\u7ad9\u70b9\u89c2\u6d4b\u6570\u636e\uff08\u968f\u673a\u6570\uff09\uff0c\u751f\u6210\u540e\u7684\u6570\u636e\u5b58\u653e\u4e8e\u5bb9\u5668\u4e2d\uff1b\n    crtsurfdata();\n\n    // 3\uff09\u628a\u5bb9\u5668datalist\u4e2d\u7684\u6c14\u8c61\u89c2\u6d4b\u6570\u636e\u5199\u5165\u6587\u4ef6\uff0coutpath-\u6570\u636e\u6587\u4ef6\u5b58\u653e\u7684\u76ee\u5f55\uff1bdatafmt-\u6570\u636e\u6587\u4ef6\u7684\u683c\u5f0f\uff0c\u53d6\u503c\uff1acsv\u3001xml\u548cjson\u3002\n    if (strstr(argv[4],\"csv\")!=0)    crtsurffile(argv[2],\"csv\");\n    if (strstr(argv[4],\"xml\")!=0)   crtsurffile(argv[2],\"xml\");\n    if (strstr(argv[4],\"json\")!=0)  crtsurffile(argv[2],\"json\");\n\n    logfile.write(\"crtsurfdata \u8fd0\u884c\u7ed3\u675f\u3002\\n\");\n\n    return 0;\n}\n</code></pre> <pre><code>// \u7a0b\u5e8f\u9000\u51fa\u548c\u4fe1\u53f72\u300115\u7684\u5904\u7406\u51fd\u6570\u3002\nvoid EXIT(int sig)\n{\n    logfile.write(\"\u7a0b\u5e8f\u9000\u51fa\uff0csig=%d\\n\\n\",sig);\n\n    exit(0);\n}\n</code></pre> <pre><code>// \u628a\u7ad9\u70b9\u53c2\u6570\u6587\u4ef6\u52a0\u8f7d\u5230stlist\u5bb9\u5668\u4e2d\u3002\nbool loadstcode(const string &amp;inifile)   \n{\n    cifile ifile;       // \u8bfb\u53d6\u6587\u4ef6\u7684\u5bf9\u8c61\u3002\n    if (ifile.open(inifile)==false) \n    {\n        logfile.write(\"ifile.open(%s) failed.\\n\",inifile.c_str()); return false;\n    }\n\n    string strbuffer;                  // \u5b58\u653e\u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u7684\u6bcf\u4e00\u884c\u3002\n\n    ifile.readline(strbuffer);         // \u8bfb\u53d6\u7ad9\u70b9\u53c2\u6570\u6587\u4ef6\u7684\u7b2c\u4e00\u884c\uff0c\u5b83\u662f\u6807\u9898\uff0c\u6254\u6389\u3002\n\n    ccmdstr cmdstr;                    // \u7528\u4e8e\u62c6\u5206\u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u7684\u884c\u3002\n    st_stcode stcode;                  // \u7ad9\u70b9\u53c2\u6570\u7684\u7ed3\u6784\u4f53\u3002\n\n    while(ifile.readline(strbuffer))\n    {\n        // logfile.write(\"strbuffer=%s\\n\",strbuffer.c_str());\n\n        // \u62c6\u5206\u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u7684\u884c\uff0c\u4f8b\u5982\uff1a\u5b89\u5fbd,58015,\u7800\u5c71,34.27,116.2,44.2\n        cmdstr.splittocmd(strbuffer,\",\");         // \u62c6\u5206\u5b57\u7b26\u4e32\u3002\n\n        memset(&amp;stcode,0,sizeof(st_stcode));\n\n        cmdstr.getvalue(0,stcode.provname,30);   // \u7701\n        cmdstr.getvalue(1,stcode.obtid,10);           // \u7ad9\u70b9\u4ee3\u7801\n        cmdstr.getvalue(2,stcode.obtname,30);     // \u7ad9\u540d\n        cmdstr.getvalue(3,stcode.lat);                    // \u7eac\u5ea6\n        cmdstr.getvalue(4,stcode.lon);                   // \u7ecf\u5ea6\n        cmdstr.getvalue(5,stcode.height);              // \u6d77\u62d4\u9ad8\u5ea6\n\n        stlist.push_back(stcode);                            // \u628a\u7ad9\u70b9\u53c2\u6570\u5b58\u5165stlist\u5bb9\u5668\u4e2d\u3002\n    }\n\n    // \u8fd9\u91cc\u4e0d\u9700\u8981\u624b\u5de5\u5173\u95ed\u6587\u4ef6\uff0ccifile\u7c7b\u7684\u6790\u6784\u51fd\u6570\u4f1a\u5173\u95ed\u6587\u4ef6\u3002\n\n    // \u628a\u5bb9\u5668\u4e2d\u5168\u90e8\u7684\u6570\u636e\u5199\u5165\u65e5\u5fd7\u3002\n    // for (auto &amp;aa:stlist)\n    // {\n    //    logfile.write(\"provname=%s,obtid=%s,obtname=%s,lat=%.2f,lon=%.2f,height=%.2f\\n\",\\\n    //                         aa.provname,aa.obtid,aa.obtname,aa.lat,aa.lon,aa.height);\n    // }\n\n    return true;\n}\n</code></pre> <pre><code>// \u6a21\u62df\u751f\u6210\u6c14\u8c61\u5206\u949f\u89c2\u6d4b\u6570\u636e\uff0c\u5b58\u653e\u5728datalist\u5bb9\u5668\u4e2d\u3002\nvoid crtsurfdata()\n{\n    srand(time(0));              // \u64ad\u968f\u673a\u6570\u79cd\u5b50\u3002\n\n    st_surfdata stsurfdata;   // \u89c2\u6d4b\u6570\u636e\u7684\u7ed3\u6784\u4f53\u3002\n\n    // \u904d\u5386\u6c14\u8c61\u7ad9\u70b9\u53c2\u6570\u7684stlist\u5bb9\u5668\uff0c\u751f\u6210\u6bcf\u4e2a\u7ad9\u70b9\u7684\u89c2\u6d4b\u6570\u636e\u3002\n    for (auto &amp;aa : stlist)\n    {\n        memset(&amp;stsurfdata,0,sizeof(st_surfdata));\n\n        // \u586b\u5145\u89c2\u6d4b\u6570\u636e\u7684\u7ed3\u6784\u4f53\u7684\u6210\u5458\u3002\n        strcpy(stsurfdata.obtid,aa.obtid);                        // \u7ad9\u70b9\u4ee3\u7801\u3002\n        strcpy(stsurfdata.ddatetime,strddatetime);        // \u6570\u636e\u65f6\u95f4\u3002\n        stsurfdata.t=rand()%350;                                    // \u6c14\u6e29\uff1a\u5355\u4f4d\uff0c0.1\u6444\u6c0f\u5ea6\u3002   0-350\u4e4b\u95f4\u3002 \u53ef\u72af\u53ef\u4e0d\u72af\u7684\u9519\u8bef\u4e0d\u8981\u72af\u3002\n        stsurfdata.p=rand()%265+10000;                       // \u6c14\u538b\uff1a0.1\u767e\u5e15\n        stsurfdata.u=rand()%101;                                    // \u76f8\u5bf9\u6e7f\u5ea6\uff0c 0-100\u4e4b\u95f4\u7684\u503c\u3002\n        stsurfdata.wd=rand()%360;                                 // \u98ce\u5411\uff0c0-360\u4e4b\u95f4\u7684\u503c\u3002\n        stsurfdata.wf=rand()%150;                                  // \u98ce\u901f\uff1a\u5355\u4f4d0.1m/s\u3002\n        stsurfdata.r=rand()%16;                                      // \u964d\u96e8&gt;\u91cf\uff1a0.1mm\u3002\n        stsurfdata.vis=rand()%5001+100000;                 // \u80fd\u89c1\u5ea6\uff1a0.1\u7c73\u3002\n\n        datalist.push_back(stsurfdata);                            // \u628a\u89c2\u6d4b\u6570\u636e\u7684\u7ed3\u6784\u4f53\u653e\u5165datalist\u5bb9\u5668\u3002\n    }\n\n    // for (auto &amp;aa : datalist)\n    // {\n    //    logfile.write(\"%s,%s,%.1f,%.1f,%d,%d,%.1f,%.1f,%.1f\\n\", \\\n    //                          aa.obtid,aa.ddatetime,aa.t/10.0,aa.p/10.0,aa.u,aa.wd,aa.wf/10.0,aa.r/10.0,aa.vis/10.0);\n    // }\n}\n</code></pre> <pre><code>// \u628a\u5bb9\u5668datalist\u4e2d\u7684\u6c14\u8c61\u89c2\u6d4b\u6570\u636e\u5199\u5165\u6587\u4ef6\uff0coutpath-\u6570\u636e\u6587\u4ef6\u5b58\u653e\u7684\u76ee\u5f55\uff1bdatafmt-\u6570\u636e\u6587\u4ef6\u7684\u683c\u5f0f\uff0c\u53d6\u503c\uff1acsv\u3001xml\u548cjson\u3002\nbool crtsurffile(const string&amp; outpath,const string&amp; datafmt)\n{\n    // \u62fc\u63a5\u751f\u6210\u6570\u636e\u7684\u6587\u4ef6\u540d\uff0c\u4f8b\u5982\uff1a/tmp/idc/surfdata/SURF_ZH_20210629092200_2254.csv\n    string strfilename=outpath+\"/\"+\"SURF_ZH_\"+strddatetime+\"_\"+to_string(getpid())+\".\"+datafmt;\n\n    cofile ofile;         // \u5199\u5165\u6570\u636e\u6587\u4ef6\u7684\u5bf9\u8c61\u3002\n\n    if (ofile.open(strfilename)==false)\n    {\n        logfile.write(\"ofile.open(%s) failed.\\n\",strfilename.c_str()); return false;\n    }\n\n    // \u628adatalist\u5bb9\u5668\u4e2d\u7684\u89c2\u6d4b\u6570\u636e\u5199\u5165\u6587\u4ef6\uff0c\u652f\u6301csv\u3001xml\u548cjson\u4e09\u79cd\u683c\u5f0f\u3002\n    if (datafmt==\"csv\")    ofile.writeline(\"\u7ad9\u70b9\u4ee3\u7801,\u6570\u636e\u65f6\u95f4,\u6c14\u6e29,\u6c14\u538b,\u76f8\u5bf9\u6e7f\u5ea6,\u98ce\u5411,\u98ce\u901f,\u964d\u96e8\u91cf,\u80fd\u89c1\u5ea6\\n\");\n    if (datafmt==\"xml\")   ofile.writeline(\"&lt;data&gt;\\n\");\n    if (datafmt==\"json\")  ofile.writeline(\"{\\\"data\\\":[\\n\");\n\n    // \u904d\u5386\u5b58\u653e\u89c2\u6d4b\u6570\u636e\u7684datalist\u5bb9\u5668\u3002\n    for (auto &amp;aa : datalist)\n    {\n        // \u628a\u6bcf\u884c\u6570\u636e\u5199\u5165\u6587\u4ef6\u3002\n        if (datafmt==\"csv\") \n            ofile.writeline(\"%s,%s,%.1f,%.1f,%d,%d,%.1f,%.1f,%.1f\\n\",\\\n                                    aa.obtid,aa.ddatetime,aa.t/10.0,aa.p/10.0,aa.u,aa.wd,aa.wf/10.0,aa.r/10.0,aa.vis/10.0);\n\n        if (datafmt==\"xml\") \n            ofile.writeline(\"&lt;obtid&gt;%s&lt;/obtid&gt;&lt;ddatetime&gt;%s&lt;/ddatetime&gt;&lt;t&gt;%.1f&lt;/t&gt;&lt;p&gt;%.1f&lt;/p&gt;&lt;u&gt;%d&lt;/u&gt;\"\\\n                                   \"&lt;wd&gt;%d&lt;/wd&gt;&lt;wf&gt;%.1f&lt;/wf&gt;&lt;r&gt;%.1f&lt;/r&gt;&lt;vis&gt;%.1f&lt;/vis&gt;&lt;endl/&gt;\\n\",\\\n                                    aa.obtid,aa.ddatetime,aa.t/10.0,aa.p/10.0,aa.u,aa.wd,aa.wf/10.0,aa.r/10.0,aa.vis/10.0);\n\n        if (datafmt==\"json\") \n        {\n            ofile.writeline(\"{\\\"obtid\\\":\\\"%s\\\",\\\"ddatetime\\\":\\\"%s\\\",\\\"t\\\":\\\"%.1f\\\",\\\"p\\\":\\\"%.1f\\\",\"\\\n                                  \"\\\"u\\\":\\\"%d\\\",\\\"wd\\\":\\\"%d\\\",\\\"wf\\\":\\\"%.1f\\\",\\\"r\\\":\\\"%.1f\\\",\\\"vis\\\":\\\"%.1f\\\"}\",\\\n                                   aa.obtid,aa.ddatetime,aa.t/10.0,aa.p/10.0,aa.u,aa.wd,aa.wf/10.0,aa.r/10.0,aa.vis/10.0);\n            // \u6ce8\u610f\uff0cjson\u6587\u4ef6\u7684\u6700\u540e\u4e00\u6761\u8bb0\u5f55\u4e0d\u9700\u8981\u9017\u53f7\uff0c\u7528\u4ee5\u4e0b\u4ee3\u7801\u7279\u6b8a\u5904\u7406\u3002\n            static int ii=0;     // \u5df2\u5199\u5165\u6570\u636e\u884c\u6570\u7684\u8ba1\u6570\u5668\u3002\n            if (ii&lt;datalist.size()-1)\n            {   // \u5982\u679c\u4e0d\u662f\u6700\u540e\u4e00\u884c\u3002\n                ofile.writeline(\",\\n\");  ii++;\n            }\n            else\n                ofile.writeline(\"\\n\");  \n        }\n    }\n\n    if (datafmt==\"xml\")  ofile.writeline(\"&lt;/data&gt;\\n\");\n    if (datafmt == \"json\") ofile.writeline(\"]}\\n\");\n\n    ofile.closeandrename();    // \u5173\u95ed\u4e34\u65f6\u6587\u4ef6\uff0c\u5e76\u6539\u540d\u4e3a\u6b63\u5f0f\u7684\u6587\u4ef6\u3002\n\n    logfile.write(\"\u751f\u6210\u6570\u636e\u6587\u4ef6%s\u6210\u529f\uff0c\u6570\u636e\u65f6\u95f4%s\uff0c\u8bb0\u5f55\u6570%d\u3002\\n\",strfilename.c_str(),strddatetime,datalist.size());\n\n    return true;\n}\n</code></pre></p>"},{"location":"Project/Backend%20server/ADF/Process/Process/","title":"Process","text":""},{"location":"Project/Backend%20server/ADF/Process/Process/#_2","title":"\u5b9a\u4e49","text":"<p><pre><code>// \u5ffd\u7565\u5173\u95ed\u5168\u90e8\u7684\u4fe1\u53f7\u3001\u5173\u95ed\u5168\u90e8\u7684IO\uff0c\u7f3a\u7701\u53ea\u5ffd\u7565\u4fe1\u53f7\uff0c\u4e0d\u5173IO\u3002\nvoid closeioandsignal(bool bcloseio=false);\n</code></pre> <pre><code>// \u5faa\u73af\u961f\u5217\u3002\ntemplate &lt;class TT, int MaxLength&gt;\nclass squeue\n{\nprivate:\n    bool m_inited;              // \u961f\u5217\u88ab\u521d\u59cb\u5316\u6807\u5fd7\uff0ctrue-\u5df2\u521d\u59cb\u5316\uff1bfalse-\u672a\u521d\u59cb\u5316\u3002\n    TT   m_data[MaxLength];     // \u7528\u6570\u7ec4\u5b58\u50a8\u5faa\u73af\u961f\u5217\u4e2d\u7684\u5143\u7d20\u3002\n    int  m_head;                // \u961f\u5217\u7684\u5934\u6307\u9488\u3002\n    int  m_tail;                // \u961f\u5217\u7684\u5c3e\u6307\u9488\uff0c\u6307\u5411\u961f\u5c3e\u5143\u7d20\u3002\n    int  m_length;              // \u961f\u5217\u7684\u5b9e\u9645\u957f\u5ea6\u3002    \n    squeue(const squeue &amp;) = delete;             // \u7981\u7528\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u3002\n    squeue &amp;operator=(const squeue &amp;) = delete;  // \u7981\u7528\u8d4b\u503c\u51fd\u6570\u3002\npublic:\n\n    squeue() { init(); }  // \u6784\u9020\u51fd\u6570\u3002\n\n    // \u5faa\u73af\u961f\u5217\u7684\u521d\u59cb\u5316\u64cd\u4f5c\u3002\n    // \u6ce8\u610f\uff1a\u5982\u679c\u7528\u4e8e\u5171\u4eab\u5185\u5b58\u7684\u961f\u5217\uff0c\u4e0d\u4f1a\u8c03\u7528\u6784\u9020\u51fd\u6570\uff0c\u5fc5\u987b\u8c03\u7528\u6b64\u51fd\u6570\u521d\u59cb\u5316\u3002\n    void init()  \n    { \n        if (m_inited!=true)               // \u5faa\u73af\u961f\u5217\u7684\u521d\u59cb\u5316\u53ea\u80fd\u6267\u884c\u4e00\u6b21\u3002\n        { \n            m_head=0;                      // \u5934\u6307\u9488\u3002\n            m_tail=MaxLength-1;     // \u4e3a\u4e86\u65b9\u4fbf\u5199\u4ee3\u7801\uff0c\u521d\u59cb\u5316\u65f6\uff0c\u5c3e\u6307\u9488\u6307\u5411\u961f\u5217\u7684\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u3002\n            m_length=0;                   // \u961f\u5217\u7684\u5b9e\u9645\u957f\u5ea6\u3002\n            memset(m_data,0,sizeof(m_data));  // \u6570\u7ec4\u5143\u7d20\u6e05\u96f6\u3002\n            m_inited=true; \n        }\n    }\n\n    // \u5143\u7d20\u5165\u961f\uff0c\u8fd4\u56de\u503c\uff1afalse-\u5931\u8d25\uff1btrue-\u6210\u529f\u3002\n    bool push(const TT &amp;ee)\n    {\n        if (full() == true)\n        {\n            cout &lt;&lt; \"\u5faa\u73af\u961f\u5217\u5df2\u6ee1\uff0c\u5165\u961f\u5931\u8d25\u3002\\n\"; return false;\n        }\n\n        // \u5148\u79fb\u52a8\u961f\u5c3e\u6307\u9488\uff0c\u7136\u540e\u518d\u62f7\u8d1d\u6570\u636e\u3002\n        m_tail=(m_tail+1)%MaxLength;  // \u961f\u5c3e\u6307\u9488\u540e\u79fb\u3002\n        m_data[m_tail]=ee;\n        m_length++;    \n\n      return true;\n    }\n\n    // \u6c42\u5faa\u73af\u961f\u5217\u7684\u957f\u5ea6\uff0c\u8fd4\u56de\u503c\uff1a&gt;=0-\u961f\u5217\u4e2d\u5143\u7d20\u7684\u4e2a\u6570\u3002\n    int  size()                   \n    {\n        return m_length;    \n    }\n\n    // \u5224\u65ad\u5faa\u73af\u961f\u5217\u662f\u5426\u4e3a\u7a7a\uff0c\u8fd4\u56de\u503c\uff1atrue-\u7a7a\uff0cfalse-\u975e\u7a7a\u3002\n    bool empty()                    \n    {\n      if (m_length == 0) return true;    \n\n      return false;\n    }\n\n    // \u5224\u65ad\u5faa\u73af\u961f\u5217\u662f\u5426\u5df2\u6ee1\uff0c\u8fd4\u56de\u503c\uff1atrue-\u5df2\u6ee1\uff0cfalse-\u672a\u6ee1\u3002\n    bool full()\n    {\n        if (m_length == MaxLength) return true;    \n\n      return false;\n    }\n\n    // \u67e5\u770b\u961f\u5934\u5143\u7d20\u7684\u503c\uff0c\u5143\u7d20\u4e0d\u51fa\u961f\u3002\n    TT&amp; front()\n    {\n        return m_data[m_head];\n    }\n\n    // \u5143\u7d20\u51fa\u961f\uff0c\u8fd4\u56de\u503c\uff1afalse-\u5931\u8d25\uff1btrue-\u6210\u529f\u3002\n    bool pop()\n    {\n        if (empty() == true) return false;\n\n        m_head=(m_head+1)%MaxLength;  // \u961f\u5217\u5934\u6307\u9488\u540e\u79fb\u3002\n        m_length--;    \n\n        return true;\n    }\n\n    // \u663e\u793a\u5faa\u73af\u961f\u5217\u4e2d\u5168\u90e8\u7684\u5143\u7d20\u3002\n    // \u8fd9\u662f\u4e00\u4e2a\u4e34\u65f6\u7684\u7528\u4e8e\u8c03\u8bd5\u7684\u51fd\u6570\uff0c\u961f\u5217\u4e2d\u5143\u7d20\u7684\u6570\u636e\u7c7b\u578b\u652f\u6301cout\u8f93\u51fa\u624d\u53ef\u7528\u3002\n    void printqueue()                    \n    {\n        for (int ii = 0; ii &lt; size(); ii++)\n        {\n            cout &lt;&lt; \"m_data[\" &lt;&lt; (m_head+ii)%MaxLength &lt;&lt; \"],value=\" \\\n                 &lt;&lt; m_data[(m_head+ii)%MaxLength] &lt;&lt; endl;\n        }\n    }\n};\n</code></pre> <pre><code>// \u4fe1\u53f7\u91cf\u3002\nclass csemp\n{\nprivate:\n    union semun  // \u7528\u4e8e\u4fe1\u53f7\u91cf\u64cd\u4f5c\u7684\u5171\u540c\u4f53\u3002\n    {\n      int val;\n      struct semid_ds *buf;\n      unsigned short  *arry;\n    };\n\n    int   m_semid;         // \u4fe1\u53f7\u91cfid\uff08\u63cf\u8ff0\u7b26\uff09\u3002\n\n    // \u5982\u679c\u628asem_flg\u8bbe\u7f6e\u4e3aSEM_UNDO\uff0c\u64cd\u4f5c\u7cfb\u7edf\u5c06\u8ddf\u8e2a\u8fdb\u7a0b\u5bf9\u4fe1\u53f7\u91cf\u7684\u4fee\u6539\u60c5\u51b5\uff0c\n    // \u5728\u5168\u90e8\u4fee\u6539\u8fc7\u4fe1\u53f7\u91cf\u7684\u8fdb\u7a0b\uff08\u6b63\u5e38\u6216\u5f02\u5e38\uff09\u7ec8\u6b62\u540e\uff0c\u64cd\u4f5c\u7cfb\u7edf\u5c06\u628a\u4fe1\u53f7\u91cf\u6062\u590d\u4e3a\u521d\u59cb\u503c\u3002\n    // \u5982\u679c\u4fe1\u53f7\u91cf\u7528\u4e8e\u4e92\u65a5\u9501\uff0c\u8bbe\u7f6e\u4e3aSEM_UNDO\u3002\n    // \u5982\u679c\u4fe1\u53f7\u91cf\u7528\u4e8e\u751f\u4ea7\u6d88\u8d39\u8005\u6a21\u578b\uff0c\u8bbe\u7f6e\u4e3a0\u3002\n    short m_sem_flg;\n\n    csemp(const csemp &amp;) = delete;                      // \u7981\u7528\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u3002\n    csemp &amp;operator=(const csemp &amp;) = delete;  // \u7981\u7528\u8d4b\u503c\u51fd\u6570\u3002\npublic:\n    csemp():m_semid(-1){}\n\n    // \u5982\u679c\u4fe1\u53f7\u91cf\u5df2\u5b58\u5728\uff0c\u83b7\u53d6\u4fe1\u53f7\u91cf\uff1b\u5982\u679c\u4fe1\u53f7\u91cf\u4e0d\u5b58\u5728\uff0c\u5219\u521b\u5efa\u5b83\u5e76\u521d\u59cb\u5316\u4e3avalue\u3002\n    // \u5982\u679c\u7528\u4e8e\u4e92\u65a5\u9501\uff0cvalue\u586b1\uff0csem_flg\u586bSEM_UNDO\u3002\n    // \u5982\u679c\u7528\u4e8e\u751f\u4ea7\u6d88\u8d39\u8005\u6a21\u578b\uff0cvalue\u586b0\uff0csem_flg\u586b0\u3002\n    bool init(key_t key,unsigned short value=1,short sem_flg=SEM_UNDO);\n    bool wait(short value=-1);    // \u4fe1\u53f7\u91cf\u7684P\u64cd\u4f5c\uff0c\u5982\u679c\u4fe1\u53f7\u91cf\u7684\u503c\u662f0\uff0c\u5c06\u963b\u585e\u7b49\u5f85\uff0c\u76f4\u5230\u4fe1\u53f7\u91cf\u7684\u503c\u5927\u4e8e0\u3002\n    bool post(short value=1);     // \u4fe1\u53f7\u91cf\u7684V\u64cd\u4f5c\u3002\n    int  getvalue();                       // \u83b7\u53d6\u4fe1\u53f7\u91cf\u7684\u503c\uff0c\u6210\u529f\u8fd4\u56de\u4fe1\u53f7\u91cf\u7684\u503c\uff0c\u5931\u8d25\u8fd4\u56de-1\u3002\n    bool destroy();                       // \u9500\u6bc1\u4fe1\u53f7\u91cf\u3002\n    ~csemp();\n};\n</code></pre> <pre><code>// \u8fdb\u7a0b\u5fc3\u8df3\u4fe1\u606f\u7684\u7ed3\u6784\u4f53\u3002\nstruct st_procinfo\n{\n    int      pid=0;                      // \u8fdb\u7a0bid\u3002\n    char   pname[51]={0};        // \u8fdb\u7a0b\u540d\u79f0\uff0c\u53ef\u4ee5\u4e3a\u7a7a\u3002\n    int      timeout=0;              // \u8d85\u65f6\u65f6\u95f4\uff0c\u5355\u4f4d\uff1a\u79d2\u3002\n    time_t atime=0;                 // \u6700\u540e\u4e00\u6b21\u5fc3\u8df3\u7684\u65f6\u95f4\uff0c\u7528\u6574\u6570\u8868\u793a\u3002\n    st_procinfo() = default;     // \u6709\u4e86\u81ea\u5b9a\u4e49\u7684\u6784\u9020\u51fd\u6570\uff0c\u7f16\u8bd1\u5668\u5c06\u4e0d\u63d0\u4f9b\u9ed8\u8ba4\u6784\u9020\u51fd\u6570\uff0c\u6240\u4ee5\u542f\u7528\u9ed8\u8ba4\u6784\u9020\u51fd\u6570\u3002\n    st_procinfo(const int in_pid,const string &amp; in_pname,const int in_timeout, const time_t in_atime)\n                    :pid(in_pid),timeout(in_timeout),atime(in_atime) { strncpy(pname,in_pname.c_str(),50); }\n};\n\n// \u4ee5\u4e0b\u51e0\u4e2a\u5b8f\u7528\u4e8e\u8fdb\u7a0b\u7684\u5fc3\u8df3\u3002\n#define MAXNUMP     1000     // \u6700\u5927\u7684\u8fdb\u7a0b\u6570\u91cf\u3002\n#define SHMKEYP    0x5095     // \u5171\u4eab\u5185\u5b58\u7684key\u3002\n#define SEMKEYP     0x5095     // \u4fe1\u53f7\u91cf\u7684key\u3002\n\n// \u67e5\u770b\u5171\u4eab\u5185\u5b58\uff1a  ipcs -m\n// \u5220\u9664\u5171\u4eab\u5185\u5b58\uff1a  ipcrm -m shmid\n// \u67e5\u770b\u4fe1\u53f7\u91cf\uff1a      ipcs -s\n// \u5220\u9664\u4fe1\u53f7\u91cf\uff1a      ipcrm sem semid\n\n// \u8fdb\u7a0b\u5fc3\u8df3\u64cd\u4f5c\u7c7b\u3002\nclass cpactive\n{\n private:\n     int  m_shmid;                   // \u5171\u4eab\u5185\u5b58\u7684id\u3002\n     int  m_pos;                       // \u5f53\u524d\u8fdb\u7a0b\u5728\u5171\u4eab\u5185\u5b58\u8fdb\u7a0b\u7ec4\u4e2d\u7684\u4f4d\u7f6e\u3002\n     st_procinfo *m_shm;        // \u6307\u5411\u5171\u4eab\u5185\u5b58\u7684\u5730\u5740\u7a7a\u95f4\u3002\n\n public:\n     cpactive();  // \u521d\u59cb\u5316\u6210\u5458\u53d8\u91cf\u3002\n\n     // \u628a\u5f53\u524d\u8fdb\u7a0b\u7684\u4fe1\u606f\u52a0\u5165\u5171\u4eab\u5185\u5b58\u8fdb\u7a0b\u7ec4\u4e2d\u3002\n     bool addpinfo(const int timeout,const string &amp;pname=\"\",clogfile *logfile=nullptr);\n\n     // \u66f4\u65b0\u5171\u4eab\u5185\u5b58\u8fdb\u7a0b\u7ec4\u4e2d\u5f53\u524d\u8fdb\u7a0b\u7684\u5fc3\u8df3\u65f6\u95f4\u3002\n     bool uptatime();\n\n     ~cpactive();  // \u4ece\u5171\u4eab\u5185\u5b58\u4e2d\u5220\u9664\u5f53\u524d\u8fdb\u7a0b\u7684\u5fc3\u8df3\u8bb0\u5f55\u3002\n};\n\n}\n</code></pre></p>"},{"location":"Project/Backend%20server/ADF/Process/Process/#_3","title":"\u5b9e\u73b0","text":"<pre><code>// \u5ffd\u7565\u5173\u95ed\u5168\u90e8\u7684\u4fe1\u53f7\u3001\u5173\u95ed\u5168\u90e8\u7684IO\uff0c\u7f3a\u7701\u53ea\u5ffd\u7565\u4fe1\u53f7\uff0c\u4e0d\u5173IO\u3002 \n// \u4e0d\u5e0c\u671b\u540e\u53f0\u670d\u52a1\u7a0b\u5e8f\u88ab\u4fe1\u53f7\u6253\u6270\uff0c\u9700\u8981\u4ec0\u4e48\u4fe1\u53f7\u53ef\u4ee5\u5728\u7a0b\u5e8f\u4e2d\u8bbe\u7f6e\u3002\n// \u5b9e\u9645\u4e0a\u5173\u95ed\u7684IO\u662f0\u30011\u30012\u3002\nvoid closeioandsignal(bool bcloseio)\n{\n    int ii=0;\n\n    for (ii=0;ii&lt;64;ii++)\n    {\n        if (bcloseio==true) close(ii);\n\n        signal(ii,SIG_IGN); \n    }\n}\n</code></pre> <pre><code> cpactive::cpactive()\n {\n     m_shmid=0;\n     m_pos=-1;\n     m_shm=0;\n }\n</code></pre> <p><pre><code> // \u628a\u5f53\u524d\u8fdb\u7a0b\u7684\u4fe1\u606f\u52a0\u5165\u5171\u4eab\u5185\u5b58\u8fdb\u7a0b\u7ec4\u4e2d\u3002\n bool cpactive::addpinfo(const int timeout,const string &amp;pname,clogfile *logfile)\n {\n    if (m_pos!=-1) return true;\n\n    // \u521b\u5efa/\u83b7\u53d6\u5171\u4eab\u5185\u5b58\uff0c\u952e\u503c\u4e3aSHMKEYP\uff0c\u5927\u5c0f\u4e3aMAXNUMP\u4e2ast_procinfo\u7ed3\u6784\u4f53\u7684\u5927\u5c0f\u3002\n    if ( (m_shmid = shmget((key_t)SHMKEYP, MAXNUMP*sizeof(struct st_procinfo), 0666|IPC_CREAT)) == -1)\n    { \n        if (logfile!=nullptr) logfile-&gt;write(\"\u521b\u5efa/\u83b7\u53d6\u5171\u4eab\u5185\u5b58(%x)\u5931\u8d25\u3002\\n\",SHMKEYP); \n        else printf(\"\u521b\u5efa/\u83b7\u53d6\u5171\u4eab\u5185\u5b58(%x)\u5931\u8d25\u3002\\n\",SHMKEYP);\n\n        return false; \n    }\n\n    // \u5c06\u5171\u4eab\u5185\u5b58\u8fde\u63a5\u5230\u5f53\u524d\u8fdb\u7a0b\u7684\u5730\u5740\u7a7a\u95f4\u3002\n    m_shm=(struct st_procinfo *)shmat(m_shmid, 0, 0);\n\n    /*\n    struct st_procinfo stprocinfo;    // \u5f53\u524d\u8fdb\u7a0b\u5fc3\u8df3\u4fe1\u606f\u7684\u7ed3\u6784\u4f53\u3002\n    memset(&amp;stprocinfo,0,sizeof(stprocinfo));\n    stprocinfo.pid=getpid();            // \u5f53\u524d\u8fdb\u7a0b\u53f7\u3002\n    stprocinfo.timeout=timeout;         // \u8d85\u65f6\u65f6\u95f4\u3002\n    stprocinfo.atime=time(0);           // \u5f53\u524d\u65f6\u95f4\u3002\n    strncpy(stprocinfo.pname,pname.c_str(),50); // \u8fdb\u7a0b\u540d\u3002\n    */\n    st_procinfo stprocinfo(getpid(),pname.c_str(),timeout,time(0));    // \u5f53\u524d\u8fdb\u7a0b\u5fc3\u8df3\u4fe1\u606f\u7684\u7ed3\u6784\u4f53\u3002\n\n    // \u8fdb\u7a0bid\u662f\u5faa\u73af\u4f7f\u7528\u7684\uff0c\u5982\u679c\u66fe\u7ecf\u6709\u4e00\u4e2a\u8fdb\u7a0b\u5f02\u5e38\u9000\u51fa\uff0c\u6ca1\u6709\u6e05\u7406\u81ea\u5df1\u7684\u5fc3\u8df3\u4fe1\u606f\uff0c\n    // \u5b83\u7684\u8fdb\u7a0b\u4fe1\u606f\u5c06\u6b8b\u7559\u5728\u5171\u4eab\u5185\u5b58\u4e2d\uff0c\u4e0d\u5de7\u7684\u662f\uff0c\u5982\u679c\u5f53\u524d\u8fdb\u7a0b\u91cd\u7528\u4e86\u5b83\u7684id\uff0c\n    // \u5b88\u62a4\u8fdb\u7a0b\u68c0\u67e5\u5230\u6b8b\u7559\u8fdb\u7a0b\u7684\u4fe1\u606f\u65f6\uff0c\u4f1a\u5411\u8fdb\u7a0bid\u53d1\u9001\u9000\u51fa\u4fe1\u53f7\uff0c\u5c06\u8bef\u6740\u5f53\u524d\u8fdb\u7a0b\u3002\n    // \u6240\u4ee5\uff0c\u5982\u679c\u5171\u4eab\u5185\u5b58\u4e2d\u5df2\u5b58\u5728\u5f53\u524d\u8fdb\u7a0b\u7f16\u53f7\uff0c\u4e00\u5b9a\u662f\u5176\u5b83\u8fdb\u7a0b\u6b8b\u7559\u7684\u4fe1\u606f\uff0c\u5f53\u524d\u8fdb\u7a0b\u5e94\u8be5\u91cd\u7528\u8fd9\u4e2a\u4f4d\u7f6e\u3002\n    for (int ii=0;ii&lt;MAXNUMP;ii++)\n    {\n        if ( (m_shm+ii)-&gt;pid==stprocinfo.pid ) { m_pos=ii; break; }\n    }\n\n    csemp semp;                       // \u7528\u4e8e\u7ed9\u5171\u4eab\u5185\u5b58\u52a0\u9501\u7684\u4fe1\u53f7\u91cfid\u3002\n\n    if (semp.init(SEMKEYP) == false)  // \u521d\u59cb\u5316\u4fe1\u53f7\u91cf\u3002\n    {\n        if (logfile!=nullptr) logfile-&gt;write(\"\u521b\u5efa/\u83b7\u53d6\u4fe1\u53f7\u91cf(%x)\u5931\u8d25\u3002\\n\",SEMKEYP); \n        else printf(\"\u521b\u5efa/\u83b7\u53d6\u4fe1\u53f7\u91cf(%x)\u5931\u8d25\u3002\\n\",SEMKEYP);\n\n        return false;\n    }\n\n    semp.wait();  // \u7ed9\u5171\u4eab\u5185\u5b58\u4e0a\u9501\u3002\n\n    // \u5982\u679cm_pos==-1\uff0c\u8868\u793a\u5171\u4eab\u5185\u5b58\u7684\u8fdb\u7a0b\u7ec4\u4e2d\u4e0d\u5b58\u5728\u5f53\u524d\u8fdb\u7a0b\u7f16\u53f7\uff0c\u90a3\u5c31\u627e\u4e00\u4e2a\u7a7a\u4f4d\u7f6e\u3002\n    if (m_pos==-1)\n    {\n        for (int ii=0;ii&lt;MAXNUMP;ii++)\n            if ( (m_shm+ii)-&gt;pid==0 ) { m_pos=ii; break; }\n    }\n\n    // \u5982\u679cm_pos==-1\uff0c\u8868\u793a\u6ca1\u627e\u5230\u7a7a\u4f4d\u7f6e\uff0c\u8bf4\u660e\u5171\u4eab\u5185\u5b58\u7684\u7a7a\u95f4\u5df2\u7528\u5b8c\u3002\n    if (m_pos==-1) \n    { \n        if (logfile!=0) logfile-&gt;write(\"\u5171\u4eab\u5185\u5b58\u7a7a\u95f4\u5df2\u7528\u5b8c\u3002\\n\");\n        else printf(\"\u5171\u4eab\u5185\u5b58\u7a7a\u95f4\u5df2\u7528\u5b8c\u3002\\n\");\n\n        semp.post();  // \u89e3\u9501\u3002\n\n        return false; \n    }\n\n    // \u628a\u5f53\u524d\u8fdb\u7a0b\u7684\u5fc3\u8df3\u4fe1\u606f\u5b58\u5165\u5171\u4eab\u5185\u5b58\u7684\u8fdb\u7a0b\u7ec4\u4e2d\u3002\n    memcpy(m_shm+m_pos,&amp;stprocinfo,sizeof(struct st_procinfo)); \n\n    semp.post();   // \u89e3\u9501\u3002\n\n    return true;\n }\n</code></pre> <pre><code> // \u66f4\u65b0\u5171\u4eab\u5185\u5b58\u8fdb\u7a0b\u7ec4\u4e2d\u5f53\u524d\u8fdb\u7a0b\u7684\u5fc3\u8df3\u65f6\u95f4\u3002\n bool cpactive::uptatime()\n {\n    if (m_pos==-1) return false;\n\n    (m_shm+m_pos)-&gt;atime=time(0);\n\n    return true;\n }\n</code></pre> <pre><code> cpactive::~cpactive()\n {\n    // \u628a\u5f53\u524d\u8fdb\u7a0b\u4ece\u5171\u4eab\u5185\u5b58\u7684\u8fdb\u7a0b\u7ec4\u4e2d\u79fb\u53bb\u3002\n    if (m_pos!=-1) memset(m_shm+m_pos,0,sizeof(struct st_procinfo));\n\n    // \u628a\u5171\u4eab\u5185\u5b58\u4ece\u5f53\u524d\u8fdb\u7a0b\u4e2d\u5206\u79bb\u3002\n    if (m_shm!=0) shmdt(m_shm);\n }\n</code></pre> <pre><code>// \u5982\u679c\u4fe1\u53f7\u91cf\u5df2\u5b58\u5728\uff0c\u83b7\u53d6\u4fe1\u53f7\u91cf\uff1b\u5982\u679c\u4fe1\u53f7\u91cf\u4e0d\u5b58\u5728\uff0c\u5219\u521b\u5efa\u5b83\u5e76\u521d\u59cb\u5316\u4e3avalue\u3002\n// \u5982\u679c\u7528\u4e8e\u4e92\u65a5\u9501\uff0cvalue\u586b1\uff0csem_flg\u586bSEM_UNDO\u3002\n// \u5982\u679c\u7528\u4e8e\u751f\u4ea7\u6d88\u8d39\u8005\u6a21\u578b\uff0cvalue\u586b0\uff0csem_flg\u586b0\u3002\nbool csemp::init(key_t key,unsigned short value,short sem_flg)\n{\n    if (m_semid!=-1) return false; // \u5982\u679c\u5df2\u7ecf\u521d\u59cb\u5316\u4e86\uff0c\u4e0d\u5fc5\u518d\u6b21\u521d\u59cb\u5316\u3002\n\n    m_sem_flg=sem_flg;\n\n    // \u4fe1\u53f7\u91cf\u7684\u521d\u59cb\u5316\u4e0d\u80fd\u76f4\u63a5\u7528semget(key,1,0666|IPC_CREAT)\n    // \u56e0\u4e3a\u4fe1\u53f7\u91cf\u521b\u5efa\u540e\uff0c\u521d\u59cb\u503c\u662f0\uff0c\u5982\u679c\u7528\u4e8e\u4e92\u65a5\u9501\uff0c\u9700\u8981\u628a\u5b83\u7684\u521d\u59cb\u503c\u8bbe\u7f6e\u4e3a1\uff0c\n    // \u800c\u83b7\u53d6\u4fe1\u53f7\u91cf\u5219\u4e0d\u9700\u8981\u8bbe\u7f6e\u521d\u59cb\u503c\uff0c\u6240\u4ee5\uff0c\u521b\u5efa\u4fe1\u53f7\u91cf\u548c\u83b7\u53d6\u4fe1\u53f7\u91cf\u7684\u6d41\u7a0b\u4e0d\u540c\u3002\n\n    // \u4fe1\u53f7\u91cf\u7684\u521d\u59cb\u5316\u5206\u4e09\u4e2a\u6b65\u9aa4\uff1a\n    // 1\uff09\u83b7\u53d6\u4fe1\u53f7\u91cf\uff0c\u5982\u679c\u6210\u529f\uff0c\u51fd\u6570\u8fd4\u56de\u3002\n    // 2\uff09\u5982\u679c\u5931\u8d25\uff0c\u5219\u521b\u5efa\u4fe1\u53f7\u91cf\u3002\n    // 3) \u8bbe\u7f6e\u4fe1\u53f7\u91cf\u7684\u521d\u59cb\u503c\u3002\n\n    // \u83b7\u53d6\u4fe1\u53f7\u91cf\u3002\n    if ( (m_semid=semget(key,1,0666)) == -1)\n    {\n        // \u5982\u679c\u4fe1\u53f7\u91cf\u4e0d\u5b58\u5728\uff0c\u521b\u5efa\u5b83\u3002\n        if (errno==ENOENT)\n        {\n            // \u7528IPC_EXCL\u6807\u5fd7\u786e\u4fdd\u53ea\u6709\u4e00\u4e2a\u8fdb\u7a0b\u521b\u5efa\u5e76\u521d\u59cb\u5316\u4fe1\u53f7\u91cf\uff0c\u5176\u5b83\u8fdb\u7a0b\u53ea\u80fd\u83b7\u53d6\u3002\n            if ( (m_semid=semget(key,1,0666|IPC_CREAT|IPC_EXCL)) == -1)\n            {\n                if (errno==EEXIST) // \u5982\u679c\u9519\u8bef\u4ee3\u7801\u662f\u4fe1\u53f7\u91cf\u5df2\u5b58\u5728\uff0c\u5219\u518d\u6b21\u83b7\u53d6\u4fe1\u53f7\u91cf\u3002\n                {\n                    if ( (m_semid=semget(key,1,0666)) == -1)\n                    { \n                        perror(\"init 1 semget()\"); return false; \n                    }\n                    return true;\n                }\n                else  // \u5982\u679c\u662f\u5176\u5b83\u9519\u8bef\uff0c\u8fd4\u56de\u5931\u8d25\u3002\n                {\n                    perror(\"init 2 semget()\"); return false;\n                }\n            }\n\n            // \u4fe1\u53f7\u91cf\u521b\u5efa\u6210\u529f\u540e\uff0c\u8fd8\u9700\u8981\u628a\u5b83\u521d\u59cb\u5316\u6210value\u3002\n            union semun sem_union;\n            sem_union.val = value;   // \u8bbe\u7f6e\u4fe1\u53f7\u91cf\u7684\u521d\u59cb\u503c\u3002\n            if (semctl(m_semid,0,SETVAL,sem_union) &lt;  0) \n            { \n                perror(\"init semctl()\"); return false; \n            }\n        }\n        else\n        { perror(\"init 3 semget()\"); return false; }\n    }\n\n    return true;\n}\n</code></pre> <pre><code>// \u4fe1\u53f7\u91cf\u7684P\u64cd\u4f5c\uff08\u628a\u4fe1\u53f7\u91cf\u7684\u503c\u51cfvalue\uff09\uff0c\u5982\u679c\u4fe1\u53f7\u91cf\u7684\u503c\u662f0\uff0c\u5c06\u963b\u585e\u7b49\u5f85\uff0c\u76f4\u5230\u4fe1\u53f7\u91cf\u7684\u503c\u5927\u4e8e0\u3002\nbool csemp::wait(short value)\n{\n    if (m_semid==-1) return false;\n\n    struct sembuf sem_b;\n    sem_b.sem_num = 0;      // \u4fe1\u53f7\u91cf\u7f16\u53f7\uff0c0\u4ee3\u8868\u7b2c\u4e00\u4e2a\u4fe1\u53f7\u91cf\u3002\n    sem_b.sem_op = value;   // P\u64cd\u4f5c\u7684value\u5fc5\u987b\u5c0f\u4e8e0\u3002\n    sem_b.sem_flg = m_sem_flg;\n    if (semop(m_semid,&amp;sem_b,1) == -1) { perror(\"p semop()\"); return false; }\n\n    return true;\n}\n</code></pre> <pre><code>// \u4fe1\u53f7\u91cf\u7684V\u64cd\u4f5c\uff08\u628a\u4fe1\u53f7\u91cf\u7684\u503c\u51cfvalue\uff09\u3002\nbool csemp::post(short value)\n{\n    if (m_semid==-1) return false;\n\n    struct sembuf sem_b;\n    sem_b.sem_num = 0;     // \u4fe1\u53f7\u91cf\u7f16\u53f7\uff0c0\u4ee3\u8868\u7b2c\u4e00\u4e2a\u4fe1\u53f7\u91cf\u3002\n    sem_b.sem_op = value;  // V\u64cd\u4f5c\u7684value\u5fc5\u987b\u5927\u4e8e0\u3002\n    sem_b.sem_flg = m_sem_flg;\n    if (semop(m_semid,&amp;sem_b,1) == -1) { perror(\"V semop()\"); return false; }\n\n    return true;\n}\n</code></pre> <pre><code>// \u83b7\u53d6\u4fe1\u53f7\u91cf\u7684\u503c\uff0c\u6210\u529f\u8fd4\u56de\u4fe1\u53f7\u91cf\u7684\u503c\uff0c\u5931\u8d25\u8fd4\u56de-1\u3002\nint csemp::getvalue()\n{\n    return semctl(m_semid,0,GETVAL);\n}\n</code></pre> <pre><code>// \u9500\u6bc1\u4fe1\u53f7\u91cf\u3002\nbool csemp::destroy()\n{\n    if (m_semid==-1) return false;\n\n    if (semctl(m_semid,0,IPC_RMID) == -1) { perror(\"destroy semctl()\"); return false; }\n\n    return true;\n}\n</code></pre> <pre><code>csemp::~csemp()\n{\n}\n</code></pre></p>"},{"location":"Project/Backend%20server/ADF/Socket/CS/","title":"socket\u901a\u8baf\u7684\u51fd\u6570\u548c\u7c7b","text":""},{"location":"Project/Backend%20server/ADF/Socket/CS/#_1","title":"\u5b9a\u4e49","text":"<p><pre><code>// socket\u901a\u8baf\u7684\u5ba2\u6237\u7aef\u7c7b\nclass ctcpclient\n{\nprivate:\n    int  m_connfd;    // \u5ba2\u6237\u7aef\u7684socket.\n    string m_ip;        // \u670d\u52a1\u7aef\u7684ip\u5730\u5740\u3002\n    int  m_port;        // \u670d\u52a1\u7aef\u901a\u8baf\u7684\u7aef\u53e3\u3002\npublic:\n    ctcpclient(): m_connfd(-1),m_port(0) { }  // \u6784\u9020\u51fd\u6570\u3002\n\n    // \u5411\u670d\u52a1\u7aef\u53d1\u8d77\u8fde\u63a5\u8bf7\u6c42\u3002\n    // ip\uff1a\u670d\u52a1\u7aef\u7684ip\u5730\u5740\u3002\n    // port\uff1a\u670d\u52a1\u7aef\u901a\u8baf\u7684\u7aef\u53e3\u3002\n    // \u8fd4\u56de\u503c\uff1atrue-\u6210\u529f\uff1bfalse-\u5931\u8d25\u3002\n    bool connect(const string &amp;ip,const int port);\n\n    // \u63a5\u6536\u5bf9\u7aef\u53d1\u9001\u8fc7\u6765\u7684\u6570\u636e\u3002\n    // buffer\uff1a\u5b58\u653e\u63a5\u6536\u6570\u636e\u7f13\u51b2\u533a\u3002\n    // ibuflen: \u6253\u7b97\u63a5\u6536\u6570\u636e\u7684\u5927\u5c0f\u3002\n    // itimeout\uff1a\u7b49\u5f85\u6570\u636e\u7684\u8d85\u65f6\u65f6\u95f4\uff08\u79d2\uff09\uff1a-1-\u4e0d\u7b49\u5f85\uff1b0-\u65e0\u9650\u7b49\u5f85\uff1b&gt;0-\u7b49\u5f85\u7684\u79d2\u6570\u3002\n    // \u8fd4\u56de\u503c\uff1atrue-\u6210\u529f\uff1bfalse-\u5931\u8d25\uff0c\u5931\u8d25\u6709\u4e24\u79cd\u60c5\u51b5\uff1a1\uff09\u7b49\u5f85\u8d85\u65f6\uff1b2\uff09socket\u8fde\u63a5\u5df2\u4e0d\u53ef\u7528\u3002\n    bool read(string &amp;buffer,const int itimeout=0);                           // \u63a5\u6536\u6587\u672c\u6570\u636e\u3002\n    bool read(void *buffer,const int ibuflen,const int itimeout=0);   // \u63a5\u6536\u4e8c\u8fdb\u5236\u6570\u636e\u3002\n\n    // \u5411\u5bf9\u7aef\u53d1\u9001\u6570\u636e\u3002\n    // buffer\uff1a\u5f85\u53d1\u9001\u6570\u636e\u7f13\u51b2\u533a\u3002\n    // ibuflen\uff1a\u5f85\u53d1\u9001\u6570\u636e\u7684\u5927\u5c0f\u3002\n    // \u8fd4\u56de\u503c\uff1atrue-\u6210\u529f\uff1bfalse-\u5931\u8d25\uff0c\u5982\u679c\u5931\u8d25\uff0c\u8868\u793asocket\u8fde\u63a5\u5df2\u4e0d\u53ef\u7528\u3002\n    bool write(const string &amp;buffer);                          // \u53d1\u9001\u6587\u672c\u6570\u636e\u3002\n    bool write(const void *buffer,const int ibuflen);   // \u53d1\u9001\u4e8c\u8fdb\u5236\u6570\u636e\u3002\n\n    // \u65ad\u5f00\u4e0e\u670d\u52a1\u7aef\u7684\u8fde\u63a5\n    void close();\n\n    ~ctcpclient();  // \u6790\u6784\u51fd\u6570\u81ea\u52a8\u5173\u95edsocket\uff0c\u91ca\u653e\u8d44\u6e90\u3002\n};\n</code></pre> <pre><code>// socket\u901a\u8baf\u7684\u670d\u52a1\u7aef\u7c7b\nclass ctcpserver\n{\nprivate:\n    int m_socklen;                                // \u7ed3\u6784\u4f53struct sockaddr_in\u7684\u5927\u5c0f\u3002\n    struct sockaddr_in m_clientaddr;   // \u5ba2\u6237\u7aef\u7684\u5730\u5740\u4fe1\u606f\u3002\n    struct sockaddr_in m_servaddr;     // \u670d\u52a1\u7aef\u7684\u5730\u5740\u4fe1\u606f\u3002\n    int  m_listenfd;                               // \u670d\u52a1\u7aef\u7528\u4e8e\u76d1\u542c\u7684socket\u3002\n    int  m_connfd;                                // \u5ba2\u6237\u7aef\u8fde\u63a5\u4e0a\u6765\u7684socket\u3002\npublic:\n    ctcpserver():m_listenfd(-1),m_connfd(-1) {}  // \u6784\u9020\u51fd\u6570\u3002\n\n    // \u670d\u52a1\u7aef\u521d\u59cb\u5316\u3002\n    // port\uff1a\u6307\u5b9a\u670d\u52a1\u7aef\u7528\u4e8e\u76d1\u542c\u7684\u7aef\u53e3\u3002\n    // \u8fd4\u56de\u503c\uff1atrue-\u6210\u529f\uff1bfalse-\u5931\u8d25\uff0c\u4e00\u822c\u60c5\u51b5\u4e0b\uff0c\u53ea\u8981port\u8bbe\u7f6e\u6b63\u786e\uff0c\u6ca1\u6709\u88ab\u5360\u7528\uff0c\u521d\u59cb\u5316\u90fd\u4f1a\u6210\u529f\u3002\n    bool initserver(const unsigned int port,const int backlog=5); \n\n    // \u4ece\u5df2\u8fde\u63a5\u961f\u5217\u4e2d\u83b7\u53d6\u4e00\u4e2a\u5ba2\u6237\u7aef\u8fde\u63a5\uff0c\u5982\u679c\u5df2\u8fde\u63a5\u961f\u5217\u4e3a\u7a7a\uff0c\u5c06\u963b\u585e\u7b49\u5f85\u3002\n    // \u8fd4\u56de\u503c\uff1atrue-\u6210\u529f\u7684\u83b7\u53d6\u4e86\u4e00\u4e2a\u5ba2\u6237\u7aef\u8fde\u63a5\uff0cfalse-\u5931\u8d25\uff0c\u5982\u679caccept\u5931\u8d25\uff0c\u53ef\u4ee5\u91cd\u65b0accept\u3002\n    bool accept();\n\n    // \u83b7\u53d6\u5ba2\u6237\u7aef\u7684ip\u5730\u5740\u3002\n    // \u8fd4\u56de\u503c\uff1a\u5ba2\u6237\u7aef\u7684ip\u5730\u5740\uff0c\u5982\"192.168.1.100\"\u3002\n    char *getip();\n\n    // \u63a5\u6536\u5bf9\u7aef\u53d1\u9001\u8fc7\u6765\u7684\u6570\u636e\u3002\n    // buffer\uff1a\u5b58\u653e\u63a5\u6536\u6570\u636e\u7684\u7f13\u51b2\u533a\u3002\n    // ibuflen: \u6253\u7b97\u63a5\u6536\u6570\u636e\u7684\u5927\u5c0f\u3002\n    // itimeout\uff1a\u7b49\u5f85\u6570\u636e\u7684\u8d85\u65f6\u65f6\u95f4\uff08\u79d2\uff09\uff1a-1-\u4e0d\u7b49\u5f85\uff1b0-\u65e0\u9650\u7b49\u5f85\uff1b&gt;0-\u7b49\u5f85\u7684\u79d2\u6570\u3002\n    // \u8fd4\u56de\u503c\uff1atrue-\u6210\u529f\uff1bfalse-\u5931\u8d25\uff0c\u5931\u8d25\u6709\u4e24\u79cd\u60c5\u51b5\uff1a1\uff09\u7b49\u5f85\u8d85\u65f6\uff1b2\uff09socket\u8fde\u63a5\u5df2\u4e0d\u53ef\u7528\u3002\n    bool read(string &amp;buffer,const int itimeout=0);                           // \u63a5\u6536\u6587\u672c\u6570\u636e\u3002\n    bool read(void *buffer,const int ibuflen,const int itimeout=0);   // \u63a5\u6536\u4e8c\u8fdb\u5236\u6570\u636e\u3002\n\n    // \u5411\u5bf9\u7aef\u53d1\u9001\u6570\u636e\u3002\n    // buffer\uff1a\u5f85\u53d1\u9001\u6570\u636e\u7f13\u51b2\u533a\u3002\n    // ibuflen\uff1a\u5f85\u53d1\u9001\u6570\u636e\u7684\u5927\u5c0f\u3002\n    // \u8fd4\u56de\u503c\uff1atrue-\u6210\u529f\uff1bfalse-\u5931\u8d25\uff0c\u5982\u679c\u5931\u8d25\uff0c\u8868\u793asocket\u8fde\u63a5\u5df2\u4e0d\u53ef\u7528\u3002\n    bool write(const string &amp;buffer);                          // \u53d1\u9001\u6587\u672c\u6570\u636e\u3002\n    bool write(const void *buffer,const int ibuflen);   // \u53d1\u9001\u4e8c\u8fdb\u5236\u6570\u636e\u3002\n\n    // \u5173\u95ed\u76d1\u542c\u7684socket\uff0c\u5373m_listenfd\uff0c\u5e38\u7528\u4e8e\u591a\u8fdb\u7a0b\u670d\u52a1\u7a0b\u5e8f\u7684\u5b50\u8fdb\u7a0b\u4ee3\u7801\u4e2d\u3002\n    void closelisten();\n\n    // \u5173\u95ed\u5ba2\u6237\u7aef\u7684socket\uff0c\u5373m_connfd\uff0c\u5e38\u7528\u4e8e\u591a\u8fdb\u7a0b\u670d\u52a1\u7a0b\u5e8f\u7684\u7236\u8fdb\u7a0b\u4ee3\u7801\u4e2d\u3002\n    void closeclient();\n\n    ~ctcpserver();  // \u6790\u6784\u51fd\u6570\u81ea\u52a8\u5173\u95edsocket\uff0c\u91ca\u653e\u8d44\u6e90\u3002\n};\n</code></pre> <pre><code>// \u63a5\u6536socket\u7684\u5bf9\u7aef\u53d1\u9001\u8fc7\u6765\u7684\u6570\u636e\u3002\n// sockfd\uff1a\u53ef\u7528\u7684socket\u8fde\u63a5\u3002\n// buffer\uff1a\u63a5\u6536\u6570\u636e\u7f13\u51b2\u533a\u7684\u5730\u5740\u3002\n// ibuflen\uff1a\u672c\u6b21\u6210\u529f\u63a5\u6536\u6570\u636e\u7684\u5b57\u8282\u6570\u3002\n// itimeout\uff1a\u8bfb\u53d6\u6570\u636e\u8d85\u65f6\u7684\u65f6\u95f4\uff0c\u5355\u4f4d\uff1a\u79d2\uff0c-1-\u4e0d\u7b49\u5f85\uff1b0-\u65e0\u9650\u7b49\u5f85\uff1b&gt;0-\u7b49\u5f85\u7684\u79d2\u6570\u3002\n// \u8fd4\u56de\u503c\uff1atrue-\u6210\u529f\uff1bfalse-\u5931\u8d25\uff0c\u5931\u8d25\u6709\u4e24\u79cd\u60c5\u51b5\uff1a1\uff09\u7b49\u5f85\u8d85\u65f6\uff1b2\uff09socket\u8fde\u63a5\u5df2\u4e0d\u53ef\u7528\n</code></pre> <pre><code>bool tcpread(const int sockfd,string &amp;buffer,const int itimeout=0);                            // \u8bfb\u53d6\u6587\u672c\u6570\u636e\u3002\nbool tcpread(const int sockfd,void *buffer,const int ibuflen,const int itimeout=0);     // \u8bfb\u53d6\u4e8c\u8fdb\u5236\u6570\u636e\n</code></pre> <pre><code>// \u5411socket\u7684\u5bf9\u7aef\u53d1\u9001\u6570\u636e\u3002\n// sockfd\uff1a\u53ef\u7528\u7684socket\u8fde\u63a5\u3002\n// buffer\uff1a\u5f85\u53d1\u9001\u6570\u636e\u7f13\u51b2\u533a\u7684\u5730\u5740\u3002\n// ibuflen\uff1a\u5f85\u53d1\u9001\u6570\u636e\u7684\u5b57\u8282\u6570\u3002\n// \u8fd4\u56de\u503c\uff1atrue-\u6210\u529f\uff1bfalse-\u5931\u8d25\uff0c\u5982\u679c\u5931\u8d25\uff0c\u8868\u793asocket\u8fde\u63a5\u5df2\u4e0d\u53ef\u7528\n</code></pre> <pre><code>bool tcpwrite(const int sockfd,const string &amp;buffer);                             // \u5199\u5165\u6587\u672c\u6570\u636e\u3002\nbool tcpwrite(const int sockfd,const void *buffer,const int ibuflen);      // \u5199\u5165\u4e8c\u8fdb\u5236\u6570\u636e\n</code></pre> <pre><code>// \u4ece\u5df2\u7ecf\u51c6\u5907\u597d\u7684socket\u4e2d\u8bfb\u53d6\u6570\u636e\u3002\n// sockfd\uff1a\u5df2\u7ecf\u51c6\u5907\u597d\u7684socket\u8fde\u63a5\u3002\n// buffer\uff1a\u5b58\u653e\u6570\u636e\u7684\u5730\u5740\u3002\n// n\uff1a\u672c\u6b21\u6253\u7b97\u8bfb\u53d6\u6570\u636e\u7684\u5b57\u8282\u6570\u3002\n// \u8fd4\u56de\u503c\uff1a\u6210\u529f\u63a5\u6536\u5230n\u5b57\u8282\u7684\u6570\u636e\u540e\u8fd4\u56detrue\uff0csocket\u8fde\u63a5\u4e0d\u53ef\u7528\u8fd4\u56defalse\n</code></pre> <pre><code>bool readn(const int sockfd,char *buffer,const size_t n);\n</code></pre> <pre><code>// \u5411\u5df2\u7ecf\u51c6\u5907\u597d\u7684socket\u4e2d\u5199\u5165\u6570\u636e\u3002\n// sockfd\uff1a\u5df2\u7ecf\u51c6\u5907\u597d\u7684socket\u8fde\u63a5\u3002\n// buffer\uff1a\u5f85\u5199\u5165\u6570\u636e\u7684\u5730\u5740\u3002\n// n\uff1a\u5f85\u5199\u5165\u6570\u636e\u7684\u5b57\u8282\u6570\u3002\n// \u8fd4\u56de\u503c\uff1a\u6210\u529f\u5199\u5165\u5b8cn\u5b57\u8282\u7684\u6570\u636e\u540e\u8fd4\u56detrue\uff0csocket\u8fde\u63a5\u4e0d\u53ef\u7528\u8fd4\u56defalse\n</code></pre></p> <pre><code>bool writen(const int sockfd,const char *buffer,const size_t n);\n</code></pre> <pre><code>- send\u51fd\u6570:\n    - \u529f\u80fd\u662f\u628a\u5f85\u53d1\u9001\u7684\u6570\u636e\u62f7\u8d1d\u5230\u53d1\u9001\u7f13\u51b2\u533a\u3002\n\n    - \u8fd4\u56de\u503c\u662f\u5df2\u62f7\u8d1d\u7684\u5b57\u8282\u6570\uff0c\u6b63\u5e38\u60c5\u51b5\u4e0b\uff0c\u4e0e\u5f85\u53d1\u9001\u6570\u636e\u7684\u5b57\u8282\u6570\u76f8\u540c\u3002\n\n    - \u5982\u679c\u53d1\u9001\u7f13\u51b2\u533a\u7684\u7a7a\u95f4\u4e0d\u8db3\uff0c\u5219\u8fd4\u56de\u672c\u6b21\u5df2\u62f7\u8d1d\u7684\u5b57\u8282\u6570\u3002\n</code></pre>"},{"location":"Project/Backend%20server/ADF/Socket/CS/#_2","title":"\u5b9e\u73b0","text":"<pre><code>bool ctcpserver::initserver(const unsigned int port,const int backlog)\n{\n    // \u5982\u679c\u670d\u52a1\u7aef\u7684socket&gt;0\uff0c\u5173\u6389\u5b83\uff0c\u8fd9\u79cd\u5904\u7406\u65b9\u6cd5\u6ca1\u6709\u7279\u522b\u7684\u539f\u56e0\uff0c\u4e0d\u8981\u7ea0\u7ed3\u3002\n    if (m_listenfd &gt; 0) { ::close(m_listenfd); m_listenfd=-1; }\n\n    if ( (m_listenfd = socket(AF_INET,SOCK_STREAM,0))&lt;=0) return false;\n\n    // \u5ffd\u7565SIGPIPE\u4fe1\u53f7\uff0c\u9632\u6b62\u7a0b\u5e8f\u5f02\u5e38\u9000\u51fa\u3002\n    // \u5982\u679c\u5f80\u5df2\u5173\u95ed\u7684socket\u7ee7\u7eed\u5199\u6570\u636e\uff0c\u4f1a\u4ea7\u751fSIGPIPE\u4fe1\u53f7\uff0c\u5b83\u7684\u7f3a\u7701\u884c\u4e3a\u662f\u7ec8\u6b62\u7a0b\u5e8f\uff0c\u6240\u4ee5\u8981\u5ffd\u7565\u5b83\u3002\n    signal(SIGPIPE,SIG_IGN);   \n\n    // \u6253\u5f00SO_REUSEADDR\u9009\u9879\uff0c\u5f53\u670d\u52a1\u7aef\u8fde\u63a5\u5904\u4e8eTIME_WAIT\u72b6\u6001\u65f6\u53ef\u4ee5\u518d\u6b21\u542f\u52a8\u670d\u52a1\u5668\uff0c\n    // \u5426\u5219bind()\u53ef\u80fd\u4f1a\u4e0d\u6210\u529f\uff0c\u62a5\uff1aAddress already in use\u3002\n    int opt = 1; \n    setsockopt(m_listenfd,SOL_SOCKET,SO_REUSEADDR,&amp;opt,sizeof(opt));    \n\n    memset(&amp;m_servaddr,0,sizeof(m_servaddr));\n    m_servaddr.sin_family = AF_INET;\n    m_servaddr.sin_addr.s_addr = htonl(INADDR_ANY);   // \u4efb\u610fip\u5730\u5740\u3002\n    m_servaddr.sin_port = htons(port);\n    if (bind(m_listenfd,(struct sockaddr *)&amp;m_servaddr,sizeof(m_servaddr)) != 0 )\n    {\n        closelisten(); return false;\n    }\n\n    if (listen(m_listenfd,backlog) != 0 )\n    {\n        closelisten(); return false;\n    }\n\n    return true;\n}\n</code></pre> <p><pre><code>bool ctcpclient::connect(const string &amp;ip,const int port)\n{\n    // \u5982\u679c\u5df2\u8fde\u63a5\u5230\u670d\u52a1\u7aef\uff0c\u5219\u65ad\u5f00\uff0c\u8fd9\u79cd\u5904\u7406\u65b9\u6cd5\u6ca1\u6709\u7279\u522b\u7684\u539f\u56e0\uff0c\u4e0d\u8981\u7ea0\u7ed3\u3002\n    if (m_connfd!=-1) { ::close(m_connfd); m_connfd=-1; }\n\n    // \u5ffd\u7565SIGPIPE\u4fe1\u53f7\uff0c\u9632\u6b62\u7a0b\u5e8f\u5f02\u5e38\u9000\u51fa\u3002\n    // \u5982\u679csend\u5230\u4e00\u4e2adisconnected socket\u4e0a\uff0c\u5185\u6838\u5c31\u4f1a\u53d1\u51faSIGPIPE\u4fe1\u53f7\u3002\u8fd9\u4e2a\u4fe1\u53f7\n    // \u7684\u7f3a\u7701\u5904\u7406\u65b9\u6cd5\u662f\u7ec8\u6b62\u8fdb\u7a0b\uff0c\u5927\u591a\u6570\u65f6\u5019\u8fd9\u90fd\u4e0d\u662f\u6211\u4eec\u671f\u671b\u7684\u3002\u6211\u4eec\u91cd\u65b0\u5b9a\u4e49\u8fd9\n    // \u4e2a\u4fe1\u53f7\u7684\u5904\u7406\u65b9\u6cd5\uff0c\u5927\u591a\u6570\u60c5\u51b5\u662f\u76f4\u63a5\u5c4f\u853d\u5b83\u3002\n    signal(SIGPIPE,SIG_IGN);   \n\n    m_ip=ip;\n    m_port=port;\n\n    struct hostent* h;\n    struct sockaddr_in servaddr;\n\n    if ( (m_connfd = socket(AF_INET,SOCK_STREAM,0) ) &lt; 0) return false;\n\n    if ( !(h = gethostbyname(m_ip.c_str())) )\n    {\n        ::close(m_connfd);  m_connfd=-1; return false;\n    }\n\n    memset(&amp;servaddr,0,sizeof(servaddr));\n    servaddr.sin_family = AF_INET;\n    servaddr.sin_port = htons(m_port);  // \u6307\u5b9a\u670d\u52a1\u7aef\u7684\u901a\u8baf\u7aef\u53e3\n    memcpy(&amp;servaddr.sin_addr,h-&gt;h_addr,h-&gt;h_length);\n\n    if (::connect(m_connfd, (struct sockaddr *)&amp;servaddr,sizeof(servaddr)) != 0)\n    {\n        ::close(m_connfd);  m_connfd=-1; return false;\n    }\n\n    return true;\n}\n</code></pre> <pre><code>bool ctcpserver::accept()\n{\n    if (m_listenfd==-1) return false;\n\n    int m_socklen = sizeof(struct sockaddr_in);\n    if ((m_connfd=::accept(m_listenfd,(struct sockaddr *)&amp;m_clientaddr,(socklen_t*)&amp;m_socklen)) &lt; 0)\n        return false;\n\n    return true;\n}\n</code></pre> <pre><code>char *ctcpserver::getip()\n{\n    return(inet_ntoa(m_clientaddr.sin_addr));\n}\n</code></pre> <pre><code>\u5199\n</code></pre> <pre><code>bool ctcpserver::write(const string &amp;buffer)\n{\n    if (m_connfd==-1) return false;\n\n    return(tcpwrite(m_connfd,buffer));\n}\n</code></pre> <pre><code>bool ctcpserver::write(const void *buffer,const int ibuflen)  // \u53d1\u9001\u4e8c\u8fdb\u5236\u6570\u636e\u3002\n{\n    if (m_connfd==-1) return false;\n\n    return(tcpwrite(m_connfd,(char*)buffer,ibuflen));\n}\n</code></pre> <pre><code>bool ctcpclient::write(const string &amp;buffer)\n{\n    if (m_connfd==-1) return false;\n\n    return(tcpwrite(m_connfd,buffer));\n}\n</code></pre> <pre><code>bool ctcpclient::write(const void *buffer,const int ibuflen)\n{\n    if (m_connfd==-1) return false;\n\n    return(tcpwrite(m_connfd,(char*)buffer,ibuflen));\n}\n</code></pre></p> <pre><code>bool tcpwrite(const int sockfd,const string &amp;buffer)      // \u53d1\u9001\u6587\u672c\u6570\u636e\u3002\n{\n    if (sockfd==-1) return false;\n\n    int buflen=buffer.size();\n\n    // \u5148\u53d1\u9001\u62a5\u5934\uff08\u62a5\u6587\u957f\u5ea6\uff09\u53ef\u89e3\u51b3\u7c98\u5305\u5206\u5305\u95ee\u9898\n    if (writen(sockfd,(char*)&amp;buflen,4) == false) return false;\n\n    // \u518d\u53d1\u9001\u62a5\u6587\u4f53\u3002\n    if (writen(sockfd,buffer.c_str(),buflen) == false) return false;\n\n    return true;\n}\n</code></pre> <pre><code>bool tcpwrite(const int sockfd,const void *buffer,const int ibuflen)        // \u53d1\u9001\u4e8c\u8fdb\u5236\u6570\u636e\u3002\n{\n    if (sockfd==-1) return false;\n\n    if (writen(sockfd,(char*)buffer,ibuflen) == false) return false;\n\n    return true;\n}\n</code></pre> <pre><code>bool writen(const int sockfd,const char *buffer,const size_t n)\n{\n    int nleft=n;       // \u5269\u4f59\u9700\u8981\u5199\u5165\u7684\u5b57\u8282\u6570\u3002\n    int idx=0;          // \u5df2\u6210\u529f\u5199\u5165\u7684\u5b57\u8282\u6570\u3002\n    int nwritten;      // \u6bcf\u6b21\u8c03\u7528send()\u51fd\u6570\u5199\u5165\u7684\u5b57\u8282\u6570\u3002\n\n    while(nleft &gt; 0 )\n    {    \n      if ( (nwritten=send(sockfd,buffer+idx,nleft,0)) &lt;= 0) return false;      \n\n      nleft=nleft-nwritten;\n      idx=idx+nwritten;\n    }\n\n    return true;\n}\n</code></pre> <p><pre><code>\u8bfb\n</code></pre> <pre><code>bool ctcpserver::read(void *buffer,const int ibuflen,const int itimeout)   // \u63a5\u6536\u4e8c\u8fdb\u5236\u6570\u636e\u3002\n{\n    if (m_connfd==-1) return false;\n\n    return(tcpread(m_connfd,buffer,ibuflen,itimeout));\n}\n</code></pre> <pre><code>bool ctcpserver::read(string &amp;buffer,const int itimeout)  // \u63a5\u6536\u6587\u672c\u6570\u636e\u3002\n{\n    if (m_connfd==-1) return false;\n\n    return(tcpread(m_connfd,buffer,itimeout));\n}\n</code></pre> <pre><code>bool ctcpclient::read(void *buffer,const int ibuflen,const int itimeout)   // \u63a5\u6536\u4e8c\u8fdb\u5236\u6570\u636e\u3002\n{\n    if (m_connfd==-1) return false;\n\n    return(tcpread(m_connfd,buffer,ibuflen,itimeout));\n}\n</code></pre> <pre><code>bool ctcpclient::read(string &amp;buffer,const int itimeout)  // \u63a5\u6536\u6587\u672c\u6570\u636e\u3002\n{\n    if (m_connfd==-1) return false;\n\n    return(tcpread(m_connfd,buffer,itimeout));\n}\n</code></pre> <pre><code>bool tcpread(const int sockfd,void *buffer,const int ibuflen,const int itimeout)    // \u63a5\u6536\u4e8c\u8fdb\u5236\u6570\u636e\u3002\n{\n    if (sockfd==-1) return false;\n\n    // \u5982\u679citimeout&gt;0\uff0c\u8868\u793a\u9700\u8981\u7b49\u5f85itimeout\u79d2\uff0c\u5982\u679citimeout\u79d2\u540e\u8fd8\u6ca1\u6709\u6570\u636e\u5230\u8fbe\uff0c\u8fd4\u56defalse\u3002\n    if (itimeout&gt;0)\n    {\n        struct pollfd fds;\n        fds.fd=sockfd;\n        fds.events=POLLIN;\n        if ( poll(&amp;fds,1,itimeout*1000) &lt;= 0 ) return false;\n    }\n\n    // \u5982\u679citimeout==-1\uff0c\u8868\u793a\u4e0d\u7b49\u5f85\uff0c\u7acb\u5373\u5224\u65adsocket\u7684\u7f13\u51b2\u533a\u4e2d\u662f\u5426\u6709\u6570\u636e\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u8fd4\u56defalse\u3002\n    if (itimeout==-1)\n    {\n        struct pollfd fds;\n        fds.fd=sockfd;\n        fds.events=POLLIN;\n        if ( poll(&amp;fds,1,0) &lt;= 0 ) return false;\n    }\n\n    // \u8bfb\u53d6\u62a5\u6587\u5185\u5bb9\u3002\n    if (readn(sockfd,(char*)buffer,ibuflen) == false) return false;\n\n    return true;\n}\n</code></pre> <pre><code>bool tcpread(const int sockfd,string &amp;buffer,const int itimeout)    // \u63a5\u6536\u6587\u672c\u6570\u636e\u3002\n{\n    if (sockfd==-1) return false;\n\n    // \u5982\u679citimeout&gt;0\uff0c\u8868\u793a\u7b49\u5f85itimeout\u79d2\uff0c\u5982\u679citimeout\u79d2\u540e\u63a5\u6536\u7f13\u51b2\u533a\u4e2d\u8fd8\u6ca1\u6709\u6570\u636e\uff0c\u8fd4\u56defalse\u3002\n    if (itimeout&gt;0)\n    {\n        struct pollfd fds;\n        fds.fd=sockfd;\n        fds.events=POLLIN;\n        if ( poll(&amp;fds,1,itimeout*1000) &lt;= 0 ) return false;\n    }\n\n    // \u5982\u679citimeout==-1\uff0c\u8868\u793a\u4e0d\u7b49\u5f85\uff0c\u7acb\u5373\u5224\u65adsocket\u7684\u63a5\u6536\u7f13\u51b2\u533a\u4e2d\u662f\u5426\u6709\u6570\u636e\uff0c\u5982\u679c\u6ca1\u6709\uff0c\u8fd4\u56defalse\u3002\n    if (itimeout==-1)\n    {\n        struct pollfd fds;\n        fds.fd=sockfd;\n        fds.events=POLLIN;\n        if ( poll(&amp;fds,1,0) &lt;= 0 ) return false;\n    }\n\n    int buflen=0;\n\n    // \u5148\u8bfb\u53d6\u62a5\u6587\u957f\u5ea6\uff0c4\u4e2a\u5b57\u8282\u3002\n    if (readn(sockfd,(char*)&amp;buflen,4) == false) return false;\n\n    buffer.resize(buflen);   // \u8bbe\u7f6ebuffer\u7684\u5927\u5c0f\u3002\n\n    // \u518d\u8bfb\u53d6\u62a5\u6587\u5185\u5bb9\u3002\n    if (readn(sockfd,&amp;buffer[0],buflen) == false) return false;\n\n    return true;\n}\n</code></pre> <pre><code>bool readn(const int sockfd,char *buffer,const size_t n)\n{\n    int nleft=n;    // \u5269\u4f59\u9700\u8981\u8bfb\u53d6\u7684\u5b57\u8282\u6570\u3002\n    int idx=0;       // \u5df2\u6210\u529f\u8bfb\u53d6\u7684\u5b57\u8282\u6570\u3002\n    int nread;       // \u6bcf\u6b21\u8c03\u7528recv()\u51fd\u6570\u8bfb\u5230\u7684\u5b57\u8282\u6570\u3002\n\n    while(nleft &gt; 0)\n    {\n        if ( (nread=recv(sockfd,buffer+idx,nleft,0)) &lt;= 0) return false;\n\n        idx=idx+nread;\n        nleft=nleft-nread;\n    }\n\n    return true;\n}\n</code></pre></p>"},{"location":"Project/Backend%20server/ADF/Socket/CS/#_3","title":"\u6d4b\u8bd5","text":""},{"location":"Project/Backend%20server/ADF/Socket/Test/","title":"Test","text":""},{"location":"Project/Backend%20server/ADF/Socket/Test/#_2","title":"\u63a5\u6536\u6587\u672c\u6570\u636e","text":"<pre><code>/*\n *  ctcpclient\u7c7b\u4f20\u8f93\u6587\u672c\u6570\u636e\uff08\u7f51\u7edc\u901a\u8baf\u7684\u5ba2\u6237\u7aef\uff09 \n*/\n#include \"../_public.h\"\nusing namespace std;\nusing namespace idc;\n\nint main(int argc,char *argv[])\n{\n    if (argc!=3)\n    {\n        printf(\"Using:./demo44 ip port\\n\");\n        printf(\"Sample:./demo44 192.168.150.128 5005\\n\");\n        return -1;\n    }\n\n    ctcpclient tcpclient;\n    if (tcpclient.connect(argv[1],atoi(argv[2]))==false)     // \u5411\u670d\u52a1\u7aef\u53d1\u8d77\u8fde\u63a5\u8bf7\u6c42\u3002\n    {\n        printf(\"tcpclient.connect(%s,%s) failed.\\n\",argv[1],argv[2]); return -1;\n    }\n\n    string sendbuf,recvbuf;\n\n    for (int ii=0;ii&lt;10;ii++)\n    {\n        sendbuf=sformat(\"\u8fd9\u662f\u7b2c%d\u4e2a\u8d85\u7ea7\u5973\u751f\u3002\",ii);\n\n        if (tcpclient.write(sendbuf)==false)        // \u5411\u670d\u52a1\u7aef\u53d1\u9001\u8bf7\u6c42\u62a5\u6587\u3002\n        {\n            printf(\"tcpclient.write() failed.\\n\"); break;\n        }\n        cout &lt;&lt; \"\u53d1\u9001\uff1a\" &lt;&lt; sendbuf &lt;&lt; endl;\n\n        sleep(1);\n\n        if (tcpclient.read(recvbuf)==false)         // \u63a5\u6536\u670d\u52a1\u7aef\u7684\u56de\u5e94\u62a5\u6587\u3002\n        {\n            printf(\"tcpclient.read() failed.\\n\"); break;\n        }\n        cout &lt;&lt; \"\u63a5\u6536\uff1a\" &lt;&lt; recvbuf &lt;&lt; endl;\n    }\n}\n</code></pre> <pre><code>/*\n * ctcpserver\u7c7b\u4f20\u8f93\u6587\u672c\u6570\u636e\u3002\uff08\u7f51\u7edc\u901a\u8baf\u7684\u670d\u52a1\u7aef\uff09 \n*/\n#include \"../_public.h\"\nusing namespace std;\nusing namespace idc;\n\nint main(int argc,char *argv[])\n{\n    if (argc!=2)\n    {\n        printf(\"Using:./demo45 port\\n\");\n        printf(\"Sample:./demo45 5005\\n\");\n        return -1;\n    }\n\n    ctcpserver tcpserver;\n    if (tcpserver.initserver(atoi(argv[1]))==false)        // \u670d\u52a1\u7aef\u521d\u59cb\u5316\u3002\n    {\n        printf(\"tcpserver.initserver(%s) failed.\\n\",argv[1]); return -1;\n    }\n\n    if (tcpserver.accept()==false)                                // \u7b49\u5f85\u5ba2\u6237\u7aef\u7684\u8fde\u63a5\u3002\n    {\n        printf(\"accept() failed.\\n\"); return -1;\n    }\n    cout &lt;&lt; \"\u5ba2\u6237\u7aef\u5df2\u8fde\u63a5(\" &lt;&lt; tcpserver.getip() &lt;&lt; \")\u3002\\n\";\n\n    string sendbuf,recvbuf;\n\n    while (true)\n    {\n        if (tcpserver.read(recvbuf)==false)          // \u63a5\u6536\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\u62a5\u6587\u3002\n        {\n            printf(\"tcpserver.read() failed.\\n\"); break;\n        }\n        cout &lt;&lt; \"\u63a5\u6536\uff1a\" &lt;&lt; recvbuf &lt;&lt; endl;\n\n        sendbuf=\"ok\";\n        if (tcpserver.write(sendbuf)==false)        // \u5411\u5ba2\u6237\u7aef\u53d1\u9001\u56de\u5e94\u62a5\u6587\u3002\n        {\n            printf(\"tcpserver.write() failed.\\n\"); break;\n        }\n        cout &lt;&lt; \"\u53d1\u9001\uff1a\" &lt;&lt; sendbuf &lt;&lt; endl;\n    }\n}\n</code></pre>"},{"location":"Project/Backend%20server/ADF/Socket/Test/#_3","title":"\u63a5\u6536\u4e8c\u8fdb\u5236\u6570\u636e","text":"<pre><code>/*\n *  ctcpclient\u7c7b\u4f20\u8f93\u4e8c\u8fdb\u5236\u6570\u636e\uff08\u7f51\u7edc\u901a\u8baf\u7684\u5ba2\u6237\u7aef\uff09 \n*/\n#include \"../_public.h\"\nusing namespace std;\nusing namespace idc;\n\nint main(int argc,char *argv[])\n{\n    if (argc!=3)\n    {\n        printf(\"Using:./demo46 ip port\\n\");\n        printf(\"Sample./demo46 192.168.150.128 5005\\n\");\n        return -1;\n    }\n\n    ctcpclient tcpclient;\n    if (tcpclient.connect(argv[1],atoi(argv[2]))==false)     // \u5411\u670d\u52a1\u7aef\u53d1\u8d77\u8fde\u63a5\u8bf7\u6c42\u3002\n    {\n        printf(\"tcpclient.connect(%s,%s) failed.\\n\",argv[1],argv[2]); return -1;\n    }\n\n    struct st_girl   // \u8d85\u5973\u7ed3\u6784\u4f53\u3002\n    {\n        int bh;\n        char name[31];\n    }stgirl;\n\n    string recvbuf;\n\n    for (int ii=0;ii&lt;10;ii++)\n    {\n        memset(&amp;stgirl,0,sizeof(stgirl));\n        stgirl.bh=ii;\n        sprintf(stgirl.name,\"\u897f\u65bd%d\",ii);\n\n        if (tcpclient.write(&amp;stgirl,sizeof(stgirl))==false)        // \u5411\u670d\u52a1\u7aef\u53d1\u9001\u8bf7\u6c42\u6570\u636e\u3002\n        {\n            printf(\"tcpclient.write() failed.\\n\"); break;\n        }\n        cout &lt;&lt; sformat(\"\u53d1\u9001\uff1abh=%d,name=%s\\n\",stgirl.bh,stgirl.name);\n\n        sleep(1);\n\n        if (tcpclient.read(recvbuf)==false)         // \u63a5\u6536\u670d\u52a1\u7aef\u7684\u56de\u5e94\u62a5\u6587\u3002\n        {\n            printf(\"tcpclient.read() failed.\\n\"); break;\n        }\n        cout &lt;&lt; \"\u63a5\u6536\uff1a\" &lt;&lt; recvbuf &lt;&lt; endl;\n    }\n}\n</code></pre> <pre><code>/*\n *  ctcpserver\u7c7b\u4f20\u8f93\u4e8c\u8fdb\u5236\u6570\u636e\u3002\uff08\u7f51\u7edc\u901a\u8baf\u7684\u670d\u52a1\u7aef\uff09\n*/\n#include \"../_public.h\"\nusing namespace std;\nusing namespace idc;\n\nint main(int argc,char *argv[])\n{\n    if (argc!=2)\n    {\n        printf(\"Using:./demo47 port\\n\");\n        printf(\"Sample:./demo47 5005\\n\");\n        return -1;\n    }\n\n    ctcpserver tcpserver;\n    if (tcpserver.initserver(atoi(argv[1]))==false)        // \u670d\u52a1\u7aef\u521d\u59cb\u5316\u3002\n    {\n        printf(\"tcpserver.initserver(%s) failed.\\n\",argv[1]); return -1;\n    }\n\n    if (tcpserver.accept()==false)                                // \u7b49\u5f85\u5ba2\u6237\u7aef\u7684\u8fde\u63a5\u3002\n    {\n        printf(\"accept() failed.\\n\"); return -1;\n    }\n    cout &lt;&lt; \"\u5ba2\u6237\u7aef\u5df2\u8fde\u63a5(\" &lt;&lt; tcpserver.getip() &lt;&lt; \")\u3002\\n\";\n\n    struct st_girl\n    {\n        int bh;\n        char name[31];\n    }stgirl;\n\n    string sendbuf;\n\n    while (true)\n    {\n        if (tcpserver.read(&amp;stgirl,sizeof(stgirl))==false)          // \u63a5\u6536\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\u6570\u636e\u3002\n        {\n            printf(\"tcpserver.read() failed.\\n\"); break;\n        }\n        cout &lt;&lt; sformat(\"\u63a5\u6536\uff1abh=%d,name=%s\\n\",stgirl.bh,stgirl.name);\n\n        sendbuf=\"ok\";\n        if (tcpserver.write(\"ok\")==false)        // \u5411\u5ba2\u6237\u7aef\u53d1\u9001\u56de\u5e94\u62a5\u6587\u3002\n        {\n            printf(\"tcpserver.write() failed.\\n\"); break;\n        }\n        cout &lt;&lt; \"\u53d1\u9001\uff1a\" &lt;&lt; sendbuf &lt;&lt; endl;\n    }\n}\n</code></pre>"},{"location":"Project/Backend%20server/ADF/String%20operations/C%2B%2B%20foft/","title":"C++\u683c\u5f0f\u5316\u8f93\u51fa\u51fd\u6570\u6a21\u677f","text":""},{"location":"Project/Backend%20server/ADF/String%20operations/C%2B%2B%20foft/#_1","title":"\u5b9a\u4e49","text":"<pre><code>template&lt; typename... Args &gt;\nbool sformat(string &amp;str,const char* fmt, Args... args ) \n{\n    int len = snprintf( nullptr, 0, fmt, args... );      // \u5f97\u5230\u683c\u5f0f\u5316\u8f93\u51fa\u540e\u5b57\u7b26\u4e32\u7684\u603b\u957f\u5ea6\u3002\n    if (len &lt; 0) return false;                                  // \u5982\u679c\u8c03\u7528snprintf\u5931\u8d25\uff0c\u8fd4\u56de-1\u3002\n    if (len == 0) { str.clear(); return true; }            // \u5982\u679c\u8c03\u7528snprintf\u8fd4\u56de0\uff0c\u8868\u793a\u683c\u5f0f\u5316\u8f93\u51fa\u7684\u5185\u5bb9\u4e3a\u7a7a\u3002\n\n    str.resize(len);                                                 // \u4e3astring\u5206\u914d\u5185\u5b58\u3002\n    snprintf(&amp;str[0], len + 1, fmt, args... );           // linux\u5e73\u53f0\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662flen+1\uff0cwindows\u5e73\u53f0\u662flen\u3002\n    return true;\n}\n\ntemplate&lt; typename... Args &gt;\nstring sformat(const char* fmt, Args... args ) \n{\n    string str;\n\n    int len = snprintf( nullptr, 0, fmt, args... );      // \u5f97\u5230\u683c\u5f0f\u5316\u540e\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u3002\n    if (len &lt; 0) return str;              // \u5982\u679c\u8c03\u7528snprintf\u5931\u8d25\uff0c\u8fd4\u56de-1\u3002\n    if (len == 0) return str;           // \u5982\u679c\u8c03\u7528snprintf\u8fd4\u56de0\uff0c\u8868\u793a\u683c\u5f0f\u5316\u8f93\u51fa\u7684\u5185\u5bb9\u4e3a\u7a7a\u3002;\n\n    str.resize(len);                                                // \u4e3astring\u5206\u914d\u5185\u5b58\u3002\n    snprintf(&amp;str[0], len + 1, fmt, args... );          // linux\u5e73\u53f0\u7b2c\u4e8c\u4e2a\u53c2\u6570\u662flen+1\uff0cwindows\u5e73\u53f0\u662flen\u3002\n    return str;\n}\n</code></pre>"},{"location":"Project/Backend%20server/ADF/String%20operations/C%2B%2B%20foft/#_2","title":"\u6d4b\u8bd5","text":"<pre><code>#include \"../_public.h\"\nusing namespace std;\nusing namespace idc;\n\nint main()\n{\n    int bh=1;\n    char name[31]; strcpy(name,\"\u897f\u65bd\");\n    double weight=48.2;\n    string yz=\"\u6f02\u4eae\";\n\n    char s1[100];\n    int len=snprintf(s1,100,\"\u7f16\u53f7=%02d,\u59d3\u540d=%s,\u4f53\u91cd=%.2f,\u989c\u503c=%s\",bh,name,weight,yz.c_str());\n    cout &lt;&lt; \"s1=\" &lt;&lt; s1 &lt;&lt; endl;\n\n    printf(\"len=%d\\n\",len);                 // \u4e3a50\u5b57\u8282 \u4e00\u4e2a\u4e2d\u6587\u53603\u4e2a\u5b57\u8282\n    printf(\"strlen(s1)=%zu\\n\",strlen(s1)); // \u4f7f\u7528 %zu \u8f93\u51fa size_t \u7c7b\u578b\n\n    string s2;\n    s2=\"\u7f16\u53f7=\"+to_string(bh)+\",\u59d3\u540d=\"+name+\",\u4f53\u91cd=\"+to_string(weight)+\",\u989c\u503c=\"+yz;\n    cout &lt;&lt; \"s2=\" &lt;&lt; s2 &lt;&lt; endl;\n\n    sformat(s2,\"\u7f16\u53f7=%02d,\u59d3\u540d=%s,\u4f53\u91cd=%.2f,\u989c\u503c=%s\",bh,name,weight,yz.c_str());\n    cout &lt;&lt; \"s2=\" &lt;&lt; s2 &lt;&lt; endl;\n\n    s2=sformat(\"\u7f16\u53f7=%02d,\u59d3\u540d=%s,\u4f53\u91cd=%.2f,\u989c\u503c=%s\",bh,name,weight,yz.c_str());\n    cout &lt;&lt; \"s2=\" &lt;&lt; s2 &lt;&lt; endl;\n\n\n\n    return 0;\n}\n</code></pre>"},{"location":"Project/Backend%20server/ADF/String%20operations/Convert-l-to-u/","title":"\u5c0f\u5199\u5b57\u6bcd\u8f6c\u6362\u6210\u5927\u5199","text":""},{"location":"Project/Backend%20server/ADF/String%20operations/Convert-l-to-u/#_2","title":"\u5b9a\u4e49","text":"<pre><code>// \u628a\u5b57\u7b26\u4e32\u4e2d\u7684\u5c0f\u5199\u5b57\u6bcd\u8f6c\u6362\u6210\u5927\u5199\uff0c\u5ffd\u7565\u4e0d\u662f\u5b57\u6bcd\u7684\u5b57\u7b26\u3002\n// str\uff1a\u5f85\u8f6c\u6362\u7684\u5b57\u7b26\u4e32\u3002\nchar*     toupper(char *str);\nstring&amp; toupper(string &amp;str);\n\n// \u628a\u5b57\u7b26\u4e32\u4e2d\u7684\u5927\u5199\u5b57\u6bcd\u8f6c\u6362\u6210\u5c0f\u5199\uff0c\u5ffd\u7565\u4e0d\u662f\u5b57\u6bcd\u7684\u5b57\u7b26\u3002\n// str\uff1a\u5f85\u8f6c\u6362\u7684\u5b57\u7b26\u4e32\u3002\nchar*     tolower(char *str);\nstring&amp; tolower(string &amp;str);\n</code></pre>"},{"location":"Project/Backend%20server/ADF/String%20operations/Convert-l-to-u/#_3","title":"\u5b9e\u73b0","text":"<pre><code>char* toupper(char *str)\n{\n    if (str == nullptr) return nullptr;\n\n    char* p = str;              // \u6307\u5411\u5b57\u7b26\u4e32\u7684\u9996\u5730\u5740\u3002\n    while (*p != 0)           // \u904d\u5386\u5b57\u7b26\u4e32\u3002\n    {\n        if ( (*p &gt;= 'a') &amp;&amp; (*p &lt;= 'z') ) *p=*p - 32;\n        p++;\n    }\n\n    return str;\n}\n\nstring&amp; toupper(string &amp;str)\n{\n    for (auto &amp;cc:str)\n    {\n        if ( (cc &gt;= 'a') &amp;&amp; (cc &lt;= 'z') ) cc=cc - 32;\n    }\n\n    return str;\n}\n\nchar* tolower(char *str)\n{\n    if (str == nullptr) return nullptr;\n\n    char* p = str;              // \u6307\u5411\u5b57\u7b26\u4e32\u7684\u9996\u5730\u5740\u3002\n    while (*p != 0)           // \u904d\u5386\u5b57\u7b26\u4e32\u3002\n    {\n        if ( (*p &gt;= 'A') &amp;&amp; (*p &lt;= 'Z') ) *p=*p + 32;\n        p++;\n    }\n\n    return str;\n}\n\nstring&amp; tolower(string &amp;str)\n{\n    for (auto &amp;cc:str)\n    {\n        if ( (cc &gt;= 'A') &amp;&amp; (cc &lt;= 'Z') ) cc=cc + 32;\n    }\n\n    return str;\n}\n</code></pre>"},{"location":"Project/Backend%20server/ADF/String%20operations/Convert-l-to-u/#_4","title":"\u6d4b\u8bd5","text":"<pre><code>#include \"../_public.h\"\nusing namespace std;\nusing namespace idc;\n\nint main()\n{\n    char str1[31];   // C\u98ce\u683c\u7684\u5b57\u7b26\u4e32\u3002\n\n    strcpy(str1,\"12abz45ABz8\u897f\u65bd\u3002\");\n    toupper(str1);                       // \u628astr1\u4e2d\u7684\u5c0f\u5199\u5b57\u6bcd\u8f6c\u6362\u4e3a\u5927\u5199\u3002\n    printf(\"str1=%s=\\n\",str1);    // \u51fa\u8f93\u7ed3\u679c\u662fstr1=12ABZ45ABZ8\u897f\u65bd\u3002=\n\n    strcpy(str1,\"12abz45ABz8\u897f\u65bd\u3002\");\n    tolower(str1);                       // \u628astr1\u4e2d\u7684\u5927\u5199\u5b57\u6bcd\u8f6c\u6362\u4e3a\u5c0f\u5199\u3002\n    printf(\"str1=%s=\\n\",str1);    // \u51fa\u8f93\u7ed3\u679c\u662fstr1=12abz45abz8\u897f\u65bd\u3002=\n\n    string str2;    // C++\u98ce\u683c\u7684\u5b57\u7b26\u4e32\u3002\n\n    str2=\"12abz45ABz8\u897f\u65bd\u3002\";\n    toupper(str2);                                    // \u628astr2\u4e2d\u7684\u5c0f\u5199\u5b57\u6bcd\u8f6c\u6362\u4e3a\u5927\u5199\u3002\n    cout &lt;&lt; \"str2=\" &lt;&lt; str2 &lt;&lt; \"=\\n\";   // \u51fa\u8f93\u7ed3\u679c\u662fstr2=12ABZ45ABZ8\u897f\u65bd\u3002=\n\n    str2=\"12abz45ABz8\u897f\u65bd\u3002\";\n    tolower(str2);                                     // \u628astr2\u4e2d\u7684\u5927\u5199\u5b57\u6bcd\u8f6c\u6362\u4e3a\u5c0f\u5199\u3002\n    cout &lt;&lt; \"str2=\" &lt;&lt; str2 &lt;&lt; \"=\\n\";   // \u51fa\u8f93\u7ed3\u679c\u662fstr1=12abz45abz8\u897f\u65bd\u3002=\n}\n</code></pre>"},{"location":"Project/Backend%20server/ADF/String%20operations/Dch-lrb-s/","title":"\u5220\u9664\u5b57\u7b26\u4e32\u5de6\u3001\u53f3\u3001\u4e24\u8fb9\u6307\u5b9a\u5b57\u7b26","text":""},{"location":"Project/Backend%20server/ADF/String%20operations/Dch-lrb-s/#_2","title":"\u5b9a\u4e49","text":"<pre><code>// C++\u98ce\u683c\u5b57\u7b26\u4e32\u64cd\u4f5c\u7684\u82e5\u5e72\u51fd\u6570\u3002\n// \u5220\u9664\u5b57\u7b26\u4e32\u5de6\u8fb9\u6307\u5b9a\u7684\u5b57\u7b26\u3002\n// str\uff1a\u5f85\u5904\u7406\u7684\u5b57\u7b26\u4e32\u3002\n// cc\uff1a\u9700\u8981\u5220\u9664\u7684\u5b57\u7b26\uff0c\u7f3a\u7701\u5220\u9664\u7a7a\u683c\u3002\nchar*     deletelchr(char* str, const int cc=' ');\nstring&amp; deletelchr(string &amp;str, const int cc=' ');\n\n// \u5220\u9664\u5b57\u7b26\u4e32\u53f3\u8fb9\u6307\u5b9a\u7684\u5b57\u7b26\u3002\n// str\uff1a\u5f85\u5904\u7406\u7684\u5b57\u7b26\u4e32\u3002\n// cc\uff1a\u9700\u8981\u5220\u9664\u7684\u5b57\u7b26\uff0c\u7f3a\u7701\u5220\u9664\u7a7a\u683c\u3002\nchar*     deleterchr(char *str,const int cc=' ');\nstring&amp; deleterchr(string &amp;str,const int cc=' ');\n\n// \u5220\u9664\u5b57\u7b26\u4e32\u5de6\u53f3\u4e24\u8fb9\u6307\u5b9a\u7684\u5b57\u7b26\u3002\n// str\uff1a\u5f85\u5904\u7406\u7684\u5b57\u7b26\u4e32\u3002\n// chr\uff1a\u9700\u8981\u5220\u9664\u7684\u5b57\u7b26\uff0c\u7f3a\u7701\u5220\u9664\u7a7a\u683c\u3002\nchar*     deletelrchr(char *str,const int cc=' ');\nstring&amp; deletelrchr(string &amp;str,const int cc=' ');\n\n// \u628a\u5b57\u7b26\u4e32\u4e2d\u7684\u5c0f\u5199\u5b57\u6bcd\u8f6c\u6362\u6210\u5927\u5199\uff0c\u5ffd\u7565\u4e0d\u662f\u5b57\u6bcd\u7684\u5b57\u7b26\u3002\n// str\uff1a\u5f85\u8f6c\u6362\u7684\u5b57\u7b26\u4e32\u3002\nchar*     toupper(char *str);\nstring&amp; toupper(string &amp;str);\n</code></pre>"},{"location":"Project/Backend%20server/ADF/String%20operations/Dch-lrb-s/#_3","title":"\u5b9e\u73b0","text":"<pre><code>char *deletelchr(char* str, const int cc)\n{\n    if (str == nullptr) return nullptr;     // \u5982\u679c\u4f20\u8fdb\u6765\u7684\u662f\u7a7a\u5730\u5740\uff0c\u76f4\u63a5\u8fd4\u56de\uff0c\u9632\u6b62\u7a0b\u5e8f\u5d29\u6e83\u3002\n\n    char* p = str;                 // \u6307\u5411\u5b57\u7b26\u4e32\u7684\u9996\u5730\u5740\u3002\n    while (*p == cc)            // \u904d\u5386\u5b57\u7b26\u4e32\uff0cp\u5c06\u6307\u5411\u5de6\u8fb9\u7b2c\u4e00\u4e2a\u4e0d\u662fcc\u7684\u5b57\u7b26\u3002\n        p++;        \n\n    memmove(str, p, strlen(str) - (p - str)+1);  // \u628a\u7ed3\u5c3e\u6807\u5fd70\u4e5f\u62f7\u8fc7\u6765\u3002\n\n    return str;\n}\n\nstring&amp; deletelchr(string &amp;str, const int cc)\n{\n    auto pos=str.find_first_not_of(cc);    // \u4ece\u5b57\u7b26\u4e32\u7684\u5de6\u8fb9\u67e5\u627e\u7b2c\u4e00\u4e2a\u4e0d\u662fcc\u7684\u5b57\u7b26\u7684\u4f4d\u7f6e\u3002\n\n    if (pos!= 0) str.replace(0,pos,\"\");       // \u628a0-pos\u4e4b\u95f4\u7684\u5b57\u7b26\u4e32\u66ff\u6362\u6210\u7a7a\u3002\n\n    return str;\n}\n\nchar* deleterchr(char *str,const int cc)\n{\n    if (str == nullptr) return nullptr; // \u5982\u679c\u4f20\u8fdb\u6765\u7684\u662f\u7a7a\u5730\u5740\uff0c\u76f4\u63a5\u8fd4\u56de\uff0c\u9632\u6b62\u7a0b\u5e8f\u5d29\u6e83\u3002\n\n    char* p = str;              // \u6307\u5411\u5b57\u7b26\u4e32\u7684\u9996\u5730\u5740\u3002\n    char* piscc = 0;          // \u53f3\u8fb9\u5168\u662f\u5b57\u7b26cc\u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u3002\n\n    while (*p != 0)            // \u904d\u5386\u5b57\u7b26\u4e32\u3002\n    {\n        if (*p == cc &amp;&amp; piscc == 0) piscc = p;        // \u8bb0\u4e0b\u5b57\u7b26cc\u7684\u7b2c\u4e00\u4e2a\u4f4d\u7f6e\u3002\n        if (*p != cc) piscc = 0;                                  // \u53ea\u8981\u5f53\u524d\u5b57\u7b26\u4e0d\u662fcc\uff0c\u6e05\u7a7apiscc\u3002\n        p++;        \n      }\n\n      if (piscc != 0) *piscc = 0;   // \u628apiscc\u4f4d\u7f6e\u7684\u5b57\u7b26\u7f6e\u4e3a0\uff0c\u8868\u793a\u5b57\u7b26\u4e32\u5df2\u7ed3\u675f\u3002\n\n    return str;\n}\n\nstring&amp; deleterchr(string &amp;str,const int cc)\n{\n    auto pos=str.find_last_not_of(cc);     // \u4ece\u5b57\u7b26\u4e32\u7684\u53f3\u8fb9\u67e5\u627e\u7b2c\u4e00\u4e2a\u4e0d\u662fcc\u7684\u5b57\u7b26\u7684\u4f4d\u7f6e\u3002\n\n    if (pos!= 0) str.erase(pos+1);            // \u628apos\u4e4b\u540e\u7684\u5b57\u7b26\u5220\u6389\u3002\n\n    return str;\n}\n\nchar* deletelrchr(char *str,const int cc)\n{\n    deletelchr(str,cc);\n    deleterchr(str,cc);\n\n    return str;\n}\n\nstring&amp; deletelrchr(string &amp;str,const int cc)\n{\n    deletelchr(str,cc);\n    deleterchr(str,cc);\n\n    return str;\n}\n</code></pre>"},{"location":"Project/Backend%20server/ADF/String%20operations/Dch-lrb-s/#_4","title":"\u6d4b\u8bd5","text":"<pre><code>#include \"../_public.h\"\nusing namespace std;\nusing namespace idc;\n\nint main()\n{\n    char str1[31];        // C\u98ce\u683c\u7684\u5b57\u7b26\u4e32\u3002\n    string str2;            // C++\u98ce\u683c\u7684\u5b57\u7b26\u4e32\u3002\n\n    strcpy(str1,\"  \u897f\u65bd  \");\n    deletelchr(str1,' ');                // \u5220\u9664str1\u5de6\u8fb9\u7684\u7a7a\u683c\n    printf(\"str1=%s=\\n\",str1);    // \u51fa\u8f93\u7ed3\u679c\u662fstr1=\u897f\u65bd  =\n\n    str2=\"  \u897f\u65bd  \";\n    deletelchr(str2,' ');\n    cout &lt;&lt; \"str2=\" &lt;&lt; str2 &lt;&lt; \"=\\n\";\n\n    strcpy(str1,\"  \u897f\u65bd  \");\n    deleterchr(str1,' ');                // \u5220\u9664str1\u5de6\u8fb9\u7684\u7a7a\u683c\n    printf(\"str1=%s=\\n\",str1);    // \u51fa\u8f93\u7ed3\u679c\u662fstr1=\u897f\u65bd  =\n\n    str2=\"  \u897f\u65bd  \";\n    deleterchr(str2,' ');\n    cout &lt;&lt; \"str2=\" &lt;&lt; str2 &lt;&lt; \"=\\n\";\n\n    strcpy(str1,\"  \u897f\u65bd  \");\n    deletelrchr(str1,' ');               // \u5220\u9664str1\u4e24\u8fb9\u7684\u7a7a\u683c\n    printf(\"str1=%s=\\n\",str1);    // \u51fa\u8f93\u7ed3\u679c\u662fstr1=\u897f\u65bd=\n\n    str2=\"  \u897f\u65bd  \";\n    deletelrchr(str2,' ');\n    cout &lt;&lt; \"str2=\" &lt;&lt; str2 &lt;&lt; \"=\\n\";\n}\n</code></pre>"},{"location":"Project/Backend%20server/ADF/String%20operations/Extract/","title":"\u5b57\u7b26\u4e32\u63d0\u53d6","text":""},{"location":"Project/Backend%20server/ADF/String%20operations/Extract/#_2","title":"\u5b9a\u4e49","text":"<pre><code>// \u4ece\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d\u63d0\u53d6\u51fa\u6570\u5b57\u3001\u7b26\u53f7\u548c\u5c0f\u6570\u70b9\uff0c\u5b58\u653e\u5230\u53e6\u4e00\u4e2a\u5b57\u7b26\u4e32\u4e2d\u3002\n// src\uff1a\u539f\u5b57\u7b26\u4e32\u3002\n// dest\uff1a\u76ee\u6807\u5b57\u7b26\u4e32\u3002\n// bsigned\uff1a\u662f\u5426\u63d0\u53d6\u7b26\u53f7\uff08+\u548c-\uff09\uff0ctrue-\u5305\u62ec\uff1bfalse-\u4e0d\u5305\u62ec\u3002\n// bdot\uff1a\u662f\u5426\u63d0\u53d6\u5c0f\u6570\u70b9\uff08.\uff09\uff0ctrue-\u5305\u62ec\uff1bfalse-\u4e0d\u5305\u62ec\u3002\n// \u6ce8\u610f\uff1asrc\u548cdest\u53ef\u4ee5\u662f\u540c\u4e00\u4e2a\u53d8\u91cf\u3002\n</code></pre> <pre><code>char*     picknumber(const string &amp;src,char *dest,const bool bsigned=false,const bool bdot=false);\nstring&amp; picknumber(const string &amp;src,string &amp;dest,const bool bsigned=false,const bool bdot=false);\nstring    picknumber(const string &amp;src,const bool bsigned=false,const bool bdot=false);\n</code></pre>"},{"location":"Project/Backend%20server/ADF/String%20operations/Extract/#_3","title":"\u5b9e\u73b0","text":"<pre><code>char* picknumber(const string &amp;src,char *dest,const bool bsigned,const bool bdot)\n{\n    if (dest==nullptr) return nullptr;    // \u5224\u65ad\u7a7a\u6307\u9488\u3002\n\n    string strtemp=picknumber(src,bsigned,bdot);\n    strtemp.copy(dest,strtemp.length());\n    dest[strtemp.length()]=0;    // string\u7684copy\u51fd\u6570\u4e0d\u4f1a\u7ed9C\u98ce\u683c\u5b57\u7b26\u4e32\u7684\u7ed3\u5c3e\u52a00\u3002\n\n    return dest;\n}\n\nstring&amp; picknumber(const string &amp;src,string &amp;dest,const bool bsigned,const bool bdot)\n{\n    // \u4e3a\u4e86\u652f\u6301src\u548cdest\u662f\u540c\u4e00\u53d8\u91cf\u7684\u60c5\u51b5\uff0c\u5b9a\u4e49str\u4e34\u65f6\u53d8\u91cf\u3002\n    string str;\n\n    for (char cc:src)\n    {\n        // \u5224\u65ad\u662f\u5426\u63d0\u53d6\u7b26\u53f7\u3002\n        if ( (bsigned==true) &amp;&amp; ( (cc == '+') || (cc == '-') ))\n        {\n            str.append(1,cc); continue;\n        }\n\n        // \u5224\u65ad\u662f\u5426\u63d0\u53d6\u5c0f\u6570\u70b9\u3002\n        if ( (bdot==true) &amp;&amp; (cc == '.') )\n        {\n            str.append(1,cc); continue;\n        }\n\n        // \u63d0\u53d6\u6570\u5b57\u3002\n        if (isdigit(cc)) str.append(1,cc);\n    }\n\n    dest=str;\n\n    return dest;\n}\n\nstring picknumber(const string &amp;src,const bool bsigned,const bool bdot)\n{\n    string dest;\n    picknumber(src,dest,bsigned,bdot);\n    return dest;\n}\n</code></pre>"},{"location":"Project/Backend%20server/ADF/String%20operations/Extract/#_4","title":"\u6d4b\u8bd5","text":"<pre><code>#include \"../_public.h\"\nusing namespace std;\nusing namespace idc;\n\nint main()\n{\n    char str1[30];   \n    string str2;\n\n    strcpy(str1,\"iab+12.3xy\");\n    picknumber(str1,str1,false,false);\n    printf(\"str1=%s=\\n\",str1);    // \u51fa\u8f93\u7ed3\u679c\u662fstr1=123=\n\n    str2=\"iab+12.3xy\";\n    picknumber(str2,str2,false,false);\n    cout &lt;&lt; \"str2=\" &lt;&lt; str2 &lt;&lt; \"=\\n\";  // \u51fa\u8f93\u7ed3\u679c\u662fstr2=123=\n\n    strcpy(str1,\"iab+12.3xy\");\n    picknumber(str1,str1,true,false);\n    printf(\"str1=%s=\\n\",str1);         // \u51fa\u8f93\u7ed3\u679c\u662fstr1=+123=\n\n    str2=\"iab+12.3xy\";\n    picknumber(str2,str2,true,false);\n    cout &lt;&lt; \"str2=\" &lt;&lt; str2 &lt;&lt; \"=\\n\";  // \u51fa\u8f93\u7ed3\u679c\u662fstr2=+123=\n\n    strcpy(str1,\"iab+12.3xy\");\n    picknumber(str1,str1,true,true);\n    printf(\"str1=%s=\\n\",str1);         // \u51fa\u8f93\u7ed3\u679c\u662fstr1=+12.3=\n\n    str2=\"iab+12.3xy\";\n    picknumber(str2,str2,true,true);\n    cout &lt;&lt; \"str2=\" &lt;&lt; str2 &lt;&lt; \"=\\n\";  // \u51fa\u8f93\u7ed3\u679c\u662fstr2=+12.3=\n}\n</code></pre>"},{"location":"Project/Backend%20server/ADF/String%20operations/Regular%20expression/","title":"\u6b63\u5219\u8868\u8fbe\u5f0f","text":""},{"location":"Project/Backend%20server/ADF/String%20operations/Regular%20expression/#_2","title":"\u5b9a\u4e49","text":"<pre><code>// \u6b63\u5219\u8868\u8fbe\u5f0f\uff0c\u5224\u65ad\u4e00\u4e2a\u5b57\u7b26\u4e32\u662f\u5426\u5339\u914d\u53e6\u4e00\u4e2a\u5b57\u7b26\u4e32\u3002\n// str\uff1a\u9700\u8981\u5224\u65ad\u7684\u5b57\u7b26\u4e32\uff0c\u662f\u7cbe\u786e\u8868\u793a\u7684\uff0c\u5982\u6587\u4ef6\u540d\"_public.cpp\"\u3002\n// rules\uff1a\u5339\u914d\u89c4\u5219\u7684\u8868\u8fbe\u5f0f\uff0c\u7528\u661f\u53f7\"*\"\u4ee3\u8868\u4efb\u610f\u5b57\u7b26\uff0c\u591a\u4e2a\u8868\u8fbe\u5f0f\u4e4b\u95f4\u7528\u534a\u89d2\u7684\u9017\u53f7\u5206\u9694\uff0c\u5982\"*.h,*.cpp\"\u3002\n// \u6ce8\u610f\uff1a1\uff09str\u53c2\u6570\u4e0d\u9700\u8981\u652f\u6301\"*\"\uff0crules\u53c2\u6570\u652f\u6301\"*\"\uff1b2\uff09\u51fd\u6570\u5728\u5224\u65adstr\u662f\u5426\u5339\u914drules\u7684\u65f6\u5019\uff0c\u4f1a\u5ffd\u7565\u5b57\u6bcd\u7684\u5927\u5c0f\u5199\u3002\n</code></pre> <pre><code>bool matchstr(const string &amp;str,const string &amp;rules);\n</code></pre>"},{"location":"Project/Backend%20server/ADF/String%20operations/Regular%20expression/#_3","title":"\u5b9e\u73b0","text":"<pre><code>bool matchstr(const string &amp;str,const string &amp;rules)\n{\n    // \u5982\u679c\u5339\u914d\u89c4\u5219\u8868\u8fbe\u5f0f\u7684\u5185\u5bb9\u662f\u7a7a\u7684\uff0c\u8fd4\u56defalse\u3002\n    if (rules.length() == 0) return false;\n\n    // \u5982\u679c\u5982\u679c\u5339\u914d\u89c4\u5219\u8868\u8fbe\u5f0f\u7684\u5185\u5bb9\u662f\"*\"\uff0c\u76f4\u63a5\u8fd4\u56detrue\u3002\n    if (rules == \"*\") return true;\n\n    int  ii,jj;\n    int  pos1,pos2;\n    ccmdstr cmdstr,cmdsubstr;\n\n    string filename=str;\n    string matchstr=rules;\n\n    // \u628a\u5b57\u7b26\u4e32\u90fd\u8f6c\u6362\u6210\u5927\u5199\u540e\u518d\u6765\u6bd4\u8f83\n    toupper(filename);\n    toupper(matchstr);\n\n    cmdstr.splittocmd(matchstr,\",\");\n\n    for (ii=0;ii&lt;cmdstr.size();ii++)\n    {\n        // \u5982\u679c\u4e3a\u7a7a\uff0c\u5c31\u4e00\u5b9a\u8981\u8df3\u8fc7\uff0c\u5426\u5219\u5c31\u4f1a\u88ab\u5339\u914d\u4e0a\u3002\n        if (cmdstr[ii].empty() == true) continue;\n\n        pos1=pos2=0;\n        cmdsubstr.splittocmd(cmdstr[ii],\"*\");\n\n        for (jj=0;jj&lt;cmdsubstr.size();jj++)\n        {\n            // \u5982\u679c\u662f\u6587\u4ef6\u540d\u7684\u9996\u90e8\n            if (jj == 0)\n                if (filename.substr(0,cmdsubstr[jj].length())!=cmdsubstr[jj]) break;\n\n            // \u5982\u679c\u662f\u6587\u4ef6\u540d\u7684\u5c3e\u90e8\n            if (jj == cmdsubstr.size()-1)\n                if (filename.find(cmdsubstr[jj],filename.length()-cmdsubstr[jj].length()) == string::npos) break;\n\n            pos2=filename.find(cmdsubstr[jj],pos1);\n\n            if (pos2 == string::npos) break;\n\n            pos1=pos2+cmdsubstr[jj].length();\n        }\n\n        if (jj==cmdsubstr.size()) return true;\n    }\n\n    return false;\n}\n</code></pre>"},{"location":"Project/Backend%20server/ADF/String%20operations/Regular%20expression/#_4","title":"\u6d4b\u8bd5","text":"<pre><code>#include \"../_public.h\"\nusing namespace std;\nusing namespace idc;\n\nint main()\n{\n    // \u4ee5\u4e0b\u4ee3\u7801\u5c06\u8f93\u51fayes\u3002\n    if (matchstr(\"_public.h\",\"*.h,*.cpp\")==true) printf(\"yes\\n\");\n    else printf(\"no\\n\");\n\n    // \u4ee5\u4e0b\u4ee3\u7801\u5c06\u8f93\u51fayes\u3002\n    if (matchstr(\"_public.h\",\"*.H\")==true) printf(\"yes\\n\");\n    else printf(\"no\\n\");\n\n    // \u4ee5\u4e0b\u4ee3\u7801\u5c06\u8f93\u51fano\u3002\n    if (matchstr(\"_public.h\",\"*p*k*.h\")==true) printf(\"yes\\n\");\n    else printf(\"no\\n\");\n}\n</code></pre>"},{"location":"Project/Backend%20server/ADF/String%20operations/Split%20separator/","title":"ccmdstr\u7c7b\u62c6\u5206\u5206\u9694\u7b26","text":""},{"location":"Project/Backend%20server/ADF/String%20operations/Split%20separator/#ccmdstr_1","title":"ccmdstr\u7c7b","text":"<pre><code>// ccmdstr\u7c7b\u7528\u4e8e\u62c6\u5206\u6709\u5206\u9694\u7b26\u7684\u5b57\u7b26\u4e32\u3002\n// \u5b57\u7b26\u4e32\u7684\u683c\u5f0f\u4e3a\uff1a\u5b57\u6bb5\u5185\u5bb91+\u5206\u9694\u7b26+\u5b57\u6bb5\u5185\u5bb92+\u5206\u9694\u7b26+\u5b57\u6bb5\u5185\u5bb93+\u5206\u9694\u7b26+...+\u5b57\u6bb5\u5185\u5bb9n\u3002\n// \u4f8b\u5982\uff1a\"messi,10,striker,30,1.72,68.5,Barcelona\"\uff0c\u8fd9\u662f\u8db3\u7403\u8fd0\u52a8\u5458\u6885\u897f\u7684\u8d44\u6599\u3002\n// \u5305\u62ec\uff1a\u59d3\u540d\u3001\u7403\u8863\u53f7\u7801\u3001\u573a\u4e0a\u4f4d\u7f6e\u3001\u5e74\u9f84\u3001\u8eab\u9ad8\u3001\u4f53\u91cd\u548c\u6548\u529b\u7684\u4ff1\u4e50\u90e8\uff0c\u5b57\u6bb5\u4e4b\u95f4\u7528\u534a\u89d2\u7684\u9017\u53f7\u5206\u9694\u3002\n</code></pre> <pre><code>class ccmdstr\n{\nprivate:\n    vector&lt;string&gt; m_cmdstr;  // \u5b58\u653e\u62c6\u5206\u540e\u7684\u5b57\u6bb5\u5185\u5bb9\u3002\n\n    ccmdstr(const ccmdstr &amp;) = delete;                      // \u7981\u7528\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u3002\n    ccmdstr &amp;operator=(const ccmdstr &amp;) = delete;  // \u7981\u7528\u8d4b\u503c\u51fd\u6570\u3002\npublic:\n    ccmdstr()  { } // \u6784\u9020\u51fd\u6570\u3002\n    ccmdstr(const string &amp;buffer,const string &amp;sepstr,const bool bdelspace=false);\n\n    const string&amp; operator[](int ii) const     // \u91cd\u8f7d[]\u8fd0\u7b97\u7b26\uff0c\u53ef\u4ee5\u50cf\u8bbf\u95ee\u6570\u7ec4\u4e00\u6837\u8bbf\u95eem_cmdstr\u6210\u5458\u3002\n    {\n        return m_cmdstr[ii];\n    }\n\n    // \u628a\u5b57\u7b26\u4e32\u62c6\u5206\u5230m_cmdstr\u5bb9\u5668\u4e2d\u3002\n    // buffer\uff1a\u5f85\u62c6\u5206\u7684\u5b57\u7b26\u4e32\u3002\n    // sepstr\uff1abuffer\u4e2d\u91c7\u7528\u7684\u5206\u9694\u7b26\uff0c\u6ce8\u610f\uff0csepstr\u53c2\u6570\u7684\u6570\u636e\u7c7b\u578b\u4e0d\u662f\u5b57\u7b26\uff0c\u662f\u5b57\u7b26\u4e32\uff0c\u5982\",\"\u3001\" \"\u3001\"|\"\u3001\"~!~\"\u3002\n    // bdelspace\uff1a\u62c6\u5206\u540e\u662f\u5426\u5220\u9664\u5b57\u6bb5\u5185\u5bb9\u524d\u540e\u7684\u7a7a\u683c\uff0ctrue-\u5220\u9664\uff1bfalse-\u4e0d\u5220\u9664\uff0c\u7f3a\u7701\u4e0d\u5220\u9664\u3002\n    void splittocmd(const string &amp;buffer,const string &amp;sepstr,const bool bdelspace=false);\n\n    // \u83b7\u53d6\u62c6\u5206\u540e\u5b57\u6bb5\u7684\u4e2a\u6570\uff0c\u5373m_cmdstr\u5bb9\u5668\u7684\u5927\u5c0f\u3002\n    int size() const { return m_cmdstr.size(); }\n    int cmdcount() const { return m_cmdstr.size(); }      // \u517c\u5bb9\u4ee5\u524d\u7684\u9879\u76ee\u3002\n\n    // \u4ecem_cmdstr\u5bb9\u5668\u83b7\u53d6\u5b57\u6bb5\u5185\u5bb9\u3002\n    // ii\uff1a\u5b57\u6bb5\u7684\u987a\u5e8f\u53f7\uff0c\u7c7b\u4f3c\u6570\u7ec4\u7684\u4e0b\u6807\uff0c\u4ece0\u5f00\u59cb\u3002\n    // value\uff1a\u4f20\u5165\u53d8\u91cf\u7684\u5730\u5740\uff0c\u7528\u4e8e\u5b58\u653e\u5b57\u6bb5\u5185\u5bb9\u3002\n    // \u8fd4\u56de\u503c\uff1atrue-\u6210\u529f\uff1b\u5982\u679cii\u7684\u53d6\u503c\u8d85\u51fa\u4e86m_cmdstr\u5bb9\u5668\u7684\u5927\u5c0f\uff0c\u8fd4\u56de\u5931\u8d25\u3002\n    bool getvalue(const int ii,string &amp;value,const int ilen=0) const;      // C++\u98ce\u683c\u5b57\u7b26\u4e32\u3002\u89c6\u9891\u4e2d\u6ca1\u6709\u7b2c\u4e09\u4e2a\u53c2\u6570\uff0c\u52a0\u4e0a\u7b2c\u4e09\u4e2a\u53c2\u6570\u66f4\u597d\u3002\n    bool getvalue(const int ii,char *value,const int ilen=0) const;          // C\u98ce\u683c\u5b57\u7b26\u4e32\uff0cilen\u7f3a\u7701\u503c\u4e3a0-\u5168\u90e8\u957f\u5ea6\u3002 \n    bool getvalue(const int ii,int  &amp;value) const;                                    // int\u6574\u6570\u3002\n    bool getvalue(const int ii,unsigned int &amp;value) const;                     // unsigned int\u6574\u6570\u3002\n    bool getvalue(const int ii,long &amp;value) const;                                  // long\u6574\u6570\u3002\n    bool getvalue(const int ii,unsigned long &amp;value) const;                  // unsigned long\u6574\u6570\u3002\n    bool getvalue(const int ii,double &amp;value) const;                              // \u53cc\u7cbe\u5ea6double\u3002\n    bool getvalue(const int ii,float &amp;value) const;                                  // \u5355\u7cbe\u5ea6float\u3002\n    bool getvalue(const int ii,bool &amp;value) const;                                  // bool\u578b\u3002\n\n    ~ccmdstr(); // \u6790\u6784\u51fd\u6570\u3002\n};\n</code></pre> <pre><code>// \u91cd\u8f7d&lt;&lt;\u8fd0\u7b97\u7b26\uff0c\u8f93\u51faccmdstr::m_cmdstr\u4e2d\u7684\u5185\u5bb9\uff0c\u65b9\u4fbf\u8c03\u8bd5\u3002\nostream&amp; operator&lt;&lt;(ostream&amp; out, const ccmdstr&amp; cc);\n</code></pre>"},{"location":"Project/Backend%20server/ADF/String%20operations/Split%20separator/#_1","title":"\u5b9e\u73b0","text":"<pre><code>ccmdstr::ccmdstr(const string &amp;buffer,const string &amp;sepstr,const bool bdelspace)\n{\n    splittocmd(buffer,sepstr,bdelspace);\n}\n\n// \u628a\u5b57\u7b26\u4e32\u62c6\u5206\u5230m_cmdstr\u5bb9\u5668\u4e2d\u3002\n// buffer\uff1a\u5f85\u62c6\u5206\u7684\u5b57\u7b26\u4e32\u3002\n// sepstr\uff1abuffer\u5b57\u7b26\u4e32\u4e2d\u5b57\u6bb5\u5185\u5bb9\u7684\u5206\u9694\u7b26\uff0c\u6ce8\u610f\uff0c\u5206\u9694\u7b26\u662f\u5b57\u7b26\u4e32\uff0c\u5982\",\"\u3001\" \"\u3001\"|\"\u3001\"~!~\"\u3002\n// bdelspace\uff1a\u662f\u5426\u5220\u9664\u62c6\u5206\u540e\u7684\u5b57\u6bb5\u5185\u5bb9\u524d\u540e\u7684\u7a7a\u683c\uff0ctrue-\u5220\u9664\uff1bfalse-\u4e0d\u5220\u9664\uff0c\u7f3a\u7701\u4e0d\u5220\u9664\u3002\nvoid ccmdstr::splittocmd(const string &amp;buffer,const string &amp;sepstr,const bool bdelspace)\n{\n    // \u6e05\u9664\u6240\u6709\u7684\u65e7\u6570\u636e\n    m_cmdstr.clear();\n\n    int pos=0;        // \u6bcf\u6b21\u4ecebuffer\u4e2d\u67e5\u627e\u5206\u9694\u7b26\u7684\u8d77\u59cb\u4f4d\u7f6e\u3002\n    int pos1=0;      // \u4ecepos\u7684\u4f4d\u7f6e\u5f00\u59cb\uff0c\u67e5\u627e\u4e0b\u4e00\u4e2a\u5206\u9694\u7b26\u7684\u4f4d\u7f6e\u3002\n    string substr;   // \u5b58\u653e\u6bcf\u6b21\u62c6\u5206\u51fa\u6765\u7684\u5b50\u4e32\u3002\n\n    while ( (pos1=buffer.find(sepstr,pos)) != string::npos)   // \u4ecepos\u7684\u4f4d\u7f6e\u5f00\u59cb\uff0c\u67e5\u627e\u4e0b\u4e00\u4e2a\u5206\u9694\u7b26\u7684\u4f4d\u7f6e\u3002\n    {\n        substr=buffer.substr(pos,pos1-pos);            // \u4ecebuffer\u4e2d\u622a\u53d6\u5b50\u4e32\u3002\n\n        if (bdelspace == true) deletelrchr(substr);   // \u5220\u9664\u5b50\u4e32\u524d\u540e\u7684\u7a7a\u683c\u3002\n\n        m_cmdstr.push_back(std::move(substr));     // \u628a\u5b50\u4e32\u653e\u5165m_cmdstr\u5bb9\u5668\u4e2d\uff0c\u8c03\u7528string\u7c7b\u7684\u79fb\u52a8\u6784\u9020\u51fd\u6570\u3002\n\n        pos=pos1+sepstr.length();                           // \u4e0b\u6b21\u4ecebuffer\u4e2d\u67e5\u627e\u5206\u9694\u7b26\u7684\u8d77\u59cb\u4f4d\u7f6e\u540e\u79fb\u3002\n    }\n\n    // \u5904\u7406\u6700\u540e\u4e00\u4e2a\u5b57\u6bb5\uff08\u6700\u540e\u4e00\u4e2a\u5206\u9694\u7b26\u4e4b\u540e\u7684\u5185\u5bb9\uff09\u3002\n    substr=buffer.substr(pos);\n\n    if (bdelspace == true) deletelrchr(substr);\n\n    m_cmdstr.push_back(std::move(substr));\n\n    return;\n}\n\nbool ccmdstr::getvalue(const int ii,string &amp;value,const int ilen) const\n{\n    if (ii&gt;=m_cmdstr.size()) return false;\n\n    // \u4ecexml\u4e2d\u622a\u53d6\u6570\u636e\u9879\u7684\u5185\u5bb9\u3002\n    // \u89c6\u9891\u4e2d\u662f\u4ee5\u4e0b\u4ee3\u7801\uff1a\n    // value=m_cmdstr[ii];\n    // \u6539\u4e3a\uff1a\n    int itmplen=m_cmdstr[ii].length();\n    if ( (ilen&gt;0) &amp;&amp; (ilen&lt;itmplen) ) itmplen=ilen;\n    value=m_cmdstr[ii].substr(0,itmplen);\n\n    return true;\n}\n\nbool ccmdstr::getvalue(const int ii,char *value,const int len) const\n{\n    if ( (ii&gt;=m_cmdstr.size()) || (value==nullptr) ) return false;\n\n    if (len&gt;0) memset(value,0,len+1);   // \u8c03\u7528\u8005\u5fc5\u987b\u4fdd\u8bc1value\u7684\u7a7a\u95f4\u8db3\u591f\uff0c\u5426\u5219\u8fd9\u91cc\u4f1a\u5185\u5b58\u6ea2\u51fa\u3002\n\n    if ( (m_cmdstr[ii].length()&lt;=(unsigned int)len) || (len==0) )\n    {\n        m_cmdstr[ii].copy(value,m_cmdstr[ii].length());\n        value[m_cmdstr[ii].length()]=0;    // string\u7684copy\u51fd\u6570\u4e0d\u4f1a\u7ed9C\u98ce\u683c\u5b57\u7b26\u4e32\u7684\u7ed3\u5c3e\u52a00\u3002\n    }\n    else\n    {\n        m_cmdstr[ii].copy(value,len);\n        value[len]=0;\n    }\n\n    return true;\n}\n\nbool ccmdstr::getvalue(const int ii,int &amp;value) const\n{\n    if (ii&gt;=m_cmdstr.size()) return false;\n\n    try\n    {\n        value = stoi(picknumber(m_cmdstr[ii],true));  // stoi\u6709\u5f02\u5e38\uff0c\u9700\u8981\u5904\u7406\u5f02\u5e38\u3002\n    }\n    catch(const std::exception&amp; e)\n    {\n        return false;\n    }\n\n    return true;\n}\n\nbool ccmdstr::getvalue(const int ii,unsigned int &amp;value) const\n{\n    if (ii&gt;=m_cmdstr.size()) return false;\n\n    try\n    {\n       value = stoi(picknumber(m_cmdstr[ii]));  // stoi\u6709\u5f02\u5e38\uff0c\u9700\u8981\u5904\u7406\u5f02\u5e38\u3002\u4e0d\u63d0\u53d6\u7b26\u53f7 + -\n    }\n    catch(const std::exception&amp; e)\n    {\n        return false;\n    }\n\n    return true;\n}\n\nbool ccmdstr::getvalue(const int ii,long &amp;value) const\n{\n    if (ii&gt;=m_cmdstr.size()) return false;\n\n    try\n    {\n        value = stol(picknumber(m_cmdstr[ii],true));  // stol\u6709\u5f02\u5e38\uff0c\u9700\u8981\u5904\u7406\u5f02\u5e38\u3002\n    }\n    catch(const std::exception&amp; e)\n    {\n        return false;\n    }\n\n    return true;\n}\n\nbool ccmdstr::getvalue(const int ii,unsigned long &amp;value) const\n{\n    if (ii&gt;=m_cmdstr.size()) return false;\n\n    try\n    {\n        value = stoul(picknumber(m_cmdstr[ii]));  // stoul\u6709\u5f02\u5e38\uff0c\u9700\u8981\u5904\u7406\u5f02\u5e38\u3002\u4e0d\u63d0\u53d6\u7b26\u53f7 + -\n    }\n    catch(const std::exception&amp; e)\n    {\n        return false;\n    }\n\n    return true;\n}\n\nbool ccmdstr::getvalue(const int ii,double &amp;value) const\n{\n    if (ii&gt;=m_cmdstr.size()) return false;\n\n    try\n    {\n        value = stod(picknumber(m_cmdstr[ii],true,true));  // stod\u6709\u5f02\u5e38\uff0c\u9700\u8981\u5904\u7406\u5f02\u5e38\u3002\u63d0\u53d6\u7b26\u53f7\u548c\u5c0f\u6570\u70b9\u3002\n    }\n    catch(const std::exception&amp; e)\n    {\n        return false;\n    }\n\n    return true;\n}\n\nbool ccmdstr::getvalue(const int ii,float &amp;value) const\n{\n    if (ii&gt;=m_cmdstr.size()) return false;\n\n    try\n    {\n        value = stof(picknumber(m_cmdstr[ii],true,true));  // stof\u6709\u5f02\u5e38\uff0c\u9700\u8981\u5904\u7406\u5f02\u5e38\u3002\u63d0\u53d6\u7b26\u53f7\u548c\u5c0f\u6570\u70b9\u3002\n    }\n    catch(const std::exception&amp; e)\n    {\n        return false;\n    }\n\n    return true;\n}\n\nbool ccmdstr::getvalue(const int ii,bool &amp;value) const\n{\n    if (ii&gt;=m_cmdstr.size()) return false;\n\n    string str=m_cmdstr[ii];\n    toupper(str);     // \u8f6c\u6362\u4e3a\u5927\u5199\u6765\u5224\u65ad\u3002\n\n    if (str==\"TRUE\") value=true; \n    else value=false;\n\n    return true;\n}\n\nccmdstr::~ccmdstr()\n{\n    m_cmdstr.clear();\n}\n\nostream&amp; operator&lt;&lt;(ostream&amp; out, const ccmdstr&amp; cmdstr)\n{\n    for (int ii=0;ii&lt;cmdstr.size();ii++)\n        out &lt;&lt; \"[\" &lt;&lt; ii &lt;&lt; \"]=\" &lt;&lt; cmdstr[ii] &lt;&lt; endl;\n\n    return out;\n}\n</code></pre>"},{"location":"Project/Backend%20server/ADF/String%20operations/Split%20separator/#_2","title":"\u6d4b\u8bd5","text":"<pre><code>#include \"../_public.h\"\nusing namespace std;\nusing namespace idc;\n\n// \u7528\u4e8e\u5b58\u653e\u8db3\u7403\u8fd0\u52a8\u5458\u8d44\u6599\u7684\u7ed3\u6784\u4f53\u3002\nstruct st_player\n{\n    char name[51];    // \u59d3\u540d\n    char no[6];           // \u7403\u8863\u53f7\u7801\n    bool striker;         // \u573a\u4e0a\u4f4d\u7f6e\u662f\u5426\u662f\u524d\u950b\uff0ctrue-\u662f\uff1bfalse-\u4e0d\u662f\u3002\n    int  age;               // \u5e74\u9f84\n    double weight;    // \u4f53\u91cd\uff0ckg\u3002\n    long sal;              // \u5e74\u85aa\uff0c\u6b27\u5143\u3002\n    char club[51];      // \u6548\u529b\u7684\u4ff1\u4e50\u90e8\n}stplayer;\n\nint main()\n{\n    memset(&amp;stplayer,0,sizeof(struct st_player));\n\n    string buffer=\"messi~!~10~!~true~!~a30~!~68.5~!~2100000~!~Barc,elona\";    // \u6885\u897f\u7684\u8d44\u6599\u3002\n\n    //ccmdstr cmdstr;                               // \u5b9a\u4e49\u62c6\u5206\u5b57\u7b26\u4e32\u7684\u5bf9\u8c61\u3002\n    //cmdstr.splittocmd(buffer,\"~!~\");           // \u62c6\u5206buffer\u3002\n    ccmdstr cmdstr(buffer,\"~!~\");                 // \u5b9a\u4e49\u62c6\u5206\u5b57\u7b26\u4e32\u7684\u5bf9\u8c61\u5e76\u62c6\u5206\u5b57\u7b26\u4e32\u3002\n\n    // \u50cf\u8bbf\u95ee\u6570\u7ec4\u4e00\u6837\u8bbf\u95ee\u62c6\u5206\u540e\u7684\u5143\u7d20\u3002\n    for (int ii=0;ii&lt;cmdstr.size();ii++)\n    {\n        cout &lt;&lt; \"cmdstr[\"&lt;&lt;ii&lt;&lt;\"]=\" &lt;&lt; cmdstr[ii] &lt;&lt; endl;\n    }\n\n    // \u8f93\u51fa\u62c6\u5206\u540e\u7684\u5143\u7d20\uff0c\u4e00\u822c\u7528\u4e8e\u8c03\u8bd5\u3002\n    cout &lt;&lt; cmdstr;\n\n    // \u83b7\u53d6\u62c6\u5206\u540e\u5143\u7d20\u7684\u5185\u5bb9\u3002\n    cmdstr.getvalue(0, stplayer.name,50);     // \u83b7\u53d6\u59d3\u540d\n    cmdstr.getvalue(1, stplayer.no,5);            // \u83b7\u53d6\u7403\u8863\u53f7\u7801\n    cmdstr.getvalue(2, stplayer.striker);         // \u573a\u4e0a\u4f4d\u7f6e\n    cmdstr.getvalue(3, stplayer.age);             // \u83b7\u53d6\u5e74\u9f84\n    cmdstr.getvalue(4, stplayer.weight);        // \u83b7\u53d6\u4f53\u91cd\n    cmdstr.getvalue(5, stplayer.sal);               // \u83b7\u53d6\u5e74\u85aa\uff0c\u6b27\u5143\u3002\n    cmdstr.getvalue(6, stplayer.club,50);        // \u83b7\u53d6\u6548\u529b\u7684\u4ff1\u4e50\u90e8\n\n    printf(\"name=%s,no=%s,striker=%d,age=%d,weight=%.1f,sal=%ld,club=%s\\n\",\\\n               stplayer.name,stplayer.no,stplayer.striker,stplayer.age,\\\n               stplayer.weight,stplayer.sal,stplayer.club);\n    // \u8f93\u51fa\u7ed3\u679c:name=messi,no=10,striker=1,age=30,weight=68.5,sal=21000000,club=Barcelona\n}\n</code></pre>"},{"location":"Project/Backend%20server/ADF/String%20operations/String%20replacement/","title":"\u5b57\u7b26\u4e32\u66ff\u6362\u51fd\u6570","text":""},{"location":"Project/Backend%20server/ADF/String%20operations/String%20replacement/#_2","title":"\u5b9a\u4e49","text":"<pre><code>// \u5b57\u7b26\u4e32\u66ff\u6362\u51fd\u6570\u3002\n// \u5728\u5b57\u7b26\u4e32str\u4e2d\uff0c\u5982\u679c\u5b58\u5728\u5b57\u7b26\u4e32str1\uff0c\u5c31\u66ff\u6362\u4e3a\u5b57\u7b26\u4e32str2\u3002\n// str\uff1a\u5f85\u5904\u7406\u7684\u5b57\u7b26\u4e32\u3002\n// str1\uff1a\u65e7\u7684\u5185\u5bb9\u3002\n// str2\uff1a\u65b0\u7684\u5185\u5bb9\u3002\n// bloop\uff1a\u662f\u5426\u5faa\u73af\u6267\u884c\u66ff\u6362\u3002\n// \u6ce8\u610f\uff1a\n// 1\u3001\u5982\u679cstr2\u6bd4str1\u8981\u957f\uff0c\u66ff\u6362\u540estr\u4f1a\u53d8\u957f\uff0c\u6240\u4ee5\u5fc5\u987b\u4fdd\u8bc1str\u6709\u8db3\u591f\u7684\u7a7a\u95f4\uff0c\u5426\u5219\u5185\u5b58\u4f1a\u6ea2\u51fa\uff08C++\u98ce\u683c\u5b57\u7b26\u4e32\u4e0d\u5b58\u5728\u8fd9\u4e2a\u95ee\u9898\uff09\u3002\n// 2\u3001\u5982\u679cstr2\u4e2d\u5305\u542b\u4e86str1\u7684\u5185\u5bb9\uff0c\u4e14bloop\u4e3atrue\uff0c\u8fd9\u79cd\u505a\u6cd5\u5b58\u5728\u903b\u8f91\u9519\u8bef\uff0creplacestr\u5c06\u4ec0\u4e48\u4e5f\u4e0d\u505a\u3002\n// 3\u3001\u5982\u679cstr2\u4e3a\u7a7a\uff0c\u8868\u793a\u5220\u9664str\u4e2dstr1\u7684\u5185\u5bb9\u3002\n</code></pre> <pre><code>bool replacestr(char *str   ,const string &amp;str1,const string &amp;str2,const bool bloop=false);\nbool replacestr(string &amp;str,const string &amp;str1,const string &amp;str2,const bool bloop=false);\n</code></pre>"},{"location":"Project/Backend%20server/ADF/String%20operations/String%20replacement/#_3","title":"\u5b9e\u73b0","text":"<pre><code>bool replacestr(char *str,const string &amp;str1,const string &amp;str2,bool bloop)\n{\n    if (str == nullptr) return false;\n\n    string strtemp(str);\n\n    replacestr(strtemp,str1,str2,bloop);\n\n    strtemp.copy(str,strtemp.length());\n    str[strtemp.length()]=0;    // string\u7684copy\u51fd\u6570\u4e0d\u4f1a\u7ed9C\u98ce\u683c\u5b57\u7b26\u4e32\u7684\u7ed3\u5c3e\u52a00\u3002\n\n    return true;\n}\n\n\nbool replacestr(string &amp;str,const string &amp;str1,const string &amp;str2,bool bloop)\n{\n    // \u5982\u679c\u539f\u5b57\u7b26\u4e32str\u6216\u65e7\u7684\u5185\u5bb9str1\u4e3a\u7a7a\uff0c\u6ca1\u6709\u610f\u4e49\uff0c\u4e0d\u6267\u884c\u66ff\u6362\u3002\n    if ( (str.length() == 0) || (str1.length() == 0) ) return false;\n\n    // \u5982\u679cbloop\u4e3atrue\u5e76\u4e14str2\u4e2d\u5305\u51fd\u4e86str1\u7684\u5185\u5bb9\uff0c\u76f4\u63a5\u8fd4\u56de\uff0c\u56e0\u4e3a\u4f1a\u8fdb\u5165\u6b7b\u5faa\u73af\uff0c\u6700\u7ec8\u5bfc\u81f4\u5185\u5b58\u6ea2\u51fa\u3002\n    if ( (bloop==true) &amp;&amp; (str2.find(str1)!=string::npos) ) return false;\n\n    int pstart=0;      // \u5982\u679cbloop==false\uff0c\u4e0b\u4e00\u6b21\u6267\u884c\u66ff\u6362\u7684\u5f00\u59cb\u4f4d\u7f6e\u3002\n    int ppos=0;        // \u672c\u6b21\u9700\u8981\u66ff\u6362\u7684\u4f4d\u7f6e\u3002\n\n    while (true)\n    {\n        if (bloop == true)\n            ppos=str.find(str1);                      // \u6bcf\u6b21\u4ece\u5b57\u7b26\u4e32\u7684\u6700\u5de6\u8fb9\u5f00\u59cb\u67e5\u627e\u5b50\u4e32str1\u3002\n        else\n            ppos=str.find(str1,pstart);            // \u4ece\u4e0a\u6b21\u6267\u884c\u66ff\u6362\u7684\u4f4d\u7f6e\u540e\u5f00\u59cb\u67e5\u627e\u5b50\u4e32str1\u3002\n\n        if (ppos == string::npos) break;       // \u5982\u679c\u6ca1\u6709\u627e\u5230\u5b50\u4e32str1\u3002\n\n        str.replace(ppos,str1.length(),str2);   // \u628astr1\u66ff\u6362\u6210str2\u3002\n\n        if (bloop == false) pstart=ppos+str2.length();    // \u4e0b\u4e00\u6b21\u6267\u884c\u66ff\u6362\u7684\u5f00\u59cb\u4f4d\u7f6e\u5f80\u53f3\u79fb\u52a8\u3002\n    }\n\n    return true;\n}\n</code></pre>"},{"location":"Project/Backend%20server/ADF/String%20operations/String%20replacement/#_4","title":"\u6d4b\u8bd5","text":"<pre><code>#include \"../_public.h\"\nusing namespace std;\nusing namespace idc;\n\nint main()\n{\n    char str1[301];\n\n    strcpy(str1,\"name:messi,no:10,job:striker.\");\n    replacestr(str1,\":\",\"=\");         // \u628a\u5192\u53f7\u66ff\u6362\u6210\u7b49\u53f7\u3002\n    printf(\"str1=%s=\\n\",str1);    // \u51fa\u8f93\u7ed3\u679c\u662fstr1=name=messi,no=10,job=striker.=\n\n    strcpy(str1,\"name:messi,no:10,job:striker.\");\n    replacestr(str1,\"name:\",\"\");    // \u628a\"name:\"\u66ff\u6362\u6210\"\"\uff0c\u76f8\u5f53\u4e8e\u5220\u9664\u5185\u5bb9\"name:\"\u3002\n    printf(\"str1=%s=\\n\",str1);      // \u51fa\u8f93\u7ed3\u679c\u662fstr1=messi,no:10,job:striker.=\n\n    strcpy(str1,\"messi----10----striker\");  \n    replacestr(str1,\"--\",\"-\",false);    // \u628a\u4e24\u4e2a\"--\"\u66ff\u6362\u6210\u4e00\u4e2a\"-\"\uff0cbloop\u53c2\u6570\u4e3afalse\u3002\n    printf(\"str1=%s=\\n\",str1);         // \u51fa\u8f93\u7ed3\u679c\u662fstr1=messi--10--striker=\n\n    strcpy(str1,\"messi----10----striker\");  \n    replacestr(str1,\"--\",\"-\",true);    // \u628a\u4e24\u4e2a\"--\"\u66ff\u6362\u6210\u4e00\u4e2a\"-\"\uff0cbloop\u53c2\u6570\u4e3atrue\u3002\n    printf(\"str1=%s=\\n\",str1);        // \u51fa\u8f93\u7ed3\u679c\u662fstr1=messi-10-striker=\n\n    strcpy(str1,\"messi-10-striker\");  \n    replacestr(str1,\"-\",\"--\",false);    // \u628a\u4e00\u4e2a\"-\"\u66ff\u6362\u6210\u4e24\u4e2a\"--\"\uff0cbLoop\u53c2\u6570\u4e3afalse\u3002\n    printf(\"str1=%s=\\n\",str1);         // \u51fa\u8f93\u7ed3\u679c\u662fstr1=messi--10--striker=\n\n    // \u4ee5\u4e0b\u4ee3\u7801\u628a\"-\"\u66ff\u6362\u6210\"--\"\uff0cbloop\u53c2\u6570\u4e3atrue\uff0c\u5b58\u5728\u903b\u8f91\u9519\u8bef\uff0creplacestr\u5c06\u4e0d\u6267\u884c\u66ff\u6362\u3002\n    strcpy(str1,\"messi-10-striker\");  \n    replacestr(str1,\"-\",\"--\",true);    // \u628a\u4e00\u4e2a\"-\"\u66ff\u6362\u6210\u4e24\u4e2a\"--\"\uff0cbloop\u53c2\u6570\u4e3atrue\u3002\n    printf(\"str1=%s=\\n\",str1);        // \u51fa\u8f93\u7ed3\u679c\u662fstr1=messi-10-striker=\n\n    // ////////////////////////////////////\n    string str2;\n    str2=\"name:messi,no:10,job:striker.\";\n    replacestr(str2,\":\",\"=\");                        // \u628a\u5192\u53f7\u66ff\u6362\u6210\u7b49\u53f7\u3002\n    cout &lt;&lt; \"str2=\" &lt;&lt; str2 &lt;&lt; \"=\\n\";    // \u51fa\u8f93\u7ed3\u679c\u662fstr2=name=messi,no=10,job=striker.=\n\n    str2=\"name:messi,no:10,job:striker.\";\n    replacestr(str2,\"name:\",\"\");                  // \u628a\"name:\"\u66ff\u6362\u6210\"\"\uff0c\u76f8\u5f53\u4e8e\u5220\u9664\u5185\u5bb9\"name:\"\u3002\n    cout &lt;&lt; \"str2=\" &lt;&lt; str2 &lt;&lt; \"=\\n\";     // \u51fa\u8f93\u7ed3\u679c\u662fstr2=messi,no:10,job:striker.=\n\n    str2=\"messi----10----striker\";  \n    replacestr(str2,\"--\",\"-\",false);               // \u628a\u4e24\u4e2a\"--\"\u66ff\u6362\u6210\u4e00\u4e2a\"-\"\uff0cbLoop\u53c2\u6570\u4e3afalse\u3002\n    cout &lt;&lt; \"str2=\" &lt;&lt; str2 &lt;&lt; \"=\\n\";     // \u51fa\u8f93\u7ed3\u679c\u662fstr2=messi--10--striker=\n\n    str2=\"messi----10----striker\";  \n    replacestr(str2,\"--\",\"-\",true);                // \u628a\u4e24\u4e2a\"--\"\u66ff\u6362\u6210\u4e00\u4e2a\"-\"\uff0cbLoop\u53c2\u6570\u4e3atrue\u3002\n    cout &lt;&lt; \"str2=\" &lt;&lt; str2 &lt;&lt; \"=\\n\";     // \u51fa\u8f93\u7ed3\u679c\u662fstr2=messi-10-striker=\n\n    str2=\"messi-10-striker\";  \n    replacestr(str2,\"-\",\"--\",false);               // \u628a\u4e00\u4e2a\"-\"\u66ff\u6362\u6210\u4e24\u4e2a\"--\"\uff0cbLoop\u53c2\u6570\u4e3afalse\u3002\n    cout &lt;&lt; \"str2=\" &lt;&lt; str2 &lt;&lt; \"=\\n\";     // \u51fa\u8f93\u7ed3\u679c\u662fstr2=messi--10--striker=\n\n    // \u4ee5\u4e0b\u4ee3\u7801\u628a\"-\"\u66ff\u6362\u6210\"--\"\uff0cbloop\u53c2\u6570\u4e3atrue\uff0c\u5b58\u5728\u903b\u8f91\u9519\u8bef\uff0cupdatestr\u5c06\u4e0d\u6267\u884c\u66ff\u6362\u3002\n    str2=\"messi-10-striker\";  \n    replacestr(str2,\"-\",\"--\",true);                // \u628a\u4e00\u4e2a\"-\"\u66ff\u6362\u6210\u4e24\u4e2a\"--\"\uff0cbloop\u53c2\u6570\u4e3atrue\u3002\n    cout &lt;&lt; \"str2=\" &lt;&lt; str2 &lt;&lt; \"=\\n\";     // \u51fa\u8f93\u7ed3\u679c\u662fstr2=messi-10-striker=\n}\n</code></pre>"},{"location":"Project/Backend%20server/ADF/Time/Time%20Manipulation/","title":"\u65f6\u95f4\u64cd\u4f5c","text":""},{"location":"Project/Backend%20server/ADF/Time/Time%20Manipulation/#_2","title":"\u5b9a\u4e49","text":"<pre><code>\u53d6\u64cd\u4f5c\u7cfb\u7edf\u7684\u65f6\u95f4\uff08\u7528\u5b57\u7b26\u4e32\u8868\u793a\uff09\u3002\nstrtime\uff1a\u7528\u4e8e\u5b58\u653e\u83b7\u53d6\u5230\u7684\u65f6\u95f4\u3002\ntimetvl\uff1a\u65f6\u95f4\u7684\u504f\u79fb\u91cf\uff0c\u5355\u4f4d\uff1a\u79d2\uff0c0\u662f\u7f3a\u7701\u503c\uff0c\u8868\u793a\u5f53\u524d\u65f6\u95f4\uff0c30\u8868\u793a\u5f53\u524d\u65f6\u95f430\u79d2\u4e4b\u540e\u7684\u65f6\u95f4\u70b9\uff0c-30\u8868\u793a\u5f53\u524d\u65f6\u95f430\u79d2\u4e4b\u524d\u7684\u65f6\u95f4\u70b9\u3002\nfmt\uff1a\u8f93\u51fa\u65f6\u95f4\u7684\u683c\u5f0f\uff0cfmt\u6bcf\u90e8\u5206\u7684\u542b\u4e49\uff1ayyyy-\u5e74\u4efd\uff1bmm-\u6708\u4efd\uff1bdd-\u65e5\u671f\uff1bhh24-\u5c0f\u65f6\uff1bmi-\u5206\u949f\uff1bss-\u79d2\uff0c\n\u7f3a\u7701\u662f\"yyyy-mm-dd hh24:mi:ss\"\uff0c\u76ee\u524d\u652f\u6301\u4ee5\u4e0b\u683c\u5f0f\uff1a\n\"yyyy-mm-dd hh24:mi:ss\"\n\"yyyymmddhh24miss\"\n\"yyyy-mm-dd\"\n\"yyyymmdd\"\n\"hh24:mi:ss\"\n\"hh24miss\"\n\"hh24:mi\"\n\"hh24mi\"\n\"hh24\"\n\"mi\"\n\u6ce8\u610f\uff1a\n1\uff09\u5c0f\u65f6\u7684\u8868\u793a\u65b9\u6cd5\u662fhh24\uff0c\u4e0d\u662fhh\uff0c\u8fd9\u4e48\u505a\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u4fdd\u6301\u4e0e\u6570\u636e\u5e93\u7684\u65f6\u95f4\u8868\u793a\u65b9\u6cd5\u4e00\u81f4\uff1b\n2\uff09\u4ee5\u4e0a\u5217\u51fa\u4e86\u5e38\u7528\u7684\u65f6\u95f4\u683c\u5f0f\uff0c\u5982\u679c\u4e0d\u80fd\u6ee1\u8db3\u4f60\u5e94\u7528\u5f00\u53d1\u7684\u9700\u6c42\uff0c\u8bf7\u4fee\u6539\u6e90\u4ee3\u7801timetostr()\u51fd\u6570\u589e\u52a0\u66f4\u591a\u7684\u683c\u5f0f\u652f\u6301\uff1b\n3\uff09\u8c03\u7528\u51fd\u6570\u7684\u65f6\u5019\uff0c\u5982\u679cfmt\u4e0e\u4e0a\u8ff0\u683c\u5f0f\u90fd\u5339\u914d\uff0cstrtime\u7684\u5185\u5bb9\u5c06\u4e3a\u7a7a\u3002\n4\uff09\u65f6\u95f4\u7684\u5e74\u4efd\u662f\u56db\u4f4d\uff0c\u5176\u5b83\u7684\u53ef\u80fd\u662f\u4e00\u4f4d\u548c\u4e24\u4f4d\uff0c\u5982\u679c\u4e0d\u8db3\u4e24\u4f4d\uff0c\u5728\u524d\u9762\u88650\u3002\n</code></pre> <p><pre><code>string&amp; ltime(string &amp;strtime,const string &amp;fmt=\"\",const int timetvl=0);\nchar *    ltime(char *strtime   ,const string &amp;fmt=\"\",const int timetvl=0);\n// \u4e3a\u4e86\u907f\u514d\u91cd\u8f7d\u7684\u5c90\u4e49\uff0c\u589e\u52a0ltime1()\u51fd\u6570\u3002\nstring    ltime1(const string &amp;fmt=\"\",const int timetvl=0);\n\n// \u628a\u6574\u6570\u8868\u793a\u7684\u65f6\u95f4\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\u8868\u793a\u7684\u65f6\u95f4\u3002\n// ttime\uff1a\u6574\u6570\u8868\u793a\u7684\u65f6\u95f4\u3002\n// strtime\uff1a\u5b57\u7b26\u4e32\u8868\u793a\u7684\u65f6\u95f4\u3002\n// fmt\uff1a\u8f93\u51fa\u5b57\u7b26\u4e32\u65f6\u95f4strtime\u7684\u683c\u5f0f\uff0c\u4e0eltime()\u51fd\u6570\u7684fmt\u53c2\u6570\u76f8\u540c\uff0c\u5982\u679cfmt\u7684\u683c\u5f0f\u4e0d\u6b63\u786e\uff0cstrtime\u5c06\u4e3a\u7a7a\u3002\nstring&amp; timetostr(const time_t ttime,string &amp;strtime,const string &amp;fmt=\"\");\nchar*     timetostr(const time_t ttime,char *strtime   ,const string &amp;fmt=\"\");\n// \u4e3a\u4e86\u907f\u514d\u91cd\u8f7d\u7684\u5c90\u4e49\uff0c\u589e\u52a0timetostr1()\u51fd\u6570\u3002\nstring    timetostr1(const time_t ttime,const string &amp;fmt=\"\");\n\n// \u628a\u5b57\u7b26\u4e32\u8868\u793a\u7684\u65f6\u95f4\u8f6c\u6362\u4e3a\u6574\u6570\u8868\u793a\u7684\u65f6\u95f4\u3002\n// strtime\uff1a\u5b57\u7b26\u4e32\u8868\u793a\u7684\u65f6\u95f4\uff0c\u683c\u5f0f\u4e0d\u9650\uff0c\u4f46\u4e00\u5b9a\u8981\u5305\u62ecyyyymmddhh24miss\uff0c\u4e00\u4e2a\u90fd\u4e0d\u80fd\u5c11\uff0c\u987a\u5e8f\u4e5f\u4e0d\u80fd\u53d8\u3002\n// \u8fd4\u56de\u503c\uff1a\u6574\u6570\u8868\u793a\u7684\u65f6\u95f4\uff0c\u5982\u679cstrtime\u7684\u683c\u5f0f\u4e0d\u6b63\u786e\uff0c\u8fd4\u56de-1\u3002\ntime_t strtotime(const string &amp;strtime);\n\n// \u628a\u5b57\u7b26\u4e32\u8868\u793a\u7684\u65f6\u95f4\u52a0\u4e0a\u4e00\u4e2a\u504f\u79fb\u7684\u79d2\u6570\u540e\u5f97\u5230\u4e00\u4e2a\u65b0\u7684\u5b57\u7b26\u4e32\u8868\u793a\u7684\u65f6\u95f4\u3002\n// in_stime\uff1a\u8f93\u5165\u7684\u5b57\u7b26\u4e32\u683c\u5f0f\u7684\u65f6\u95f4\uff0c\u683c\u5f0f\u4e0d\u9650\uff0c\u4f46\u4e00\u5b9a\u8981\u5305\u62ecyyyymmddhh24miss\uff0c\u4e00\u4e2a\u90fd\u4e0d\u80fd\u5c11\uff0c\u987a\u5e8f\u4e5f\u4e0d\u80fd\u53d8\u3002\n// out_stime\uff1a\u8f93\u51fa\u7684\u5b57\u7b26\u4e32\u683c\u5f0f\u7684\u65f6\u95f4\u3002\n// timetvl\uff1a\u9700\u8981\u504f\u79fb\u7684\u79d2\u6570\uff0c\u6b63\u6570\u5f80\u540e\u504f\u79fb\uff0c\u8d1f\u6570\u5f80\u524d\u504f\u79fb\u3002\n// fmt\uff1a\u8f93\u51fa\u5b57\u7b26\u4e32\u65f6\u95f4out_stime\u7684\u683c\u5f0f\uff0c\u4e0eltime()\u51fd\u6570\u7684fmt\u53c2\u6570\u76f8\u540c\u3002\n// \u6ce8\u610f\uff1ain_stime\u548cout_stime\u53c2\u6570\u53ef\u4ee5\u662f\u540c\u4e00\u4e2a\u53d8\u91cf\u7684\u5730\u5740\uff0c\u5982\u679c\u8c03\u7528\u5931\u8d25\uff0cout_stime\u7684\u5185\u5bb9\u4f1a\u6e05\u7a7a\u3002\n// \u8fd4\u56de\u503c\uff1atrue-\u6210\u529f\uff0cfalse-\u5931\u8d25\uff0c\u5982\u679c\u8fd4\u56de\u5931\u8d25\uff0c\u53ef\u4ee5\u8ba4\u4e3a\u662fin_stime\u7684\u683c\u5f0f\u4e0d\u6b63\u786e\u3002\nbool addtime(const string &amp;in_stime,char *out_stime    ,const int timetvl,const string &amp;fmt=\"\");\nbool addtime(const string &amp;in_stime,string &amp;out_stime,const int timetvl,const string &amp;fmt=\"\");\n</code></pre> <pre><code>// \u8fd9\u662f\u4e00\u4e2a\u7cbe\u786e\u5230\u5fae\u79d2\u7684\u8ba1\u65f6\u5668\u3002\nclass ctimer\n{\nprivate:\n    struct timeval m_start;    // \u8ba1\u65f6\u5f00\u59cb\u7684\u65f6\u95f4\u70b9\u3002\n    struct timeval m_end;     // \u8ba1\u65f6\u7ed3\u675f\u7684\u65f6\u95f4\u70b9\u3002\npublic:\n    ctimer();          // \u6784\u9020\u51fd\u6570\u4e2d\u4f1a\u8c03\u7528start\u65b9\u6cd5\u3002\n\n    void start();     // \u5f00\u59cb\u8ba1\u65f6\u3002\n\n    // \u8ba1\u7b97\u5df2\u901d\u53bb\u7684\u65f6\u95f4\uff0c\u5355\u4f4d\uff1a\u79d2\uff0c\u5c0f\u6570\u70b9\u540e\u9762\u662f\u5fae\u79d2\u3002\n    // \u6bcf\u8c03\u7528\u4e00\u6b21\u672c\u65b9\u6cd5\u4e4b\u540e\uff0c\u81ea\u52a8\u8c03\u7528start\u65b9\u6cd5\u91cd\u65b0\u5f00\u59cb\u8ba1\u65f6\u3002\n    double elapsed();\n};\n</code></pre></p>"},{"location":"Project/Backend%20server/ADF/Time/Time%20Manipulation/#_3","title":"\u5b9e\u73b0","text":"<p><pre><code>// \u628a\u6574\u6570\u8868\u793a\u7684\u65f6\u95f4\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\u8868\u793a\u7684\u65f6\u95f4\u3002\n// ttime\uff1a\u6574\u6570\u8868\u793a\u7684\u65f6\u95f4\u3002\n// strtime\uff1a\u5b57\u7b26\u4e32\u8868\u793a\u7684\u65f6\u95f4\u3002\n// fmt\uff1a\u8f93\u51fa\u5b57\u7b26\u4e32\u65f6\u95f4strtime\u7684\u683c\u5f0f\uff0c\u4e0ettime\u51fd\u6570\u7684fmt\u53c2\u6570\u76f8\u540c\uff0c\u5982\u679cfmt\u7684\u683c\u5f0f\u4e0d\u6b63\u786e\uff0cstrtime\u5c06\u4e3a\u7a7a\u3002\n</code></pre> <pre><code>string&amp; timetostr(const time_t ttime,string &amp;strtime,const string &amp;fmt)\n{\n    //struct tm sttm = *localtime ( &amp;ttime );        // \u975e\u7ebf\u7a0b\u5b89\u5168\u3002\n    struct tm sttm; localtime_r (&amp;ttime,&amp;sttm);   // \u7ebf\u7a0b\u5b89\u5168\u3002\n    sttm.tm_year=sttm.tm_year+1900;                // tm.tm_year\u6210\u5458\u8981\u52a0\u4e0a1900\u3002\n    sttm.tm_mon++;                                            // sttm.tm_mon\u6210\u5458\u662f\u4ece0\u5f00\u59cb\u7684\uff0c\u8981\u52a01\u3002\n\n    // \u7f3a\u7701\u7684\u65f6\u95f4\u683c\u5f0f\u3002\n    if ( (fmt==\"\") || (fmt==\"yyyy-mm-dd hh24:mi:ss\") )\n    {\n        strtime=sformat(\"%04u-%02u-%02u %02u:%02u:%02u\",sttm.tm_year,sttm.tm_mon,sttm.tm_mday,\\\n                   sttm.tm_hour,sttm.tm_min,sttm.tm_sec);\n        return strtime;\n    }\n\n    if (fmt==\"yyyy-mm-dd hh24:mi\")\n    {\n        strtime=sformat(\"%04u-%02u-%02u %02u:%02u\",sttm.tm_year,sttm.tm_mon,sttm.tm_mday,\\\n                   sttm.tm_hour,sttm.tm_min);\n        return strtime;\n    }\n\n    if (fmt==\"yyyy-mm-dd hh24\")\n    {\n        strtime=sformat(\"%04u-%02u-%02u %02u\",sttm.tm_year,sttm.tm_mon,sttm.tm_mday,sttm.tm_hour);\n        return strtime;\n    }\n\n    if (fmt==\"yyyy-mm-dd\")\n    {\n        strtime=sformat(\"%04u-%02u-%02u\",sttm.tm_year,sttm.tm_mon,sttm.tm_mday); \n        return strtime;\n    }\n\n    if (fmt==\"yyyy-mm\")\n    {\n        strtime=sformat(\"%04u-%02u\",sttm.tm_year,sttm.tm_mon); \n        return strtime;\n    }\n\n    if (fmt==\"yyyymmddhh24miss\") \n    {\n        strtime=sformat(\"%04u%02u%02u%02u%02u%02u\",sttm.tm_year,sttm.tm_mon,sttm.tm_mday,\\\n                   sttm.tm_hour,sttm.tm_min,sttm.tm_sec);\n        return strtime;\n    }\n\n    if (fmt==\"yyyymmddhh24mi\")\n    {\n        strtime=sformat(\"%04u%02u%02u%02u%02u\",sttm.tm_year,sttm.tm_mon,sttm.tm_mday,\\\n                   sttm.tm_hour,sttm.tm_min);\n        return strtime;\n    }\n\n    if (fmt==\"yyyymmddhh24\")\n    {\n        strtime=sformat(\"%04u%02u%02u%02u\",sttm.tm_year,sttm.tm_mon,sttm.tm_mday,sttm.tm_hour);\n        return strtime;\n    }\n\n    if (fmt==\"yyyymmdd\")\n    {\n        strtime=sformat(\"%04u%02u%02u\",sttm.tm_year,sttm.tm_mon,sttm.tm_mday); \n        return strtime;\n    }\n\n    if (fmt==\"hh24miss\")\n    {\n        strtime=sformat(\"%02u%02u%02u\",sttm.tm_hour,sttm.tm_min,sttm.tm_sec); \n        return strtime;\n    }\n\n    if (fmt==\"hh24mi\") \n    {\n        strtime=sformat(\"%02u%02u\",sttm.tm_hour,sttm.tm_min); \n        return strtime;\n    }\n\n    if (fmt==\"hh24\")\n    {\n        strtime=sformat(\"%02u\",sttm.tm_hour); \n        return strtime;\n    }\n\n    if (fmt==\"mi\")\n    {\n        strtime=sformat(\"%02u\",sttm.tm_min); \n        return strtime;\n    }\n\n    return strtime;\n}\n</code></pre> <pre><code>char* timetostr(const time_t ttime,char *strtime,const string &amp;fmt)\n{\n    if (strtime==nullptr) return nullptr;    // \u5224\u65ad\u7a7a\u6307\u9488\u3002\n\n    string str;\n    timetostr(ttime,str,fmt);           // \u76f4\u63a5\u8c03\u7528string&amp; timetostr(const time_t ttime,string &amp;strtime,const string &amp;fmt=\"\");\n    str.copy(strtime,str.length());\n    strtime[str.length()]=0;           // string\u7684copy\u51fd\u6570\u4e0d\u4f1a\u7ed9C\u98ce\u683c\u5b57\u7b26\u4e32\u7684\u7ed3\u5c3e\u52a00\u3002\n\n    return strtime;\n}\n</code></pre></p> <pre><code>string timetostr1(const time_t ttime,const string &amp;fmt)\n{\n    string str;\n    timetostr(ttime,str,fmt);           // \u76f4\u63a5\u8c03\u7528string&amp; timetostr(const time_t ttime,string &amp;strtime,const string &amp;fmt=\"\");\n    return str;\n}\n</code></pre> <pre><code>string&amp; ltime(string &amp;strtime,const string &amp;fmt,const int timetvl)\n{\n    time_t  timer;\n    time(&amp;timer );                          // \u83b7\u53d6\u7cfb\u7edf\u5f53\u524d\u65f6\u95f4\u3002\n\n    timer=timer+timetvl;              // \u52a0\u4e0a\u65f6\u95f4\u7684\u504f\u79fb\u91cf\u3002\n\n    timetostr(timer,strtime,fmt);   // \u628a\u6574\u6570\u8868\u793a\u7684\u65f6\u95f4\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\u8868\u793a\u7684\u65f6\u95f4\u3002\n\n    return strtime;\n}\n</code></pre> <pre><code>char* ltime(char *strtime,const string &amp;fmt,const int timetvl)\n{\n    if (strtime==nullptr) return nullptr;    // \u5224\u65ad\u7a7a\u6307\u9488\u3002\n\n    time_t  timer;\n    time(&amp;timer );                          // \u83b7\u53d6\u7cfb\u7edf\u5f53\u524d\u65f6\u95f4\u3002\n\n    timer=timer+timetvl;              // \u52a0\u4e0a\u65f6\u95f4\u7684\u504f\u79fb\u91cf\u3002\n\n    timetostr(timer,strtime,fmt);   // \u628a\u6574\u6570\u8868\u793a\u7684\u65f6\u95f4\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\u8868\u793a\u7684\u65f6\u95f4\u3002\n\n    return strtime;\n}\n</code></pre> <p><pre><code>string ltime1(const string &amp;fmt,const int timetvl)\n{\n    string strtime;\n\n    ltime(strtime,fmt,timetvl);   // \u76f4\u63a5\u8c03\u7528string&amp; ltime(string &amp;strtime,const string &amp;fmt=\"\",const int timetvl=0);\n\n    return strtime;\n}\n</code></pre> <pre><code>bool addtime(const string &amp;in_stime,string &amp;out_stime,const int timetvl,const string &amp;fmt)\n{\n    time_t  timer;\n\n    // \u628a\u5b57\u7b26\u4e32\u8868\u793a\u7684\u65f6\u95f4\u8f6c\u6362\u4e3a\u6574\u6570\u8868\u793a\u7684\u65f6\u95f4\uff0c\u65b9\u4fbf\u8fd0\u7b97\u3002\n    if ( (timer=strtotime(in_stime))==-1) { out_stime=\"\"; return false; }\n\n    timer=timer+timetvl;  // \u65f6\u95f4\u8fd0\u7b97\u3002\n\n    // \u628a\u6574\u6570\u8868\u793a\u7684\u65f6\u95f4\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\u8868\u793a\u7684\u65f6\u95f4\u3002\n    timetostr(timer,out_stime,fmt);\n\n    return true;\n}\n</code></pre></p> <pre><code>bool addtime(const string &amp;in_stime,char *out_stime,const int timetvl,const string &amp;fmt)\n{\n    if (out_stime==nullptr) return false;    // \u5224\u65ad\u7a7a\u6307\u9488\u3002\n\n    time_t  timer;\n\n    // \u628a\u5b57\u7b26\u4e32\u8868\u793a\u7684\u65f6\u95f4\u8f6c\u6362\u4e3a\u6574\u6570\u8868\u793a\u7684\u65f6\u95f4\uff0c\u65b9\u4fbf\u8fd0\u7b97\u3002\n    if ( (timer=strtotime(in_stime))==-1) { strcpy(out_stime,\"\"); return false; }\n\n    timer=timer+timetvl;  // \u65f6\u95f4\u8fd0\u7b97\u3002\n\n    // \u628a\u6574\u6570\u8868\u793a\u7684\u65f6\u95f4\u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\u8868\u793a\u7684\u65f6\u95f4\u3002\n    timetostr(timer,out_stime,fmt);\n\n    return true;\n}\n</code></pre> <pre><code>// \u8ba1\u65f6\u5f00\u59cb\u3002\nvoid ctimer::start()\n{\n    memset(&amp;m_start,0,sizeof(struct timeval));\n    memset(&amp;m_end,0,sizeof(struct timeval));\n\n    gettimeofday(&amp;m_start, 0);    // \u83b7\u53d6\u5f53\u524d\u65f6\u95f4\uff0c\u7cbe\u786e\u5230\u5fae\u79d2\u3002\n}\n</code></pre> <pre><code>// \u8ba1\u7b97\u5df2\u901d\u53bb\u7684\u65f6\u95f4\uff0c\u5355\u4f4d\uff1a\u79d2\uff0c\u5c0f\u6570\u70b9\u540e\u9762\u662f\u5fae\u79d2\n// \u6bcf\u8c03\u7528\u4e00\u6b21\u672c\u65b9\u6cd5\u4e4b\u540e\uff0c\u81ea\u52a8\u8c03\u7528Start\u65b9\u6cd5\u91cd\u65b0\u5f00\u59cb\u8ba1\u65f6\u3002\ndouble ctimer::elapsed()\n{\n    gettimeofday(&amp;m_end,0);     // \u83b7\u53d6\u5f53\u524d\u65f6\u95f4\u4f5c\u4e3a\u8ba1\u65f6\u7ed3\u675f\u7684\u65f6\u95f4\uff0c\u7cbe\u786e\u5230\u5fae\u79d2\u3002\n\n    string str;\n    str=sformat(\"%ld.%06ld\",m_start.tv_sec,m_start.tv_usec);\n    double dstart=stod(str);      // \u628a\u8ba1\u65f6\u5f00\u59cb\u7684\u65f6\u95f4\u70b9\u8f6c\u6362\u4e3adouble\u3002\n\n    str=sformat(\"%ld.%06ld\",m_end.tv_sec,m_end.tv_usec);\n    double dend=stod(str);       // \u628a\u8ba1\u65f6\u7ed3\u675f\u7684\u65f6\u95f4\u70b9\u8f6c\u6362\u4e3adouble\u3002\n\n    start();                                  // \u91cd\u65b0\u5f00\u59cb\u8ba1\u65f6\u3002\n\n    return dend-dstart;\n}\n</code></pre>"},{"location":"Project/Backend%20server/ADF/Time/Time%20Manipulation/#_4","title":"\u6d4b\u8bd5","text":"<pre><code>//ltime\u65f6\u95f4\u51fd\u6570\u7684\u4f7f\u7528\uff08\u83b7\u53d6\u64cd\u4f5c\u7cfb\u7edf\u65f6\u95f4\uff09\n#include \"../_public.h\"\nusing namespace std;\nusing namespace idc;\n\nint main()\n{\n    // C\u98ce\u683c\u7684\u5b57\u7b26\u4e32\u3002\n    char strtime1[20];     // \u5b58\u653e\u7cfb\u7edf\u65f6\u95f4\u3002\n    memset(strtime1,0,sizeof(strtime1));\n\n    ltime(strtime1,\"yyyy-mm-dd hh24:mi:ss\");        // \u83b7\u53d6\u5f53\u524d\u65f6\u95f4\u3002\n    printf(\"strtime1=%s\\n\",strtime1);\n\n    ltime(strtime1,\"yyyy-mm-dd hh24:mi:ss\",-30);  // \u83b7\u53d630\u79d2\u524d\u7684\u65f6\u95f4\u3002\n    printf(\"strtime1=%s\\n\",strtime1);\n\n    ltime(strtime1,\"yyyy-mm-dd hh24:mi:ss\",30);    // \u83b7\u53d630\u79d2\u540e\u7684\u65f6\u95f4\u3002\n    printf(\"strtime1=%s\\n\",strtime1);\n\n    // C++\u98ce\u683c\u7684\u5b57\u7b26\u4e32\u3002\n    string strtime2;\n\n    ltime(strtime2,\"yyyy-mm-dd hh24:mi:ss\");        // \u83b7\u53d6\u5f53\u524d\u65f6\u95f4\u3002\n    cout &lt;&lt; \"strtime2=\" &lt;&lt; strtime2 &lt;&lt; \"\\n\";\n\n    ltime(strtime2,\"yyyy-mm-dd hh24:mi:ss\",-30);  // \u83b7\u53d630\u79d2\u524d\u7684\u65f6\u95f4\u3002\n    cout &lt;&lt; \"strtime2=\" &lt;&lt; strtime2 &lt;&lt; \"\\n\";\n\n    ltime(strtime2,\"yyyy-mm-dd hh24:mi:ss\",30);    // \u83b7\u53d630\u79d2\u540e\u7684\u65f6\u95f4\u3002\n    cout &lt;&lt; \"strtime2=\" &lt;&lt; strtime2 &lt;&lt; \"\\n\";\n}\n</code></pre> <pre><code>//\u6574\u6570\u8868\u793a\u7684\u65f6\u95f4\u548c\u5b57\u7b26\u4e32\u8868\u793a\u7684\u65f6\u95f4\u4e4b\u95f4\u7684\u8f6c\u6362\u3002\n#include \"../_public.h\"\nusing namespace std;\nusing namespace idc;\n\nint main()\n{\n    string strtime;\n    strtime=\"2020-01-01 12:35:22\";\n\n    time_t ttime;\n    ttime=strtotime(strtime);        // \u8f6c\u6362\u4e3a\u6574\u6570\u7684\u65f6\u95f4\n    printf(\"ttime=%ld\\n\",ttime);    // \u8f93\u51fattime=1577853322\n\n    char s1[20];                             // C\u98ce\u683c\u7684\u5b57\u7b26\u4e32\u3002\n    timetostr(ttime,s1,\"yyyy-mm-dd hh24:mi:ss\");  // \u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\u7684\u65f6\u95f4\n    cout &lt;&lt; \"s1=\" &lt;&lt; s1 &lt;&lt; endl;\n\n    string s2;                               // C++\u98ce\u683c\u7684\u5b57\u7b26\u4e32\u3002\n    timetostr(ttime,s2,\"yyyy-mm-dd hh24:mi:ss\");  // \u8f6c\u6362\u4e3a\u5b57\u7b26\u4e32\u7684\u65f6\u95f4\n    cout &lt;&lt; \"s2=\" &lt;&lt; s2 &lt;&lt; endl;\n}\n</code></pre> <pre><code>//\u91c7\u7528addtime\u51fd\u6570\u8fdb\u884c\u65f6\u95f4\u7684\u8fd0\u7b97\u3002\n\n#include \"../_public.h\"\nusing namespace std;\nusing namespace idc;\n\nint main()\n{\n    char strtime[20];\n\n    memset(strtime,0,sizeof(strtime));\n    strcpy(strtime,\"2020-01-20 12:35:22\");\n\n    char s1[20];         // C\u98ce\u683c\u7684\u5b57\u7b26\u4e32\u3002\n    addtime(strtime,s1,0-1*24*60*60);        // \u51cf\u4e00\u5929\u3002\n    printf(\"s1=%s\\n\",s1);           // \u8f93\u51fas1=2020-01-19 12:35:22\n\n    string s2;            // C++\u98ce\u683c\u7684\u5b57\u7b26\u4e32\u3002\n    addtime(strtime,s2,2*24*60*60);      // \u52a0\u4e24\u5929\u3002  172800\n    cout &lt;&lt; \"s2=\" &lt;&lt; s2 &lt;&lt; endl;         // \u8f93\u51fas2=2020-01-22 12:35:22\n}\n</code></pre> <pre><code>//\u6f14\u793actimer\u7c7b\uff08\u8ba1\u65f6\u5668\uff09\u7684\u7528\u6cd5\u3002\n\n#include \"../_public.h\"\nusing namespace std;\nusing namespace idc;\n\nint main()\n{\n    ctimer timer;\n\n    printf(\"elapsed=%lf\\n\",timer.elapsed());\n    sleep(1);\n    printf(\"elapsed=%lf\\n\",timer.elapsed());\n    sleep(1);\n    printf(\"elapsed=%lf\\n\",timer.elapsed());\n    usleep(1000);\n    printf(\"elapsed=%lf\\n\",timer.elapsed());\n    usleep(100);\n    printf(\"elapsed=%lf\\n\",timer.elapsed());\n    sleep(10);\n    printf(\"elapsed=%lf\\n\",timer.elapsed());\n}\n</code></pre>"},{"location":"Project/Backend%20server/ADF/Tools/Deletefiles/","title":"\u6e05\u7406\u6587\u4ef6","text":""},{"location":"Project/Backend%20server/ADF/Tools/Deletefiles/#_2","title":"\u5b9a\u4e49","text":"<ul> <li>\u6e05\u7406\u6587\u4ef6\uff1a\u5220\u9664\u6307\u5b9a\u76ee\u5f55\u4e2d\u7684\u5386\u53f2\u6570\u636e\u6587\u4ef6</li> </ul>"},{"location":"Project/Backend%20server/ADF/Tools/Deletefiles/#_3","title":"\u5b9e\u73b0","text":"<pre><code>#include \"_public.h\"\nusing namespace idc;\n\ncpactive pactive;                 // \u8fdb\u7a0b\u7684\u5fc3\u8df3\u3002\n\n// \u7a0b\u5e8f\u9000\u51fa\u548c\u4fe1\u53f72\u300115\u7684\u5904\u7406\u51fd\u6570\u3002\nvoid EXIT(int sig);\n\nint main(int argc,char *argv[])\n{\n    // \u7a0b\u5e8f\u7684\u5e2e\u52a9\u3002\n    if (argc != 4)\n    {\n        printf(\"\\n\");\n        printf(\"Using:/project/tools/bin/deletefiles pathname matchstr timeout\\n\\n\");\n\n        printf(\"Example:/project/tools/bin/deletefiles /tmp/idc/surfdata \\\"*.xml,*.json\\\" 0.01\\n\");\n        cout &lt;&lt; R\"(        /project/tools/bin/deletefiles /log/idc \"*.log.20*\" 0.02)\" &lt;&lt; endl;\n        printf(\"        /project/tools/bin/procctl 300 /project/tools/bin/deletefiles /log/idc \\\"*.log.20*\\\" 0.02\\n\");\n        printf(\"        /project/tools/bin/procctl 300 /project/tools/bin/deletefiles /tmp/idc/surfdata \\\"*.xml,*.json\\\" 0.01\\n\\n\");\n\n        printf(\"\u8fd9\u662f\u4e00\u4e2a\u5de5\u5177\u7a0b\u5e8f\uff0c\u7528\u4e8e\u5220\u9664\u5386\u53f2\u7684\u6570\u636e\u6587\u4ef6\u6216\u65e5\u5fd7\u6587\u4ef6\u3002\\n\");\n        printf(\"\u672c\u7a0b\u5e8f\u628apathname\u76ee\u5f55\u53ca\u5b50\u76ee\u5f55\u4e2dtimeout\u5929\u4e4b\u524d\u7684\u5339\u914dmatchstr\u6587\u4ef6\u5168\u90e8\u5220\u9664\uff0ctimeout\u53ef\u4ee5\u662f\u5c0f\u6570\u3002\\n\");\n        printf(\"\u672c\u7a0b\u5e8f\u4e0d\u5199\u65e5\u5fd7\u6587\u4ef6\uff0c\u4e5f\u4e0d\u4f1a\u5728\u63a7\u5236\u53f0\u8f93\u51fa\u4efb\u4f55\u4fe1\u606f\u3002\\n\\n\\n\");\n\n        return -1;\n    }\n\n    // \u5ffd\u7565\u5168\u90e8\u7684\u4fe1\u53f7\u548c\u5173\u95edI/O\uff0c\u8bbe\u7f6e\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u3002\n    closeioandsignal(true);          // \u5728\u5f00\u53d1\u6d4b\u8bd5\u9636\u6bb5\uff0c\u8fd9\u884c\u4ee3\u7801\u4e0d\u542f\u7528\uff0c\u65b9\u4fbf\u663e\u793a\u8c03\u8bd5\u4fe1\u606f\u3002\n    signal(2,EXIT); signal(15,EXIT);\n\n    pactive.addpinfo(30,\"deletefiles\");       // \u628a\u5f53\u524d\u8fdb\u7a0b\u7684\u5fc3\u8df3\u52a0\u5165\u5171\u4eab\u5185\u5b58\u3002   \n\n    // \u83b7\u53d6\u88ab\u5b9a\u4e49\u4e3a\u5386\u53f2\u6570\u636e\u6587\u4ef6\u7684\u65f6\u95f4\u70b9\u3002\n    string strtimeout=ltime1(\"yyyymmddhh24miss\",0-(int)(atof(argv[3])*24*60*60)); \n    cout &lt;&lt; \"strtimeout=\" &lt;&lt; strtimeout &lt;&lt; endl;\n\n    // \u6253\u5f00\u76ee\u5f55\u3002\n    cdir dir;\n    if (dir.opendir(argv[1],argv[2],10000,true)==false)\n    {\n        printf(\"dir.opendir(%s) failed.\\n\",argv[1]); return -1;\n    }\n\n    // \u904d\u5386\u76ee\u5f55\u4e2d\u7684\u6587\u4ef6\uff0c\u5982\u679c\u662f\u5386\u53f2\u6570\u636e\u6587\u4ef6\uff0c\u5220\u9664\u5b83\u3002\n    while (dir.readdir()==true)\n    {\n        // \u628a\u6587\u4ef6\u7684\u65f6\u95f4\u4e0e\u5386\u53f2\u6587\u4ef6\u7684\u65f6\u95f4\u70b9\u6bd4\u8f83\uff0c\u5982\u679c\u66f4\u65e9\uff0c\u5c31\u9700\u8981\u5220\u9664\u3002\n        if ( dir.m_mtime &lt; strtimeout)\n        {\n            if (remove(dir.m_ffilename.c_str())==0)\n                cout &lt;&lt; \"remove(\" &lt;&lt; dir.m_ffilename &lt;&lt; \") ok.\\n\";\n            else\n                cout &lt;&lt; \"remove(\" &lt;&lt; dir.m_ffilename &lt;&lt; \") failed.\\n\"; \n        }\n    }\n\n    return 0;\n}\n\nvoid EXIT(int sig)\n{\n    printf(\"\u7a0b\u5e8f\u9000\u51fa\uff0csig=%d\\n\\n\",sig);\n\n    exit(0);\n}\n</code></pre>"},{"location":"Project/Backend%20server/ADF/Tools/Gzipfiles/","title":"\u538b\u7f29\u6587\u4ef6","text":""},{"location":"Project/Backend%20server/ADF/Tools/Gzipfiles/#_2","title":"\u5b9a\u4e49","text":"<ul> <li>\u538b\u7f29\u6587\u4ef6\uff1a\u538b\u7f29\u6307\u5b9a\u76ee\u5f55\u4e2d\u7684\u5386\u53f2\u6570\u636e\u6587\u4ef6</li> </ul>"},{"location":"Project/Backend%20server/ADF/Tools/Gzipfiles/#_3","title":"\u5b9e\u73b0","text":"<pre><code>#include \"_public.h\"\nusing namespace idc;\n\ncpactive pactive;                 // \u8fdb\u7a0b\u7684\u5fc3\u8df3\u3002\n\n// \u7a0b\u5e8f\u9000\u51fa\u548c\u4fe1\u53f72\u300115\u7684\u5904\u7406\u51fd\u6570\u3002\nvoid EXIT(int sig);\n\nint main(int argc,char *argv[])\n{\n    // \u7a0b\u5e8f\u7684\u5e2e\u52a9\u3002\n    if (argc != 4)\n    {\n        printf(\"\\n\");\n        printf(\"Using:/project/tools/bin/gzipfiles pathname matchstr timeout\\n\\n\");\n\n        printf(\"Example:/project/tools/bin/gzipfiles /tmp/idc/surfdata \\\"*.xml,*.json\\\" 0.01\\n\");\n        cout &lt;&lt; R\"(        /project/tools/bin/gzipfiles /log/idc \"*.log.20*\" 0.02)\" &lt;&lt; endl;\n        printf(\"        /project/tools/bin/procctl 300 /project/tools/bin/gzipfiles /log/idc \\\"*.log.20*\\\" 0.02\\n\");\n        printf(\"        /project/tools/bin/procctl 300 /project/tools/bin/gzipfiles /tmp/idc/surfdata \\\"*.xml,*.json\\\" 0.01\\n\\n\");\n\n        printf(\"\u8fd9\u662f\u4e00\u4e2a\u5de5\u5177\u7a0b\u5e8f\uff0c\u7528\u4e8e\u538b\u7f29\u5386\u53f2\u7684\u6570\u636e\u6587\u4ef6\u6216\u65e5\u5fd7\u6587\u4ef6\u3002\\n\");\n        printf(\"\u672c\u7a0b\u5e8f\u628apathname\u76ee\u5f55\u53ca\u5b50\u76ee\u5f55\u4e2dtimeout\u5929\u4e4b\u524d\u7684\u5339\u914dmatchstr\u6587\u4ef6\u5168\u90e8\u538b\u7f29\uff0ctimeout\u53ef\u4ee5\u662f\u5c0f\u6570\u3002\\n\");\n        printf(\"\u672c\u7a0b\u5e8f\u4e0d\u5199\u65e5\u5fd7\u6587\u4ef6\uff0c\u4e5f\u4e0d\u4f1a\u5728\u63a7\u5236\u53f0\u8f93\u51fa\u4efb\u4f55\u4fe1\u606f\u3002\\n\");\n        printf(\"\u672c\u7a0b\u5e8f\u8c03\u7528/usr/bin/gzip\u547d\u4ee4\u538b\u7f29\u6587\u4ef6\u3002\\n\\n\\n\");\n\n        return -1;\n    }\n\n    // \u5ffd\u7565\u5168\u90e8\u7684\u4fe1\u53f7\u548c\u5173\u95edI/O\uff0c\u8bbe\u7f6e\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u3002\n    closeioandsignal(true);          // \u5728\u5f00\u53d1\u6d4b\u8bd5\u9636\u6bb5\uff0c\u8fd9\u884c\u4ee3\u7801\u4e0d\u542f\u7528\uff0c\u65b9\u4fbf\u663e\u793a\u8c03\u8bd5\u4fe1\u606f\u3002\n    signal(2,EXIT); signal(15,EXIT);\n\n    pactive.addpinfo(120,\"gzipfiles\");       // \u628a\u5f53\u524d\u8fdb\u7a0b\u7684\u5fc3\u8df3\u52a0\u5165\u5171\u4eab\u5185\u5b58\u3002   \n\n    // \u83b7\u53d6\u88ab\u5b9a\u4e49\u4e3a\u5386\u53f2\u6570\u636e\u6587\u4ef6\u7684\u65f6\u95f4\u70b9\u3002\n    string strtimeout=ltime1(\"yyyymmddhh24miss\",0-(int)(atof(argv[3])*24*60*60));\n    // cout &lt;&lt; \"strtimeout=\" &lt;&lt; strtimeout &lt;&lt; endl;\n\n    // \u6253\u5f00\u76ee\u5f55\u3002\n    cdir dir;\n    if (dir.opendir(argv[1],argv[2],10000,true)==false)\n    {\n        printf(\"dir.opendir(%s) failed.\\n\",argv[1]); return -1;\n    }\n\n    // \u904d\u5386\u76ee\u5f55\u4e2d\u7684\u6587\u4ef6\uff0c\u5982\u679c\u662f\u5386\u53f2\u6570\u636e\u6587\u4ef6\uff0c\u538b\u7f29\u5b83\u3002\n    while (dir.readdir()==true)\n    {\n        // \u628a\u6587\u4ef6\u7684\u65f6\u95f4\u4e0e\u5386\u53f2\u6587\u4ef6\u7684\u65f6\u95f4\u70b9\u6bd4\u8f83\uff0c\u5982\u679c\u66f4\u65e9\uff0c\u5e76\u4e14\u4e0d\u662f\u538b\u7f29\u6587\u4ef6\uff0c\u5c31\u9700\u8981\u538b\u7f29\u3002\n        if ( (dir.m_mtime &lt; strtimeout) &amp;&amp; (matchstr(dir.m_filename,\"*.gz\")==false) )\n        {\n            // \u538b\u7f29\u6587\u4ef6\uff0c\u8c03\u7528\u64cd\u4f5c\u7cfb\u7edf\u7684gzip\u547d\u4ee4\u3002\n            string strcmd=\"/usr/bin/gzip -f \" + dir.m_ffilename + \" 1&gt;/dev/null 2&gt;/dev/null\";\n            if (system(strcmd.c_str())==0)\n                cout &lt;&lt; \"gzip \" &lt;&lt; dir.m_ffilename &lt;&lt; \"  ok.\\n\";\n            else\n                cout &lt;&lt; \"gzip \" &lt;&lt; dir.m_ffilename &lt;&lt; \" failed.\\n\"; \n\n            // \u5982\u679c\u538b\u7f29\u7684\u6587\u4ef6\u6bd4\u8f83\u5927\uff0c\u6709\u51e0\u4e2aG\uff0c\u9700\u8981\u65f6\u95f4\u53ef\u80fd\u6bd4\u8f83\u957f\uff0c\u6240\u4ee5\uff0c\u589e\u52a0\u66f4\u65b0\u5fc3\u8df3\u7684\u4ee3\u7801\u3002\n            pactive.uptatime();          \n        }\n    }\n\n    return 0;\n}\n\nvoid EXIT(int sig)\n{\n    printf(\"\u7a0b\u5e8f\u9000\u51fa\uff0csig=%d\\n\\n\",sig);\n\n    exit(0);\n}\n</code></pre>"},{"location":"Project/Backend%20server/ADF/Transmission/Ftp/Encapsulate/","title":"\u5c01\u88c5\u5ba2\u6237\u7aef","text":""},{"location":"Project/Backend%20server/ADF/Transmission/Ftp/Encapsulate/#_2","title":"\u5b9a\u4e49","text":"<ul> <li>ftp\u534f\u8bae\u6700\u5e95\u5c42\u662ftcp\u62a5\u6587\uff0c\u5982\u679c\u4ecesocket\u5f00\u59cb\u7f16\u7a0b\uff0c\u5de5\u4f5c\u91cf\u5de8\u5927\u3002</li> <li>\u5bfb\u627eftp\u5ba2\u6237\u7aef\u7684\u5f00\u6e90\u5e93\uff08ftplib\uff09\uff0c\u5c01\u88c5\u6210\u7b80\u5355\u6613\u7528\u7684\u7c7bcftp\u3002</li> </ul>"},{"location":"Project/Backend%20server/ADF/Transmission/Ftp/Encapsulate/#_ftph","title":"_ftp.h","text":"<pre><code>#ifndef __FTP_H\n#define __FTP_H\n\n#include \"_public.h\"\n#include \"ftplib.h\"\n\nnamespace idc\n{\n\nclass cftpclient\n{\nprivate:\n    netbuf *m_ftpconn;   // ftp\u8fde\u63a5\u53e5\u67c4\u3002\npublic:\n    unsigned int  m_size;      // \u6587\u4ef6\u7684\u5927\u5c0f\uff0c\u5355\u4f4d\uff1a\u5b57\u8282\u3002\n    string m_mtime;     // \u6587\u4ef6\u7684\u4fee\u6539\u65f6\u95f4\uff0c\u683c\u5f0f\uff1ayyyymmddhh24miss\u3002\n\n    // \u4ee5\u4e0b\u4e09\u4e2a\u6210\u5458\u53d8\u91cf\u7528\u4e8e\u5b58\u653elogin\u65b9\u6cd5\u767b\u5f55\u5931\u8d25\u7684\u539f\u56e0\u3002\n    bool m_connectfailed;    // \u5982\u679c\u7f51\u7edc\u8fde\u63a5\u5931\u8d25\uff0c\u8be5\u6210\u5458\u7684\u503c\u4e3atrue\u3002\n    bool m_loginfailed;      // \u5982\u679c\u767b\u5f55\u5931\u8d25\uff0c\u7528\u6237\u540d\u548c\u5bc6\u7801\u4e0d\u6b63\u786e\uff0c\u6216\u6ca1\u6709\u767b\u5f55\u6743\u9650\uff0c\u8be5\u6210\u5458\u7684\u503c\u4e3atrue\u3002\n    bool m_optionfailed;     // \u5982\u679c\u8bbe\u7f6e\u4f20\u8f93\u6a21\u5f0f\u5931\u8d25\uff0c\u8be5\u6210\u5458\u53d8\u91cf\u7684\u503c\u4e3atrue\u3002\n\n    cftpclient();  // \u7c7b\u7684\u6784\u9020\u51fd\u6570\u3002\n    ~cftpclient();  // \u7c7b\u7684\u6790\u6784\u51fd\u6570\u3002\n\n    cftpclient(const cftpclient&amp;) = delete;\n    cftpclient&amp; operator=(const cftpclient) = delete;\n\n    void initdata();   // \u521d\u59cb\u5316m_size\u548cm_mtime\u6210\u5458\u53d8\u91cf\u3002\n\n    // \u767b\u5f55ftp\u670d\u52a1\u5668\u3002\n    // host\uff1aftp\u670d\u52a1\u5668ip\u5730\u5740\u548c\u7aef\u53e3\uff0c\u4e2d\u95f4\u7528\":\"\u5206\u9694\uff0c\u5982\"192.168.1.1:21\"\u3002\n    // username\uff1a\u767b\u5f55ftp\u670d\u52a1\u5668\u7528\u6237\u540d\u3002\n    // password\uff1a\u767b\u5f55ftp\u670d\u52a1\u5668\u7684\u5bc6\u7801\u3002\n    // imode\uff1a\u4f20\u8f93\u6a21\u5f0f\uff0c1-FTPLIB_PASSIVE\u662f\u88ab\u52a8\u6a21\u5f0f\uff0c2-FTPLIB_PORT\u662f\u4e3b\u52a8\u6a21\u5f0f\uff0c\u7f3a\u7701\u662f\u88ab\u52a8\u6a21\u5f0f\u3002\n    bool login(const string &amp;host,const string &amp;username,const string &amp;password,const int imode=FTPLIB_PASSIVE);\n\n    // \u6ce8\u9500\u3002\n    bool logout();\n\n    // \u83b7\u53d6ftp\u670d\u52a1\u5668\u4e0a\u6587\u4ef6\u7684\u65f6\u95f4\u3002\n    // remotefilename\uff1a\u5f85\u83b7\u53d6\u7684\u6587\u4ef6\u540d\u3002\n    // \u8fd4\u56de\u503c\uff1afalse-\u5931\u8d25\uff1btrue-\u6210\u529f\uff0c\u83b7\u53d6\u5230\u7684\u6587\u4ef6\u65f6\u95f4\u5b58\u653e\u5728m_mtime\u6210\u5458\u53d8\u91cf\u4e2d\u3002\n    bool mtime(const string &amp;remotefilename);\n\n    // \u83b7\u53d6ftp\u670d\u52a1\u5668\u4e0a\u6587\u4ef6\u7684\u5927\u5c0f\u3002\n    // remotefilename\uff1a\u5f85\u83b7\u53d6\u7684\u6587\u4ef6\u540d\u3002\n    // \u8fd4\u56de\u503c\uff1afalse-\u5931\u8d25\uff1btrue-\u6210\u529f\uff0c\u83b7\u53d6\u5230\u7684\u6587\u4ef6\u5927\u5c0f\u5b58\u653e\u5728m_size\u6210\u5458\u53d8\u91cf\u4e2d\u3002\n    bool size(const string &amp;remotefilename);\n\n    // \u6539\u53d8ftp\u670d\u52a1\u5668\u7684\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\u3002\n    // remotedir\uff1aftp\u670d\u52a1\u5668\u4e0a\u7684\u76ee\u5f55\u540d\u3002\n    // \u8fd4\u56de\u503c\uff1atrue-\u6210\u529f\uff1bfalse-\u5931\u8d25\u3002\n    bool chdir(const string &amp;remotedir);\n\n    // \u5728ftp\u670d\u52a1\u5668\u4e0a\u521b\u5efa\u76ee\u5f55\u3002\n    // remotedir\uff1aftp\u670d\u52a1\u5668\u4e0a\u5f85\u521b\u5efa\u7684\u76ee\u5f55\u540d\u3002\n    // \u8fd4\u56de\u503c\uff1atrue-\u6210\u529f\uff1bfalse-\u5931\u8d25\u3002\n    bool mkdir(const string &amp;remotedir);\n\n    // \u5220\u9664ftp\u670d\u52a1\u5668\u4e0a\u7684\u76ee\u5f55\u3002\n    // remotedir\uff1aftp\u670d\u52a1\u5668\u4e0a\u5f85\u5220\u9664\u7684\u76ee\u5f55\u540d\u3002\n    // \u8fd4\u56de\u503c\uff1atrue-\u6210\u529f\uff1b\u5982\u679c\u6743\u9650\u4e0d\u8db3\u3001\u76ee\u5f55\u4e0d\u5b58\u5728\u6216\u76ee\u5f55\u4e0d\u4e3a\u7a7a\u4f1a\u8fd4\u56defalse\u3002\n    bool rmdir(const string &amp;remotedir);\n\n    // \u53d1\u9001NLST\u547d\u4ee4\u5217\u51faftp\u670d\u52a1\u5668\u76ee\u5f55\u4e2d\u7684\u5b50\u76ee\u5f55\u540d\u548c\u6587\u4ef6\u540d\u3002\n    // remotedir\uff1aftp\u670d\u52a1\u5668\u7684\u76ee\u5f55\u540d\u3002\n    // listfilename\uff1a\u7528\u4e8e\u4fdd\u5b58\u4ece\u670d\u52a1\u5668\u8fd4\u56de\u7684\u76ee\u5f55\u548c\u6587\u4ef6\u540d\u5217\u8868\u3002\n    // \u8fd4\u56de\u503c\uff1atrue-\u6210\u529f\uff1bfalse-\u5931\u8d25\u3002\n    // \u6ce8\u610f\uff1a\u5982\u679c\u5217\u51fa\u7684\u662fftp\u670d\u52a1\u5668\u5f53\u524d\u76ee\u5f55\uff0cremotedir\u7528\"\",\"*\",\".\"\u90fd\u53ef\u4ee5\uff0c\u4f46\u662f\uff0c\u4e0d\u89c4\u8303\u7684ftp\u670d\u52a1\u5668\u53ef\u80fd\u6709\u5dee\u522b\u3002\n    bool nlist(const string &amp;remotedir,const string &amp;listfilename);\n\n    // \u4eceftp\u670d\u52a1\u5668\u4e0a\u83b7\u53d6\u6587\u4ef6\u3002\n    // remotefilename\uff1a\u5f85\u83b7\u53d6ftp\u670d\u52a1\u5668\u4e0a\u7684\u6587\u4ef6\u540d\u3002\n    // localfilename\uff1a\u4fdd\u5b58\u5230\u672c\u5730\u7684\u6587\u4ef6\u540d\u3002\n    // bcheckmtime\uff1a\u6587\u4ef6\u4f20\u8f93\u5b8c\u6210\u540e\uff0c\u662f\u5426\u6838\u5bf9\u8fdc\u7a0b\u6587\u4ef6\u4f20\u8f93\u524d\u540e\u7684\u65f6\u95f4\uff0c\u4fdd\u8bc1\u6587\u4ef6\u7684\u5b8c\u6574\u6027\u3002\n    // \u8fd4\u56de\u503c\uff1atrue-\u6210\u529f\uff1bfalse-\u5931\u8d25\u3002\n    // \u6ce8\u610f\uff1a\u6587\u4ef6\u5728\u4f20\u8f93\u7684\u8fc7\u7a0b\u4e2d\uff0c\u91c7\u7528\u4e34\u65f6\u6587\u4ef6\u547d\u540d\u7684\u65b9\u6cd5\uff0c\u5373\u5728localfilename\u540e\u52a0\".tmp\"\uff0c\u5728\u4f20\u8f93\n    // \u5b8c\u6210\u540e\u624d\u6b63\u5f0f\u6539\u4e3alocalfilename\u3002\n    bool get(const string &amp;remotefilename,const string &amp;localfilename,const bool bcheckmtime=true);\n\n    // \u5411ftp\u670d\u52a1\u5668\u53d1\u9001\u6587\u4ef6\u3002\n    // localfilename\uff1a\u672c\u5730\u5f85\u53d1\u9001\u7684\u6587\u4ef6\u540d\u3002\n    // remotefilename\uff1a\u53d1\u9001\u5230ftp\u670d\u52a1\u5668\u4e0a\u7684\u6587\u4ef6\u540d\u3002\n    // bchecksize\uff1a\u6587\u4ef6\u4f20\u8f93\u5b8c\u6210\u540e\uff0c\u662f\u5426\u6838\u5bf9\u672c\u5730\u6587\u4ef6\u548c\u8fdc\u7a0b\u6587\u4ef6\u7684\u5927\u5c0f\uff0c\u4fdd\u8bc1\u6587\u4ef6\u7684\u5b8c\u6574\u6027\u3002\n    // \u8fd4\u56de\u503c\uff1atrue-\u6210\u529f\uff1bfalse-\u5931\u8d25\u3002\n    // \u6ce8\u610f\uff1a\u6587\u4ef6\u5728\u4f20\u8f93\u7684\u8fc7\u7a0b\u4e2d\uff0c\u91c7\u7528\u4e34\u65f6\u6587\u4ef6\u547d\u540d\u7684\u65b9\u6cd5\uff0c\u5373\u5728remotefilename\u540e\u52a0\".tmp\"\uff0c\u5728\u4f20\u8f93\n    // \u5b8c\u6210\u540e\u624d\u6b63\u5f0f\u6539\u4e3aremotefilename\u3002\n    bool put(const string &amp;localfilename,const string &amp;remotefilename,const bool bchecksize=true);\n\n    // \u5220\u9664ftp\u670d\u52a1\u5668\u4e0a\u7684\u6587\u4ef6\u3002\n    // remotefilename\uff1a\u5f85\u5220\u9664\u7684ftp\u670d\u52a1\u5668\u4e0a\u7684\u6587\u4ef6\u540d\u3002\n    // \u8fd4\u56de\u503c\uff1atrue-\u6210\u529f\uff1bfalse-\u5931\u8d25\u3002\n    bool ftpdelete(const string &amp;remotefilename);\n\n    // \u91cd\u547d\u540dftp\u670d\u52a1\u5668\u4e0a\u7684\u6587\u4ef6\u3002\n    // srcremotefilename\uff1aftp\u670d\u52a1\u5668\u4e0a\u7684\u539f\u6587\u4ef6\u540d\u3002\n    // dstremotefilename\uff1aftp\u670d\u52a1\u5668\u4e0a\u7684\u76ee\u6807\u6587\u4ef6\u540d\u3002\n    // \u8fd4\u56de\u503c\uff1atrue-\u6210\u529f\uff1bfalse-\u5931\u8d25\u3002\n    bool ftprename(const string &amp;srcremotefilename,const string &amp;dstremotefilename);\n\n    // \u5411ftp\u670d\u52a1\u5668\u53d1\u9001site\u547d\u4ee4\u3002\n    // command\uff1a\u547d\u4ee4\u7684\u5185\u5bb9\u3002\n    // \u8fd4\u56de\u503c\uff1atrue-\u6210\u529f\uff1bfalse-\u5931\u8d25\u3002\n    bool site(const string &amp;command);\n\n    // \u83b7\u53d6\u670d\u52a1\u5668\u8fd4\u56de\u4fe1\u606f\u7684\u6700\u540e\u4e00\u6761(return a pointer to the last response received)\u3002\n    char *response();\n};\n\n} // end namespace idc\n#endif\n</code></pre>"},{"location":"Project/Backend%20server/ADF/Transmission/Ftp/Encapsulate/#_ftpcpp","title":"_ftp.cpp","text":"<pre><code>/****************************************************************************************/\n/*   \u7a0b\u5e8f\u540d\uff1a_ftp.cpp\uff0c\u6b64\u7a0b\u5e8f\u662f\u5f00\u53d1\u6846\u67b6\u7684ftp\u5ba2\u6237\u7aef\u5de5\u5177\u7684\u7c7b\u7684\u5b9a\u4e49\u6587\u4ef6\u3002                  */\n/*   \u4f5c\u8005\uff1a\u5434\u4ece\u5468 \n/****************************************************************************************/\n\n#include \"_ftp.h\"\n\nnamespace idc\n{\n\ncftpclient::cftpclient()\n{\n    m_ftpconn=0;\n\n    initdata();\n\n    FtpInit();\n\n    m_connectfailed=false;\n    m_loginfailed=false;\n    m_optionfailed=false;\n}\n\ncftpclient::~cftpclient()\n{\n    logout();\n}\n\nvoid cftpclient::initdata()\n{\n    m_size=0;\n\n    m_mtime.clear();\n}\n\nbool cftpclient::login(const string &amp;host,const string &amp;username,const string &amp;password,const int imode)\n{\n    if (m_ftpconn != 0) { FtpQuit(m_ftpconn); m_ftpconn=0; }\n\n    m_connectfailed=m_loginfailed=m_optionfailed=false;\n\n    if (FtpConnect(host.c_str(),&amp;m_ftpconn) == false)  { m_connectfailed=true; return false; }\n\n    if (FtpLogin(username.c_str(),password.c_str(),m_ftpconn) == false)  { m_loginfailed=true; return false; }\n\n    if (FtpOptions(FTPLIB_CONNMODE,(long)imode,m_ftpconn) == false) { m_optionfailed=true; return false; }\n\n    return true;\n}\n\nbool cftpclient::logout()\n{\n    if (m_ftpconn == 0) return false;\n\n    FtpQuit(m_ftpconn);\n\n    m_ftpconn=0;\n\n    return true;\n}\n\nbool cftpclient::get(const string &amp;remotefilename,const string &amp;localfilename,const bool bcheckmtime)\n{\n    if (m_ftpconn == 0) return false;\n\n    // \u521b\u5efa\u672c\u5730\u6587\u4ef6\u76ee\u5f55\u3002\n    newdir(localfilename);\n\n    // \u751f\u6210\u672c\u5730\u6587\u4ef6\u7684\u4e34\u65f6\u6587\u4ef6\u540d\u3002\n    string strlocalfilenametmp=localfilename+\".tmp\";\n\n    // \u83b7\u53d6\u8fdc\u7a0b\u670d\u52a1\u5668\u7684\u6587\u4ef6\u7684\u65f6\u95f4\u3002\n    if (mtime(remotefilename) == false) return false;\n\n    // \u53d6\u6587\u4ef6\u3002\n    if (FtpGet(strlocalfilenametmp.c_str(),remotefilename.c_str(),FTPLIB_IMAGE,m_ftpconn) == false) return false;\n\n    // \u5224\u65ad\u6587\u4ef6\u4e0b\u8f7d\u524d\u548c\u4e0b\u8f7d\u540e\u7684\u65f6\u95f4\uff0c\u5982\u679c\u65f6\u95f4\u4e0d\u540c\uff0c\u8868\u793a\u5728\u6587\u4ef6\u4f20\u8f93\u7684\u8fc7\u7a0b\u4e2d\u5df2\u53d1\u751f\u4e86\u53d8\u5316\uff0c\u8fd4\u56de\u5931\u8d25\u3002\n    if (bcheckmtime==true)\n    {\n        string strmtime=m_mtime;\n\n        if (mtime(remotefilename) == false) return false;\n\n        if (m_mtime!=strmtime) return false;\n    }\n\n    // \u91cd\u7f6e\u6587\u4ef6\u65f6\u95f4\u3002\n    setmtime(strlocalfilenametmp,m_mtime);\n\n    // \u6539\u4e3a\u6b63\u5f0f\u7684\u6587\u4ef6\u3002\n    if (rename(strlocalfilenametmp.c_str(),localfilename.c_str()) != 0) return false; \n\n    // \u83b7\u53d6\u6587\u4ef6\u7684\u5927\u5c0f\u3002\n    m_size=filesize(localfilename);\n\n    return true;\n}\n\nbool cftpclient::mtime(const string &amp;remotefilename)\n{\n    if (m_ftpconn == 0) return false;\n\n    m_mtime.clear();\n\n    string strmtime;\n    strmtime.resize(14);\n\n    if (FtpModDate(remotefilename.c_str(),&amp;strmtime[0],14,m_ftpconn) == false) return false;\n\n    // \u628aUTC\u65f6\u95f4\u8f6c\u6362\u4e3a\u672c\u5730\u65f6\u95f4\u3002\n    addtime(strmtime,m_mtime,0+8*60*60,\"yyyymmddhh24miss\");\n\n    return true;\n}\n\nbool cftpclient::size(const string &amp;remotefilename)\n{\n    if (m_ftpconn == 0) return false;\n\n    m_size=0;\n\n    if (FtpSize(remotefilename.c_str(),&amp;m_size,FTPLIB_IMAGE,m_ftpconn) == false) return false;\n\n    return true;\n}\n\nbool cftpclient::chdir(const string &amp;remotedir)\n{\n    if (m_ftpconn == 0) return false;\n\n    if (FtpChdir(remotedir.c_str(),m_ftpconn) == false) return false;\n\n    return true;\n}\n\nbool cftpclient::mkdir(const string &amp;remotedir)\n{\n    if (m_ftpconn == 0) return false;\n\n    if (FtpMkdir(remotedir.c_str(),m_ftpconn) == false) return false;\n\n    return true;\n}\n\nbool cftpclient::rmdir(const string &amp;remotedir)\n{\n    if (m_ftpconn == 0) return false;\n\n    if (FtpRmdir(remotedir.c_str(),m_ftpconn) == false) return false;\n\n    return true;\n}\n\nbool cftpclient::nlist(const string &amp;remotedir,const string &amp;listfilename)\n{\n    if (m_ftpconn == 0) return false;\n\n    newdir(listfilename.c_str()); // \u521b\u5efa\u672c\u5730list\u6587\u4ef6\u76ee\u5f55\n\n    if (FtpNlst(listfilename.c_str(),remotedir.c_str(),m_ftpconn) == false) return false;\n\n    return true;\n}\n\nbool cftpclient::put(const string &amp;localfilename,const string &amp;remotefilename,const bool bchecksize)\n{\n    if (m_ftpconn == 0) return false;\n\n    // \u751f\u6210\u670d\u52a1\u5668\u6587\u4ef6\u7684\u4e34\u65f6\u6587\u4ef6\u540d\u3002\n    string strremotefilenametmp=remotefilename+\".tmp\";\n\n    string filetime1,filetime2;\n    filemtime(localfilename,filetime1);   // \u83b7\u53d6\u4e0a\u4f20\u6587\u4ef6\u4e4b\u524d\u7684\u65f6\u95f4\u3002\n\n    // \u53d1\u9001\u6587\u4ef6\u3002\n    if (FtpPut(localfilename.c_str(),strremotefilenametmp.c_str(),FTPLIB_IMAGE,m_ftpconn) == false) return false;\n\n    filemtime(localfilename,filetime2);   // \u83b7\u53d6\u4e0a\u4f20\u6587\u4ef6\u4e4b\u540e\u7684\u65f6\u95f4\u3002\n\n    // \u5982\u679c\u6587\u4ef6\u4e0a\u4f20\u524d\u540e\u7684\u65f6\u95f4\u4e0d\u4e00\u81f4\uff0c\u8bf4\u660e\u672c\u5730\u6709\u4fee\u6539\u6587\u4ef6\uff0c\u653e\u5f03\u672c\u6b21\u4e0a\u4f20\u3002\n    if (filetime1!=filetime2) { ftpdelete(strremotefilenametmp); return false; }\n\n    // \u91cd\u547d\u540d\u6587\u4ef6\u3002\n    if (FtpRename(strremotefilenametmp.c_str(),remotefilename.c_str(),m_ftpconn) == false) return false;\n\n    // \u5224\u65ad\u5df2\u4e0a\u4f20\u7684\u6587\u4ef6\u7684\u5927\u5c0f\u4e0e\u672c\u5730\u6587\u4ef6\u662f\u5426\u76f8\u540c\uff0c\u786e\u4fdd\u4e0a\u4f20\u6210\u529f\u3002\n    // \u4e00\u822c\u6765\u8bf4\uff0c\u4e0d\u4f1a\u51fa\u73b0\u6587\u4ef6\u5927\u5c0f\u4e0d\u4e00\u81f4\u7684\u60c5\u51b5\uff0c\u5982\u679c\u6709\uff0c\u5e94\u8be5\u662f\u670d\u52a1\u5668\u65b9\u7684\u539f\u56e0\uff0c\u4e0d\u592a\u597d\u5904\u7406\u3002\n    if (bchecksize==true)\n    {\n        if (size(remotefilename) == false) return false;\n\n        if (m_size != filesize(localfilename)) { ftpdelete(remotefilename); return false; }\n    }\n\n    return true;\n}\n\nbool cftpclient::ftpdelete(const string &amp;remotefilename)\n{\n    if (m_ftpconn == 0) return false;\n\n    if (FtpDelete(remotefilename.c_str(),m_ftpconn) == false) return false;\n\n    return true;\n}\n\nbool cftpclient::ftprename(const string &amp;srcremotefilename,const string &amp;dstremotefilename)\n{\n    if (m_ftpconn == 0) return false;\n\n    if (FtpRename(srcremotefilename.c_str(),dstremotefilename.c_str(),m_ftpconn) == false) return false;\n\n    return true;\n}\n\nbool cftpclient::site(const string &amp;command)\n{\n    if (m_ftpconn == 0) return false;\n\n    if (FtpSite(command.c_str(),m_ftpconn) == false) return false;\n\n    return true;\n}\n\nchar *cftpclient::response()\n{\n    if (m_ftpconn == 0) return 0;\n\n    return FtpLastResponse(m_ftpconn);\n}\n\n} // end namespace idc\n</code></pre>"},{"location":"Project/Backend%20server/ADF/Transmission/Ftp/Ftp/","title":"Ftp","text":""},{"location":"Project/Backend%20server/ADF/Transmission/Ftp/Ftp/#_1","title":"\u7b80\u4ecb","text":"<ul> <li>ftp\uff08File Transfer Protocol\u6587\u4ef6\u4f20\u8f93\u534f\u8bae\uff09\u662f\u57fa\u4e8eTCP/IP \u534f\u8bae\u7684\u5e94\u7528\u5c42\u534f\u8bae\uff0c\u7528\u4e8e\u6587\u4ef6\u7684\u4f20\u8f93\uff0c\u5305\u62ecftp\u670d\u52a1\u5668\uff08\u6216\u670d\u52a1\u7aef\uff09\u548cftp\u5ba2\u6237\u7aef</li> <li>ftp\u5ba2\u6237\u7aef\u4e0e\u670d\u52a1\u5668\u521b\u5efa\u7f51\u7edc\u8fde\u63a5\uff0c\u8bf7\u6c42\u767b\u5f55\u670d\u52a1\u5668\uff0c\u767b\u5f55\u6210\u529f\u540e\uff0c\u5c31\u53ef\u4ee5\u8fdb\u884c\u6587\u4ef6\u4f20\u8f93\uff0c\u4e3b\u8981\u5305\u62ec\u5f00\u8f7d\u6587\u4ef6\u548c\u4e0a\u4f20\u6587\u4ef6\u4e24\u79cd\u64cd\u4f5c</li> <li>\u9002\u7528\u4e8e\u5728\u5185\u90e8\u7f51\u7edc\u73af\u5883\u4e2d\u8fdb\u884c\u6587\u4ef6\u4f20\u8f93\uff0c\u7cfb\u7edf\u4e4b\u95f4</li> <li>\u6548\u7387\u4f4e\uff0c\u7b80\u5355\uff0c\u901a\u7528</li> </ul>"},{"location":"Project/Backend%20server/ADF/Transmission/Ftp/Ftp/#_2","title":"\u5b89\u88c5","text":"<ul> <li>\u5b89\u88c5ftp\u670d\u52a1\u5668<ul> <li>apt -y install vsftpd</li> </ul> </li> <li>\u5b89\u88c5ftp\u5ba2\u6237\u7aef<ul> <li>apt -y install ftp</li> </ul> </li> </ul>"},{"location":"Project/Backend%20server/ADF/Transmission/Ftp/Ftp/#ftp_1","title":"\u914d\u7f6eftp\u670d\u52a1\u5668","text":"<ul> <li> <p>tp\u7684\u4f20\u8f93\u6a21\u5f0f\u6709\u88ab\u52a8\u6a21\u5f0f\u548c\u4e3b\u52a8\u6a21\u5f0f\u4e24\u79cd\uff0c\u7f3a\u7701\u662f\u88ab\u52a8\u6a21\u5f0f\uff0c\u4e3b\u52a8\u6a21\u5f0f\u7684\u5e94\u7528\u573a\u666f\u6781\u5c11</p> </li> <li> <p>\u5173\u95edSELINUX</p> <ul> <li>\u4fee\u6539/etc/selinux/config\u6587\u4ef6\uff0c\u628aSELINUX\u53c2\u6570\u7684\u503c\u6539\u4e3adisabled</li> <li>SELINUX =disabled</li> <li>\u91cd\u542flinux\u7cfb\u7edf\u6216\u6267\u884c setenforce 0 \u4f7f\u4fee\u6539\u9a6c\u4e0a\u751f\u6548</li> </ul> </li> <li> <p>\u914d\u7f6eftp\u6570\u636e\u7aef\u53e3\u53c2\u6570</p> <ul> <li>tp\u7684\u6570\u636e\u7aef\u53e3\u4e5f\u79f0\u4e3a\u9ad8\u7aef\u53e3\uff0c\u5728/etc/vsftpd/vsftpd.conf\u6587\u4ef6\u4e2d\u914d\u7f6e\uff0c\u7531pasv_min_port\u548cpasv_max_port\u4e24\u4e2a\u53c2\u6570\u6307\u5b9a\uff0c\u5982\u679c\u6587\u4ef6\u4e2d\u6ca1\u6709\u8fd9\u4e24\u4e2a\u53c2\u6570\uff0c\u624b\u5de5\u7684\u52a0\u8fdb\u53bb</li> <li>pasv_min_port=5000   # \u9ad8\u7aef\u53e3\u8303\u56f4\u7684\u6700\u5c0f\u503c</li> <li>pasv_max_port=5500   # \u9ad8\u7aef\u53e3\u8303\u56f4\u7684\u6700\u5927\u503c</li> <li>pasv_address=129.146.16.141</li> </ul> </li> <li> <p>\u5f00\u901a\u9632\u706b\u5899</p> </li> <li>\u5f00\u901a\u9632\u706b\u5899\u7684\u65b9\u6cd5\u6709\u4e24\u79cd\uff1a<ul> <li>\u5f00\u901aftp\u670d\u52a1 firewall-cmd --zone=public --add-service=ftp --permanent</li> <li>\u5f00\u901aftp\u670d\u52a1\u9700\u8981\u7684\u7aef\u53e3\uff0c21\u662f\u63a7\u5236\u7aef\u53e3\uff0c5000-5500\u662f\u6570\u636e\u7aef\u53e3\u8303\u56f4\uff0c\u4e5f\u5c31\u662f\u4e0a\u4e00\u8282\u4e2d\u5728/etc/vsftpd/vsftpd.conf\u6587\u4ef6\u4e2d\u914d\u7f6e\u7684pasv_min_port\u548cpasv_max_port\u53c2\u6570\u3002<ul> <li>firewall-cmd --zone=public --add-port=21/tcp --permanent</li> <li>firewall-cmd --zone=public --add-port=5000-5500/tcp --permanent</li> </ul> </li> </ul> </li> <li> <p>\u91cd\u542f\u9632\u706b\u5899\uff1a</p> <ul> <li>systemctl restart firewalld.service</li> </ul> </li> <li> <p>\u8bbe\u7f6e\u88ab\u52a8\u6a21\u5f0f\u7684\u5916\u90e8IP\u5730\u5740:</p> <ul> <li>\u5982\u679c\u670d\u52a1\u5668\u5728NAT\u6216\u9632\u706b\u5899\u540e\u9762\uff0c\u8bbe\u7f6e\u5916\u90e8\u53ef\u8bbf\u95ee\u7684IP\u5730\u5740\uff1a</li> <li><code>pasv_address=\u60a8\u7684\u5916\u90e8IP\u5730\u5740</code></li> </ul> </li> </ul>"},{"location":"Project/Backend%20server/ADF/Transmission/Ftp/Ftp/#vsftpd","title":"\u542f\u52a8vsftpd\u670d\u52a1","text":"<ul> <li> <p>ftp\u670d\u52a1\u5668\u7684\u670d\u52a1\u540d\u662fvsftpd\uff0c\u76f8\u5173\u7684\u64cd\u4f5c\u5982\u4e0b\uff1a</p> <pre><code>systemctl start    vsftpd   # \u542f\u52a8\u670d\u52a1\u3002\nsystemctl stop    vsftpd    # \u505c\u6b62\u670d\u52a1\u3002\nsystemctl restart vsftpd    # \u91cd\u542f\u670d\u52a1\u3002\nsystemctl status  vsftpd    # \u67e5\u770b\u670d\u52a1\u72b6\u6001\u3002\nsystemctl enable  vsftpd    # \u542f\u7528\u5f00\u673a\u81ea\u542f\u52a8vsftpd\u670d\u52a1\u3002\nsystemctl disable vsftpd    # \u7981\u7528\u5f00\u673a\u81ea\u542f\u52a8vsftpd\u670d\u52a1\u3002\n</code></pre> </li> </ul>"},{"location":"Project/Backend%20server/ADF/Transmission/Ftp/Ftp/#_3","title":"\u4e91\u5e73\u53f0\u8bbf\u95ee\u7b56\u7565\u914d\u7f6e","text":"<ul> <li>\u5982\u679c\u662f\u4e91\u670d\u52a1\u5668\u4e0a\uff0c\u9700\u8981\u767b\u5f55\u4e91\u670d\u52a1\u5668\u63d0\u4f9b\u5546\u7684\u7ba1\u7406\u5e73\u53f0\u5f00\u901a\u8bbf\u95ee\u7b56\u7565\uff08\u6216\u5b89\u5168\u7ec4\uff09\uff0c\u5f00\u901a21\u548c\u9ad8\u7aef\u53e3\u7684\u8bbf\u95ee\u7b56\u7565\u3002</li> <li>\u4e0d\u540c\u4e91\u670d\u52a1\u5668\u63d0\u4f9b\u5546\u7684\u7ba1\u7406\u5e73\u53f0\u64cd\u4f5c\u65b9\u6cd5\u4e0d\u540c\uff0c\u5177\u4f53\u64cd\u4f5c\u65b9\u6cd5\u9605\u8bfb\u64cd\u4f5c\u624b\u518c\u3001\u6216\u8005\u767e\u5ea6\uff0c\u6216\u8005\u54a8\u8be2\u4e91\u670d\u52a1\u5668\u63d0\u4f9b\u5546\u7684\u5ba2\u670d\u3002</li> <li>\u5982\u679c\u4e0d\u662f\u4e0a\u8ff0\u7684\u95ee\u9898\uff0c\u4e91\u670d\u52a1\u5668\u7684ftp\u670d\u52a1\u8fd8\u4e0d\u80fd\u5efa\u7acb\u6570\u636e\u4f1a\u8bdd\uff0c\u89e3\u51b3\u7684\u65b9\u6cd5\u662f\u5173\u95edPASV\u6a21\u5f0f\u7684\u5b89\u5168\u68c0\u67e5\uff0c\u5728/etc/vsftpd/vsftpd.conf\u4e2d\u589e\u52a0\u4ee5\u4e0b\u884c\u3002<ul> <li>pasv_promiscuous=yes</li> </ul> </li> </ul>"},{"location":"Project/Backend%20server/ADF/Transmission/Ftp/Ftp/#ftp_2","title":"Ftp\u4e24\u79cd\u6a21\u5f0f","text":"<ul> <li> <p>\u5206\u522b\u662fport\u6a21\u5f0f\uff08\u4e3b\u52a8\u6a21\u5f0f\uff09\u548cpasv\u6a21\u5f0f\uff08\u88ab\u52a8\u6a21\u5f0f\uff09</p> </li> <li> <p>\u4e3b\u52a8\u6a21\u5f0f</p> <ul> <li>\u5ba2\u6237\u7aef\u7ed9\u670d\u52a1\u7aef\u768421\u7aef\u53e3\u53d1\u547d\u4ee4\u8bf4\uff1a\u6211\u8981\u8f93\u4f20\u6587\u4ef6\uff0c\u6211\u5df2\u7ecf\u6253\u5f00\u4e86\u81ea\u5df1\u768420\u7aef\u53e3\uff0c\u4f60\u5411\u6211\u768420\u7aef\u53e3\u53d1\u8d77TCP\u8fde\u63a5\uff0c\u6211\u4eec\u6765\u4f20\u8f93\u6587\u4ef6</li> <li>\u670d\u52a1\u7aef\u6536\u5230\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\u540e\uff0c\u5c31\u4f1a\u4e3b\u52a8\u5411\u5ba2\u6237\u7aef\u768420\u7aef\u53e3\u53d1\u8d77\u8fde\u63a5\uff0c\u8fde\u63a5\u6210\u529f\u540e\u5f00\u59cb\u4f20\u8f93\u6587\u4ef6</li> </ul> <p></p> <ul> <li>\u5728\u4e3b\u52a8\u6a21\u5f0f\u4e0b\uff0cftp\u8bf7\u6c42\u662f\u7531\u5ba2\u6237\u7aefTCP\u8fde\u63a5\u7684\uff1b\u4f20\u8f93\u6570\u636e\u7684\u65f6\u5019\uff0cTCP\u8fde\u63a5\u5374\u662f\u7531\u670d\u52a1\u7aef\u53d1\u8d77\u7684</li> </ul> </li> <li> <p>\u88ab\u52a8\u6a21\u5f0f</p> <ul> <li>\u5ba2\u6237\u7aef\u7ed9\u670d\u52a1\u5668\u7aef\u768421\u7aef\u53e3\u53d1\u547d\u4ee4\u8bf4\uff1a\u6211\u8981\u4f20\u8f93\u6587\u4ef6</li> <li>\u670d\u52a1\u5668\u7aef\u6536\u5230\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\u540e\uff0c\u6253\u5f00\u4e00\u4e2a\u7a7a\u95f2\u7684\u9ad8\u7aef\u53e3\uff0c\u7136\u540e\u544a\u8bc9\u5ba2\u6237\u7aef\uff0c\u6211\u5df2\u7ecf\u6253\u5f00\u4e86\u67d0\u67d0\u7aef\u53e3\uff0c\u4f60\u5411\u6211\u8fd9\u4e2a\u7aef\u53e3\u53d1\u8d77TCP\u8fde\u63a5\uff0c\u7136\u540e\u6211\u4eec\u7528\u8fd9\u4e2a\u7aef\u53e3\u6765\u4f20\u8f93\u6587\u4ef6</li> </ul> <p></p> </li> </ul>"},{"location":"Project/Backend%20server/ADF/Transmission/Ftp/FtpCom/","title":"Ftp\u547d\u4ee4\u8be6\u89e3","text":""},{"location":"Project/Backend%20server/ADF/Transmission/Ftp/FtpCom/#ftp_1","title":"\u5b89\u88c5Ftp\u5ba2\u6237\u7aef","text":"<pre><code>apt -y install ftp\n</code></pre>"},{"location":"Project/Backend%20server/ADF/Transmission/Ftp/FtpCom/#ftp_2","title":"Ftp\u7684\u7528\u6237","text":"<ul> <li>\u7f3a\u7701\u60c5\u51b5\u4e0b\uff0cftp\u670d\u52a1\u5668\u64cd\u4f5c\u7cfb\u7edf\u7528\u6237\u540d/\u5bc6\u7801\u4e5f\u662fftp\u5ba2\u6237\u7aef\u767b\u5f55\u7684\u7528\u6237\u540d/\u5bc6\u7801\u3002root\u7528\u6237\u7684\u6743\u9650\u8fc7\u5927\uff0c\u4e0d\u5141\u8bb8\u767b\u5f55ftp\u670d\u52a1\u5668</li> <li>\u521b\u5efa\u7ec4\uff1agroupadd \u7ec4\u540d</li> <li>\u521b\u5efa\u7528\u6237\uff1auseradd -m \u7528\u6237\u540d -g \u7ec4\u540d -d \u7528\u6237\u7684\u4e3b\u76ee\u5f55</li> <li>passwd \u7528\u6237\u540d</li> <li>chown -R \u7528\u6237:\u7ec4 \u76ee\u5f55\u548c\u6587\u4ef6\u5217\u8868</li> </ul>"},{"location":"Project/Backend%20server/ADF/Transmission/Ftp/FtpCom/#_1","title":"\u767b\u5f55\u670d\u52a1\u5668","text":"<ul> <li>\u65b9\u6cd5\u4e00\uff1a\u8f93\u5165ftp \u670d\u52a1\u5668ip\u5730\u5740\uff0c\u56de\u8f66\u540e\u6839\u636e\u63d0\u793a\u8f93\u5165\u7528\u6237\u540d\u548c\u5bc6\u7801</li> <li>\u65b9\u6cd5\u4e8c\uff1a\u8f93\u5165ftp\uff0c\u7528open \u670d\u52a1\u5668ip\u5730\u5740\uff0c\u8fde\u4e0a\u670d\u52a1\u5668\u540e\u518d\u8f93\u5165\u7528\u6237\u540d\u548c\u5bc6\u7801</li> <li>\u65b9\u6cd5\u4e09\uff1a\u8f93\u5165ftp -n \u670d\u52a1\u5668ip\u5730\u5740\uff0c\u518d\u8f93\u5165user \u7528\u6237\u540d \u5bc6\u7801\u767b\u5f55</li> </ul>"},{"location":"Project/Backend%20server/ADF/Transmission/Ftp/FtpCom/#_2","title":"\u5207\u6362\u5de5\u4f5c\u76ee\u5f55","text":"<ul> <li> <p>\u6ce8\u610f\uff0c\u5982\u679c\u76ee\u5f55\u540d\u4e2d\u6709\u7279\u6b8a\u7b26\u53f7\uff0c\u5982\u7a7a\u683c\uff0c\u53ef\u4ee5\u7528\u53cc\u5f15\u53f7\u628a\u76ee\u5f55\u540d\u5305\u542b\u8d77\u6765</p> </li> <li> <p>\u67e5\u770b\u5de5\u4f5c\u76ee\u5f55</p> <ul> <li>\u672c\u5730\uff1a lpwd</li> <li>\u670d\u52a1\u5668\uff1apwd</li> </ul> </li> <li> <p>\u5207\u6362\u5de5\u4f5c\u76ee\u5f55</p> <ul> <li>\u672c\u5730\uff1a  lcd \u76ee\u5f55\u540d</li> <li>\u670d\u52a1\u5668: cd \u76ee\u5f55\u540d</li> </ul> </li> <li> <p>\u663e\u793a\u76ee\u5f55\u4e0b\u6587\u4ef6</p> <ul> <li>\u672c\u5730\uff1a   !ls</li> <li>\u670d\u52a1\u5668\uff1a ls</li> </ul> </li> <li> <p>\u4ec5\u5217\u51fa\u76ee\u5f55\u548c\u6587\u4ef6\u540d</p> <ul> <li>nlist \u76ee\u5f55\u6216\u6587\u4ef6\u540d [\u672c\u5730\u6587\u4ef6\u540d] </li> <li>\u5217\u51fa/freecplus\u76ee\u5f55\u4e0b\u7684\u5339\u914d*.h\u7684\u6587\u4ef6\u540d\u4fe1\u606f<ul> <li>nlist /freecplus/*.h</li> </ul> </li> <li>\u5217\u51fa/freecplus\u76ee\u5f55\u4e0b\u7684\u5339\u914d*.h\u7684\u6587\u4ef6\u540d\u4fe1\u606f\uff0c\u7ed3\u679c\u8f93\u51fa\u5230\u672c\u5730\u7684/tmp/freecplus.list\u6587\u4ef6\u4e2d<ul> <li>nlist /freecplus/*.h /tmp/freecplus.list</li> </ul> </li> </ul> </li> </ul>"},{"location":"Project/Backend%20server/ADF/Transmission/Ftp/FtpCom/#_3","title":"\u4e0b\u8f7d/\u4e0a\u4f20\u6587\u4ef6","text":"<ol> <li> <p>\u6587\u4ef6\u4f20\u8f93\u7684\u6a21\u5f0f</p> <ul> <li>ftp\u4f20\u8f93\u6587\u4ef6\u7684\u6a21\u5f0f\u5206\u4e8c\u8fdb\u5236\u548cASCII\u7801\u4e24\u79cd\u6a21\u5f0f</li> <li>\u4e8c\u8fdb\u5236\u6a21\u5f0f\u53ef\u4ee5\u4f20\u8f93\u4efb\u4f55\u6587\u4ef6\uff0c\u5305\u62ec\u538b\u7f29\u5305\u3001\u53ef\u6267\u884c\u7a0b\u5e8f\u3001\u56fe\u7247\u3001\u89c6\u9891\u3001\u97f3\u9891\u7b49</li> <li>ASCII\u6a21\u5f0f\u53ea\u80fd\u4f20\u8f93.txt\u3001.htm\u7b49ascii\u7801\u6587\u4ef6\uff08\u6587\u672c\u6587\u4ef6\uff09</li> <li>\u5728\u5b9e\u9645\u5f00\u53d1\u4e2d\uff0c\u4e0d\u7ba1\u4ec0\u4e48\u6587\u4ef6\uff0c\u90fd\u7528\u4e8c\u8fdb\u5236\u65b9\u5f0f\u4f20\u8f93</li> <li>\u67e5\u770b\u5f53\u524d\u7684\u4f20\u8f93\u6a21\u5f0f<ul> <li>type</li> </ul> </li> <li>\u8bbe\u5b9a\u4f20\u8f93\u6a21\u5f0f\u4e3a\u4e8c\u8fdb\u5236<ul> <li>bin</li> </ul> </li> <li>\u8bbe\u5b9a\u4f20\u8f93\u6a21\u5f0f\u4e3aASCII<ul> <li>ascii</li> </ul> </li> </ul> </li> <li> <p>\u4e0b\u8f7d\u6587\u4ef6</p> <ul> <li>\u4e0b\u8f7d\u5355\u4e2a\u6587\u4ef6  <ul> <li><code>get|recv \u670d\u52a1\u7aef\u6587\u4ef6\u540d [\u672c\u5730\u6587\u4ef6\u540d]</code></li> </ul> </li> <li> <p>\u4f7f\u7528\u8bf4\u660e:</p> <ul> <li>\u4e0b\u8f7d\u6587\u4ef6\u7528get\u548crecv\u90fd\u53ef\u4ee5</li> <li>\u6587\u4ef6\u540d\u4e0d\u5141\u8bb8\u7528\u201c*\u201d\u3001\u201d?\u201d\u7b49\u901a\u914d\u7b26</li> <li>\u670d\u52a1\u7aef\u6587\u4ef6\u540d\u548c\u672c\u5730\u6587\u4ef6\u540d\u53ef\u4ee5\u7528\u7edd\u5bf9\u8def\u5f84\uff0c\u5982\u679c\u4e0d\u5199\u8def\u5f84\uff0c\u8868\u793a\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55</li> <li>\u5982\u679c\u672c\u5730\u6587\u4ef6\u540d\u7701\u7565\u4e0d\u5199\uff0c\u8868\u793a\u628a\u670d\u52a1\u7aef\u6587\u4ef6\u4e0b\u8f7d\u5230\u672c\u5730\u7684\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\uff0c\u6587\u4ef6\u540d\u4e0e\u670d\u52a1\u7aef\u6587\u4ef6\u540d\u76f8\u540c</li> </ul> </li> <li> <p>\u4e0b\u8f7d\u591a\u4e2a\u6587\u4ef6  </p> <ul> <li><code>mget \u670d\u52a1\u7aef\u6587\u4ef61 \u670d\u52a1\u7aef\u6587\u4ef62 \u670d\u52a1\u7aef\u6587\u4ef63 \u2026\u2026 \u670d\u52a1\u7aef\u6587\u4ef6n</code></li> </ul> </li> <li> <p>\u4f7f\u7528\u8bf4\u660e\uff1a</p> <ul> <li>\u5f85\u4e0b\u8f7d\u7684\u6587\u4ef6\u540d\uff0c\u53ef\u4ee5\u4e00\u4e00\u5217\u51fa\u6765\uff08\u7528\u7a7a\u683c\u5206\u9694\uff09\uff0c\u4e5f\u53ef\u4ee5\u7528\u901a\u914d\u7b26\u3002</li> <li>\u4e0b\u8f7d\u7684\u6587\u4ef6\uff0c\u5b58\u653e\u5728\u672c\u5730\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\u4e2d\u3002</li> <li>\u4e0b\u8f7d\u6587\u4ef6\u65f6\uff0c\u4f1a\u4e00\u4e00\u63d0\u793a\uff0c\u5982\u679c\u60f3\u5173\u95ed\u63d0\u793a\u4fe1\u606f\uff0c\u5148\u8f93\u5165prompt\u547d\u4ee4\u3002</li> </ul> </li> <li> <p>\u4e0a\u4f20\u6587\u4ef6 </p> <ul> <li>\u4e0a\u4f20\u5355\u4e2a\u6587\u4ef6  <ul> <li><code>put|send \u672c\u5730\u6587\u4ef6\u540d [\u670d\u52a1\u7aef\u6587\u4ef6\u540d]</code></li> </ul> </li> <li> <p>\u4f7f\u7528\u8bf4\u660e:</p> <ul> <li>\u4e0a\u4f20\u6587\u4ef6\u7528put\u548csend\u90fd\u53ef\u4ee5\u3002</li> <li>\u6587\u4ef6\u540d\u4e0d\u5141\u8bb8\u7528\u901a\u914d\u7b26\u3002</li> <li>\u672c\u5730\u6587\u4ef6\u540d\u548c\u670d\u52a1\u7aef\u6587\u4ef6\u540d\u53ef\u4ee5\u7528\u7edd\u5bf9\u8def\u5f84\uff0c\u5982\u679c\u4e0d\u5199\u8def\u5f84\uff0c\u8868\u793a\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\u3002</li> <li>\u5982\u679c\u670d\u52a1\u7aef\u6587\u4ef6\u540d\u7701\u7565\u4e0d\u5199\uff0c\u8868\u793a\u628a\u672c\u5730\u6587\u4ef6\u4e0a\u4f20\u5230\u670d\u52a1\u7aef\u7684\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\uff0c\u6587\u4ef6\u540d\u4e0e\u672c\u5730\u6587\u4ef6\u540d\u76f8\u540c</li> </ul> </li> <li> <p>\u4e0a\u4f20\u591a\u4e2a\u6587\u4ef6</p> </li> <li>\u4f7f\u7528\u8bf4\u660e:<ul> <li>\u5f85\u4e0a\u4f20\u7684\u6587\u4ef6\u540d\uff0c\u53ef\u4ee5\u4e00\u4e00\u5217\u51fa\u6765\uff08\u7528\u7a7a\u683c\u5206\u9694\uff09\uff0c\u4e5f\u53ef\u4ee5\u7528\u901a\u914d\u7b26</li> <li>\u4e0a\u4f20\u7684\u6587\u4ef6\uff0c\u5b58\u653e\u5728\u670d\u52a1\u7aef\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55\u4e2d</li> <li>\u4e0a\u4f20\u6587\u4ef6\u65f6\uff0c\u4f1a\u4e00\u4e00\u63d0\u793a\uff0c\u5982\u679c\u60f3\u5173\u95ed\u90fd\u663e\u793a\u4fe1\u606f\uff0c\u5148\u8f93\u5165prompt\u547d\u4ee4</li> </ul> </li> </ul> </li> </ul> </li> </ol>"},{"location":"Project/Backend%20server/ADF/Transmission/Ftp/FtpCom/#ftp_3","title":"\u5176\u5b83ftp\u547d\u4ee4","text":"<ol> <li>\u91cd\u547d\u540dftp\u670d\u52a1\u7aef\u7684\u6587\u4ef6         <ul> <li><code>rename \u65e7\u6587\u4ef6\u540d \u65b0\u6587\u4ef6\u540d</code></li> </ul> </li> <li>\u5220\u9664ftp\u670d\u52a1\u7aef\u4e0a\u5355\u4e2a\u6587\u4ef6       <ul> <li><code>delete \u6587\u4ef6\u540d</code></li> </ul> </li> <li>\u5220\u9664ftp\u670d\u52a1\u7aef\u7684\u591a\u4e2a\u6587\u4ef6       <ul> <li><code>mdelete \u6587\u4ef6\u540d1 \u6587\u4ef6\u540d2 \u6587\u4ef6\u540d3 \u2026\u2026 \u6587\u4ef6\u540dn</code></li> </ul> </li> <li>\u5728ftp\u670d\u52a1\u7aef\u4e0a\u521b\u5efa\u76ee\u5f55         <ul> <li><code>mkdir pathname</code></li> </ul> </li> <li>\u5220\u9664ftp\u670d\u52a1\u7aef\u4e0a\u7684\u76ee\u5f55         <ul> <li><code>rmdir pathname</code></li> </ul> </li> <li>\u5207\u6362\u4f20\u8f93\u6a21\u5f0f                 <ul> <li><code>passive</code></li> </ul> </li> <li>\u663e\u793a\u5e2e\u52a9\u4fe1\u606f                 <ul> <li><code>help [\u547d\u4ee4\u540d]</code></li> </ul> </li> <li>\u9000\u51faftp                    <ul> <li><code>bye</code></li> </ul> </li> </ol>"},{"location":"Project/Backend%20server/ADF/Transmission/Ftp/FtpCom/#ftp_4","title":"ftp\u7684\u64cd\u4f5c\u6743\u9650","text":"<ul> <li>\u5bf9\u672c\u5730\u76ee\u5f55\u548c\u6587\u4ef6\u7684\u64cd\u4f5c\u6743\u9650\uff0c\u7531\u6267\u884cftp\u547d\u4ee4\u7684\u7528\u6237\u7684\u6743\u9650\u51b3\u5b9a</li> <li>\u5bf9\u670d\u52a1\u7aef\u76ee\u5f55\u548c\u6587\u4ef6\u7684\u64cd\u4f5c\u6743\u9650\uff0c\u7531\u767b\u5f55\u7684\u7528\u6237\u7684\u6743\u9650\u51b3\u5b9a</li> </ul>"},{"location":"Project/Backend%20server/ADF/Transmission/Ftp/Open-lib/","title":"\u5f00\u6e90\u5e93","text":""},{"location":"Project/Backend%20server/ADF/Transmission/Ftp/Open-lib/#ftplibh","title":"ftplib.h","text":"<pre><code>#if !defined(__FTPLIB_H)\n#define __FTPLIB_H\n\n#if defined(__unix__) || defined(VMS)\n#define GLOBALDEF\n#define GLOBALREF extern\n#elif defined(_WIN32)\n#if defined BUILDING_LIBRARY\n#define GLOBALDEF __declspec(dllexport)\n#define GLOBALREF __declspec(dllexport)\n#else\n#define GLOBALREF __declspec(dllimport)\n#endif\n#endif\n\n#include &lt;limits.h&gt;\n#include &lt;inttypes.h&gt;\n\n/* FtpAccess() type codes */\n#define FTPLIB_DIR 1\n#define FTPLIB_DIR_VERBOSE 2\n#define FTPLIB_FILE_READ 3\n#define FTPLIB_FILE_WRITE 4\n\n/* FtpAccess() mode codes */\n#define FTPLIB_ASCII 'A'\n#define FTPLIB_IMAGE 'I'\n#define FTPLIB_TEXT FTPLIB_ASCII\n#define FTPLIB_BINARY FTPLIB_IMAGE\n\n/* connection modes */\n#define FTPLIB_PASSIVE 1\n#define FTPLIB_PORT 2\n\n/* connection option names */\n#define FTPLIB_CONNMODE 1\n#define FTPLIB_CALLBACK 2\n#define FTPLIB_IDLETIME 3\n#define FTPLIB_CALLBACKARG 4\n#define FTPLIB_CALLBACKBYTES 5\n\n#ifdef __cplusplus\nextern \"C\" {\n#endif\n\n#if defined(__UINT64_MAX)\ntypedef uint64_t fsz_t;\n#else\ntypedef uint32_t fsz_t;\n#endif\n\ntypedef struct NetBuf netbuf;\ntypedef int (*FtpCallback)(netbuf *nControl, fsz_t xfered, void *arg);\n\ntypedef struct FtpCallbackOptions {\n    FtpCallback cbFunc;     /* function to call */\n    void *cbArg;        /* argument to pass to function */\n    unsigned int bytesXferred;  /* callback if this number of bytes transferred */\n    unsigned int idleTime;  /* callback if this many milliseconds have elapsed */\n} FtpCallbackOptions;\n\nGLOBALREF int ftplib_debug;\nGLOBALREF void FtpInit(void);\nGLOBALREF char *FtpLastResponse(netbuf *nControl);\nGLOBALREF int FtpConnect(const char *host, netbuf **nControl);\nGLOBALREF int FtpOptions(int opt, long val, netbuf *nControl);\nGLOBALREF int FtpSetCallback(const FtpCallbackOptions *opt, netbuf *nControl);\nGLOBALREF int FtpClearCallback(netbuf *nControl);\nGLOBALREF int FtpLogin(const char *user, const char *pass, netbuf *nControl);\nGLOBALREF int FtpAccess(const char *path, int typ, int mode, netbuf *nControl,\n    netbuf **nData);\nGLOBALREF int FtpRead(void *buf, int max, netbuf *nData);\nGLOBALREF int FtpWrite(const void *buf, int len, netbuf *nData);\nGLOBALREF int FtpClose(netbuf *nData);\nGLOBALREF int FtpSite(const char *cmd, netbuf *nControl);\nGLOBALREF int FtpSysType(char *buf, int max, netbuf *nControl);\nGLOBALREF int FtpMkdir(const char *path, netbuf *nControl);\nGLOBALREF int FtpChdir(const char *path, netbuf *nControl);\nGLOBALREF int FtpCDUp(netbuf *nControl);\nGLOBALREF int FtpRmdir(const char *path, netbuf *nControl);\nGLOBALREF int FtpPwd(char *path, int max, netbuf *nControl);\nGLOBALREF int FtpNlst(const char *output, const char *path, netbuf *nControl);\nGLOBALREF int FtpDir(const char *output, const char *path, netbuf *nControl);\nGLOBALREF int FtpSize(const char *path, unsigned int *size, char mode, netbuf *nControl);\n#if defined(__UINT64_MAX)\nGLOBALREF int FtpSizeLong(const char *path, fsz_t *size, char mode, netbuf *nControl);\n#endif\nGLOBALREF int FtpModDate(const char *path, char *dt, int max, netbuf *nControl);\nGLOBALREF int FtpGet(const char *output, const char *path, char mode,\n    netbuf *nControl);\nGLOBALREF int FtpPut(const char *input, const char *path, char mode,\n    netbuf *nControl);\nGLOBALREF int FtpRename(const char *src, const char *dst, netbuf *nControl);\nGLOBALREF int FtpDelete(const char *fnm, netbuf *nControl);\nGLOBALREF void FtpQuit(netbuf *nControl);\n\n#ifdef __cplusplus\n};\n#endif\n\n#endif /* __FTPLIB_H */\n</code></pre>"},{"location":"Project/Backend%20server/ADF/Transmission/Ftp/Open-lib/#ftplibc","title":"ftplib.c","text":"<pre><code>#if defined(__unix__) || defined(__VMS)\n#include &lt;unistd.h&gt;\n#endif\n#if defined(_WIN32)\n#include &lt;windows.h&gt;\n#endif\n#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;errno.h&gt;\n#include &lt;ctype.h&gt;\n#if defined(__unix__)\n#include &lt;sys/time.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;sys/socket.h&gt;\n#include &lt;netinet/in.h&gt;\n#include &lt;netdb.h&gt;\n#include &lt;arpa/inet.h&gt;\n#elif defined(VMS)\n#include &lt;types.h&gt;\n#include &lt;socket.h&gt;\n#include &lt;in.h&gt;\n#include &lt;netdb.h&gt;\n#include &lt;inet.h&gt;\n#elif defined(_WIN32)\n#include &lt;winsock.h&gt;\n#endif\n#if defined(__APPLE__)\n#undef _REENTRANT\n#endif\n\n#define BUILDING_LIBRARY\n#include \"ftplib.h\"\n\n#if defined(__UINT64_MAX) &amp;&amp; !defined(PRIu64)\n#if ULONG_MAX == __UINT32_MAX\n#define PRIu64 \"llu\"\n#else\n#define PRIu64 \"lu\"\n#endif\n#endif\n\n#if defined(_WIN32)\n#define SETSOCKOPT_OPTVAL_TYPE (const char *)\n#else\n#define SETSOCKOPT_OPTVAL_TYPE (void *)\n#endif\n\n#define FTPLIB_BUFSIZ 8192\n#define RESPONSE_BUFSIZ 1024\n#define TMP_BUFSIZ 1024\n#define ACCEPT_TIMEOUT 30\n\n#define FTPLIB_CONTROL 0\n#define FTPLIB_READ 1\n#define FTPLIB_WRITE 2\n\n#if !defined FTPLIB_DEFMODE\n#define FTPLIB_DEFMODE FTPLIB_PASSIVE\n#endif\n\nstruct NetBuf {\n    char *cput,*cget;\n    int handle;              // \u7528\u4e8e\u901a\u8baf\u7684socket\n    int cavail,cleft;\n    char *buf;\n    int dir;\n    netbuf *ctrl;\n    netbuf *data;    \n    int cmode;\n    struct timeval idletime;\n    FtpCallback idlecb;\n    void *idlearg;\n    unsigned long int xfered;\n    unsigned long int cbbytes;\n    unsigned long int xfered1;\n    char response[RESPONSE_BUFSIZ];\n};\n\nstatic char *version =\n    (char*)\"ftplib Release 4.0 07-Jun-2013, copyright 1996-2003, 2013 Thomas Pfau\";\n\nGLOBALDEF int ftplib_debug = 0;\n\n#if defined(__unix__) || defined(VMS)\nint net_read(int fd, char *buf, size_t len)\n{\n    while ( 1 )\n    {\n    int c = read(fd, buf, len);\n    if ( c == -1 )\n    {\n        if ( errno != EINTR &amp;&amp; errno != EAGAIN )\n        return -1;\n    }\n    else\n    {\n        return c;\n    }\n    }\n}\n\nint net_write(int fd, const char *buf, size_t len)\n{\n    int done = 0;\n    while ( len &gt; 0 )\n    {\n    int c = write( fd, buf, len );\n    if ( c == -1 )\n    {\n        if ( errno != EINTR &amp;&amp; errno != EAGAIN )\n        return -1;\n    }\n    else if ( c == 0 )\n    {\n        return done;\n    }\n    else\n    {\n        buf += c;\n        done += c;\n        len -= c;\n    }\n    }\n    return done;\n}\n#define net_close close\n#elif defined(_WIN32)\n#define net_read(x,y,z) recv(x,y,z,0)\n#define net_write(x,y,z) send(x,y,z,0)\n#define net_close closesocket\n#endif\n\n#if defined(NEED_MEMCCPY)\n/*\n * VAX C does not supply a memccpy routine so I provide my own\n */\nvoid *memccpy(void *dest, const void *src, int c, size_t n)\n{\n    int i=0;\n    const unsigned char *ip=src;\n    unsigned char *op=dest;\n\n    while (i &lt; n)\n    {\n    if ((*op++ = *ip++) == c)\n        break;\n    i++;\n    }\n    if (i == n)\n    return NULL;\n    return op;\n}\n#endif\n#if defined(NEED_STRDUP)\n/*\n * strdup - return a malloc'ed copy of a string\n */\nchar *strdup(const char *src)\n{\n    int l = strlen(src) + 1;\n    char *dst = malloc(l);\n    if (dst)\n        strcpy(dst,src);\n    return dst;\n}\n#endif\n\n/*\n * socket_wait - wait for socket to receive or flush data\n *\n * return 1 if no user callback, otherwise, return value returned by\n * user callback\n */\nstatic int socket_wait(netbuf *ctl)\n{\n    fd_set fd,*rfd = NULL,*wfd = NULL;\n    struct timeval tv;\n    int rv = 0;\n    if ((ctl-&gt;dir == FTPLIB_CONTROL) || (ctl-&gt;idlecb == NULL))\n    return 1;\n    if (ctl-&gt;dir == FTPLIB_WRITE)\n    wfd = &amp;fd;\n    else\n    rfd = &amp;fd;\n    FD_ZERO(&amp;fd);\n    do\n    {\n    FD_SET(ctl-&gt;handle,&amp;fd);\n    tv = ctl-&gt;idletime;\n    rv = select(ctl-&gt;handle+1, rfd, wfd, NULL, &amp;tv);\n    if (rv == -1)\n    {\n        rv = 0;\n        strncpy(ctl-&gt;ctrl-&gt;response, strerror(errno),\n                    sizeof(ctl-&gt;ctrl-&gt;response));\n        break;\n    }\n    else if (rv &gt; 0)\n    {\n        rv = 1;\n        break;\n    }\n    }\n    while ((rv = ctl-&gt;idlecb(ctl, ctl-&gt;xfered, ctl-&gt;idlearg)));\n    return rv;\n}\n\n/*\n * read a line of text\n *\n * return -1 on error or bytecount\n */\nstatic int readline(char *buf,int max,netbuf *ctl)\n{\n    int x,retval = 0;\n    char *end,*bp=buf;\n    int eof = 0;\n\n    if ((ctl-&gt;dir != FTPLIB_CONTROL) &amp;&amp; (ctl-&gt;dir != FTPLIB_READ))\n    return -1;\n    if (max == 0)\n    return 0;\n    do\n    {\n        if (ctl-&gt;cavail &gt; 0)\n        {\n        x = (max &gt;= ctl-&gt;cavail) ? ctl-&gt;cavail : max-1;\n        end = memccpy(bp,ctl-&gt;cget,'\\n',x);\n        if (end != NULL)\n        x = end - bp;\n        retval += x;\n        bp += x;\n        *bp = '\\0';\n        max -= x;\n        ctl-&gt;cget += x;\n        ctl-&gt;cavail -= x;\n        if (end != NULL)\n        {\n        bp -= 2;\n        if (strcmp(bp,\"\\r\\n\") == 0)\n        {\n            *bp++ = '\\n';\n            *bp++ = '\\0';\n            --retval;\n        }\n            break;\n        }\n        }\n        if (max == 1)\n        {\n        *buf = '\\0';\n        break;\n        }\n        if (ctl-&gt;cput == ctl-&gt;cget)\n        {\n        ctl-&gt;cput = ctl-&gt;cget = ctl-&gt;buf;\n        ctl-&gt;cavail = 0;\n        ctl-&gt;cleft = FTPLIB_BUFSIZ;\n        }\n    if (eof)\n    {\n        if (retval == 0)\n        retval = -1;\n        break;\n    }\n    if (!socket_wait(ctl))\n        return retval;\n        if ((x = net_read(ctl-&gt;handle,ctl-&gt;cput,ctl-&gt;cleft)) == -1)\n        {\n        if (ftplib_debug)\n        perror(\"read\");\n        retval = -1;\n        break;\n        }\n    if (x == 0)\n        eof = 1;\n        ctl-&gt;cleft -= x;\n        ctl-&gt;cavail += x;\n        ctl-&gt;cput += x;\n    }\n    while (1);\n    return retval;\n}\n\n/*\n * write lines of text\n *\n * return -1 on error or bytecount\n */\nstatic int writeline(const char *buf, int len, netbuf *nData)\n{\n    int x, nb=0, w;\n    const char *ubp = buf;\n    char *nbp;\n    char lc=0;\n\n    if (nData-&gt;dir != FTPLIB_WRITE)\n    return -1;\n    nbp = nData-&gt;buf;\n    for (x=0; x &lt; len; x++)\n    {\n    if ((*ubp == '\\n') &amp;&amp; (lc != '\\r'))\n    {\n        if (nb == FTPLIB_BUFSIZ)\n        {\n        if (!socket_wait(nData))\n            return x;\n        w = net_write(nData-&gt;handle, nbp, FTPLIB_BUFSIZ);\n        if (w != FTPLIB_BUFSIZ)\n        {\n            if (ftplib_debug)\n            printf(\"net_write(1) returned %d, errno = %d\\n\", w, errno);\n            return(-1);\n        }\n        nb = 0;\n        }\n        nbp[nb++] = '\\r';\n    }\n    if (nb == FTPLIB_BUFSIZ)\n    {\n        if (!socket_wait(nData))\n        return x;\n        w = net_write(nData-&gt;handle, nbp, FTPLIB_BUFSIZ);\n        if (w != FTPLIB_BUFSIZ)\n        {\n        if (ftplib_debug)\n            printf(\"net_write(2) returned %d, errno = %d\\n\", w, errno);\n        return(-1);\n        }\n        nb = 0;\n    }\n    nbp[nb++] = lc = *ubp++;\n    }\n    if (nb)\n    {\n    if (!socket_wait(nData))\n        return x;\n    w = net_write(nData-&gt;handle, nbp, nb);\n    if (w != nb)\n    {\n        if (ftplib_debug)\n        printf(\"net_write(3) returned %d, errno = %d\\n\", w, errno);\n        return(-1);\n    }\n    }\n    return len;\n}\n\n/*\n * read a response from the server\n *\n * return 0 if first char doesn't match\n * return 1 if first char matches\n */\nstatic int readresp(char c, netbuf *nControl)\n{\n    char match[5];\n    if (readline(nControl-&gt;response,RESPONSE_BUFSIZ,nControl) == -1)\n    {\n    if (ftplib_debug)\n        perror(\"Control socket read failed\");\n    return 0;\n    }\n    if (ftplib_debug &gt; 1)\n    fprintf(stderr,\"%s\",nControl-&gt;response);\n    if (nControl-&gt;response[3] == '-')\n    {\n    strncpy(match,nControl-&gt;response,3);\n    match[3] = ' ';\n    match[4] = '\\0';\n    do\n    {\n        if (readline(nControl-&gt;response,RESPONSE_BUFSIZ,nControl) == -1)\n        {\n        if (ftplib_debug)\n            perror(\"Control socket read failed\");\n        return 0;\n        }\n        if (ftplib_debug &gt; 1)\n        fprintf(stderr,\"%s\",nControl-&gt;response);\n    }\n    while (strncmp(nControl-&gt;response,match,4));\n    }\n    if (nControl-&gt;response[0] == c)\n    return 1;\n    return 0;\n}\n\n/*\n * FtpInit for stupid operating systems that require it (Windows NT)\n */\nGLOBALDEF void FtpInit(void)\n{\n#if defined(_WIN32)\n    WORD wVersionRequested;\n    WSADATA wsadata;\n    int err;\n    wVersionRequested = MAKEWORD(1,1);\n    if ((err = WSAStartup(wVersionRequested,&amp;wsadata)) != 0)\n    fprintf(stderr,\"Network failed to start: %d\\n\",err);\n#endif\n}\n\n/*\n * FtpLastResponse - return a pointer to the last response received\n */\nGLOBALDEF char *FtpLastResponse(netbuf *nControl)\n{\n    if ((nControl) &amp;&amp; (nControl-&gt;dir == FTPLIB_CONTROL))\n        return nControl-&gt;response;\n    return NULL;\n}\n\n/*\n * FtpConnect - connect to remote server\n *\n * return 1 if connected, 0 if not\n */\nGLOBALDEF int FtpConnect(const char *host, netbuf **nControl)\n{\n    int sControl;\n    struct sockaddr_in sin;\n    int on=1;\n    netbuf *ctrl;\n    char *lhost;\n    char *pnum;\n\n    memset(&amp;sin,0,sizeof(sin));\n    sin.sin_family = AF_INET;\n    lhost = strdup(host);\n    pnum = strchr(lhost,':');\n    if (pnum == NULL)\n    pnum = \"ftp\";\n    else\n    *pnum++ = '\\0';\n    if (isdigit(*pnum))\n    sin.sin_port = htons(atoi(pnum));\n    else\n    {\n    struct servent *pse;\n#if _REENTRANT\n    struct servent se;\n    char tmpbuf[TMP_BUFSIZ];\n    int i;\n    if ( ( i = getservbyname_r(pnum,\"tcp\",&amp;se,tmpbuf,TMP_BUFSIZ,&amp;pse) ) != 0 )\n    {\n        errno = i;\n        if ( ftplib_debug )\n        perror(\"getservbyname_r\");\n        free(lhost);\n        return 0;\n    }\n#else\n    if ((pse = getservbyname(pnum,\"tcp\") ) == NULL )\n    {\n        if ( ftplib_debug )\n        perror(\"getservbyname\");\n        free(lhost);\n        return 0;\n    }\n#endif\n    sin.sin_port = pse-&gt;s_port;\n    }\n    if ((sin.sin_addr.s_addr = inet_addr(lhost)) == INADDR_NONE)\n    {\n    struct hostent *phe;\n#ifdef _REENTRANT\n    struct hostent he;\n    char tmpbuf[TMP_BUFSIZ];\n    int i, herr;\n    if ( ( ( i = gethostbyname_r( lhost, &amp;he, tmpbuf, TMP_BUFSIZ, &amp;phe, &amp;herr ) ) != 0 ) ||\n         ( phe == NULL ) )\n    {\n        if ( ftplib_debug )\n        fprintf(stderr, \"gethostbyname: %s\\n\", hstrerror(herr));\n        free(lhost);\n        return 0;\n    }\n#else\n        if ((phe = gethostbyname(lhost)) == NULL)\n        {\n        if (ftplib_debug)\n        fprintf(stderr, \"gethostbyname: %s\\n\", hstrerror(h_errno));\n        free(lhost);\n        return 0;\n        }\n#endif\n        memcpy((char *)&amp;sin.sin_addr, phe-&gt;h_addr, phe-&gt;h_length);\n    }\n    free(lhost);\n    sControl = socket(PF_INET, SOCK_STREAM, IPPROTO_TCP);\n    if (sControl == -1)\n    {\n    if (ftplib_debug)\n        perror(\"socket\");\n    return 0;\n    }\n    if (setsockopt(sControl,SOL_SOCKET,SO_REUSEADDR,\n           SETSOCKOPT_OPTVAL_TYPE &amp;on, sizeof(on)) == -1)\n    {\n    if (ftplib_debug)\n        perror(\"setsockopt\");\n    net_close(sControl);\n    return 0;\n    }\n    if (connect(sControl, (struct sockaddr *)&amp;sin, sizeof(sin)) == -1)\n    {\n    if (ftplib_debug)\n        perror(\"connect\");\n    net_close(sControl);\n    return 0;\n    }\n    ctrl = calloc(1,sizeof(netbuf));\n    if (ctrl == NULL)\n    {\n    if (ftplib_debug)\n        perror(\"calloc\");\n    net_close(sControl);\n    return 0;\n    }\n    ctrl-&gt;buf = malloc(FTPLIB_BUFSIZ);\n    if (ctrl-&gt;buf == NULL)\n    {\n    if (ftplib_debug)\n        perror(\"calloc\");\n    net_close(sControl);\n    free(ctrl);\n    return 0;\n    }\n    ctrl-&gt;handle = sControl;\n    ctrl-&gt;dir = FTPLIB_CONTROL;\n    ctrl-&gt;ctrl = NULL;\n    ctrl-&gt;data = NULL;\n    ctrl-&gt;cmode = FTPLIB_DEFMODE;\n    ctrl-&gt;idlecb = NULL;\n    ctrl-&gt;idletime.tv_sec = ctrl-&gt;idletime.tv_usec = 0;\n    ctrl-&gt;idlearg = NULL;\n    ctrl-&gt;xfered = 0;\n    ctrl-&gt;xfered1 = 0;\n    ctrl-&gt;cbbytes = 0;\n    if (readresp('2', ctrl) == 0)\n    {\n    net_close(sControl);\n    free(ctrl-&gt;buf);\n    free(ctrl);\n    return 0;\n    }\n    *nControl = ctrl;\n    return 1;\n}\n\nGLOBALDEF int FtpSetCallback(const FtpCallbackOptions *opt, netbuf *nControl)\n{\n    nControl-&gt;idlecb = opt-&gt;cbFunc;\n    nControl-&gt;idlearg = opt-&gt;cbArg;\n    nControl-&gt;idletime.tv_sec = opt-&gt;idleTime / 1000;\n    nControl-&gt;idletime.tv_usec = (opt-&gt;idleTime % 1000) * 1000;\n    nControl-&gt;cbbytes = opt-&gt;bytesXferred;\n    return 1;\n}\nGLOBALDEF int FtpClearCallback(netbuf *nControl)\n{\n    nControl-&gt;idlecb = NULL;\n    nControl-&gt;idlearg = NULL;\n    nControl-&gt;idletime.tv_sec = 0;\n    nControl-&gt;idletime.tv_usec = 0;\n    nControl-&gt;cbbytes = 0;\n    return 1;\n}\n/*\n * FtpOptions - change connection options\n *\n * returns 1 if successful, 0 on error\n */\nGLOBALDEF int FtpOptions(int opt, long val, netbuf *nControl)\n{\n    int v,rv=0;\n    switch (opt)\n    {\n      case FTPLIB_CONNMODE:\n    v = (int) val;\n    if ((v == FTPLIB_PASSIVE) || (v == FTPLIB_PORT))\n    {\n        nControl-&gt;cmode = v;\n        rv = 1;\n    }\n    break;\n      case FTPLIB_CALLBACK:\n    nControl-&gt;idlecb = (FtpCallback) val;\n    rv = 1;\n    break;\n      case FTPLIB_IDLETIME:\n    v = (int) val;\n    rv = 1;\n    nControl-&gt;idletime.tv_sec = v / 1000;\n    nControl-&gt;idletime.tv_usec = (v % 1000) * 1000;\n    break;\n      case FTPLIB_CALLBACKARG:\n    rv = 1;\n    nControl-&gt;idlearg = (void *) val;\n    break;\n      case FTPLIB_CALLBACKBYTES:\n        rv = 1;\n        nControl-&gt;cbbytes = (int) val;\n        break;\n    }\n    return rv;\n}\n\n/*\n * FtpSendCmd - send a command and wait for expected response\n *\n * return 1 if proper response received, 0 otherwise\n */\nstatic int FtpSendCmd(const char *cmd, char expresp, netbuf *nControl)\n{\n    char buf[TMP_BUFSIZ];\n    if (nControl-&gt;dir != FTPLIB_CONTROL)\n    return 0;\n    if (ftplib_debug &gt; 2)\n    fprintf(stderr,\"%s\\n\",cmd);\n    if ((strlen(cmd) + 3) &gt; sizeof(buf))\n        return 0;\n    sprintf(buf,\"%s\\r\\n\",cmd);\n    if (net_write(nControl-&gt;handle,buf,strlen(buf)) &lt;= 0)\n    {\n    if (ftplib_debug)\n        perror(\"write\");\n    return 0;\n    }\n    return readresp(expresp, nControl);\n}\n\n/*\n * FtpLogin - log in to remote server\n *\n * return 1 if logged in, 0 otherwise\n */\nGLOBALDEF int FtpLogin(const char *user, const char *pass, netbuf *nControl)\n{\n    char tempbuf[64];\n\n    if (((strlen(user) + 7) &gt; sizeof(tempbuf)) ||\n        ((strlen(pass) + 7) &gt; sizeof(tempbuf)))\n        return 0;\n    sprintf(tempbuf,\"USER %s\",user);\n    if (!FtpSendCmd(tempbuf,'3',nControl))\n    {\n    if (nControl-&gt;response[0] == '2')\n        return 1;\n    return 0;\n    }\n    sprintf(tempbuf,\"PASS %s\",pass);\n    return FtpSendCmd(tempbuf,'2',nControl);\n}\n\n/*\n * FtpOpenPort - set up data connection\n *\n * return 1 if successful, 0 otherwise\n */\nstatic int FtpOpenPort(netbuf *nControl, netbuf **nData, int mode, int dir)\n{\n    int sData;\n    union {\n    struct sockaddr sa;\n    struct sockaddr_in in;\n    } sin;\n    struct linger lng = { 0, 0 };\n    unsigned int l;\n    int on=1;\n    netbuf *ctrl;\n    char *cp;\n    unsigned int v[6];\n    char buf[TMP_BUFSIZ];\n\n    if (nControl-&gt;dir != FTPLIB_CONTROL)\n    return -1;\n    if ((dir != FTPLIB_READ) &amp;&amp; (dir != FTPLIB_WRITE))\n    {\n    sprintf(nControl-&gt;response, \"Invalid direction %d\\n\", dir);\n    return -1;\n    }\n    if ((mode != FTPLIB_ASCII) &amp;&amp; (mode != FTPLIB_IMAGE))\n    {\n    sprintf(nControl-&gt;response, \"Invalid mode %c\\n\", mode);\n    return -1;\n    }\n    l = sizeof(sin);\n    if (nControl-&gt;cmode == FTPLIB_PASSIVE)\n    {\n    memset(&amp;sin, 0, l);\n    sin.in.sin_family = AF_INET;\n    if (!FtpSendCmd(\"PASV\",'2',nControl))\n        return -1;\n    cp = strchr(nControl-&gt;response,'(');\n    if (cp == NULL)\n        return -1;\n    cp++;\n    sscanf(cp,\"%u,%u,%u,%u,%u,%u\",&amp;v[2],&amp;v[3],&amp;v[4],&amp;v[5],&amp;v[0],&amp;v[1]);\n    sin.sa.sa_data[2] = v[2];\n    sin.sa.sa_data[3] = v[3];\n    sin.sa.sa_data[4] = v[4];\n    sin.sa.sa_data[5] = v[5];\n    sin.sa.sa_data[0] = v[0];\n    sin.sa.sa_data[1] = v[1];\n    }\n    else\n    {\n    if (getsockname(nControl-&gt;handle, &amp;sin.sa, &amp;l) &lt; 0)\n    {\n        if (ftplib_debug)\n        perror(\"getsockname\");\n        return -1;\n    }\n    }\n    sData = socket(PF_INET,SOCK_STREAM,IPPROTO_TCP);\n    if (sData == -1)\n    {\n    if (ftplib_debug)\n        perror(\"socket\");\n    return -1;\n    }\n    if (setsockopt(sData,SOL_SOCKET,SO_REUSEADDR,\n           SETSOCKOPT_OPTVAL_TYPE &amp;on,sizeof(on)) == -1)\n    {\n    if (ftplib_debug)\n        perror(\"setsockopt\");\n    net_close(sData);\n    return -1;\n    }\n    if (setsockopt(sData,SOL_SOCKET,SO_LINGER,\n           SETSOCKOPT_OPTVAL_TYPE &amp;lng,sizeof(lng)) == -1)\n    {\n    if (ftplib_debug)\n        perror(\"setsockopt\");\n    net_close(sData);\n    return -1;\n    }\n    if (nControl-&gt;cmode == FTPLIB_PASSIVE)\n    {\n    if (connect(sData, &amp;sin.sa, sizeof(sin.sa)) == -1)\n    {\n        if (ftplib_debug)\n        perror(\"connect\");\n        net_close(sData);\n        return -1;\n    }\n    }\n    else\n    {\n    sin.in.sin_port = 0;\n    if (bind(sData, &amp;sin.sa, sizeof(sin)) == -1)\n    {\n        if (ftplib_debug)\n        perror(\"bind\");\n        net_close(sData);\n        return -1;\n    }\n    if (listen(sData, 1) &lt; 0)\n    {\n        if (ftplib_debug)\n        perror(\"listen\");\n        net_close(sData);\n        return -1;\n    }\n    if (getsockname(sData, &amp;sin.sa, &amp;l) &lt; 0)\n        return -1;\n    sprintf(buf, \"PORT %d,%d,%d,%d,%d,%d\",\n        (unsigned char) sin.sa.sa_data[2],\n        (unsigned char) sin.sa.sa_data[3],\n        (unsigned char) sin.sa.sa_data[4],\n        (unsigned char) sin.sa.sa_data[5],\n        (unsigned char) sin.sa.sa_data[0],\n        (unsigned char) sin.sa.sa_data[1]);\n    if (!FtpSendCmd(buf,'2',nControl))\n    {\n        net_close(sData);\n        return -1;\n    }\n    }\n    ctrl = calloc(1,sizeof(netbuf));\n    if (ctrl == NULL)\n    {\n    if (ftplib_debug)\n        perror(\"calloc\");\n    net_close(sData);\n    return -1;\n    }\n    if ((mode == 'A') &amp;&amp; ((ctrl-&gt;buf = malloc(FTPLIB_BUFSIZ)) == NULL))\n    {\n    if (ftplib_debug)\n        perror(\"calloc\");\n    net_close(sData);\n    free(ctrl);\n    return -1;\n    }\n    ctrl-&gt;handle = sData;\n    ctrl-&gt;dir = dir;\n    ctrl-&gt;idletime = nControl-&gt;idletime;\n    ctrl-&gt;idlearg = nControl-&gt;idlearg;\n    ctrl-&gt;xfered = 0;\n    ctrl-&gt;xfered1 = 0;\n    ctrl-&gt;cbbytes = nControl-&gt;cbbytes;\n    ctrl-&gt;ctrl = nControl;\n    if (ctrl-&gt;idletime.tv_sec || ctrl-&gt;idletime.tv_usec || ctrl-&gt;cbbytes)\n    ctrl-&gt;idlecb = nControl-&gt;idlecb;\n    else\n    ctrl-&gt;idlecb = NULL;\n    nControl-&gt;data = ctrl;\n    *nData = ctrl;\n    return 1;\n}\n\n/*\n * FtpAcceptConnection - accept connection from server\n *\n * return 1 if successful, 0 otherwise\n */\nstatic int FtpAcceptConnection(netbuf *nData, netbuf *nControl)\n{\n    int sData;\n    struct sockaddr addr;\n    unsigned int l;\n    int i;\n    struct timeval tv;\n    fd_set mask;\n    int rv;\n\n    FD_ZERO(&amp;mask);\n    FD_SET(nControl-&gt;handle, &amp;mask);\n    FD_SET(nData-&gt;handle, &amp;mask);\n    tv.tv_usec = 0;\n    tv.tv_sec = ACCEPT_TIMEOUT;\n    i = nControl-&gt;handle;\n    if (i &lt; nData-&gt;handle)\n    i = nData-&gt;handle;\n    i = select(i+1, &amp;mask, NULL, NULL, &amp;tv);\n    if (i == -1)\n    {\n        strncpy(nControl-&gt;response, strerror(errno),\n                sizeof(nControl-&gt;response));\n        net_close(nData-&gt;handle);\n        nData-&gt;handle = 0;\n        rv = 0;\n    }\n    else if (i == 0)\n    {\n    strcpy(nControl-&gt;response, \"timed out waiting for connection\");\n    net_close(nData-&gt;handle);\n    nData-&gt;handle = 0;\n    rv = 0;\n    }\n    else\n    {\n    if (FD_ISSET(nData-&gt;handle, &amp;mask))\n    {\n        l = sizeof(addr);\n        sData = accept(nData-&gt;handle, &amp;addr, &amp;l);\n        i = errno;\n        net_close(nData-&gt;handle);\n        if (sData &gt; 0)\n        {\n        rv = 1;\n        nData-&gt;handle = sData;\n        }\n        else\n        {\n        strncpy(nControl-&gt;response, strerror(i),\n                        sizeof(nControl-&gt;response));\n        nData-&gt;handle = 0;\n        rv = 0;\n        }\n    }\n    else if (FD_ISSET(nControl-&gt;handle, &amp;mask))\n    {\n        net_close(nData-&gt;handle);\n        nData-&gt;handle = 0;\n        readresp('2', nControl);\n        rv = 0;\n    }\n    }\n    return rv;  \n}\n\n/*\n * FtpAccess - return a handle for a data stream\n *\n * return 1 if successful, 0 otherwise\n */\nGLOBALDEF int FtpAccess(const char *path, int typ, int mode, netbuf *nControl,\n    netbuf **nData)\n{\n    char buf[TMP_BUFSIZ];\n    int dir;\n    if ((path == NULL) &amp;&amp;\n        ((typ == FTPLIB_FILE_WRITE) || (typ == FTPLIB_FILE_READ)))\n    {\n    sprintf(nControl-&gt;response,\n                \"Missing path argument for file transfer\\n\");\n    return 0;\n    }\n    sprintf(buf, \"TYPE %c\", mode);\n    if (!FtpSendCmd(buf, '2', nControl))\n    return 0;\n    switch (typ)\n    {\n      case FTPLIB_DIR:\n    strcpy(buf,\"NLST\");\n    dir = FTPLIB_READ;\n    break;\n      case FTPLIB_DIR_VERBOSE:\n    strcpy(buf,\"LIST\");\n    dir = FTPLIB_READ;\n    break;\n      case FTPLIB_FILE_READ:\n    strcpy(buf,\"RETR\");\n    dir = FTPLIB_READ;\n    break;\n      case FTPLIB_FILE_WRITE:\n    strcpy(buf,\"STOR\");\n    dir = FTPLIB_WRITE;\n    break;\n      default:\n    sprintf(nControl-&gt;response, \"Invalid open type %d\\n\", typ);\n    return 0;\n    }\n    if (path != NULL)\n    {\n        int i = strlen(buf);\n        buf[i++] = ' ';\n        if ((strlen(path) + i + 1) &gt;= sizeof(buf))\n            return 0;\n        strcpy(&amp;buf[i],path);\n    }\n    if (FtpOpenPort(nControl, nData, mode, dir) == -1)\n    return 0;\n    if (!FtpSendCmd(buf, '1', nControl))\n    {\n    FtpClose(*nData);\n    *nData = NULL;\n    return 0;\n    }\n    if (nControl-&gt;cmode == FTPLIB_PORT)\n    {\n    if (!FtpAcceptConnection(*nData,nControl))\n    {\n        FtpClose(*nData);\n        *nData = NULL;\n        nControl-&gt;data = NULL;\n        return 0;\n    }\n    }\n    return 1;\n}\n\n/*\n * FtpRead - read from a data connection\n */\nGLOBALDEF int FtpRead(void *buf, int max, netbuf *nData)\n{\n    int i;\n    if (nData-&gt;dir != FTPLIB_READ)\n    return 0;\n    if (nData-&gt;buf)\n        i = readline(buf, max, nData);\n    else\n    {\n        i = socket_wait(nData);\n    if (i != 1)\n        return 0;\n        i = net_read(nData-&gt;handle, buf, max);\n    }\n    if (i == -1)\n    return 0;\n    nData-&gt;xfered += i;\n    if (nData-&gt;idlecb &amp;&amp; nData-&gt;cbbytes)\n    {\n        nData-&gt;xfered1 += i;\n        if (nData-&gt;xfered1 &gt; nData-&gt;cbbytes)\n        {\n        if (nData-&gt;idlecb(nData, nData-&gt;xfered, nData-&gt;idlearg) == 0)\n        return 0;\n            nData-&gt;xfered1 = 0;\n        }\n    }\n    return i;\n}\n\n/*\n * FtpWrite - write to a data connection\n */\nGLOBALDEF int FtpWrite(const void *buf, int len, netbuf *nData)\n{\n    int i;\n    if (nData-&gt;dir != FTPLIB_WRITE)\n    return 0;\n    if (nData-&gt;buf)\n        i = writeline(buf, len, nData);\n    else\n    {\n        socket_wait(nData);\n        i = net_write(nData-&gt;handle, buf, len);\n    }\n    if (i == -1)\n    return 0;\n    nData-&gt;xfered += i;\n    if (nData-&gt;idlecb &amp;&amp; nData-&gt;cbbytes)\n    {\n        nData-&gt;xfered1 += i;\n        if (nData-&gt;xfered1 &gt; nData-&gt;cbbytes)\n        {\n            nData-&gt;idlecb(nData, nData-&gt;xfered, nData-&gt;idlearg);\n            nData-&gt;xfered1 = 0;\n        }\n    }\n    return i;\n}\n\n/*\n * FtpClose - close a data connection\n */\nGLOBALDEF int FtpClose(netbuf *nData)\n{\n    netbuf *ctrl;\n    switch (nData-&gt;dir)\n    {\n      case FTPLIB_WRITE:\n    /* potential problem - if buffer flush fails, how to notify user? */\n    if (nData-&gt;buf != NULL)\n        writeline(NULL, 0, nData);\n      case FTPLIB_READ:\n    if (nData-&gt;buf)\n        free(nData-&gt;buf);\n    shutdown(nData-&gt;handle,2);\n    net_close(nData-&gt;handle);\n    ctrl = nData-&gt;ctrl;\n    free(nData);\n    ctrl-&gt;data = NULL;\n    if (ctrl &amp;&amp; ctrl-&gt;response[0] != '4' &amp;&amp; ctrl-&gt;response[0] != '5')\n    {\n        return(readresp('2', ctrl));\n    }\n    return 1;\n      case FTPLIB_CONTROL:\n    if (nData-&gt;data)\n    {\n        nData-&gt;ctrl = NULL;\n        FtpClose(nData-&gt;data);\n    }\n    net_close(nData-&gt;handle);\n    free(nData);\n    return 0;\n    }\n    return 1;\n}\n\n/*\n * FtpSite - send a SITE command\n *\n * return 1 if command successful, 0 otherwise\n */\nGLOBALDEF int FtpSite(const char *cmd, netbuf *nControl)\n{\n    char buf[TMP_BUFSIZ];\n\n    if ((strlen(cmd) + 7) &gt; sizeof(buf))\n        return 0;\n    sprintf(buf,\"SITE %s\",cmd);\n    if (!FtpSendCmd(buf,'2',nControl))\n    return 0;\n    return 1;\n}\n\n/*\n * FtpSysType - send a SYST command\n *\n * Fills in the user buffer with the remote system type.  If more\n * information from the response is required, the user can parse\n * it out of the response buffer returned by FtpLastResponse().\n *\n * return 1 if command successful, 0 otherwise\n */\nGLOBALDEF int FtpSysType(char *buf, int max, netbuf *nControl)\n{\n    int l = max;\n    char *b = buf;\n    char *s;\n    if (!FtpSendCmd(\"SYST\",'2',nControl))\n    return 0;\n    s = &amp;nControl-&gt;response[4];\n    while ((--l) &amp;&amp; (*s != ' '))\n    *b++ = *s++;\n    *b++ = '\\0';\n    return 1;\n}\n\n/*\n * FtpMkdir - create a directory at server\n *\n * return 1 if successful, 0 otherwise\n */\nGLOBALDEF int FtpMkdir(const char *path, netbuf *nControl)\n{\n    char buf[TMP_BUFSIZ];\n\n    if ((strlen(path) + 6) &gt; sizeof(buf))\n        return 0;\n    sprintf(buf,\"MKD %s\",path);\n    if (!FtpSendCmd(buf,'2', nControl))\n    return 0;\n    return 1;\n}\n\n/*\n * FtpChdir - change path at remote\n *\n * return 1 if successful, 0 otherwise\n */\nGLOBALDEF int FtpChdir(const char *path, netbuf *nControl)\n{\n    char buf[TMP_BUFSIZ];\n\n    if ((strlen(path) + 6) &gt; sizeof(buf))\n        return 0;\n    sprintf(buf,\"CWD %s\",path);\n    if (!FtpSendCmd(buf,'2',nControl))\n    return 0;\n    return 1;\n}\n\n/*\n * FtpCDUp - move to parent directory at remote\n *\n * return 1 if successful, 0 otherwise\n */\nGLOBALDEF int FtpCDUp(netbuf *nControl)\n{\n    if (!FtpSendCmd(\"CDUP\",'2',nControl))\n    return 0;\n    return 1;\n}\n\n/*\n * FtpRmdir - remove directory at remote\n *\n * return 1 if successful, 0 otherwise\n */\nGLOBALDEF int FtpRmdir(const char *path, netbuf *nControl)\n{\n    char buf[TMP_BUFSIZ];\n\n    if ((strlen(path) + 6) &gt; sizeof(buf))\n        return 0;\n    sprintf(buf,\"RMD %s\",path);\n    if (!FtpSendCmd(buf,'2',nControl))\n    return 0;\n    return 1;\n}\n\n/*\n * FtpPwd - get working directory at remote\n *\n * return 1 if successful, 0 otherwise\n */\nGLOBALDEF int FtpPwd(char *path, int max, netbuf *nControl)\n{\n    int l = max;\n    char *b = path;\n    char *s;\n    if (!FtpSendCmd(\"PWD\",'2',nControl))\n    return 0;\n    s = strchr(nControl-&gt;response, '\"');\n    if (s == NULL)\n    return 0;\n    s++;\n    while ((--l) &amp;&amp; (*s) &amp;&amp; (*s != '\"'))\n    *b++ = *s++;\n    *b++ = '\\0';\n    return 1;\n}\n\n/*\n * FtpXfer - issue a command and transfer data\n *\n * return 1 if successful, 0 otherwise\n */\nstatic int FtpXfer(const char *localfile, const char *path,\n    netbuf *nControl, int typ, int mode)\n{\n    int l,c;\n    char *dbuf;\n    FILE *local = NULL;\n    netbuf *nData;\n    int rv=1;\n\n    if (localfile != NULL)\n    {\n    char ac[4];\n    memset( ac, 0, sizeof(ac) );\n    if (typ == FTPLIB_FILE_WRITE)\n        ac[0] = 'r';\n    else\n        ac[0] = 'w';\n    if (mode == FTPLIB_IMAGE)\n        ac[1] = 'b';\n    local = fopen(localfile, ac);\n    if (local == NULL)\n    {\n        strncpy(nControl-&gt;response, strerror(errno),\n                    sizeof(nControl-&gt;response));\n        return 0;\n    }\n    }\n    if (local == NULL)\n    local = (typ == FTPLIB_FILE_WRITE) ? stdin : stdout;\n    if (!FtpAccess(path, typ, mode, nControl, &amp;nData))\n    {\n    if (localfile)\n    {\n        fclose(local);\n        if ( typ == FTPLIB_FILE_READ )\n        unlink(localfile);\n    }\n    return 0;\n    }\n    dbuf = malloc(FTPLIB_BUFSIZ);\n    if (typ == FTPLIB_FILE_WRITE)\n    {\n    while ((l = fread(dbuf, 1, FTPLIB_BUFSIZ, local)) &gt; 0)\n    {\n        if ((c = FtpWrite(dbuf, l, nData)) &lt; l)\n        {\n        printf(\"short write: passed %d, wrote %d\\n\", l, c);\n        rv = 0;\n        break;\n        }\n    }\n    }\n    else\n    {\n        while ((l = FtpRead(dbuf, FTPLIB_BUFSIZ, nData)) &gt; 0)\n    {\n        if (fwrite(dbuf, 1, l, local) == 0)\n        {\n        if (ftplib_debug)\n            perror(\"localfile write\");\n        rv = 0;\n        break;\n        }\n    }\n    }\n    free(dbuf);\n    fflush(local);\n    if (localfile != NULL)\n    fclose(local);\n    FtpClose(nData);\n    return rv;\n}\n\n/*\n * FtpNlst - issue an NLST command and write response to output\n *\n * return 1 if successful, 0 otherwise\n */\nGLOBALDEF int FtpNlst(const char *outputfile, const char *path,\n    netbuf *nControl)\n{\n    return FtpXfer(outputfile, path, nControl, FTPLIB_DIR, FTPLIB_ASCII);\n}\n\n/*\n * FtpDir - issue a LIST command and write response to output\n *\n * return 1 if successful, 0 otherwise\n */\nGLOBALDEF int FtpDir(const char *outputfile, const char *path, netbuf *nControl)\n{\n    return FtpXfer(outputfile, path, nControl, FTPLIB_DIR_VERBOSE, FTPLIB_ASCII);\n}\n\n/*\n * FtpSize - determine the size of a remote file\n *\n * return 1 if successful, 0 otherwise\n */\nGLOBALDEF int FtpSize(const char *path, unsigned int *size, char mode, netbuf *nControl)\n{\n    char cmd[TMP_BUFSIZ];\n    int resp,rv=1;\n    unsigned int sz;\n\n    if ((strlen(path) + 7) &gt; sizeof(cmd))\n        return 0;\n    sprintf(cmd, \"TYPE %c\", mode);\n    if (!FtpSendCmd(cmd, '2', nControl))\n    return 0;\n    sprintf(cmd,\"SIZE %s\",path);\n    if (!FtpSendCmd(cmd,'2',nControl))\n    rv = 0;\n    else\n    {\n    if (sscanf(nControl-&gt;response, \"%d %u\", &amp;resp, &amp;sz) == 2)\n        *size = sz;\n    else\n        rv = 0;\n    }   \n    return rv;\n}\n\n#if defined(__UINT64_MAX)\n/*\n * FtpSizeLong - determine the size of a remote file\n *\n * return 1 if successful, 0 otherwise\n */\nGLOBALDEF int FtpSizeLong(const char *path, fsz_t *size, char mode, netbuf *nControl)\n{\n    char cmd[TMP_BUFSIZ];\n    int resp,rv=1;\n    fsz_t sz;\n\n    if ((strlen(path) + 7) &gt; sizeof(cmd))\n        return 0;\n    sprintf(cmd, \"TYPE %c\", mode);\n    if (!FtpSendCmd(cmd, '2', nControl))\n    return 0;\n    sprintf(cmd,\"SIZE %s\",path);\n    if (!FtpSendCmd(cmd,'2',nControl))\n    rv = 0;\n    else\n    {\n    if (sscanf(nControl-&gt;response, \"%d %\" PRIu64 \"\", &amp;resp, &amp;sz) == 2)\n        *size = sz;\n    else\n        rv = 0;\n    }   \n    return rv;\n}\n#endif\n\n/*\n * FtpModDate - determine the modification date of a remote file\n *\n * return 1 if successful, 0 otherwise\n */\nGLOBALDEF int FtpModDate(const char *path, char *dt, int max, netbuf *nControl)\n{\n    char buf[TMP_BUFSIZ];\n    int rv = 1;\n\n    if ((strlen(path) + 7) &gt; sizeof(buf))\n        return 0;\n    sprintf(buf,\"MDTM %s\",path);\n    if (!FtpSendCmd(buf,'2',nControl))\n    rv = 0;\n    else\n    strncpy(dt, &amp;nControl-&gt;response[4], max);\n    return rv;\n}\n\n/*\n * FtpGet - issue a GET command and write received data to output\n *\n * return 1 if successful, 0 otherwise\n */\nGLOBALDEF int FtpGet(const char *outputfile, const char *path,\n    char mode, netbuf *nControl)\n{\n    return FtpXfer(outputfile, path, nControl, FTPLIB_FILE_READ, mode);\n}\n\n/*\n * FtpPut - issue a PUT command and send data from input\n *\n * return 1 if successful, 0 otherwise\n */\nGLOBALDEF int FtpPut(const char *inputfile, const char *path, char mode,\n    netbuf *nControl)\n{\n    return FtpXfer(inputfile, path, nControl, FTPLIB_FILE_WRITE, mode);\n}\n\n/*\n * FtpRename - rename a file at remote\n *\n * return 1 if successful, 0 otherwise\n */\nGLOBALDEF int FtpRename(const char *src, const char *dst, netbuf *nControl)\n{\n    char cmd[TMP_BUFSIZ];\n\n    if (((strlen(src) + 7) &gt; sizeof(cmd)) ||\n        ((strlen(dst) + 7) &gt; sizeof(cmd)))\n        return 0;\n    sprintf(cmd,\"RNFR %s\",src);\n    if (!FtpSendCmd(cmd,'3',nControl))\n    return 0;\n    sprintf(cmd,\"RNTO %s\",dst);\n    if (!FtpSendCmd(cmd,'2',nControl))\n    return 0;\n    return 1;\n}\n\n/*\n * FtpDelete - delete a file at remote\n *\n * return 1 if successful, 0 otherwise\n */\nGLOBALDEF int FtpDelete(const char *fnm, netbuf *nControl)\n{\n    char cmd[TMP_BUFSIZ];\n\n    if ((strlen(fnm) + 7) &gt; sizeof(cmd))\n        return 0;\n    sprintf(cmd,\"DELE %s\",fnm);\n    if (!FtpSendCmd(cmd,'2', nControl))\n    return 0;\n    return 1;\n}\n\n/*\n * FtpQuit - disconnect from remote\n *\n * return 1 if successful, 0 otherwise\n */\nGLOBALDEF void FtpQuit(netbuf *nControl)\n{\n    if (nControl-&gt;dir != FTPLIB_CONTROL)\n    return;\n    FtpSendCmd(\"QUIT\",'2',nControl);\n    net_close(nControl-&gt;handle);\n    free(nControl-&gt;buf);\n    free(nControl);\n}\n</code></pre>"},{"location":"Project/Backend%20server/ADF/Transmission/Ftp/Open-lib/#-","title":"\u7f16\u8bd1-\u52a8\u6001/\u9759\u6001\u5e93","text":"<pre><code>libftp.a:ftplib.h ftplib.c\n    gcc -c -o libftp.a ftplib.c \n\nlibftp.so:ftplib.h ftplib.c\n    gcc -fPIC -shared -o libftp.so ftplib.c \n</code></pre>"},{"location":"Project/Backend%20server/ADF/Transmission/Tcp/TCP/","title":"\u57fa\u4e8eTcp\u534f\u8bae\u6587\u4ef6\u4f20\u8f93","text":"<ol> <li>\u81ea\u5b9a\u4e49\u901a\u8baf\u65b9\u5f0f</li> <li>\u6548\u7387\u9ad8</li> <li>\u9002\u7528\u4e8e\u7cfb\u7edf\u5185\u90e8\u5feb\u901f\u9ad8\u6548\u4f20\u8f93\u6587\u4ef6</li> </ol>"},{"location":"Project/Backend%20server/ADF/Xml/Xml/","title":"\u89e3\u6790xml\u683c\u5f0f\u5b57\u7b26\u4e32\u7684\u51fd\u6570\u65cf","text":""},{"location":"Project/Backend%20server/ADF/Xml/Xml/#_1","title":"\u5b9a\u4e49","text":"<p><pre><code>// xml\u683c\u5f0f\u7684\u5b57\u7b26\u4e32\u7684\u5185\u5bb9\u5982\u4e0b\uff1a\n// &lt;filename&gt;/tmp/_public.h&lt;/filename&gt;&lt;mtime&gt;2020-01-01 12:20:35&lt;/mtime&gt;&lt;size&gt;18348&lt;/size&gt;\n// &lt;filename&gt;/tmp/_public.cpp&lt;/filename&gt;&lt;mtime&gt;2020-01-01 10:10:15&lt;/mtime&gt;&lt;size&gt;50945&lt;/size&gt;\n// xmlbuffer\uff1a\u5f85\u89e3\u6790\u7684xml\u683c\u5f0f\u5b57\u7b26\u4e32\u3002\n// fieldname\uff1a\u5b57\u6bb5\u7684\u6807\u7b7e\u540d\u3002\n// value\uff1a\u4f20\u5165\u53d8\u91cf\u7684\u5730\u5740\uff0c\u7528\u4e8e\u5b58\u653e\u5b57\u6bb5\u5185\u5bb9\uff0c\u652f\u6301bool\u3001int\u3001insigned int\u3001long\u3001\n//       unsigned long\u3001double\u548cchar[]\u3002\n// \u6ce8\u610f\uff1a\u5f53value\u53c2\u6570\u7684\u6570\u636e\u7c7b\u578b\u4e3achar []\u65f6\uff0c\u5fc5\u987b\u4fdd\u8bc1value\u6570\u7ec4\u7684\u5185\u5b58\u8db3\u591f\uff0c\u5426\u5219\u53ef\u80fd\u53d1\u751f\u5185\u5b58\u6ea2\u51fa\u7684\u95ee\u9898\uff0c\n//           \u4e5f\u53ef\u4ee5\u7528ilen\u53c2\u6570\u9650\u5b9a\u83b7\u53d6\u5b57\u6bb5\u5185\u5bb9\u7684\u957f\u5ea6\uff0cilen\u7684\u7f3a\u7701\u503c\u4e3a0\uff0c\u8868\u793a\u4e0d\u9650\u957f\u5ea6\u3002\n// \u8fd4\u56de\u503c\uff1atrue-\u6210\u529f\uff1b\u5982\u679cfieldname\u53c2\u6570\u6307\u5b9a\u7684\u6807\u7b7e\u540d\u4e0d\u5b58\u5728\uff0c\u8fd4\u56de\u5931\u8d25\u3002\n</code></pre> <pre><code>bool getxmlbuffer(const string &amp;xmlbuffer,const string &amp;fieldname,string &amp;value,const int ilen=0);    // \u89c6\u9891\u4e2d\u6ca1\u6709\u7b2c\u4e09\u4e2a\u53c2\u6570\uff0c\u52a0\u4e0a\u7b2c\u4e09\u4e2a\u53c2\u6570\u66f4\u597d\u3002\nbool getxmlbuffer(const string &amp;xmlbuffer,const string &amp;fieldname,char *value,const int ilen=0);\nbool getxmlbuffer(const string &amp;xmlbuffer,const string &amp;fieldname,bool &amp;value);\nbool getxmlbuffer(const string &amp;xmlbuffer,const string &amp;fieldname,int  &amp;value);\nbool getxmlbuffer(const string &amp;xmlbuffer,const string &amp;fieldname,unsigned int &amp;value);\nbool getxmlbuffer(const string &amp;xmlbuffer,const string &amp;fieldname,long &amp;value);\nbool getxmlbuffer(const string &amp;xmlbuffer,const string &amp;fieldname,unsigned long &amp;value);\nbool getxmlbuffer(const string &amp;xmlbuffer,const string &amp;fieldname,double &amp;value);\nbool getxmlbuffer(const string &amp;xmlbuffer,const string &amp;fieldname,float &amp;value);\n</code></pre></p>"},{"location":"Project/Backend%20server/ADF/Xml/Xml/#_2","title":"\u5b9e\u73b0","text":"<pre><code>bool getxmlbuffer(const string &amp;xmlbuffer,const string &amp;fieldname,char *value,const int len)\n{\n    if (value==nullptr) return false;\n\n    if (len&gt;0) memset(value,0,len+1);   // \u8c03\u7528\u8005\u5fc5\u987b\u4fdd\u8bc1value\u7684\u7a7a\u95f4\u8db3\u591f\uff0c\u5426\u5219\u8fd9\u91cc\u4f1a\u5185\u5b58\u6ea2\u51fa\u3002\n\n    string str;\n    getxmlbuffer(xmlbuffer,fieldname,str);\n\n    if ( (str.length()&lt;=(unsigned int)len) || (len==0) )\n    {\n        str.copy(value,str.length());\n        value[str.length()]=0;    // string\u7684copy\u51fd\u6570\u4e0d\u4f1a\u7ed9C\u98ce\u683c\u5b57\u7b26\u4e32\u7684\u7ed3\u5c3e\u52a00\u3002\n    }\n    else\n    {\n        str.copy(value,len);\n        value[len]=0;\n    }\n\n    return true;\n}\n\nbool getxmlbuffer(const string &amp;xmlbuffer,const string &amp;fieldname,bool &amp;value)\n{\n    string str;\n    if (getxmlbuffer(xmlbuffer,fieldname,str)==false) return false;\n\n    toupper(str);    // \u8f6c\u6362\u4e3a\u5927\u5199\u6765\u5224\u65ad\uff08\u4e5f\u53ef\u4ee5\u8f6c\u6362\u4e3a\u5c0f\u5199\uff0c\u6548\u679c\u76f8\u540c\uff09\u3002\n\n    if (str==\"TRUE\") value=true; \n    else value=false;\n\n    return true;\n}\n\nbool getxmlbuffer(const string &amp;xmlbuffer,const string &amp;fieldname,int &amp;value)\n{\n    string str;\n\n    if (getxmlbuffer(xmlbuffer,fieldname,str)==false) return false;\n\n    try\n    {\n       value = stoi(picknumber(str,true));  // stoi\u6709\u5f02\u5e38\uff0c\u9700\u8981\u5904\u7406\u5f02\u5e38\u3002\n    }\n    catch(const std::exception&amp; e)\n    {\n        return false;\n    }\n\n    return true;\n}\n\nbool getxmlbuffer(const string &amp;xmlbuffer,const string &amp;fieldname,unsigned int &amp;value)\n{\n    string str;\n\n    if (getxmlbuffer(xmlbuffer,fieldname,str)==false) return false;\n\n    try\n    {\n       value = stoi(picknumber(str));  // stoi\u6709\u5f02\u5e38\uff0c\u9700\u8981\u5904\u7406\u5f02\u5e38\u3002\u4e0d\u63d0\u53d6\u7b26\u53f7 + -\n    }\n    catch(const std::exception&amp; e)\n    {\n        return false;\n    }\n\n    return true;\n}\n\nbool getxmlbuffer(const string &amp;xmlbuffer,const string &amp;fieldname,long &amp;value)\n{\n    string str;\n\n    if (getxmlbuffer(xmlbuffer,fieldname,str)==false) return false;\n\n    try\n    {\n        value = stol(picknumber(str,true));  // stol\u6709\u5f02\u5e38\uff0c\u9700\u8981\u5904\u7406\u5f02\u5e38\u3002\n    }\n    catch(const std::exception&amp; e)\n    {\n        return false;\n    }\n\n    return true;\n}\n\nbool getxmlbuffer(const string &amp;xmlbuffer,const string &amp;fieldname,unsigned long &amp;value)\n{\n    string str;\n\n    if (getxmlbuffer(xmlbuffer,fieldname,str)==false) return false;\n\n    try\n    {\n        value = stoul(picknumber(str));  // stoul\u6709\u5f02\u5e38\uff0c\u9700\u8981\u5904\u7406\u5f02\u5e38\u3002\u4e0d\u63d0\u53d6\u7b26\u53f7 + -\n    }\n    catch(const std::exception&amp; e)\n    {\n        return false;\n    }\n\n    return true;\n}\n\nbool getxmlbuffer(const string &amp;xmlbuffer,const string &amp;fieldname,double &amp;value)\n{\n    string str;\n\n    if (getxmlbuffer(xmlbuffer,fieldname,str)==false) return false;\n\n    try\n    {\n        value = stod(picknumber(str,true,true));  // stod\u6709\u5f02\u5e38\uff0c\u9700\u8981\u5904\u7406\u5f02\u5e38\u3002\u63d0\u53d6\u7b26\u53f7\u548c\u5c0f\u6570\u70b9\u3002\n    }\n    catch(const std::exception&amp; e)\n    {\n        return false;\n    }\n\n    return true;\n}\n\nbool getxmlbuffer(const string &amp;xmlbuffer,const string &amp;fieldname,float &amp;value)\n{\n    string str;\n\n    if (getxmlbuffer(xmlbuffer,fieldname,str)==false) return false;\n\n    try\n    {\n        value = stof(picknumber(str,true,true));  // stof\u6709\u5f02\u5e38\uff0c\u9700\u8981\u5904\u7406\u5f02\u5e38\u3002\u63d0\u53d6\u7b26\u53f7\u548c\u5c0f\u6570\u70b9\u3002\n    }\n    catch(const std::exception&amp; e)\n    {\n        return false;\n    }\n\n    return true;\n}\n</code></pre>"},{"location":"Project/Backend%20server/ADF/Xml/Xml/#_3","title":"\u6d4b\u8bd5","text":"<pre><code>#include \"../_public.h\"\nusing namespace std;\nusing namespace idc;\n\nint main()\n{\n    // \u7403\u5458\u6885\u897f\u7684\u8d44\u6599\u5b58\u653e\u5728xml\u4e2d\u3002\n    string buffer=\"&lt;name&gt;\u6885\u897f&lt;/name&gt;&lt;no&gt;10&lt;/no&gt;&lt;striker&gt;true&lt;/striker&gt;&lt;age&gt;30&lt;/age&gt;&lt;weight&gt;68.5&lt;/weight&gt;&lt;sal&gt;21000000&lt;/sal&gt;&lt;club&gt;Barcelona&lt;/club&gt;\";\n\n    // \u7528\u4e8e\u5b58\u653e\u8db3\u7403\u8fd0\u52a8\u5458\u8d44\u6599\u7684\u7ed3\u6784\u4f53\u3002\n    struct st_player\n    {\n        string name;      // \u59d3\u540d\n        char no[6];       // \u7403\u8863\u53f7\u7801\n        bool striker;     // \u573a\u4e0a\u4f4d\u7f6e\u662f\u5426\u662f\u524d\u950b\uff0ctrue-\u662f\uff1bfalse-\u4e0d\u662f\u3002\n        int  age;         // \u5e74\u9f84\n        double weight;    // \u4f53\u91cd\uff0ckg\u3002\n        long sal;         // \u5e74\u85aa\uff0c\u6b27\u5143\u3002\n        char club[51];    // \u6548\u529b\u7684\u4ff1\u4e50\u90e8\n    }stplayer;\n\n    getxmlbuffer(buffer,\"name\",stplayer.name);\n    cout &lt;&lt; \"name=\" &lt;&lt; stplayer.name &lt;&lt; endl;\n\n    getxmlbuffer(buffer,\"no\",stplayer.no,5);\n    cout &lt;&lt; \"no=\" &lt;&lt; stplayer.no &lt;&lt; endl;\n\n    getxmlbuffer(buffer,\"striker\",stplayer.striker);\n    cout &lt;&lt; \"striker=\" &lt;&lt; stplayer.striker &lt;&lt; endl;\n\n    getxmlbuffer(buffer,\"age\",stplayer.age);\n    cout &lt;&lt; \"age=\" &lt;&lt; stplayer.age &lt;&lt; endl;\n\n    getxmlbuffer(buffer,\"weight\",stplayer.weight);\n    cout &lt;&lt; \"weight=\" &lt;&lt; stplayer.weight &lt;&lt; endl;\n\n    getxmlbuffer(buffer,\"sal\",stplayer.sal);\n    cout &lt;&lt; \"sal=\" &lt;&lt; stplayer.sal &lt;&lt; endl;\n\n    getxmlbuffer(buffer,\"club\",stplayer.club,50);\n    cout &lt;&lt; \"club=\" &lt;&lt; stplayer.club &lt;&lt; endl;\n}\n</code></pre>"},{"location":"Project/Backend%20server/Linux/Core/","title":"Core","text":""},{"location":"Project/Backend%20server/Linux/Core/#_1","title":"\u7b80\u4ecb","text":"<ul> <li> <p>\u5982\u679c\u7a0b\u5e8f\u5728\u8fd0\u884c\u7684\u8fc7\u7a0b\u4e2d\u53d1\u751f\u4e86\u5185\u5b58\u6cc4\u6f0f\uff0c\u4f1a\u88ab\u5185\u6838\u5f3a\u884c\u7ec8\u6b62\uff0c\u63d0\u793a\u201c\u6bb5\u9519\u8bef\uff08\u5410\u6838\uff09\u201d\uff0c\u5185\u5b58\u7684\u72b6\u6001\u5c06\u4fdd\u5b58\u5728core\u6587\u4ef6\u4e2d\uff0c\u65b9\u4fbf\u8fdb\u4e00\u6b65\u5206\u6790\u3002</p> </li> <li> <p>Linux\u7f3a\u7701\u4e0d\u4f1a\u751f\u6210core\u6587\u4ef6\uff0c\u9700\u8981\u4fee\u6539\u7cfb\u7edf\u53c2\u6570</p> </li> </ul> <ol> <li>\u7528 <code>ulimit -a</code>\u67e5\u770b\u5f53\u524d\u7528\u6237\u7684\u8d44\u6e90\u9650\u5236\u53c2\u6570;</li> <li>\u7528 <code>ulimit -c unlimited</code>\u628a<code>core file size</code>\u6539\u4e3a<code>unlimited</code>\uff1b</li> <li>\u8fd0\u884c\u7a0b\u5e8f\uff0c\u4ea7\u751f<code>core</code>\u6587\u4ef6\uff1b</li> <li>\u8fd0\u884c<code>gdb</code> \u7a0b\u5e8f\u540d <code>core</code>\u6587\u4ef6\u540d\uff1b</li> <li>\u5728<code>gdb</code>\u4e2d\uff0c\u7528<code>bt</code>\u67e5\u770b\u51fd\u6570\u8c03\u7528\u6808;</li> </ol> <ul> <li><code>gdb</code>\u8c03\u8bd5\u6b63\u5728\u8fd0\u884c\u4e2d\u7684\u7a0b\u5e8f<ul> <li>gdb \u7a0b\u5e8f\u540d -p \u8fdb\u7a0b\u7f16\u53f7</li> </ul> </li> </ul>"},{"location":"Project/Backend%20server/Linux/Directory%20file%20operations/","title":"Directory file operations","text":""},{"location":"Project/Backend%20server/Linux/Directory%20file%20operations/#access","title":"access()\u5e93\u51fd\u6570","text":"<ul> <li><code>access()</code>\u51fd\u6570\u7528\u4e8e\u5224\u65ad\u5f53\u524d\u7528\u6237\u5bf9\u76ee\u5f55\u6216\u6587\u4ef6\u7684\u5b58\u53d6\u6743\u9650\u3002</li> <li>\u5305\u542b\u5934\u6587\u4ef6\uff1a<code>#include &lt;unistd.h&gt;</code></li> <li>\u51fd\u6570\u58f0\u660e\uff1a<code>int access(const char *pathname, int mode);</code></li> <li> <p>\u53c2\u6570\u8bf4\u660e\uff1a</p> <ul> <li><code>pathname</code>  \u76ee\u5f55\u6216\u6587\u4ef6\u540d\u3002</li> <li><code>mode</code>      \u9700\u8981\u5224\u65ad\u7684\u5b58\u53d6\u6743\u9650\u3002\u5728\u5934\u6587\u4ef6<code>&lt;unistd.h&gt;</code>\u4e2d\u7684\u9884\u5b9a\u4e49\u5982\u4e0b\uff1a<ul> <li><code>#define R_OK     4</code>     \u5224\u65ad\u662f\u5426\u6709\u8bfb\u6743\u9650\u3002</li> <li><code>#define W_OK     2</code>     \u5224\u65ad\u662f\u5426\u6709\u5199\u6743\u9650\u3002</li> <li><code>#define X_OK     1</code>     \u5224\u65ad\u662f\u5426\u6709\u6267\u884c\u6743\u9650\u3002</li> <li><code>#define F_OK     0</code>     \u5224\u65ad\u662f\u5426\u5b58\u5728\u3002</li> </ul> </li> <li>\u8fd4\u56de\u503c\uff1a<ul> <li>\u5f53<code>pathname</code>\u6ee1\u8db3<code>mode</code>\u6743\u9650\u8fd4\u56de<code>0</code>\uff0c\u4e0d\u6ee1\u8db3\u8fd4\u56de<code>-1\uff0cerrno</code>\u88ab\u8bbe\u7f6e\u3002</li> </ul> </li> </ul> </li> <li> <p>access()\u51fd\u6570\u4e3b\u8981\u7528\u4e8e\u5224\u65ad\u76ee\u5f55\u6216\u6587\u4ef6\u662f\u5426\u5b58\u5728</p> </li> </ul>"},{"location":"Project/Backend%20server/Linux/Directory%20file%20operations/#stat","title":"stat()\u5e93\u51fd\u6570","text":"<ol> <li> <p><code>stat</code>\u7ed3\u6784\u4f53</p> <ul> <li> <p><code>struct stat</code>\u7ed3\u6784\u4f53\u7528\u4e8e\u5b58\u653e\u76ee\u5f55\u6216\u6587\u4ef6\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u5982\u4e0b\uff1a     <pre><code>struct stat\n{\n    dev_t st_dev;       // \u6587\u4ef6\u7684\u8bbe\u5907\u7f16\u53f7\u3002\n    ino_t st_ino;       // \u6587\u4ef6\u7684i-node\u3002\n    mode_t st_mode;     // \u6587\u4ef6\u7684\u7c7b\u578b\u548c\u5b58\u53d6\u7684\u6743\u9650\u3002\n    nlink_t st_nlink;   // \u8fde\u5230\u8be5\u6587\u4ef6\u7684\u786c\u8fde\u63a5\u6570\u76ee\uff0c\u521a\u5efa\u7acb\u7684\u6587\u4ef6\u503c\u4e3a1\u3002\n    uid_t st_uid;       // \u6587\u4ef6\u6240\u6709\u8005\u7684\u7528\u6237\u8bc6\u522b\u7801\u3002\n    gid_t st_gid;       // \u6587\u4ef6\u6240\u6709\u8005\u7684\u7ec4\u8bc6\u522b\u7801\u3002\n    dev_t st_rdev;      // \u82e5\u6b64\u6587\u4ef6\u4e3a\u8bbe\u5907\u6587\u4ef6\uff0c\u5219\u4e3a\u5176\u8bbe\u5907\u7f16\u53f7\u3002\n    off_t st_size;      // \u6587\u4ef6\u7684\u5927\u5c0f\uff0c\u4ee5\u5b57\u8282\u8ba1\u7b97\u3002\n    size_t st_blksize;  // I/O \u6587\u4ef6\u7cfb\u7edf\u7684I/O \u7f13\u51b2\u533a\u5927\u5c0f\u3002\n    size_t st_blocks;   // \u5360\u7528\u6587\u4ef6\u533a\u5757\u7684\u4e2a\u6570\u3002\n    time_t st_atime;    // \u6587\u4ef6\u6700\u8fd1\u4e00\u6b21\u88ab\u5b58\u53d6\u6216\u88ab\u6267\u884c\u7684\u65f6\u95f4\uff0c\n                        // \u5728\u7528mknod\u3001 utime\u3001read\u3001write \u4e0etructate \u65f6\u6539\u53d8\u3002\n    time_t st_mtime;    // \u6587\u4ef6\u6700\u540e\u4e00\u6b21\u88ab\u4fee\u6539\u7684\u65f6\u95f4\uff0c\n                        // \u5728\u7528mknod\u3001 utime \u548cwrite \u65f6\u624d\u4f1a\u6539\u53d8\u3002\n    time_t st_ctime;    // \u6700\u8fd1\u4e00\u6b21\u88ab\u66f4\u6539\u7684\u65f6\u95f4\uff0c\u5728\u6587\u4ef6\u6240\u6709\u8005\u3001\u7ec4\u3001 \u6743\u9650\u88ab\u66f4\u6539\u65f6\u66f4\u65b0\u3002\n};\n</code></pre></p> </li> <li> <p><code>struct stat</code>\u7ed3\u6784\u4f53\u7684\u6210\u5458\u53d8\u91cf\u6bd4\u8f83\u591a\uff0c\u91cd\u70b9\u5173\u6ce8<code>st_mode\u3001st_size</code>\u548c<code>st_mtime</code>\u6210\u5458</p> <ul> <li>\u6ce8\u610f\uff1a<code>st_mtime</code>\u662f\u4e00\u4e2a\u6574\u6570\u8868\u793a\u7684\u65f6\u95f4\uff0c\u9700\u8981\u7a0b\u5e8f\u5458\u81ea\u5df1\u5199\u4ee3\u7801\u8f6c\u6362\u683c\u5f0f</li> </ul> </li> <li><code>st_mode</code>\u6210\u5458\u7684\u53d6\u503c\u5f88\u591a\uff0c\u7528\u4ee5\u4e0b\u4e24\u4e2a\u5b8f\u6765\u5224\u65ad\uff1a<ul> <li><code>S_ISREG(st_mode)</code>   \u662f\u5426\u4e3a\u666e\u901a\u6587\u4ef6\uff0c\u5982\u679c\u662f\uff0c\u8fd4\u56de\u771f\u3002 </li> <li><code>S_ISDIR(st_mode)</code>   \u662f\u5426\u4e3a\u76ee\u5f55\uff0c\u5982\u679c\u662f\uff0c\u8fd4\u56de\u771f\u3002</li> </ul> </li> </ul> </li> <li> <p><code>stat()</code>\u5e93\u51fd\u6570</p> <ul> <li>\u5305\u542b\u5934\u6587\u4ef6\uff1a<code>#include &lt;sys/stat.h&gt;</code></li> <li>\u51fd\u6570\u58f0\u660e\uff1a<code>int stat(const char *path, struct stat *buf);</code><ul> <li><code>stat()</code>\u51fd\u6570\u83b7\u53d6<code>path</code>\u53c2\u6570\u6307\u5b9a\u76ee\u5f55\u6216\u6587\u4ef6\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u4fdd\u5b58\u5230<code>buf</code>\u7ed3\u6784\u4f53\u4e2d\u3002</li> <li>\u8fd4\u56de\u503c\uff1a<code>0-</code>\u6210\u529f\uff0c<code>-1-</code>\u5931\u8d25\uff0c<code>errno</code>\u88ab\u8bbe\u7f6e\u3002</li> </ul> </li> <li>\u793a\u4f8b\uff1a     <pre><code>#include &lt;stdio.h&gt;\n#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;sys/stat.h&gt;\n#include &lt;unistd.h&gt;\nusing namespace std;\n\nint main(int argc,char *argv[])\n{\n  if (argc != 2)  { cout &lt;&lt; \"Using:./demo \u6587\u4ef6\u6216\u76ee\u5f55\u540d\\n\"; return -1; }\n\n  struct stat st;  // \u5b58\u653e\u76ee\u5f55\u6216\u6587\u4ef6\u8be6\u7ec6\u4fe1\u606f\u7684\u7ed3\u6784\u4f53\u3002\n\n  // \u83b7\u53d6\u76ee\u5f55\u6216\u6587\u4ef6\u7684\u8be6\u7ec6\u4fe1\u606f\n  if (stat(argv[1],&amp;st) != 0)\n  {\n    cout &lt;&lt; \"stat(\" &lt;&lt; argv[1] &lt;&lt; \"):\" &lt;&lt; strerror(errno) &lt;&lt; endl; return -1;\n  }\n\n  if (S_ISREG(st.st_mode))\n    cout &lt;&lt; argv[1] &lt;&lt; \"\u662f\u4e00\u4e2a\u6587\u4ef6(\" &lt;&lt; \"mtime=\" &lt;&lt; st.st_mtime &lt;&lt; \",size=\" &lt;&lt; st.st_size &lt;&lt; \")\\n\";\n  if (S_ISDIR(st.st_mode))\n    cout &lt;&lt; argv[1] &lt;&lt; \"\u662f\u4e00\u4e2a\u76ee\u5f55(\" &lt;&lt; \"mtime=\" &lt;&lt; st.st_mtime &lt;&lt; \",size=\" &lt;&lt; st.st_size &lt;&lt; \")\\n\";\n}\n</code></pre></li> </ul> </li> <li> <p><code>utime()</code>\u5e93\u51fd\u6570</p> <ul> <li><code>utime()</code>\u51fd\u6570\u7528\u4e8e\u4fee\u6539\u76ee\u5f55\u6216\u6587\u4ef6\u7684\u65f6\u95f4\u3002</li> <li>\u5305\u542b\u5934\u6587\u4ef6\uff1a<code>#include &lt;sys/types.h&gt; #include &lt;utime.h&gt;</code></li> <li>\u51fd\u6570\u58f0\u660e\uff1a<code>int utime(const char *filename, const struct utimbuf *times);</code><ul> <li>\u51fd\u6570\u7528\u6765\u4fee\u6539\u53c2\u6570<code>filename</code>\u7684<code>st_atime</code>\u548c<code>st_mtime</code>\u3002\u5982\u679c\u53c2\u6570<code>times</code>\u4e3a\u7a7a\u5730\u5740\uff0c\u5219\u8bbe\u7f6e\u4e3a\u5f53\u524d\u65f6\u95f4</li> <li>\u7ed3\u6784<code>utimbuf</code>\u58f0\u660e\u5982\u4e0b\uff1a     <pre><code>struct utimbuf\n{\n    time_t actime;\n    time_t modtime;\n};\n</code></pre></li> <li>\u8fd4\u56de\u503c\uff1a<code>0-</code>\u6210\u529f\uff0c<code>-1-</code>\u5931\u8d25\uff0c<code>errno</code>\u88ab\u8bbe\u7f6e</li> </ul> </li> </ul> </li> <li> <p><code>rename()</code>\u5e93\u51fd\u6570</p> <ul> <li><code>rename()</code>\u51fd\u6570\u7528\u4e8e\u91cd\u547d\u540d\u76ee\u5f55\u6216\u6587\u4ef6\uff0c\u76f8\u5f53\u4e8e\u64cd\u4f5c\u7cfb\u7edf\u7684<code>mv</code>\u547d\u4ee4\u3002</li> <li>\u5305\u542b\u5934\u6587\u4ef6\uff1a<code>#include &lt;stdio.h&gt;</code></li> <li>\u51fd\u6570\u58f0\u660e\uff1a<code>int rename(const char *oldpath, const char *newpath);</code></li> <li>\u53c2\u6570\u8bf4\u660e\uff1a<ul> <li><code>oldpath</code>     \u539f\u76ee\u5f55\u6216\u6587\u4ef6\u540d\u3002</li> <li><code>newpath</code>     \u76ee\u6807\u76ee\u5f55\u6216\u6587\u4ef6\u540d\u3002</li> <li>\u8fd4\u56de\u503c\uff1a<code>0-</code>\u6210\u529f\uff0c<code>-1-</code>\u5931\u8d25\uff0c<code>errno</code>\u88ab\u8bbe\u7f6e\u3002</li> </ul> </li> </ul> </li> <li> <p>remove()\u5e93\u51fd\u6570</p> <ul> <li>remove()\u51fd\u6570\u7528\u4e8e\u5220\u9664\u76ee\u5f55\u6216\u6587\u4ef6\uff0c\u76f8\u5f53\u4e8e\u64cd\u4f5c\u7cfb\u7edf\u7684rm\u547d\u4ee4\u3002</li> <li>\u5305\u542b\u5934\u6587\u4ef6\uff1a<code>#include &lt;stdio.h&gt;</code></li> <li>\u51fd\u6570\u58f0\u660e\uff1a<code>int remove(const char *pathname);</code></li> <li>\u53c2\u6570\u8bf4\u660e\uff1a<ul> <li><code>pathname</code> \u5f85\u5220\u9664\u7684\u76ee\u5f55\u6216\u6587\u4ef6\u540d\u3002</li> <li>\u8fd4\u56de\u503c\uff1a<code>0-</code>\u6210\u529f\uff0c<code>-1-</code>\u5931\u8d25\uff0c<code>e</code>rrno`\u88ab\u8bbe\u7f6e</li> </ul> </li> </ul> </li> </ol>"},{"location":"Project/Backend%20server/Linux/Error/","title":"system error","text":""},{"location":"Project/Backend%20server/Linux/Error/#_1","title":"\u7b80\u4ecb","text":"<ul> <li>\u5728<code>C++</code>\u7a0b\u5e8f\u4e2d\uff0c\u5982\u679c\u8c03\u7528\u4e86\u5e93\u51fd\u6570\uff0c\u53ef\u4ee5\u901a\u8fc7\u51fd\u6570\u7684\u8fd4\u56de\u503c\u5224\u65ad\u8c03\u7528\u662f\u5426\u6210\u529f\u3002\u5176\u5b9e\uff0c\u8fd8\u6709\u4e00\u4e2a\u6574\u578b\u7684\u5168\u5c40\u53d8\u91cf<code>errno</code>\uff0c\u5b58\u653e\u4e86\u51fd\u6570\u8c03\u7528\u8fc7\u7a0b\u4e2d\u4ea7\u751f\u7684\u9519\u8bef\u4ee3\u7801</li> <li>\u5982\u679c\u8c03\u7528\u5e93\u51fd\u6570\u5931\u8d25\uff0c\u53ef\u4ee5\u901a\u8fc7<code>errno</code>\u7684\u503c\u6765\u67e5\u627e\u539f\u56e0\uff0c\u8fd9\u4e5f\u662f\u8c03\u8bd5\u7a0b\u5e8f\u7684\u4e00\u4e2a\u91cd\u8981\u65b9\u6cd5</li> <li>errno\u5728<code>&lt;errno.h&gt;</code>\u4e2d\u58f0\u660e\u3002</li> <li>\u914d\u5408 <code>strerror()</code>\u548c<code>perror()</code>\u4e24\u4e2a\u5e93\u51fd\u6570\uff0c\u53ef\u4ee5\u67e5\u770b\u51fa\u9519\u7684\u8be6\u7ec6\u4fe1\u606f</li> </ul>"},{"location":"Project/Backend%20server/Linux/Error/#strerror","title":"strerror()\u5e93\u51fd\u6570","text":"<ul> <li><code>strerror()</code> \u5728<code>&lt;string.h&gt;</code>\u4e2d\u58f0\u660e\uff0c\u7528\u4e8e\u83b7\u53d6\u9519\u8bef\u4ee3\u7801\u5bf9\u5e94\u7684\u8be6\u7ec6\u4fe1\u606f\u3002</li> <li><code>char *strerror(int errnum)</code>;                         // \u975e\u7ebf\u7a0b\u5b89\u5168\u3002</li> <li><code>int strerror_r(int errnum, char *buf, size_t buflen)</code>;       // \u7ebf\u7a0b\u5b89\u5168\u3002</li> <li> <p>\u793a\u4f8b\uff1a     <pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\nusing namespace std;\n\nint main()\n{\n  int ii;\n\n  for(ii=0;ii&lt;150;ii++)     // gcc8.3.1\u4e00\u5171\u6709133\u4e2a\u9519\u8bef\u4ee3\u7801\u3002\n  {\n    cout &lt;&lt; ii &lt;&lt; \":\" &lt;&lt; strerror(ii) &lt;&lt; endl;\n  }\n}\n</code></pre></p> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;\n#include &lt;cerrno&gt;\n#include &lt;sys/stat.h&gt;\nusing namespace std;\n\nint main()\n{\n  int iret=mkdir(\"/tmp/aaa\",0755);\n\n  cout &lt;&lt; \"iret=\" &lt;&lt; iret &lt;&lt; endl;\n  cout &lt;&lt; errno &lt;&lt; \":\" &lt;&lt; strerror(errno) &lt;&lt; endl;\n}\n</code></pre> </li> </ul>"},{"location":"Project/Backend%20server/Linux/Error/#perror","title":"perror()\u5e93\u51fd\u6570","text":"<ul> <li><code>perror()</code> \u5728<code>&lt;stdio.h&gt;</code>\u4e2d\u58f0\u660e\uff0c\u7528\u4e8e\u5728\u63a7\u5236\u53f0\u663e\u793a\u6700\u8fd1\u4e00\u6b21\u7cfb\u7edf\u9519\u8bef\u7684\u8be6\u7ec6\u4fe1\u606f\uff0c\u5728\u5b9e\u9645\u5f00\u53d1\u4e2d\uff0c\u670d\u52a1\u7a0b\u5e8f\u5728\u540e\u53f0\u8fd0\u884c\uff0c\u901a\u8fc7\u63a7\u5236\u53f0\u663e\u793a\u9519\u8bef\u4fe1\u606f\u610f\u4e49\u4e0d\u5927\u3002\uff08\u5bf9\u8c03\u8bd5\u7a0b\u5e8f\u7565\u6709\u5e2e\u52a9\uff09</li> <li><code>void perror(const char *s)</code>;</li> </ul>"},{"location":"Project/Backend%20server/Linux/Error/#_2","title":"\u6ce8\u610f\u4e8b\u9879","text":"<ol> <li>\u8c03\u7528\u5e93\u51fd\u6570\u5931\u8d25\u4e0d\u4e00\u5b9a\u4f1a\u8bbe\u7f6e<code>errno</code><ul> <li>\u5e76\u4e0d\u662f\u5168\u90e8\u7684\u5e93\u51fd\u6570\u5728\u8c03\u7528\u5931\u8d25\u65f6\u90fd\u4f1a\u8bbe\u7f6ee<code>rrno</code>\u7684\u503c\uff0c\u4ee5<code>man</code>\u624b\u518c\u4e3a\u51c6\uff08\u4e00\u822c\u6765\u8bf4\uff0c\u4e0d\u5c5e\u4e8e\u7cfb\u7edf\u8c03\u7528\u7684\u51fd\u6570\u4e0d\u4f1a\u8bbe\u7f6e<code>errno</code>\uff0c\u5c5e\u4e8e\u7cfb\u7edf\u8c03\u7528\u7684\u51fd\u6570\u624d\u4f1a\u8bbe\u7f6e<code>errno</code>\uff09</li> </ul> </li> <li><code>errno</code>\u4e0d\u80fd\u4f5c\u4e3a\u8c03\u7528\u5e93\u51fd\u6570\u5931\u8d25\u7684\u6807\u5fd7<ul> <li><code>errno</code>\u7684\u503c\u53ea\u6709\u5728\u5e93\u51fd\u6570\u8c03\u7528\u53d1\u751f\u9519\u8bef\u65f6\u624d\u4f1a\u88ab\u8bbe\u7f6e\uff0c\u5f53\u5e93\u51fd\u6570\u8c03\u7528\u6210\u529f\u65f6\uff0c<code>errno</code>\u7684\u503c\u4e0d\u4f1a\u88ab\u4fee\u6539\uff0c\u4e0d\u4f1a\u4e3b\u52a8\u7684\u7f6e\u4e3a <code>0</code></li> <li>\u5728\u5b9e\u9645\u5f00\u53d1\u4e2d\uff0c\u5224\u65ad\u51fd\u6570\u6267\u884c\u662f\u5426\u6210\u529f\u8fd8\u5f97\u9760\u51fd\u6570\u7684\u8fd4\u56de\u503c\uff0c\u53ea\u6709\u5728\u8fd4\u56de\u503c\u662f\u5931\u8d25\u7684\u60c5\u51b5\u4e0b\uff0c\u624d\u9700\u8981\u5173\u6ce8<code>errno</code>\u7684\u503c</li> <li>\u793a\u4f8b\uff1a     <pre><code>#include &lt;iostream&gt;\n#include &lt;cstring&gt;    // strerror()\u51fd\u6570\u9700\u8981\u7684\u5934\u6587\u4ef6\u3002\n#include &lt;cerrno&gt;     // errno\u5168\u5c40\u53d8\u91cf\u7684\u5934\u6587\u4ef6\u3002\n#include &lt;sys/stat.h&gt; // mkdir()\u51fd\u6570\u9700\u8981\u7684\u5934\u6587\u4ef6\u3002\nusing namespace std;\n\nint main()\n{\nint iret=mkdir(\"/tmp/aaa/bb/cc/dd\",0755);\nif (iret!=0)\n{\n    cout &lt;&lt; \"iret=\" &lt;&lt; iret &lt;&lt; endl;\n    cout &lt;&lt; errno &lt;&lt; \":\" &lt;&lt; strerror(errno) &lt;&lt; endl;\n    perror(\"\u8c03\u7528mkdir(/tmp/aaa/bb/cc/dd)\u5931\u8d25\");\n}\n\niret=mkdir(\"/tmp/dd\",0755);\nif (ireet!=0)\n  {\n    cout &lt;&lt; \"iret=\" &lt;&lt; iret &lt;&lt; endl;\n    cout &lt;&lt; errno &lt;&lt; \":\" &lt;&lt; strerror(errno) &lt;&lt; endl;\n    perror(\"\u8c03\u7528mkdir(/tmp/dd)\u5931\u8d25\");\n  }\n}\n</code></pre></li> </ul> </li> </ol>"},{"location":"Project/Backend%20server/Linux/File%20operations/","title":"File operations","text":""},{"location":"Project/Backend%20server/Linux/File%20operations/#_1","title":"\u6587\u4ef6\u64cd\u4f5c","text":"<ul> <li> <p>Linux\u5e95\u5c42\u6587\u4ef6\u7684\u64cd\u4f5c-\u521b\u5efa\u6587\u4ef6\u5e76\u5199\u5165\u6570\u636e <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;fcntl.h&gt;\n#include &lt;unistd.h&gt;\nusing namespace std;\n\nint main()\n{\n  int fd;    // \u5b9a\u4e49\u4e00\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26/\u6587\u4ef6\u53e5\u67c4\u3002\n\n  // \u6253\u5f00\u6587\u4ef6\uff0c\u6ce8\u610f\uff0c\u5982\u679c\u521b\u5efa\u540e\u7684\u6587\u4ef6\u6ca1\u6709\u6743\u9650\uff0c\u53ef\u4ee5\u624b\u5de5\u6388\u6743chmod 777 data.txt\u3002\n  fd=open(\"data.txt\",O_CREAT|O_RDWR|O_TRUNC);\n  if (fd==-1)\n  {\n    perror(\"open(data.txt)\"); return -1;\n  }\n\n  printf(\"\u6587\u4ef6\u63cf\u8ff0\u7b26fd=%d\\n\",fd);\n\n  char buffer[1024];\n  strcpy(buffer,\"\u6211\u662f\u4e00\u53ea\u50bb\u50bb\u9e1f\u3002\\n\");\n\n  if (write(fd,buffer,strlen(buffer))==-1)    // \u628a\u6570\u636e\u5199\u5165\u6587\u4ef6\u3002\n  {\n    perror(\"write()\"); return -1;\n  }\n\n  close(fd);  // \u5173\u95ed\u6587\u4ef6\u3002\n}\n</code></pre></p> </li> <li> <p>Linux\u5e95\u5c42\u6587\u4ef6\u7684\u64cd\u4f5c-\u8bfb\u53d6\u6587\u4ef6\u6570\u636e <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;fcntl.h&gt;\n#include &lt;unistd.h&gt;\n\nint main()\n{\n  int fd;    // \u5b9a\u4e49\u4e00\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26/\u6587\u4ef6\u53e5\u67c4\u3002\n\n  fd=open(\"data.txt\",O_RDONLY); // \u6253\u5f00\u6587\u4ef6\u3002\n  if (fd==-1)\n  {\n    perror(\"open(data.txt)\"); return -1;\n  }\n\n  printf(\"\u6587\u4ef6\u63cf\u8ff0\u7b26fd=%d\\n\",fd);\n\n  char buffer[1024];\n  memset(buffer,0,sizeof(buffer));\n  if (read(fd,buffer,sizeof(buffer))==-1)    // \u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u6570\u636e\u3002\n  {\n    perror(\"write()\"); return -1;\n  }\n\n  printf(\"%s\",buffer);\n\n  close(fd);  // \u5173\u95ed\u6587\u4ef6\u3002\n}\n</code></pre></p> </li> </ul>"},{"location":"Project/Backend%20server/Linux/File%20operations/#_2","title":"\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u5206\u914d\u89c4\u5219","text":"<ul> <li><code>/proc/\u8fdb\u7a0bid/fd</code>\u76ee\u5f55\u4e2d\uff0c\u5b58\u653e\u4e86\u6bcf\u4e2a\u8fdb\u7a0b\u6253\u5f00\u7684<code>fd</code></li> <li><code>Linux</code>\u8fdb\u7a0b\u9ed8\u8ba4\u6253\u5f00\u4e86\u4e09\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26\uff1a<code>0</code>-\u6807\u51c6\u8f93\u5165\uff08\u952e\u76d8\uff09\uff0c<code>1</code>-\u6807\u51c6\u8f93\u51fa (\u663e\u793a\u5668)\uff0c<code>2</code>-\u6807\u51c6\u9519\u8bef (\u663e\u793a\u5668) , <code>cin cout cerr</code></li> <li> <p>\u6587\u4ef6\u63cf\u8ff0\u7b26\u7684\u5206\u914d\u89c4\u5219\u662f\uff1a\u627e\u5230\u6700\u5c0f\u7684\uff0c\u6ca1\u6709\u88ab\u5360\u7528\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26 <pre><code>#include &lt;stdio.h&gt;\n#include &lt;stdlib.h&gt;\n#include &lt;string.h&gt;\n#include &lt;fcntl.h&gt;\n#include &lt;unistd.h&gt;\n#include&lt;iostream&gt;\nusing namespace std;\n\nint main()\n{\n  // \u5173\u95ed\u6587\u4ef6\u63cf\u8ff0\u7b26 0,1,2\n  close(0);\n  close(1);\n  close(2);\n\n  // int i =0;\n  // cin&gt;&gt;i;\n  // cout&lt;&lt;\"i=\"&lt;&lt;i&lt;&lt;endl;\n  // cerr&lt;&lt;\"i=\"&lt;&lt;i&lt;&lt;endl;\n\n  int fd;    // \u5b9a\u4e49\u4e00\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26/\u6587\u4ef6\u53e5\u67c4\u3002\n\n  // \u6253\u5f00\u6587\u4ef6\uff0c\u6ce8\u610f\uff0c\u5982\u679c\u521b\u5efa\u540e\u7684\u6587\u4ef6\u6ca1\u6709\u6743\u9650\uff0c\u53ef\u4ee5\u624b\u5de5\u6388\u6743chmod 777 data.txt\u3002\n  fd=open(\"data.txt\",O_CREAT|O_RDWR|O_TRUNC);  //\u7531\u4e8e\u5173\u95ed0\uff0c1\uff0c2\uff0c\u6240\u4ee5\u6587\u4ef6\u63cf\u8ff0\u7b26\u4ece\u6700\u5c0f\u76840\u5f00\u59cb\n  if (fd==-1)\n  {\n    perror(\"open(data.txt)\"); return -1;\n  }\n\n  printf(\"\u6587\u4ef6\u63cf\u8ff0\u7b26fd=%d\\n\",fd);\n\n  char buffer[1024];\n  strcpy(buffer,\"\u6211\u662f\u4e00\u53ea\u50bb\u50bb\u9e1f\u3002\\n\");\n\n  if (write(fd,buffer,strlen(buffer))==-1)    // \u628a\u6570\u636e\u5199\u5165\u6587\u4ef6\u3002\n  {\n    perror(\"write()\"); return -1;\n  }\n  sleep(100);\n  close(fd);  // \u5173\u95ed\u6587\u4ef6\u3002\n}\n</code></pre></p> </li> <li> <p>\u5bf9<code>`Linux\u6765\u8bf4\uff0c</code>socket`\u64cd\u4f5c\u4e0e\u6587\u4ef6\u64cd\u4f5c\u6ca1\u6709\u533a\u522b</p> </li> <li> <p>\u5728\u7f51\u7edc\u4f20\u8f93\u6570\u636e\u7684\u8fc7\u7a0b\u4e2d\uff0c\u53ef\u4ee5\u4f7f\u7528\u6587\u4ef6\u7684<code>I/O</code>\u51fd\u6570</p> </li> <li> <p>\u6587\u4ef6\u63cf\u8ff0\u7b26\u662f<code>Linux</code>\u5206\u914d\u7ed9\u6587\u4ef6\u6216<code>socket</code>\u7684\u6574\u6570</p> </li> </ul>"},{"location":"Project/Backend%20server/Linux/List/","title":"List","text":""},{"location":"Project/Backend%20server/Linux/List/#_1","title":"\u76ee\u5f55\u64cd\u4f5c\u51fd\u6570","text":"<ol> <li> <p>\u83b7\u53d6\u5f53\u524d\u5de5\u4f5c\u76ee\u5f55</p> <ul> <li>\u5305\u542b\u5934\u6587\u4ef6\uff1a<code>&lt;unistd.h&gt;</code></li> <li><code>char *getcwd(char *buf, size_t size)</code>; </li> <li><code>char *get_current_dir_name(void)</code>;</li> <li>\u793a\u4f8b\uff1a     <pre><code>#include &lt;iostream&gt;\n#include &lt;unistd.h&gt;\nusing namespace std;\n\nint main()\n{\nchar path1[256];   // linux\u7cfb\u7edf\u76ee\u5f55\u7684\u6700\u5927\u957f\u5ea6\u662f255\u3002\ngetcwd(path1,256);\ncout &lt;&lt; \"path1=\" &lt;&lt; path1 &lt;&lt; endl;\n\nchar *path2=get_current_dir_name();\ncout &lt;&lt; \"path2=\" &lt;&lt; path2 &lt;&lt; endl;\nfree(path2);   // \u6ce8\u610f\u91ca\u653e\u5185\u5b58\u3002malloc() new delete\n}\n</code></pre></li> </ul> </li> <li> <p>\u5207\u6362\u5de5\u4f5c\u76ee\u5f55</p> <ul> <li>\u5305\u542b\u5934\u6587\u4ef6\uff1a<code>&lt;unistd.h&gt;</code></li> <li><code>int chdir(const char *path)</code>;</li> <li>\u8fd4\u56de\u503c\uff1a<code>0</code>-\u6210\u529f\uff1b\u5176\u5b83-\u5931\u8d25\uff08\u76ee\u5f55\u4e0d\u5b58\u5728\u6216\u6ca1\u6709\u6743\u9650\uff09</li> </ul> </li> <li> <p>\u521b\u5efa\u76ee\u5f55</p> <ul> <li>\u5305\u542b\u5934\u6587\u4ef6\uff1a<code>&lt;sys/stat.h&gt;</code></li> <li><code>int mkdir(const char *pathname, mode_t mode)</code>;</li> <li><code>pathname</code>-\u76ee\u5f55\u540d</li> <li><code>mode</code>-\u8bbf\u95ee\u6743\u9650\uff0c\u5982<code>0755</code>\uff0c\u4e0d\u8981\u7701\u7565\u524d\u7f6e\u7684<code>0</code> \u4e3a\u516b\u8fdb\u5236</li> <li>\u8fd4\u56de\u503c\uff1a<code>0</code>-\u6210\u529f\uff1b\u5176\u5b83-\u5931\u8d25\uff08\u4e0a\u7ea7\u76ee\u5f55\u4e0d\u5b58\u5728\u6216\u6ca1\u6709\u6743\u9650\uff09 <code>/tmp/aaa  /tmp/aaa/bbb</code></li> </ul> </li> <li> <p>\u5220\u9664\u76ee\u5f55</p> <ul> <li>\u5305\u542b\u5934\u6587\u4ef6\uff1a<code>&lt;sys/stat.h&gt;</code></li> <li><code>int rmdir(const char *pathname)</code>;</li> <li><code>path</code>-\u76ee\u5f55\u540d</li> <li>\u8fd4\u56de\u503c\uff1a<code>0</code>-\u6210\u529f\uff1b\u5176\u5b83-\u5931\u8d25\uff08\u76ee\u5f55\u4e0d\u5b58\u5728\u6216\u6ca1\u6709\u6743\u9650\uff09</li> </ul> </li> </ol>"},{"location":"Project/Backend%20server/Linux/List/#_2","title":"\u83b7\u53d6\u76ee\u5f55\u4e2d\u6587\u4ef6\u7684\u5217\u8868","text":"<pre><code>\u6587\u4ef6\u5b58\u653e\u5728\u76ee\u5f55\u4e2d\uff0c\u5728\u5904\u7406\u6587\u4ef6\u4e4b\u524d\uff0c\u5fc5\u987b\u5148\u77e5\u9053\u76ee\u5f55\u4e2d\u6709\u54ea\u4e9b\u6587\u4ef6\uff0c\u6240\u4ee5\u8981\u83b7\u53d6\u76ee\u5f55\u4e2d\u6587\u4ef6\u7684\u5217\u8868\n</code></pre> <ol> <li>\u5305\u542b\u5934\u6587\u4ef6<ul> <li><code>#include &lt;dirent.h&gt;</code></li> </ul> </li> <li>\u76f8\u5173\u7684\u5e93\u51fd\u6570<ol> <li>\u7528<code>opendir()</code>\u51fd\u6570\u6253\u5f00\u76ee\u5f55<ul> <li><code>DIR *opendir(const char *pathname)</code>;</li> <li>\u6210\u529f-\u8fd4\u56de\u76ee\u5f55\u7684\u5730\u5740\uff0c\u5931\u8d25-\u8fd4\u56de\u7a7a\u5730\u5740;</li> </ul> </li> <li>\u7528<code>readdir()</code>\u51fd\u6570\u5faa\u73af\u7684\u8bfb\u53d6\u76ee\u5f55<ul> <li><code>struct dirent *readdir(DIR *dirp)</code>;</li> <li>\u6210\u529f-\u8fd4\u56de<code>struct dirent</code>\u7ed3\u6784\u4f53\u7684\u5730\u5740\uff0c\u5931\u8d25-\u8fd4\u56de\u7a7a\u5730\u5740;</li> </ul> </li> <li>\u7528<code>closedir()</code>\u5173\u95ed\u76ee\u5f55\u3002<ul> <li><code>int closedir(DIR *dirp)</code>;</li> </ul> </li> </ol> </li> <li>\u6570\u636e\u7ed3\u6784<ul> <li>\u76ee\u5f55\u6307\u9488\uff1a<code>DIR *\u76ee\u5f55\u6307\u9488\u53d8\u91cf\u540d</code>;</li> <li>\u6bcf\u6b21\u8c03\u7528<code>readdir()</code>\uff0c\u51fd\u6570\u8fd4\u56de<code>struct dirent</code>\u7684\u5730\u5740\uff0c\u5b58\u653e\u4e86\u672c\u6b21\u8bfb\u53d6\u5230\u7684\u5185\u5bb9 <pre><code>struct dirent\n{\n   long d_ino;                              // inode number \u7d22\u5f15\u8282\u70b9\u53f7\u3002\n   off_t d_off;                             // offset to this dirent \u5728\u76ee\u5f55\u6587\u4ef6\u4e2d\u7684\u504f\u79fb\u3002\n   unsigned short d_reclen;             // length of this d_name \u6587\u4ef6\u540d\u957f\u5ea6\u3002\n   unsigned char d_type;                // the type of d_name \u6587\u4ef6\u7c7b\u578b\u3002\n   char d_name [NAME_MAX+1];    // file name\u6587\u4ef6\u540d\uff0c\u6700\u957f255\u5b57\u7b26\u3002\n};\n</code></pre></li> <li>\u91cd\u70b9\u5173\u6ce8\u7ed3\u6784\u4f53\u7684<code>d_name</code>\u548c<code>d_type</code>\u6210\u5458\u3002</li> <li><code>d_name</code>-\u6587\u4ef6\u540d\u6216\u76ee\u5f55\u540d\u3002</li> <li><code>d_type</code>-\u6587\u4ef6\u7684\u7c7b\u578b\uff0c\u6709\u591a\u79cd\u53d6\u503c\uff0c\u6700\u91cd\u8981\u7684\u662f<code>8</code>\u548c<code>4</code>\uff0c<code>8-\u5e38\u89c4\u6587\u4ef6\uff08A regular file\uff09</code>\uff1b<code>4-\u5b50\u76ee\u5f55\uff08A directory\uff09</code>\uff0c\u5176\u5b83\u7684\u6682\u65f6\u4e0d\u5173\u5fc3\u3002   \u6ce8\u610f\uff0c<code>d_name</code>\u7684\u6570\u636e\u7c7b\u578b\u662f\u5b57\u7b26\uff0c\u4e0d\u53ef\u76f4\u63a5\u663e\u793a\u3002</li> <li>\u793a\u4f8b\uff1a     <pre><code>#include &lt;iostream&gt;\n#include &lt;dirent.h&gt;\nusing namespace std;\n\nint main(int argc,char *argv[])\n{\nif (argc != 2) { cout &lt;&lt; \"Using ./demo \u76ee\u5f55\u540d\\n\"; return -1; }\n\nDIR *dir;   // \u5b9a\u4e49\u76ee\u5f55\u6307\u9488\u3002\n\n// \u6253\u5f00\u76ee\u5f55\u3002\nif ( (dir=opendir(argv[1])) == nullptr ) return -1;\n\n// \u7528\u4e8e\u5b58\u653e\u4ece\u76ee\u5f55\u4e2d\u8bfb\u53d6\u5230\u7684\u5185\u5bb9\u3002\nstruct dirent *stdinfo=nullptr;\n\nwhile (1)\n{\n    // \u8bfb\u53d6\u4e00\u9879\u5185\u5bb9\u5e76\u663e\u793a\u51fa\u6765\u3002\n    if ((stdinfo=readdir(dir)) == nullptr) break;\n\n    cout &lt;&lt; \"\u6587\u4ef6\u540d=\" &lt;&lt; stdinfo-&gt;d_name &lt;&lt; \"\uff0c\u6587\u4ef6\u7c7b\u578b=\" &lt;&lt; (int)stdinfo-&gt;d_type &lt;&lt; endl;\n}\n\nclosedir(dir);   // \u5173\u95ed\u76ee\u5f55\u6307\u9488\u3002\n}\n</code></pre></li> </ul> </li> </ol>"},{"location":"Project/Backend%20server/Linux/Time/","title":"Time","text":""},{"location":"Project/Backend%20server/Linux/Time/#_1","title":"\u7b80\u4ecb","text":"<ul> <li><code>UNIX</code>\u64cd\u4f5c\u7cfb\u7edf\u6839\u636e\u8ba1\u7b97\u673a\u4ea7\u751f\u7684\u5e74\u4ee3\u628a1970\u5e741\u67081\u65e5\u4f5c\u4e3aUNIX\u7684\u7eaa\u5143\u65f6\u95f4\uff0c1970\u5e741\u67081\u65e5\u662f\u65f6\u95f4\u7684\u4e2d\u95f4\u70b9\uff0c\u5c06\u4ece1970\u5e741\u67081\u65e5\u8d77\u7ecf\u8fc7\u7684\u79d2\u6570\u7528\u4e00\u4e2a\u6574\u6570\u5b58\u653e\u3002</li> </ul>"},{"location":"Project/Backend%20server/Linux/Time/#_2","title":"\u64cd\u4f5c\u51fd\u6570","text":"<ol> <li> <p>time_t\u522b\u540d</p> <ul> <li><code>time_t</code>\u7528\u4e8e\u8868\u793a\u65f6\u95f4\u7c7b\u578b\uff0c\u5b83\u662f\u4e00\u4e2along\u7c7b\u578b\u7684\u522b\u540d\uff0c\u5728<code>&lt;time.h&gt;</code>\u6587\u4ef6\u4e2d\u5b9a\u4e49\uff0c\u8868\u793a\u4ece1970\u5e741\u67081\u65e50\u65f60\u52060\u79d2\u5230\u73b0\u5728\u7684\u79d2\u6570\u3002</li> <li><code>typedef long time_t</code>;</li> </ul> </li> <li> <p>time()\u5e93\u51fd\u6570</p> <ul> <li><code>time()</code>\u5e93\u51fd\u6570\u7528\u4e8e\u83b7\u53d6\u64cd\u4f5c\u7cfb\u7edf\u7684\u5f53\u524d\u65f6\u95f4</li> <li>\u5305\u542b\u5934\u6587\u4ef6\uff1a<code>&lt;time.h&gt;</code></li> <li>\u4e24\u79cd\u8c03\u7528\u65b9\u6cd5:<ul> <li><code>time_t now=time(0)</code>;            \u5c06\u7a7a\u5730\u5740\u4f20\u9012\u7ed9<code>time()</code>\u51fd\u6570\uff0c\u5e76\u5c06<code>time()</code>\u8fd4\u56de\u503c\u8d4b\u7ed9\u53d8\u91cf<code>now</code></li> <li><code>time_t now; time(&amp;now)</code>;      \u5c06\u53d8\u91cfnow\u7684\u5730\u5740\u4f5c\u4e3a\u53c2\u6570\u4f20\u9012\u7ed9<code>time()</code>\u51fd\u6570</li> </ul> </li> </ul> </li> <li> <p>tm\u7ed3\u6784\u4f53</p> <ul> <li><code>time_t</code>\u662f\u4e00\u4e2a\u957f\u6574\u6570\uff0c\u4e0d\u7b26\u5408\u4eba\u7c7b\u7684\u4f7f\u7528\u4e60\u60ef\uff0c\u9700\u8981\u8f6c\u6362\u6210<code>tm</code>\u7ed3\u6784\u4f53\uff0c<code>tm</code>\u7ed3\u6784\u4f53\u5728<code>&lt;time.h&gt;</code>\u4e2d\u58f0\u660e\uff0c\u5982: <code>2022-10-01 15:30:25   Oct 1,2022 15:30:25</code></li> <li> <p><code>tm</code>\u7ed3\u6784\u4f53\u7684\u5b9a\u4e49\u5982\u4e0b:</p> <pre><code>struct tm\n{\n    int tm_year;    // \u5e74\u4efd\uff1a\u5176\u503c\u7b49\u4e8e\u5b9e\u9645\u5e74\u4efd\u51cf\u53bb1900\n    int tm_mon; // \u6708\u4efd\uff1a\u53d6\u503c\u533a\u95f4\u4e3a[0,11]\uff0c\u5176\u4e2d0\u4ee3\u8868\u4e00\u6708\uff0c11\u4ee3\u886812\u6708\n    int tm_mday;    // \u65e5\u671f\uff1a\u4e00\u4e2a\u6708\u4e2d\u7684\u65e5\u671f\uff0c\u53d6\u503c\u533a\u95f4\u4e3a[1,31]\n    int tm_hour;    // \u65f6\uff1a\u53d6\u503c\u533a\u95f4\u4e3a[0,23]\n    int tm_min; // \u5206\uff1a\u53d6\u503c\u533a\u95f4\u4e3a[0,59]\n    int tm_sec;         // \u79d2\uff1a\u53d6\u503c\u533a\u95f4\u4e3a[0,59]\n    int tm_wday;    // \u661f\u671f\uff1a\u53d6\u503c\u533a\u95f4\u4e3a[0,6]\uff0c\u5176\u4e2d0\u4ee3\u8868\u661f\u671f\u5929\uff0c6\u4ee3\u8868\u661f\u671f\u516d\n    int tm_yday;    // \u4ece\u6bcf\u5e74\u76841\u67081\u65e5\u5f00\u59cb\u7b97\u8d77\u7684\u5929\u6570\uff1a\u53d6\u503c\u533a\u95f4\u4e3a[0,365] \n    int tm_isdst;   // \u590f\u4ee4\u65f6\u6807\u8bc6\u7b26\uff0c\u8be5\u5b57\u6bb5\u610f\u4e49\u4e0d\u5927\n};\n</code></pre> </li> </ul> </li> <li> <p>localtime()\u5e93\u51fd\u6570</p> <ul> <li><code>localtime()</code>\u51fd\u6570\u7528\u4e8e\u628a<code>time_t</code>\u8868\u793a\u7684\u65f6\u95f4\u8f6c\u6362\u4e3a<code>tm</code>\u7ed3\u6784\u4f53\u8868\u793a\u7684\u65f6\u95f4;</li> <li><code>localtime()</code>\u51fd\u6570\u4e0d\u662f\u7ebf\u7a0b\u5b89\u5168\u7684\uff0c<code>localtime_r()</code>\u662f\u7ebf\u7a0b\u5b89\u5168\u7684;</li> <li>\u5305\u542b\u5934\u6587\u4ef6\uff1a<code>&lt;time.h&gt;</code></li> <li>\u51fd\u6570\u58f0\u660e\uff1a<ul> <li>struct tm *localtime(const time_t *timep);</li> <li>struct tm *localtime_r(const time_t *timep, struct tm *result);</li> </ul> </li> <li>\u793a\u4f8b: <pre><code>  #include &lt;iostream&gt;\n  #include &lt;time.h&gt;      // \u65f6\u95f4\u64cd\u4f5c\u7684\u5934\u6587\u4ef6\u3002\n  using namespace std;\n\n  int main()\n  {\n    time_t now=time(0);             // \u83b7\u53d6\u5f53\u524d\u65f6\u95f4\uff0c\u5b58\u653e\u5728now\u4e2d\u3002\n\n    cout &lt;&lt; \"now=\" &lt;&lt; now &lt;&lt; endl;  // \u663e\u793a\u5f53\u524d\u65f6\u95f4\uff0c1970\u5e741\u67081\u65e5\u5230\u73b0\u5728\u7684\u79d2\u6570\u3002\n\n    tm tmnow;\n    localtime_r(&amp;now,&amp;tmnow);       // \u628a\u6574\u6570\u7684\u65f6\u95f4\u8f6c\u6362\u6210tm\u7ed3\u6784\u4f53\u3002\n\n    // \u6839\u636etm\u7ed3\u6784\u4f53\u62fc\u63a5\u6210\u4e2d\u56fd\u4eba\u4e60\u60ef\u7684\u5b57\u7b26\u4e32\u683c\u5f0f\u3002\n    string stime = to_string(tmnow.tm_year+1900)+\"-\"\n                 + to_string(tmnow.tm_mon+1)+\"-\"\n                 + to_string(tmnow.tm_mday)+\" \"\n                 + to_string(tmnow.tm_hour)+\":\"\n                 + to_string(tmnow.tm_min)+\":\"\n                 + to_string(tmnow.tm_sec);\n\n    cout &lt;&lt; \"stime=\" &lt;&lt; stime &lt;&lt; endl;\n  }\n</code></pre></li> </ul> </li> <li> <p>mktime()\u5e93\u51fd\u6570</p> <ul> <li>mktime()\u51fd\u6570\u7684\u529f\u80fd\u4e0elocaltime()\u51fd\u6570\u76f8\u53cd\uff0c\u7528\u4e8e\u628atm\u7ed3\u6784\u4f53\u65f6\u95f4\u8f6c\u6362\u4e3atime_t\u65f6\u95f4</li> <li>\u5305\u542b\u5934\u6587\u4ef6\uff1a <li>\u51fd\u6570\u58f0\u660e\uff1a<ul> <li>time_t mktime(struct tm *tm);</li> <li>\u8be5\u51fd\u6570\u4e3b\u8981\u7528\u4e8e\u65f6\u95f4\u7684\u8fd0\u7b97\uff0c\u4f8b\u5982\uff1a\u628a2022-03-01 00:00:25\u52a030\u5206\u949f</li> </ul> </li> <li>\u601d\u8def\uff1a<ol> <li>\u89e3\u6790\u5b57\u7b26\u4e32\u683c\u5f0f\u7684\u65f6\u95f4\uff0c\u8f6c\u6362\u6210<code>tm</code>\u7ed3\u6784\u4f53\uff1b</li> <li>\u7528<code>mktime()</code>\u51fd\u6570\u628atm\u7ed3\u6784\u4f53\u8f6c\u6362\u6210<code>time_t</code>\u65f6\u95f4\uff1b</li> <li>\u628a<code>time_t</code>\u65f6\u95f4\u52a0<code>30*60</code>\u79d2\uff1b</li> <li>\u7528<code>localtime_r()</code>\u51fd\u6570\u628a<code>time_t</code>\u65f6\u95f4\u8f6c\u6362\u6210<code>tm</code>\u7ed3\u6784\u4f53\uff1b</li> <li>\u628a<code>tm</code>\u7ed3\u6784\u4f53\u8f6c\u6362\u6210\u5b57\u7b26\u4e32;</li> </ol> </li> <li> <p>gettimeofday()\u5e93\u51fd\u6570</p> <ul> <li>\u7528\u4e8e\u83b7\u53d61970\u5e741\u67081\u65e5\u5230\u73b0\u5728\u7684\u79d2\u548c\u5f53\u524d\u79d2\u4e2d\u5df2\u901d\u53bb\u7684\u5fae\u79d2\u6570\uff0c\u53ef\u4ee5\u7528\u4e8e\u7a0b\u5e8f\u7684\u8ba1\u65f6</li> <li>\u5305\u542b\u5934\u6587\u4ef6\uff1a<code>&lt;sys/time.h&gt;</code></li> <li> <p>\u51fd\u6570\u58f0\u660e\uff1a</p> <pre><code>int gettimeofday(struct timeval *tv, struct timezone *tz);\n</code></pre> <pre><code>struct timeval {\ntime_t      tv_sec;     /* 1970-1-1\u5230\u73b0\u5728\u7684\u79d2\u6570 */\nsuseconds_t tv_usec;    /* \u5f53\u524d\u79d2\u4e2d\uff0c\u5df2\u901d\u53bb\u7684\u5fae\u79d2\u6570 */\n}; \n</code></pre> <pre><code>struct timezone {         /* \u5728\u5b9e\u9645\u5f00\u53d1\u4e2d\uff0c\u6d3e\u4e0d\u4e0a\u7528\u573a */\n    int tz_minuteswest;     /* minutes west of Greenwich */ \n    int tz_dsttime;             /* type of DST correction */\n}; \n</code></pre> </li> <li> <p>\u793a\u4f8b\uff1a     <pre><code>#include &lt;iostream&gt;\n#include &lt;sys/time.h&gt;  // gettimeofday()\u9700\u8981\u7684\u5934\u6587\u4ef6\u3002\nusing namespace std;\n\nint main()\n{\n  timeval start,end;\n\n  gettimeofday(&amp;start, 0 ); // \u8ba1\u65f6\u5f00\u59cb\u3002\n\n  for (int ii=0;ii&lt;1000000000;ii++)\n    ;\n\n  gettimeofday(&amp;end, 0 );   // \u8ba1\u65f6\u7ed3\u675f\u3002\n\n  // \u8ba1\u7b97\u6d88\u8017\u7684\u65f6\u957f\u3002\n  timeval tv;\n  tv.tv_usec=end.tv_usec-start.tv_usec;\n  tv.tv_sec=end.tv_sec-start.tv_sec;\n  if (tv.tv_usec&lt;0)\n  {\n    tv.tv_usec=1000000-tv.tv_usec;\n    tv.tv_sec--;\n  }\n\n  cout &lt;&lt; \"\u8017\u65f6\uff1a\" &lt;&lt; tv.tv_sec &lt;&lt; \"\u79d2\u548c\" &lt;&lt; tv.tv_usec &lt;&lt; \"\u5fae\u79d2\u3002\\n\";\n}\n</code></pre></p> </li> </ul> </li> <li> <p>\u7a0b\u5e8f\u7761\u7720</p> <ul> <li>\u5982\u679c\u9700\u8981\u628a\u7a0b\u5e8f\u6302\u8d77\u4e00\u6bb5\u65f6\u95f4\uff0c\u53ef\u4ee5\u4f7f\u7528<code>sleep()</code>\u548c<code>usleep()</code>\u4e24\u4e2a\u5e93\u51fd\u6570\u3002</li> <li>\u5305\u542b\u5934\u6587\u4ef6\uff1a<code>&lt;unistd.h&gt;</code></li> <li>\u51fd\u6570\u58f0\u660e\uff1a<ul> <li><code>unsigned int sleep(unsigned int seconds);</code></li> <li><code>int usleep(useconds_t usec);</code></li> </ul> </li> </ul> </li>"},{"location":"Project/Backend%20server/Network/Encapsulate%20socket/","title":"Encapsulate socket","text":""},{"location":"Project/Backend%20server/Network/Encapsulate%20socket/#socket","title":"\u5c01\u88c5socket\u901a\u8baf\u7684\u5ba2\u6237\u7aef","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;cstring&gt;\n#include &lt;cstdlib&gt;\n#include &lt;unistd.h&gt;\n#include &lt;netdb.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;sys/socket.h&gt;\n#include &lt;arpa/inet.h&gt;\nusing namespace std;\n\nclass ctcpclient         // TCP\u901a\u8baf\u7684\u5ba2\u6237\u7aef\u7c7b\u3002\n{\nprivate:\n  int m_clientfd;        // \u5ba2\u6237\u7aef\u7684socket\uff0c-1\u8868\u793a\u672a\u8fde\u63a5\u6216\u8fde\u63a5\u5df2\u65ad\u5f00\uff1b&gt;=0\u8868\u793a\u6709\u6548\u7684socket\u3002\n  string m_ip;           // \u670d\u52a1\u7aef\u7684IP/\u57df\u540d\u3002\n  unsigned short m_port; // \u901a\u8baf\u7aef\u53e3\u3002\npublic:\n  ctcpclient():m_clientfd(-1) {}\n\n  // \u5411\u670d\u52a1\u7aef\u53d1\u8d77\u8fde\u63a5\u8bf7\u6c42\uff0c\u6210\u529f\u8fd4\u56detrue\uff0c\u5931\u8d25\u8fd4\u56defalse\u3002\n  bool connect(const string &amp;in_ip,const unsigned short in_port)\n  {\n    if (m_clientfd!=-1) return false; // \u5982\u679csocket\u5df2\u8fde\u63a5\uff0c\u76f4\u63a5\u8fd4\u56de\u5931\u8d25\u3002\n\n    m_ip=in_ip; m_port=in_port;       // \u628a\u670d\u52a1\u7aef\u7684IP\u548c\u7aef\u53e3\u4fdd\u5b58\u5230\u6210\u5458\u53d8\u91cf\u4e2d\u3002\n\n    // \u7b2c1\u6b65\uff1a\u521b\u5efa\u5ba2\u6237\u7aef\u7684socket\u3002\n    if ( (m_clientfd = socket(AF_INET,SOCK_STREAM,0))==-1) return false;\n\n    // \u7b2c2\u6b65\uff1a\u5411\u670d\u52a1\u5668\u53d1\u8d77\u8fde\u63a5\u8bf7\u6c42\u3002\n    struct sockaddr_in servaddr;               // \u7528\u4e8e\u5b58\u653e\u534f\u8bae\u3001\u7aef\u53e3\u548cIP\u5730\u5740\u7684\u7ed3\u6784\u4f53\u3002\n    memset(&amp;servaddr,0,sizeof(servaddr));\n    servaddr.sin_family = AF_INET;             // \u2460\u534f\u8bae\u65cf\uff0c\u56fa\u5b9a\u586bAF_INET\u3002\n    servaddr.sin_port = htons(m_port);         // \u2461\u6307\u5b9a\u670d\u52a1\u7aef\u7684\u901a\u4fe1\u7aef\u53e3\u3002\n\n    struct hostent* h;                         // \u7528\u4e8e\u5b58\u653e\u670d\u52a1\u7aefIP\u5730\u5740(\u5927\u7aef\u5e8f)\u7684\u7ed3\u6784\u4f53\u7684\u6307\u9488\u3002\n    if ((h=gethostbyname(m_ip.c_str()))==nullptr ) // \u628a\u57df\u540d/\u4e3b\u673a\u540d/\u5b57\u7b26\u4e32\u683c\u5f0f\u7684IP\u8f6c\u6362\u6210\u7ed3\u6784\u4f53\u3002\n    {\n      ::close(m_clientfd); m_clientfd=-1; return false;\n    }\n    memcpy(&amp;servaddr.sin_addr,h-&gt;h_addr,h-&gt;h_length); // \u2462\u6307\u5b9a\u670d\u52a1\u7aef\u7684IP(\u5927\u7aef\u5e8f)\u3002\n\n    // \u5411\u670d\u52a1\u7aef\u53d1\u8d77\u8fde\u63a5\u6e05\u6c42\u3002\n    if (::connect(m_clientfd,(struct sockaddr *)&amp;servaddr,sizeof(servaddr))==-1)  \n    {\n      ::close(m_clientfd); m_clientfd=-1; return false;\n    }\n\n    return true;\n  }\n\n  // \u5411\u670d\u52a1\u7aef\u53d1\u9001\u62a5\u6587\uff0c\u6210\u529f\u8fd4\u56detrue\uff0c\u5931\u8d25\u8fd4\u56defalse\u3002\n  bool send(const string &amp;buffer)   // buffer\u4e0d\u8981\u7528const char *//\u56e0\u4e3a\u524d\u8005\u652f\u6301C\u98ce\u683c\u5b57\u7b26\u4e32\u4e5f\u652f\u6301string\uff0c\u540e\u8005\u53ea\u652f\u6301C\u98ce\u683c\u5b57\u7b26\u4e32\n  {\n    if (m_clientfd==-1) return false; // \u5982\u679csocket\u7684\u72b6\u6001\u662f\u672a\u8fde\u63a5\uff0c\u76f4\u63a5\u8fd4\u56de\u5931\u8d25\u3002\n        //::send(m_clientfd,buffer.c_str(),buffer.length(),0) //\u8bed\u4e49\u4e0d\u51c6\u786e\uff0cbuffer\u53ef\u80fd\u662f\u5b57\u7b26\u4e32\uff0c\u4e5f\u53ef\u80fd\u662f\u4e00\u5757\u5185\u5b58\n    if ((::send(m_clientfd,buffer.data(),buffer.size(),0))&lt;=0) return false;\n\n    return true;\n  }\n\n  // \u63a5\u6536\u670d\u52a1\u7aef\u7684\u62a5\u6587\uff0c\u6210\u529f\u8fd4\u56detrue\uff0c\u5931\u8d25\u8fd4\u56defalse\u3002\n  // buffer-\u5b58\u653e\u63a5\u6536\u5230\u7684\u62a5\u6587\u7684\u5185\u5bb9\uff0cmaxlen-\u672c\u6b21\u63a5\u6536\u62a5\u6587\u7684\u6700\u5927\u957f\u5ea6\u3002\n  bool recv(string &amp;buffer,const size_t maxlen)\n  { // \u5982\u679c\u76f4\u63a5\u64cd\u4f5cstring\u5bf9\u8c61\u7684\u5185\u5b58\uff0c\u90a3\u4e48string\u5bf9\u8c61\u7684\u81ea\u52a8\u7ba1\u7406\u5185\u5b58\u7684\u529f\u80fd\u5931\u6548\uff0c\n    // \u56e0\u4e3astring\u5bf9\u8c61\u4e2d\u6709\u4e00\u4e2a\u6210\u5458\u53d8\u91cf\u5b58\u653e\u4e86\u6570\u636e\u7684\u5927\u5c0f\uff0c\u5982\u679c\u901a\u8fc7string\u7c7b\u7684\u6210\u5458\u51fd\u6570\u6765\u64cd\u4f5cstring\u5bf9\u8c61\uff0c\u90a3\u4e48\u4f1a\u81ea\u52a8\u8bbe\u7f6e\u6570\u636e\u7684\u5927\u5c0f\n    // \u5fc5\u987b\u4fdd\u8bc1\uff1a1)\u4e0d\u80fd\u8d8a\u754c\uff1b2\uff09\u64cd\u4f5c\u540e\u624b\u52a8\u8bbe\u7f6e\u6570\u636e\u7684\u5927\u5c0f\u3002\n    buffer.clear();         // \u6e05\u7a7a\u5bb9\u5668\u3002\n    buffer.resize(maxlen);  // \u8bbe\u7f6e\u5bb9\u5668\u7684\u5927\u5c0f\u4e3amaxlen\u3002\n    int readn=::recv(m_clientfd,&amp;buffer[0],buffer.size(),0);  // \u76f4\u63a5\u64cd\u4f5cbuffer\u7684\u5185\u5b58\u3002\n                            //\u83b7\u53d6string\u5bf9\u8c61\u5185\u5b58\u7a7a\u95f4\u7684\u9996\u5730\u5740\uff0cbuffer[0]\uff0cbuffer.data(),buffer.c_str(),\u540e\u4e24\u4e2a\u83b7\u53d6\u5230\u7684\u662fconst\n                            // -1 \u5931\u8d25; 0 socket\u65ad\u5f00; &gt;0 \u63a5\u6536\u5230\u7684\u5b57\u8282\u6570\n    if (readn&lt;=0) { buffer.clear(); return false; }\n    buffer.resize(readn);   // \u91cd\u7f6ebuffer\u7684\u5b9e\u9645\u5927\u5c0f\u3002\n\n    return true;\n  }\n\n  // \u65ad\u5f00\u4e0e\u670d\u52a1\u7aef\u7684\u8fde\u63a5\u3002\n  bool close()\n  {\n    if (m_clientfd==-1) return false; // \u5982\u679csocket\u7684\u72b6\u6001\u662f\u672a\u8fde\u63a5\uff0c\u76f4\u63a5\u8fd4\u56de\u5931\u8d25\u3002\n\n    ::close(m_clientfd);\n    m_clientfd=-1;\n    return true;\n  }\n\n ~ctcpclient(){ close(); }\n};\n\nint main(int argc,char *argv[])\n{\n  if (argc!=3)\n  {\n    cout &lt;&lt; \"Using:./demo7 \u670d\u52a1\u7aef\u7684IP \u670d\u52a1\u7aef\u7684\u7aef\u53e3\\nExample:./demo7 192.168.101.138 5005\\n\\n\"; \n    return -1;\n  }\n\n  ctcpclient tcpclient;\n  if (tcpclient.connect(argv[1],atoi(argv[2]))==false)  // \u5411\u670d\u52a1\u7aef\u53d1\u8d77\u8fde\u63a5\u8bf7\u6c42\u3002\n  {\n    perror(\"connect()\"); return -1;\n  }\n\n  // \u7b2c3\u6b65\uff1a\u4e0e\u670d\u52a1\u7aef\u901a\u8baf\uff0c\u5ba2\u6237\u53d1\u9001\u4e00\u4e2a\u8bf7\u6c42\u62a5\u6587\u540e\u7b49\u5f85\u670d\u52a1\u7aef\u7684\u56de\u590d\uff0c\u6536\u5230\u56de\u590d\u540e\uff0c\u518d\u53d1\u4e0b\u4e00\u4e2a\u8bf7\u6c42\u62a5\u6587\u3002\n  string buffer;\n  for (int ii=0;ii&lt;10;ii++)  // \u5faa\u73af3\u6b21\uff0c\u5c06\u4e0e\u670d\u52a1\u7aef\u8fdb\u884c\u4e09\u6b21\u901a\u8baf\u3002\n  {\n    buffer=\"\u8fd9\u662f\u7b2c\"+to_string(ii+1)+\"\u4e2a\u8d85\u7ea7\u5973\u751f\uff0c\u7f16\u53f7\"+to_string(ii+1)+\"\u3002\";\n    // \u5411\u670d\u52a1\u7aef\u53d1\u9001\u8bf7\u6c42\u62a5\u6587\u3002\n    if (tcpclient.send(buffer)==false)\n    { \n      perror(\"send\"); break; \n    }\n    cout &lt;&lt; \"\u53d1\u9001\uff1a\" &lt;&lt; buffer &lt;&lt; endl;\n\n    // \u63a5\u6536\u670d\u52a1\u7aef\u7684\u56de\u5e94\u62a5\u6587\uff0c\u5982\u679c\u670d\u52a1\u7aef\u6ca1\u6709\u53d1\u9001\u56de\u5e94\u62a5\u6587\uff0crecv()\u51fd\u6570\u5c06\u963b\u585e\u7b49\u5f85\u3002\n    if (tcpclient.recv(buffer,1024)==false)\n    {\n      perror(\"recv()\"); break;\n    }\n    cout &lt;&lt; \"\u63a5\u6536\uff1a\" &lt;&lt; buffer &lt;&lt; endl;\n\n    sleep(1);\n  }\n}\n</code></pre>"},{"location":"Project/Backend%20server/Network/Encapsulate%20socket/#socket_1","title":"\u5c01\u88c5socket\u901a\u8baf\u7684\u670d\u52a1\u7aef","text":"<pre><code>#include &lt;iostream&gt; \n#include &lt;cstdio&gt;\n#include &lt;cstring&gt;\n#include &lt;unistd.h&gt;\n#include &lt;netdb.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;sys/socket.h&gt;\n#include &lt;arpa/inet.h&gt;\nusing namespace std;\n\nclass ctcpserver         // TCP\u901a\u8baf\u7684\u670d\u52a1\u7aef\u7c7b\u3002\n{\nprivate:\n  int    m_listenfd;        // \u76d1\u542c\u7684socket\uff0c-1\u8868\u793a\u672a\u521d\u59cb\u5316\u3002\n  int    m_clientfd;        // \u5ba2\u6237\u7aef\u8fde\u4e0a\u6765\u7684socket\uff0c-1\u8868\u793a\u5ba2\u6237\u7aef\u672a\u8fde\u63a5\u3002\n  string m_clientip;        // \u5ba2\u6237\u7aef\u5b57\u7b26\u4e32\u683c\u5f0f\u7684IP\u3002\n  unsigned short m_port;    // \u670d\u52a1\u7aef\u7528\u4e8e\u901a\u8baf\u7684\u7aef\u53e3\u3002\npublic:\n  ctcpserver():m_listenfd(-1),m_clientfd(-1) {}\n\n  // \u521d\u59cb\u5316\u670d\u52a1\u7aef\u7528\u4e8e\u76d1\u542c\u7684socket\u3002\n  bool initserver(const unsigned short in_port)\n  {\n    // \u7b2c1\u6b65\uff1a\u521b\u5efa\u670d\u52a1\u7aef\u7684socket\u3002 \n    if ( (m_listenfd=socket(AF_INET,SOCK_STREAM,0))==-1) return false;\n\n    m_port=in_port;\n\n    // \u7b2c2\u6b65\uff1a\u628a\u670d\u52a1\u7aef\u7528\u4e8e\u901a\u4fe1\u7684IP\u548c\u7aef\u53e3\u7ed1\u5b9a\u5230socket\u4e0a\u3002 \n    struct sockaddr_in servaddr;                // \u7528\u4e8e\u5b58\u653e\u534f\u8bae\u3001\u7aef\u53e3\u548cIP\u5730\u5740\u7684\u7ed3\u6784\u4f53\u3002\n    memset(&amp;servaddr,0,sizeof(servaddr));\n    servaddr.sin_family=AF_INET;                // \u2460\u534f\u8bae\u65cf\uff0c\u56fa\u5b9a\u586bAF_INET\u3002\n    servaddr.sin_port=htons(m_port);            // \u2461\u6307\u5b9a\u670d\u52a1\u7aef\u7684\u901a\u4fe1\u7aef\u53e3\u3002\n    servaddr.sin_addr.s_addr=htonl(INADDR_ANY); // \u2462\u5982\u679c\u64cd\u4f5c\u7cfb\u7edf\u6709\u591a\u4e2aIP\uff0c\u5168\u90e8\u7684IP\u90fd\u53ef\u4ee5\u7528\u4e8e\u901a\u8baf\u3002\n\n    // \u7ed1\u5b9a\u670d\u52a1\u7aef\u7684IP\u548c\u7aef\u53e3\uff08\u4e3asocket\u5206\u914dIP\u548c\u7aef\u53e3\uff09\u3002\n    if (bind(m_listenfd,(struct sockaddr *)&amp;servaddr,sizeof(servaddr))==-1)\n    { \n      close(m_listenfd); m_listenfd=-1; return false; \n    }\n\n    // \u7b2c3\u6b65\uff1a\u628asocket\u8bbe\u7f6e\u4e3a\u53ef\u8fde\u63a5\uff08\u76d1\u542c\uff09\u7684\u72b6\u6001\u3002\n    if (listen(m_listenfd,5) == -1 ) \n    { \n      close(m_listenfd); m_listenfd=-1; return false;\n    }\n\n    return true;\n  }\n\n  // \u53d7\u7406\u5ba2\u6237\u7aef\u7684\u8fde\u63a5\uff08\u4ece\u5df2\u8fde\u63a5\u7684\u5ba2\u6237\u7aef\u4e2d\u53d6\u51fa\u4e00\u4e2a\u5ba2\u6237\u7aef\uff09\uff0c\n  // \u5982\u679c\u6ca1\u6709\u5df2\u8fde\u63a5\u7684\u5ba2\u6237\u7aef\uff0caccept()\u51fd\u6570\u5c06\u963b\u585e\u7b49\u5f85\u3002\n  bool accept()\n  {\n    struct sockaddr_in caddr;        // \u5ba2\u6237\u7aef\u7684\u5730\u5740\u4fe1\u606f\u3002  \n    socklen_t addrlen=sizeof(caddr); // struct sockaddr_in\u7684\u5927\u5c0f\u3002\n    if ((m_clientfd=::accept(m_listenfd,(struct sockaddr *)&amp;caddr,&amp;addrlen))==-1) \n        return false;\n\n    m_clientip=inet_ntoa(caddr.sin_addr);  // \u628a\u5ba2\u6237\u7aef\u7684\u5730\u5740\u4ece\u5927\u7aef\u5e8f\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\u3002\n\n    return true;\n  }\n\n  // \u83b7\u53d6\u5ba2\u6237\u7aef\u7684IP(\u5b57\u7b26\u4e32\u683c\u5f0f)\u3002\n  const string &amp; clientip() const\n  {\n    return m_clientip;\n  }\n\n  // \u5411\u5bf9\u7aef\u53d1\u9001\u62a5\u6587\uff0c\u6210\u529f\u8fd4\u56detrue\uff0c\u5931\u8d25\u8fd4\u56defalse\u3002\n  bool send(const string &amp;buffer)   \n  {\n    if (m_clientfd==-1) return false;\n\n    if ( (::send(m_clientfd,buffer.data(),buffer.size(),0))&lt;=0) return false;\n\n    return true;\n  }\n\n  // \u63a5\u6536\u5bf9\u7aef\u7684\u62a5\u6587\uff0c\u6210\u529f\u8fd4\u56detrue\uff0c\u5931\u8d25\u8fd4\u56defalse\u3002\n  // buffer-\u5b58\u653e\u63a5\u6536\u5230\u7684\u62a5\u6587\u7684\u5185\u5bb9\uff0cmaxlen-\u672c\u6b21\u63a5\u6536\u62a5\u6587\u7684\u6700\u5927\u957f\u5ea6\u3002\n  bool recv(string &amp;buffer,const size_t maxlen)\n  { \n    buffer.clear();         // \u6e05\u7a7a\u5bb9\u5668\u3002\n    buffer.resize(maxlen);  // \u8bbe\u7f6e\u5bb9\u5668\u7684\u5927\u5c0f\u4e3amaxlen\u3002\n    int readn=::recv(m_clientfd,&amp;buffer[0],buffer.size(),0);  // \u76f4\u63a5\u64cd\u4f5cbuffer\u7684\u5185\u5b58\u3002\n    if (readn&lt;=0) { buffer.clear(); return false; }\n    buffer.resize(readn);   // \u91cd\u7f6ebuffer\u7684\u5b9e\u9645\u5927\u5c0f\u3002\n\n    return true;\n  }\n\n  // \u5173\u95ed\u76d1\u542c\u7684socket\u3002\n  bool closelisten()\n  {\n    if (m_listenfd==-1) return false; \n\n    ::close(m_listenfd);\n    m_listenfd=-1;\n    return true;\n  }\n\n  // \u5173\u95ed\u5ba2\u6237\u7aef\u8fde\u4e0a\u6765\u7684socket\u3002\n  bool closeclient()\n  {\n    if (m_clientfd==-1) return false;\n\n    ::close(m_clientfd);\n    m_clientfd=-1;\n    return true;\n  }\n\n ~ctcpserver() { closelisten(); closeclient(); }\n};\n\nint main(int argc,char *argv[])\n{\n  if (argc!=2)\n  {\n    cout &lt;&lt; \"Using:./demo8 \u901a\u8baf\u7aef\u53e3\\nExample:./demo8 5005\\n\\n\";   // \u7aef\u53e3\u5927\u4e8e1024\uff0c\u4e0d\u4e0e\u5176\u5b83\u7684\u91cd\u590d\u3002\n    cout &lt;&lt; \"\u6ce8\u610f\uff1a\u8fd0\u884c\u670d\u52a1\u7aef\u7a0b\u5e8f\u7684Linux\u7cfb\u7edf\u7684\u9632\u706b\u5899\u5fc5\u987b\u8981\u5f00\u901a5005\u7aef\u53e3\u3002\\n\";\n    cout &lt;&lt; \"      \u5982\u679c\u662f\u4e91\u670d\u52a1\u5668\uff0c\u8fd8\u8981\u5f00\u901a\u4e91\u5e73\u53f0\u7684\u8bbf\u95ee\u7b56\u7565\u3002\\n\\n\";\n    return -1;\n  }\n\n  ctcpserver tcpserver;\n  if (tcpserver.initserver(atoi(argv[1]))==false) // \u521d\u59cb\u5316\u670d\u52a1\u7aef\u7528\u4e8e\u76d1\u542c\u7684socket\u3002\n  {\n    perror(\"initserver()\"); return -1;\n  }\n\n  // \u53d7\u7406\u5ba2\u6237\u7aef\u7684\u8fde\u63a5\uff08\u4ece\u5df2\u8fde\u63a5\u7684\u5ba2\u6237\u7aef\u4e2d\u53d6\u51fa\u4e00\u4e2a\u5ba2\u6237\u7aef\uff09\uff0c  \n  // \u5982\u679c\u6ca1\u6709\u5df2\u8fde\u63a5\u7684\u5ba2\u6237\u7aef\uff0caccept()\u51fd\u6570\u5c06\u963b\u585e\u7b49\u5f85\u3002\n  if (tcpserver.accept()==false)\n  {\n    perror(\"accept()\"); return -1;\n  }\n  cout &lt;&lt; \"\u5ba2\u6237\u7aef\u5df2\u8fde\u63a5(\" &lt;&lt; tcpserver.clientip() &lt;&lt; \")\u3002\\n\";\n\n  string buffer;\n  while (true)\n  {\n    // \u63a5\u6536\u5bf9\u7aef\u7684\u62a5\u6587\uff0c\u5982\u679c\u5bf9\u7aef\u6ca1\u6709\u53d1\u9001\u62a5\u6587\uff0crecv()\u51fd\u6570\u5c06\u963b\u585e\u7b49\u5f85\u3002\n    if (tcpserver.recv(buffer,1024)==false)\n    {\n      perror(\"recv()\"); break;\n    }\n    cout &lt;&lt; \"\u63a5\u6536\uff1a\" &lt;&lt; buffer &lt;&lt; endl;\n\n    buffer=\"ok\";  \n    if (tcpserver.send(buffer)==false)  // \u5411\u5bf9\u7aef\u53d1\u9001\u62a5\u6587\u3002\n    {\n      perror(\"send\"); break;\n    }\n    cout &lt;&lt; \"\u53d1\u9001\uff1a\" &lt;&lt; buffer &lt;&lt; endl;\n  }\n}\n</code></pre>"},{"location":"Project/Backend%20server/Network/File%20transfer/","title":"File transfer","text":""},{"location":"Project/Backend%20server/Network/File%20transfer/#_1","title":"\u5ba2\u6237\u7aef","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;fstream&gt;\n#include &lt;cstdio&gt;\n#include &lt;cstring&gt;\n#include &lt;cstdlib&gt;\n#include &lt;unistd.h&gt;\n#include &lt;netdb.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;sys/socket.h&gt;\n#include &lt;arpa/inet.h&gt;\nusing namespace std;\n\nclass ctcpclient         // TCP\u901a\u8baf\u7684\u5ba2\u6237\u7aef\u7c7b\u3002\n{\nprivate:\n  int m_clientfd;        // \u5ba2\u6237\u7aef\u7684socket\uff0c-1\u8868\u793a\u672a\u8fde\u63a5\u6216\u8fde\u63a5\u5df2\u65ad\u5f00\uff1b&gt;=0\u8868\u793a\u6709\u6548\u7684socket\u3002\n  string m_ip;           // \u670d\u52a1\u7aef\u7684IP/\u57df\u540d\u3002\n  unsigned short m_port; // \u901a\u8baf\u7aef\u53e3\u3002\npublic:\n  ctcpclient():m_clientfd(-1) {}\n\n  // \u5411\u670d\u52a1\u7aef\u53d1\u8d77\u8fde\u63a5\u8bf7\u6c42\uff0c\u6210\u529f\u8fd4\u56detrue\uff0c\u5931\u8d25\u8fd4\u56defalse\u3002\n  bool connect(const string &amp;in_ip,const unsigned short in_port)\n  {\n    if (m_clientfd!=-1) return false; // \u5982\u679csocket\u5df2\u8fde\u63a5\uff0c\u76f4\u63a5\u8fd4\u56de\u5931\u8d25\u3002\n\n    m_ip=in_ip; m_port=in_port;       // \u628a\u670d\u52a1\u7aef\u7684IP\u548c\u7aef\u53e3\u4fdd\u5b58\u5230\u6210\u5458\u53d8\u91cf\u4e2d\u3002\n\n    // \u7b2c1\u6b65\uff1a\u521b\u5efa\u5ba2\u6237\u7aef\u7684socket\u3002\n    if ( (m_clientfd = socket(AF_INET,SOCK_STREAM,0))==-1) return false;\n\n    // \u7b2c2\u6b65\uff1a\u5411\u670d\u52a1\u5668\u53d1\u8d77\u8fde\u63a5\u8bf7\u6c42\u3002\n    struct sockaddr_in servaddr;               // \u7528\u4e8e\u5b58\u653e\u534f\u8bae\u3001\u7aef\u53e3\u548cIP\u5730\u5740\u7684\u7ed3\u6784\u4f53\u3002\n    memset(&amp;servaddr,0,sizeof(servaddr));\n    servaddr.sin_family = AF_INET;             // \u2460\u534f\u8bae\u65cf\uff0c\u56fa\u5b9a\u586bAF_INET\u3002\n    servaddr.sin_port = htons(m_port);         // \u2461\u6307\u5b9a\u670d\u52a1\u7aef\u7684\u901a\u4fe1\u7aef\u53e3\u3002\n\n    struct hostent* h;                         // \u7528\u4e8e\u5b58\u653e\u670d\u52a1\u7aefIP\u5730\u5740(\u5927\u7aef\u5e8f)\u7684\u7ed3\u6784\u4f53\u7684\u6307\u9488\u3002\n    if ((h=gethostbyname(m_ip.c_str()))==nullptr ) // \u628a\u57df\u540d/\u4e3b\u673a\u540d/\u5b57\u7b26\u4e32\u683c\u5f0f\u7684IP\u8f6c\u6362\u6210\u7ed3\u6784\u4f53\u3002\n    {\n      ::close(m_clientfd); m_clientfd=-1; return false;\n    }\n    memcpy(&amp;servaddr.sin_addr,h-&gt;h_addr,h-&gt;h_length); // \u2462\u6307\u5b9a\u670d\u52a1\u7aef\u7684IP(\u5927\u7aef\u5e8f)\u3002\n\n    // \u5411\u670d\u52a1\u7aef\u53d1\u8d77\u8fde\u63a5\u6e05\u6c42\u3002\n    if (::connect(m_clientfd,(struct sockaddr *)&amp;servaddr,sizeof(servaddr))==-1)  \n    {\n      ::close(m_clientfd); m_clientfd=-1; return false;\n    }\n\n    return true;\n  }\n\n  // \u5411\u670d\u52a1\u7aef\u53d1\u9001\u62a5\u6587\uff08\u5b57\u7b26\u4e32\uff09\uff0c\u6210\u529f\u8fd4\u56detrue\uff0c\u5931\u8d25\u8fd4\u56defalse\u3002\n  bool send(const string &amp;buffer)   // buffer\u4e0d\u8981\u7528const char *\n  {\n    if (m_clientfd==-1) return false; // \u5982\u679csocket\u7684\u72b6\u6001\u662f\u672a\u8fde\u63a5\uff0c\u76f4\u63a5\u8fd4\u56de\u5931\u8d25\u3002\n\n    if ((::send(m_clientfd,buffer.data(),buffer.size(),0))&lt;=0) return false;\n\n    return true;\n  }\n\n  // \u5411\u670d\u52a1\u7aef\u53d1\u9001\u62a5\u6587\uff08\u4e8c\u8fdb\u5236\u6570\u636e\uff09\uff0c\u6210\u529f\u8fd4\u56detrue\uff0c\u5931\u8d25\u8fd4\u56defalse\u3002      \n  bool send(void *buffer,const size_t size)   \n  {\n    if (m_clientfd==-1) return false; // \u5982\u679csocket\u7684\u72b6\u6001\u662f\u672a\u8fde\u63a5\uff0c\u76f4\u63a5\u8fd4\u56de\u5931\u8d25\u3002\n\n    if ((::send(m_clientfd,buffer,size,0))&lt;=0) return false;\n\n    return true;\n  }\n\n  // \u63a5\u6536\u670d\u52a1\u7aef\u7684\u62a5\u6587\uff0c\u6210\u529f\u8fd4\u56detrue\uff0c\u5931\u8d25\u8fd4\u56defalse\u3002\n  // buffer-\u5b58\u653e\u63a5\u6536\u5230\u7684\u62a5\u6587\u7684\u5185\u5bb9\uff0cmaxlen-\u672c\u6b21\u63a5\u6536\u62a5\u6587\u7684\u6700\u5927\u957f\u5ea6\u3002\n  bool recv(string &amp;buffer,const size_t maxlen)\n  { // \u5982\u679c\u76f4\u63a5\u64cd\u4f5cstring\u5bf9\u8c61\u7684\u5185\u5b58\uff0c\u5fc5\u987b\u4fdd\u8bc1\uff1a1)\u4e0d\u80fd\u8d8a\u754c\uff1b2\uff09\u64cd\u4f5c\u540e\u624b\u52a8\u8bbe\u7f6e\u6570\u636e\u7684\u5927\u5c0f\u3002\n    buffer.clear();         // \u6e05\u7a7a\u5bb9\u5668\u3002\n    buffer.resize(maxlen);  // \u8bbe\u7f6e\u5bb9\u5668\u7684\u5927\u5c0f\u4e3amaxlen\u3002\n    int readn=::recv(m_clientfd,&amp;buffer[0],buffer.size(),0);  // \u76f4\u63a5\u64cd\u4f5cbuffer\u7684\u5185\u5b58\u3002\n    if (readn&lt;=0) { buffer.clear(); return false; }\n    buffer.resize(readn);   // \u91cd\u7f6ebuffer\u7684\u5b9e\u9645\u5927\u5c0f\u3002\n\n    return true;\n  }\n\n  // \u65ad\u5f00\u4e0e\u670d\u52a1\u7aef\u7684\u8fde\u63a5\u3002\n  bool close()\n  {\n    if (m_clientfd==-1) return false; // \u5982\u679csocket\u7684\u72b6\u6001\u662f\u672a\u8fde\u63a5\uff0c\u76f4\u63a5\u8fd4\u56de\u5931\u8d25\u3002\n\n    ::close(m_clientfd);\n    m_clientfd=-1;\n    return true;\n  }\n\n  // \u5411\u670d\u52a1\u7aef\u53d1\u9001\u6587\u4ef6\u5185\u5bb9\u3002\n  bool sendfile(const string &amp;filename,const size_t filesize)\n  {\n    // \u4ee5\u4e8c\u8fdb\u5236\u7684\u65b9\u5f0f\u6253\u5f00\u6587\u4ef6\u3002\n    ifstream fin(filename,ios::binary);\n    if (fin.is_open() == false) { cout &lt;&lt; \"\u6253\u5f00\u6587\u4ef6\" &lt;&lt; filename &lt;&lt; \"\u5931\u8d25\u3002\\n\";  return false; }\n\n    int  onread=0;        // \u6bcf\u6b21\u8c03\u7528fin.read()\u65f6\u6253\u7b97\u8bfb\u53d6\u7684\u5b57\u8282\u6570\u3002  \u6bcf\u6b21\u5e94\u642c\u7816\u5934\u6570\u3002\n    int  totalbytes=0;    // \u4ece\u6587\u4ef6\u4e2d\u5df2\u8bfb\u53d6\u7684\u5b57\u8282\u603b\u6570\u3002 \u5df2\u642c\u7816\u5934\u6570\u3002\n    char buffer[4096];       // \u5b58\u653e\u8bfb\u53d6\u6570\u636e\u7684buffer\u3002     \u6bcf\u6b21\u642c\u4e03\u5757\u7816\u5934\u3002\n\n    while (true)\n    {\n      memset(buffer,0,sizeof(buffer));\n\n      // \u8ba1\u7b97\u672c\u6b21\u5e94\u8be5\u8bfb\u53d6\u7684\u5b57\u8282\u6570\uff0c\u5982\u679c\u5269\u4f59\u7684\u6570\u636e\u8d85\u8fc74096\u5b57\u8282\uff0c\u5c31\u8bfb4096\u5b57\u8282\u3002\n      if (filesize-totalbytes&gt;4096) onread=4096;\n      else onread=filesize-totalbytes;\n\n      // \u4ece\u6587\u4ef6\u4e2d\u8bfb\u53d6\u6570\u636e\u3002\n      fin.read(buffer,onread);\n\n      // \u628a\u8bfb\u53d6\u5230\u7684\u6570\u636e\u53d1\u9001\u7ed9\u5bf9\u7aef\u3002\n      if (send(buffer,onread)==false) return false;\n\n      // \u8ba1\u7b97\u6587\u4ef6\u5df2\u8bfb\u53d6\u7684\u5b57\u8282\u603b\u6570\uff0c\u5982\u679c\u6587\u4ef6\u5df2\u8bfb\u5b8c\uff0c\u8df3\u51fa\u5faa\u73af\u3002\n      totalbytes=totalbytes+onread;\n\n      if (totalbytes==filesize) break;\n    }\n\n    return true;\n  }\n\n ~ctcpclient(){ close(); }\n};\n\nint main(int argc,char *argv[])\n{\n  if (argc!=5)\n  {\n    cout &lt;&lt; \"Using:./demo11 \u670d\u52a1\u7aef\u7684IP \u670d\u52a1\u7aef\u7684\u7aef\u53e3 \u6587\u4ef6\u540d \u6587\u4ef6\u5927\u5c0f\\n\";\n    cout &lt;&lt; \"Example:./demo11 192.168.101.138 5005 aaa.txt 2424\\n\\n\";\n    return -1;\n  }\n\n  ctcpclient tcpclient;\n  if (tcpclient.connect(argv[1],atoi(argv[2]))==false)  // \u5411\u670d\u52a1\u7aef\u53d1\u8d77\u8fde\u63a5\u8bf7\u6c42\u3002\n  {\n    perror(\"connect()\"); return -1;\n  }\n\n  // \u4ee5\u4e0b\u662f\u53d1\u9001\u6587\u4ef6\u7684\u6d41\u7a0b\u3002\n  // 1\uff09\u628a\u5f85\u4f20\u8f93\u6587\u4ef6\u540d\u548c\u6587\u4ef6\u7684\u5927\u5c0f\u544a\u8bc9\u670d\u52a1\u7aef\u3002\n  // \u5b9a\u4e49\u6587\u4ef6\u4fe1\u606f\u7684\u7ed3\u6784\u4f53\u3002\n  struct st_fileinfo{\n    char filename[256];  // \u6587\u4ef6\u540d\u3002\n    int  filesize;       // \u6587\u4ef6\u5927\u5c0f\u3002\n  }fileinfo;\n  memset(&amp;fileinfo,0,sizeof(fileinfo));\n  strcpy(fileinfo.filename,argv[3]);     // \u6587\u4ef6\u540d\u3002\n  fileinfo.filesize=atoi(argv[4]);       // \u6587\u4ef6\u5927\u5c0f\u3002\n  // \u628a\u6587\u4ef6\u4fe1\u606f\u7684\u7ed3\u6784\u4f53\u53d1\u9001\u7ed9\u670d\u52a1\u7aef\u3002\n  if (tcpclient.send(&amp;fileinfo,sizeof(fileinfo))==false) { perror(\"send\"); return -1; }\n  cout &lt;&lt; \"\u53d1\u9001\u6587\u4ef6\u4fe1\u606f\u7684\u7ed3\u6784\u4f53\" &lt;&lt; fileinfo.filename &lt;&lt; \"(\" &lt;&lt; fileinfo.filesize &lt;&lt;\")\u3002\"&lt;&lt; endl;\n\n  // 2\uff09\u7b49\u5f85\u670d\u52a1\u7aef\u7684\u786e\u8ba4\u62a5\u6587\uff08\u6587\u4ef6\u540d\u548c\u6587\u4ef6\u7684\u5927\u5c0f\u7684\u786e\u8ba4\uff09\u3002\n  string buffer;\n  if (tcpclient.recv(buffer,2)==false) { perror(\"recv()\"); return -1; }\n  if (buffer!=\"ok\") { cout &lt;&lt; \"\u670d\u52a1\u7aef\u6ca1\u6709\u56de\u590dok\u3002\\n\"; return -1; }\n\n  // 3\uff09\u53d1\u9001\u6587\u4ef6\u5185\u5bb9\u3002\n  if (tcpclient.sendfile(fileinfo.filename,fileinfo.filesize)==false)\n  { \n    perror(\"sendfile()\"); return -1;\n  }\n\n  // 4\uff09\u7b49\u5f85\u670d\u52a1\u7aef\u7684\u786e\u8ba4\u62a5\u6587\uff08\u670d\u52a1\u7aef\u5df2\u63a5\u6536\u5b8c\u6587\u4ef6\uff09\u3002\n  if (tcpclient.recv(buffer,2)==false) { perror(\"recv()\"); return -1; }\n  if (buffer!=\"ok\") { cout &lt;&lt; \"\u53d1\u9001\u6587\u4ef6\u5185\u5bb9\u5931\u8d25\u3002\\n\"; return -1; }\n\n  cout &lt;&lt; \"\u53d1\u9001\u6587\u4ef6\u5185\u5bb9\u6210\u529f\u3002\\n\";\n}\n</code></pre>"},{"location":"Project/Backend%20server/Network/File%20transfer/#_2","title":"\u670d\u52a1\u7aef","text":"<pre><code>#include &lt;iostream&gt;\n#include &lt;fstream&gt;\n#include &lt;cstdio&gt;\n#include &lt;cstring&gt;\n#include &lt;cstdlib&gt;\n#include &lt;unistd.h&gt;\n#include &lt;netdb.h&gt;\n#include &lt;signal.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;sys/socket.h&gt;\n#include &lt;arpa/inet.h&gt;\nusing namespace std;\n\nclass ctcpserver         // TCP\u901a\u8baf\u7684\u670d\u52a1\u7aef\u7c7b\u3002\n{\nprivate:\n  int    m_listenfd;        // \u76d1\u542c\u7684socket\uff0c-1\u8868\u793a\u672a\u521d\u59cb\u5316\u3002\n  int    m_clientfd;        // \u5ba2\u6237\u7aef\u8fde\u4e0a\u6765\u7684socket\uff0c-1\u8868\u793a\u5ba2\u6237\u7aef\u672a\u8fde\u63a5\u3002\n  string m_clientip;        // \u5ba2\u6237\u7aef\u5b57\u7b26\u4e32\u683c\u5f0f\u7684IP\u3002\n  unsigned short m_port;    // \u670d\u52a1\u7aef\u7528\u4e8e\u901a\u8baf\u7684\u7aef\u53e3\u3002\npublic:\n  ctcpserver():m_listenfd(-1),m_clientfd(-1) {}\n\n  // \u521d\u59cb\u5316\u670d\u52a1\u7aef\u7528\u4e8e\u76d1\u542c\u7684socket\u3002\n  bool initserver(const unsigned short in_port)\n  {\n    // \u7b2c1\u6b65\uff1a\u521b\u5efa\u670d\u52a1\u7aef\u7684socket\u3002 \n    if ( (m_listenfd=socket(AF_INET,SOCK_STREAM,0))==-1) return false;\n\n    m_port=in_port;\n\n    // \u7b2c2\u6b65\uff1a\u628a\u670d\u52a1\u7aef\u7528\u4e8e\u901a\u4fe1\u7684IP\u548c\u7aef\u53e3\u7ed1\u5b9a\u5230socket\u4e0a\u3002 \n    struct sockaddr_in servaddr;                // \u7528\u4e8e\u5b58\u653e\u534f\u8bae\u3001\u7aef\u53e3\u548cIP\u5730\u5740\u7684\u7ed3\u6784\u4f53\u3002\n    memset(&amp;servaddr,0,sizeof(servaddr));\n    servaddr.sin_family=AF_INET;                // \u2460\u534f\u8bae\u65cf\uff0c\u56fa\u5b9a\u586bAF_INET\u3002\n    servaddr.sin_port=htons(m_port);            // \u2461\u6307\u5b9a\u670d\u52a1\u7aef\u7684\u901a\u4fe1\u7aef\u53e3\u3002\n    servaddr.sin_addr.s_addr=htonl(INADDR_ANY); // \u2462\u5982\u679c\u64cd\u4f5c\u7cfb\u7edf\u6709\u591a\u4e2aIP\uff0c\u5168\u90e8\u7684IP\u90fd\u53ef\u4ee5\u7528\u4e8e\u901a\u8baf\u3002\n\n    // \u7ed1\u5b9a\u670d\u52a1\u7aef\u7684IP\u548c\u7aef\u53e3\uff08\u4e3asocket\u5206\u914dIP\u548c\u7aef\u53e3\uff09\u3002\n    if (bind(m_listenfd,(struct sockaddr *)&amp;servaddr,sizeof(servaddr))==-1)\n    { \n      close(m_listenfd); m_listenfd=-1; return false; \n    }\n\n    // \u7b2c3\u6b65\uff1a\u628asocket\u8bbe\u7f6e\u4e3a\u53ef\u8fde\u63a5\uff08\u76d1\u542c\uff09\u7684\u72b6\u6001\u3002\n    if (listen(m_listenfd,5) == -1 ) \n    { \n      close(m_listenfd); m_listenfd=-1; return false;\n    }\n\n    return true;\n  }\n\n  // \u53d7\u7406\u5ba2\u6237\u7aef\u7684\u8fde\u63a5\uff08\u4ece\u5df2\u8fde\u63a5\u7684\u5ba2\u6237\u7aef\u4e2d\u53d6\u51fa\u4e00\u4e2a\u5ba2\u6237\u7aef\uff09\uff0c\n  // \u5982\u679c\u6ca1\u6709\u5df2\u8fde\u63a5\u7684\u5ba2\u6237\u7aef\uff0caccept()\u51fd\u6570\u5c06\u963b\u585e\u7b49\u5f85\u3002\n  bool accept()\n  {\n    struct sockaddr_in caddr;        // \u5ba2\u6237\u7aef\u7684\u5730\u5740\u4fe1\u606f\u3002  \n    socklen_t addrlen=sizeof(caddr); // struct sockaddr_in\u7684\u5927\u5c0f\u3002\n    if ((m_clientfd=::accept(m_listenfd,(struct sockaddr *)&amp;caddr,&amp;addrlen))==-1) return false;\n\n    m_clientip=inet_ntoa(caddr.sin_addr);  // \u628a\u5ba2\u6237\u7aef\u7684\u5730\u5740\u4ece\u5927\u7aef\u5e8f\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\u3002\n\n    return true;\n  }\n\n  // \u83b7\u53d6\u5ba2\u6237\u7aef\u7684IP(\u5b57\u7b26\u4e32\u683c\u5f0f)\u3002\n  const string &amp; clientip() const\n  {\n    return m_clientip;\n  }\n\n  // \u5411\u5bf9\u7aef\u53d1\u9001\u62a5\u6587\uff0c\u6210\u529f\u8fd4\u56detrue\uff0c\u5931\u8d25\u8fd4\u56defalse\u3002\n  bool send(const string &amp;buffer)   \n  {\n    if (m_clientfd==-1) return false;\n\n    if ( (::send(m_clientfd,buffer.data(),buffer.size(),0))&lt;=0) return false;\n\n    return true;\n  }\n\n  // \u63a5\u6536\u5bf9\u7aef\u7684\u62a5\u6587\uff08\u5b57\u7b26\u4e32\uff09\uff0c\u6210\u529f\u8fd4\u56detrue\uff0c\u5931\u8d25\u8fd4\u56defalse\u3002\n  // buffer-\u5b58\u653e\u63a5\u6536\u5230\u7684\u62a5\u6587\u7684\u5185\u5bb9\uff0cmaxlen-\u672c\u6b21\u63a5\u6536\u62a5\u6587\u7684\u6700\u5927\u957f\u5ea6\u3002\n  bool recv(string &amp;buffer,const size_t maxlen)\n  { \n    buffer.clear();         // \u6e05\u7a7a\u5bb9\u5668\u3002\n    buffer.resize(maxlen);  // \u8bbe\u7f6e\u5bb9\u5668\u7684\u5927\u5c0f\u4e3amaxlen\u3002\n    int readn=::recv(m_clientfd,&amp;buffer[0],buffer.size(),0);  // \u76f4\u63a5\u64cd\u4f5cbuffer\u7684\u5185\u5b58\u3002\n    if (readn&lt;=0) { buffer.clear(); return false; }\n    buffer.resize(readn);   // \u91cd\u7f6ebuffer\u7684\u5b9e\u9645\u5927\u5c0f\u3002\n\n    return true;\n  }\n\n  // \u63a5\u6536\u5ba2\u6237\u7aef\u7684\u62a5\u6587\uff08\u4e8c\u8fdb\u5236\u6570\u636e\uff09\uff0c\u6210\u529f\u8fd4\u56detrue\uff0c\u5931\u8d25\u8fd4\u56defalse\u3002\n  // buffer-\u5b58\u653e\u63a5\u6536\u5230\u7684\u62a5\u6587\u7684\u5185\u5bb9\uff0csize-\u672c\u6b21\u63a5\u6536\u62a5\u6587\u7684\u6700\u5927\u957f\u5ea6\u3002\n  bool recv(void *buffer,const size_t size)\n  {\n    if (::recv(m_clientfd,buffer,size,0)&lt;=0) return false;\n\n    return true;\n  }\n\n  // \u5173\u95ed\u76d1\u542c\u7684socket\u3002\n  bool closelisten()\n  {\n    if (m_listenfd==-1) return false; \n\n    ::close(m_listenfd);\n    m_listenfd=-1;\n    return true;\n  }\n\n  // \u5173\u95ed\u5ba2\u6237\u7aef\u8fde\u4e0a\u6765\u7684socket\u3002\n  bool closeclient()\n  {\n    if (m_clientfd==-1) return false;\n\n    ::close(m_clientfd);\n    m_clientfd=-1;\n    return true;\n  }\n\n  // \u63a5\u6536\u6587\u4ef6\u5185\u5bb9\u3002\n  bool recvfile(const string &amp;filename,const size_t filesize)\n  {\n    ofstream fout;\n    fout.open(filename,ios::binary);\n    if (fout.is_open() == false) { cout &lt;&lt; \"\u6253\u5f00\u6587\u4ef6\" &lt;&lt; filename &lt;&lt; \"\u5931\u8d25\u3002\\n\";  return false; }\n\n    int  totalbytes=0;        // \u5df2\u63a5\u6536\u6587\u4ef6\u7684\u603b\u5b57\u8282\u6570\u3002\n    int  onread=0;            // \u672c\u6b21\u6253\u7b97\u63a5\u6536\u7684\u5b57\u8282\u6570\u3002\n    char buffer[4096];           // \u63a5\u6536\u6587\u4ef6\u5185\u5bb9\u7684\u7f13\u51b2\u533a\u3002\n\n    while (true)\n    {\n      // \u8ba1\u7b97\u672c\u6b21\u5e94\u8be5\u63a5\u6536\u7684\u5b57\u8282\u6570\u3002\n      if (filesize-totalbytes&gt;4096) onread=4096;\n      else onread=filesize-totalbytes;\n\n      // \u63a5\u6536\u6587\u4ef6\u5185\u5bb9\u3002\n      if (recv(buffer,onread)==false) return false;\n\n      // \u628a\u63a5\u6536\u5230\u7684\u5185\u5bb9\u5199\u5165\u6587\u4ef6\u3002\n      fout.write(buffer,onread);\n\n      // \u8ba1\u7b97\u5df2\u63a5\u6536\u6587\u4ef6\u7684\u603b\u5b57\u8282\u6570\uff0c\u5982\u679c\u6587\u4ef6\u63a5\u6536\u5b8c\uff0c\u8df3\u51fa\u5faa\u73af\u3002\n      totalbytes=totalbytes+onread;\n\n      if (totalbytes==filesize) break;\n    }\n\n    return true;\n  }\n\n ~ctcpserver() { closelisten(); closeclient(); }\n};\n\nctcpserver tcpserver;\n\nvoid FathEXIT(int sig);  // \u7236\u8fdb\u7a0b\u7684\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u3002\nvoid ChldEXIT(int sig);  // \u5b50\u8fdb\u7a0b\u7684\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u3002\n\nint main(int argc,char *argv[])\n{\n  if (argc!=3)\n  {\n    cout &lt;&lt; \"Using:./demo12 \u901a\u8baf\u7aef\u53e3 \u6587\u4ef6\u5b58\u653e\u7684\u76ee\u5f55\\n\";\n    cout &lt;&lt; \"Example:./demo12 5005 /tmp\\n\\n\";\n    cout &lt;&lt; \"\u6ce8\u610f\uff1a\u8fd0\u884c\u670d\u52a1\u7aef\u7a0b\u5e8f\u7684Linux\u7cfb\u7edf\u7684\u9632\u706b\u5899\u5fc5\u987b\u8981\u5f00\u901a5005\u7aef\u53e3\u3002\\n\";\n    cout &lt;&lt; \"      \u5982\u679c\u662f\u4e91\u670d\u52a1\u5668\uff0c\u8fd8\u8981\u5f00\u901a\u4e91\u5e73\u53f0\u7684\u8bbf\u95ee\u7b56\u7565\u3002\\n\\n\";\n    return -1;\n  }\n\n  // \u5ffd\u7565\u5168\u90e8\u7684\u4fe1\u53f7\uff0c\u4e0d\u5e0c\u671b\u88ab\u6253\u6270\u3002\u987a\u4fbf\u89e3\u51b3\u4e86\u50f5\u5c38\u8fdb\u7a0b\u7684\u95ee\u9898\u3002\n  for (int ii=1;ii&lt;=64;ii++) signal(ii,SIG_IGN);\n\n  // \u8bbe\u7f6e\u4fe1\u53f7,\u5728shell\u72b6\u6001\u4e0b\u53ef\u7528 \"kill \u8fdb\u7a0b\u53f7\" \u6216 \"Ctrl+c\" \u6b63\u5e38\u7ec8\u6b62\u4e9b\u8fdb\u7a0b\n  // \u4f46\u8bf7\u4e0d\u8981\u7528 \"kill -9 +\u8fdb\u7a0b\u53f7\" \u5f3a\u884c\u7ec8\u6b62\n  signal(SIGTERM,FathEXIT); signal(SIGINT,FathEXIT);  // SIGTERM 15 SIGINT 2\n\n  if (tcpserver.initserver(atoi(argv[1]))==false) // \u521d\u59cb\u5316\u670d\u52a1\u7aef\u7528\u4e8e\u76d1\u542c\u7684socket\u3002\n  {\n    perror(\"initserver()\"); return -1;\n  }\n\n  while (true)\n  {\n    // \u53d7\u7406\u5ba2\u6237\u7aef\u7684\u8fde\u63a5\uff08\u4ece\u5df2\u8fde\u63a5\u7684\u5ba2\u6237\u7aef\u4e2d\u53d6\u51fa\u4e00\u4e2a\u5ba2\u6237\u7aef\uff09\uff0c  \n    // \u5982\u679c\u6ca1\u6709\u5df2\u8fde\u63a5\u7684\u5ba2\u6237\u7aef\uff0caccept()\u51fd\u6570\u5c06\u963b\u585e\u7b49\u5f85\u3002\n    if (tcpserver.accept()==false)\n    {\n      perror(\"accept()\"); return -1;\n    }\n\n    int pid=fork();\n    if (pid==-1) { perror(\"fork()\"); return -1; }  // \u7cfb\u7edf\u8d44\u6e90\u4e0d\u8db3\u3002\n    if (pid&gt;  0) \n    { // \u7236\u8fdb\u7a0b\u3002\n      tcpserver.closeclient();  // \u7236\u8fdb\u7a0b\u5173\u95ed\u5ba2\u6237\u7aef\u8fde\u63a5\u7684socket\u3002\n      continue;                 // \u7236\u8fdb\u7a0b\u8fd4\u56de\u5230\u5faa\u73af\u5f00\u59cb\u7684\u4f4d\u7f6e\uff0c\u7ee7\u7eed\u53d7\u7406\u5ba2\u6237\u7aef\u7684\u8fde\u63a5\u3002\n    }\n\n    tcpserver.closelisten();    // \u5b50\u8fdb\u7a0b\u5173\u95ed\u76d1\u542c\u7684socket\u3002\n\n    // \u5b50\u8fdb\u7a0b\u9700\u8981\u91cd\u65b0\u8bbe\u7f6e\u4fe1\u53f7\u3002\n    signal(SIGTERM,ChldEXIT);   // \u5b50\u8fdb\u7a0b\u7684\u9000\u51fa\u51fd\u6570\u4e0e\u7236\u8fdb\u7a0b\u4e0d\u4e00\u6837\u3002\n    signal(SIGINT ,SIG_IGN);    // \u5b50\u8fdb\u7a0b\u4e0d\u9700\u8981\u6355\u83b7SIGINT\u4fe1\u53f7\u3002\n\n    // \u5b50\u8fdb\u7a0b\u8d1f\u8d23\u4e0e\u5ba2\u6237\u7aef\u8fdb\u884c\u901a\u8baf\u3002\n    cout &lt;&lt; \"\u5ba2\u6237\u7aef\u5df2\u8fde\u63a5(\" &lt;&lt; tcpserver.clientip() &lt;&lt; \")\u3002\\n\";\n\n    // \u4ee5\u4e0b\u662f\u63a5\u6536\u6587\u4ef6\u7684\u6d41\u7a0b\u3002\n    // 1\uff09\u63a5\u6536\u6587\u4ef6\u540d\u548c\u6587\u4ef6\u5927\u5c0f\u4fe1\u606f\u3002\n    // \u5b9a\u4e49\u6587\u4ef6\u4fe1\u606f\u7684\u7ed3\u6784\u4f53\u3002\n    struct st_fileinfo{\n      char filename[256];  // \u6587\u4ef6\u540d\u3002\n      int  filesize;       // \u6587\u4ef6\u5927\u5c0f\u3002\n    }fileinfo;\n    memset(&amp;fileinfo,0,sizeof(fileinfo));\n    // \u7528\u7ed3\u6784\u4f53\u5b58\u653e\u63a5\u6536\u62a5\u6587\u7684\u5185\u5bb9\u3002\n    if (tcpserver.recv(&amp;fileinfo,sizeof(fileinfo))==false) { perror(\"recv()\"); return -1; }\n    cout &lt;&lt; \"\u6587\u4ef6\u4fe1\u606f\u7ed3\u6784\u4f53\" &lt;&lt; fileinfo.filename &lt;&lt; \"(\" &lt;&lt; fileinfo.filesize &lt;&lt;\")\u3002\"&lt;&lt; endl;\n\n    // 2\uff09\u7ed9\u5ba2\u6237\u7aef\u56de\u590d\u786e\u8ba4\u62a5\u6587\uff0c\u8868\u793a\u5ba2\u6237\u7aef\u53ef\u4ee5\u53d1\u9001\u6587\u4ef6\u4e86\u3002\n    if (tcpserver.send(\"ok\")==false)  { perror(\"send\"); break; }\n\n    // 3\uff09\u63a5\u6536\u6587\u4ef6\u5185\u5bb9\u3002  string   char * + const char * + char *\n    if (tcpserver.recvfile(string(argv[2])+\"/\"+fileinfo.filename,fileinfo.filesize)==false)\n    { \n      cout &lt;&lt; \"\u63a5\u6536\u6587\u4ef6\u5185\u5bb9\u5931\u8d25\u3002\\n\"; return -1; \n    }\n\n    cout &lt;&lt; \"\u63a5\u6536\u6587\u4ef6\u5185\u5bb9\u6210\u529f\u3002\\n\";\n\n    // 4\uff09\u7ed9\u5ba2\u6237\u7aef\u56de\u590d\u786e\u8ba4\u62a5\u6587\uff0c\u8868\u793a\u6587\u4ef6\u5df2\u63a5\u6536\u6210\u529f\u3002\n    tcpserver.send(\"ok\");\n\n    return 0;  // \u5b50\u8fdb\u7a0b\u4e00\u5b9a\u8981\u9000\u51fa\uff0c\u5426\u5219\u53c8\u4f1a\u56de\u5230accept()\u51fd\u6570\u7684\u4f4d\u7f6e\u3002\n  }\n}\n\n// \u7236\u8fdb\u7a0b\u7684\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u3002\nvoid FathEXIT(int sig)\n{\n  // \u4ee5\u4e0b\u4ee3\u7801\u662f\u4e3a\u4e86\u9632\u6b62\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u5728\u6267\u884c\u7684\u8fc7\u7a0b\u4e2d\u518d\u6b21\u88ab\u4fe1\u53f7\u4e2d\u65ad\u3002\n  signal(SIGINT,SIG_IGN); signal(SIGTERM,SIG_IGN);\n\n  cout &lt;&lt; \"\u7236\u8fdb\u7a0b\u9000\u51fa\uff0csig=\" &lt;&lt; sig &lt;&lt; endl;\n\n  kill(0,SIGTERM);     // \u5411\u5168\u90e8\u7684\u5b50\u8fdb\u7a0b\u53d1\u900115\u7684\u4fe1\u53f7\uff0c\u901a\u77e5\u5b83\u4eec\u9000\u51fa\u3002\n\n  // \u5728\u8fd9\u91cc\u589e\u52a0\u91ca\u653e\u8d44\u6e90\u7684\u4ee3\u7801\uff08\u5168\u5c40\u7684\u8d44\u6e90\uff09\u3002\n  tcpserver.closelisten();       // \u7236\u8fdb\u7a0b\u5173\u95ed\u76d1\u542c\u7684socket\u3002\n\n  exit(0);\n}\n\n// \u5b50\u8fdb\u7a0b\u7684\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u3002\nvoid ChldEXIT(int sig)\n{\n  // \u4ee5\u4e0b\u4ee3\u7801\u662f\u4e3a\u4e86\u9632\u6b62\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u5728\u6267\u884c\u7684\u8fc7\u7a0b\u4e2d\u518d\u6b21\u88ab\u4fe1\u53f7\u4e2d\u65ad\u3002\n  signal(SIGINT,SIG_IGN); signal(SIGTERM,SIG_IGN);\n\n  cout &lt;&lt; \"\u5b50\u8fdb\u7a0b\" &lt;&lt; getpid() &lt;&lt; \"\u9000\u51fa\uff0csig=\" &lt;&lt; sig &lt;&lt; endl;\n\n  // \u5728\u8fd9\u91cc\u589e\u52a0\u91ca\u653e\u8d44\u6e90\u7684\u4ee3\u7801\uff08\u53ea\u91ca\u653e\u5b50\u8fdb\u7a0b\u7684\u8d44\u6e90\uff09\u3002\n  tcpserver.closeclient();       // \u5b50\u8fdb\u7a0b\u5173\u95ed\u5ba2\u6237\u7aef\u8fde\u4e0a\u6765\u7684socket\u3002\n\n  exit(0);\n}\n</code></pre>"},{"location":"Project/Backend%20server/Network/Host%20network%20byte%20order/","title":"\u4e3b\u673a\u5b57\u8282\u5e8fVS\u7f51\u7edc\u5b57\u8282\u5e8f","text":""},{"location":"Project/Backend%20server/Network/Host%20network%20byte%20order/#_1","title":"\u5927\u7aef\u5e8f/\u5c0f\u7aef\u5e8f","text":"<ul> <li>\u5982\u679c\u6570\u636e\u7c7b\u578b\u5360\u7528\u7684\u5185\u5b58\u7a7a\u95f4\u5927\u4e8e1\u5b57\u8282\uff0cCPU\u628a\u6570\u636e\u5b58\u653e\u5728\u5185\u5b58\u4e2d\u7684\u65b9\u5f0f\u6709\u4e24\u79cd\uff1a</li> <li>\u5927\u7aef\u5e8f\uff08Big Endian\uff09\uff1a\u4f4e\u4f4d\u5b57\u8282\u5b58\u653e\u5728\u9ad8\u4f4d\uff0c\u9ad8\u4f4d\u5b57\u8282\u5b58\u653e\u5728\u4f4e\u4f4d</li> <li>\u5c0f\u7aef\u5e8f\uff08Little Endia\uff09\uff1a\u4f4e\u4f4d\u5b57\u8282\u5b58\u653e\u5728\u4f4e\u4f4d\uff0c\u9ad8\u4f4d\u5b57\u8282\u5b58\u653e\u5728\u9ad8\u4f4d</li> <li> <p>\u5047\u8bbe\u4ece\u5185\u5b58\u5730\u57400x00000001\u5904\u5f00\u59cb\u5b58\u50a8\u5341\u516d\u8fdb\u5236\u65700x12345678\uff0c\u90a3\u4e48</p> <ul> <li> <p>Bit-endian\uff08\u6309\u539f\u6765\u987a\u5e8f\u5b58\u50a8\uff09      <pre><code>0x00000001           0x12 \n0x00000002           0x34\n0x00000003           0x56\n0x00000004           0x78\n</code></pre> <li> <p>Little-endian\uff08\u98a0\u5012\u987a\u5e8f\u50a8\u5b58\uff09      <pre><code>0x00000001           0x78\n0x00000002           0x56\n0x00000003           0x34\n0x00000004           0x12\n</code></pre> <li> <p>Intel\u7cfb\u5217\u7684CPU\u4ee5\u5c0f\u7aef\u5e8f\u65b9\u5f0f\u4fdd\u5b58\u6570\u636e\uff0c\u5176\u5b83\u578b\u53f7\u7684CPU\u4e0d\u4e00\u5b9a</p> </li> <li>\u64cd\u4f5c\u6587\u4ef6\u7684\u672c\u8d28\u662f\u628a\u5185\u5b58\u4e2d\u7684\u6570\u636e\u5199\u5165\u78c1\u76d8\uff0c\u5728\u7f51\u7edc\u7f16\u7a0b\u4e2d\uff0c\u4f20\u8f93\u6570\u636e\u7684\u672c\u8d28\u4e5f\u662f\u628a\u6570\u636e\u5199\u5165\u6587\u4ef6\uff08socket\u4e5f\u662f\u6587\u4ef6\u63cf\u8ff0\u7b26\uff09</li> <li>\u8fd9\u6837\u7684\u8bdd\uff0c\u5b57\u8282\u5e8f\u4e0d\u540c\u7684\u8ba1\u7b97\u673a\u4e4b\u95f4\u4f20\u8f93\u6570\u636e\uff0c\u53ef\u80fd\u4f1a\u51fa\u73b0\u95ee\u9898</li>"},{"location":"Project/Backend%20server/Network/Host%20network%20byte%20order/#_2","title":"\u7f51\u7edc\u5b57\u8282\u5e8f","text":"<ul> <li>\u4e3a\u4e86\u89e3\u51b3\u4e0d\u540c\u5b57\u8282\u5e8f\u7684\u8ba1\u7b97\u673a\u4e4b\u95f4\u4f20\u8f93\u6570\u636e\u7684\u95ee\u9898\uff0c\u7ea6\u5b9a\u91c7\u7528\u7f51\u7edc\u5b57\u8282\u5e8f\uff08\u5927\u7aef\u5e8f\uff09</li> <li> <p>C\u8bed\u8a00\u63d0\u4f9b\u4e86\u56db\u4e2a\u5e93\u51fd\u6570\uff0c\u7528\u4e8e\u5728\u4e3b\u673a\u5b57\u8282\u5e8f\u548c\u7f51\u7edc\u5b57\u8282\u5e8f\u4e4b\u95f4\u8f6c\u6362\uff1a</p> <ul> <li><code>uint16_t htons(uint16_t hostshort);</code>   //<code>uint16_t</code> 2\u5b57\u8282\u7684\u6574\u6570 <code>unsigned short</code></li> <li><code>uint32_t htonl(uint32_t hostlong);</code>   // <code>uint32_t</code>  4\u5b57\u8282\u7684\u6574\u6570 <code>unsigned int</code></li> <li><code>uint16_t ntohs(uint16_t netshort);</code></li> <li><code>uint32_t ntohl(uint32_t netlong);</code></li> </ul> <pre><code>h                       host\uff08\u4e3b\u673a\uff09\nto                      \u8f6c\u6362\nn                       network\uff08\u7f51\u7edc\uff09\ns                       short\uff082\u5b57\u8282\uff0c16\u4f4d\u7684\u6574\u6570\uff09\nl                       long\uff084\u5b57\u8282\uff0c32\u4f4d\u7684\u6574\u6570\uff09\n</code></pre> </li> </ul>"},{"location":"Project/Backend%20server/Network/Host%20network%20byte%20order/#ip","title":"IP\u5730\u5740\u548c\u901a\u8baf\u7aef\u53e3","text":"<ul> <li> <p>\u5728\u8ba1\u7b97\u673a\u4e2d\uff0cIPv4\u7684\u5730\u5740\u75284\u5b57\u8282\u7684\u6574\u6570\u5b58\u653e\uff0c\u901a\u8baf\u7aef\u53e3\u75282\u5b57\u8282\u7684\u6574\u6570\uff080-65535\uff09\u5b58\u653e</p> <pre><code>\u5b57\u7b26\u4e32\u5b58\u50a8 15\u5b57\u8282    \u6574\u6570\u5b58\u50a84\u5b57\u8282\n192.168.190.134    3232284294    255.255.255.255\n\n        192     168      190      134\n     11000000 10101000 10111110 10000110\n\u5927\u7aef\uff1a11000000 10101000 10111110 10000110\n\u5c0f\u7aef\uff1a10000110 10111110 10101000 11000000\n</code></pre> </li> </ul>"},{"location":"Project/Backend%20server/Network/Host%20network%20byte%20order/#_3","title":"\u5904\u7406\u5927\u5c0f\u7aef\u5e8f","text":"<ul> <li>\u5728\u7f51\u7edc\u7f16\u7a0b\u4e2d\uff0c\u6570\u636e\u6536\u53d1\u7684\u65f6\u5019\u6709\u81ea\u52a8\u8f6c\u6362\u673a\u5236\uff0c\u4e0d\u9700\u8981\u7a0b\u5e8f\u5458\u624b\u52a8\u8f6c\u6362\uff0c\u53ea\u6709\u5411sockaddr_in\u7ed3\u4f53\u6210\u5458\u53d8\u91cf\u586b\u5145\u6570\u636e\u65f6\uff0c\u624d\u9700\u8981\u8003\u8651\u5b57\u8282\u5e8f\u7684\u95ee\u9898</li> </ul>"},{"location":"Project/Backend%20server/Network/Internet%20communication/","title":"\u7f51\u7edc\u901a\u4fe1","text":"<pre><code>%%{init: {\"flowchart\": {\"htmlLabels\": false}} }%%\nflowchart TD\n\n\n\nsubgraph \"`**\u670d\u52a1\u5668\u7aef**`\"\n  6[\"`socket()\n  \u521b\u5efa\u6d41\u5f0fsocket-B`\"]\n  7[\"`bind()\n  \u7ed1\u5b9a\u670d\u52a1\u5668ip\u5730\u5740\u548c\u7aef\u53e3\u53f7`\"]\n  8[\"`listen()\n  \u76d1\u542c\u8fde\u63a5\u8bf7\u6c42`\"]\n  9[\"`accept()\n  \u53d7\u7406\u5ba2\u6237\u7aef\u7684\u8fde\u63a5`\"]\n  10[\"`recv()\n  \u63a5\u6536\u6570\u636e\u670d\u52a1\u5668\u7aef`\"]\n  11[\"`send()\n  \u53d1\u9001\u6570\u636e\u670d\u52a1\u5668\u7aef`\"]\n  12[\"`recv()\n  \u63a5\u6536\u6570\u636e\u670d\u52a1\u5668\u7aef`\"]\n  13[\"`close()\n  \u5173\u95edsocket\u8fde\u63a5\n  \u91ca\u653e\u8d44\u6e90\u670d\u52a1\u5668\u7aef`\"]\n\n  6 --&gt; 7\n  7 --&gt; 8\n  8 --socket-B--&gt; 9\n  9 --&gt; 10  \n  10 --&gt; 11\n  11 --&gt; 12\n  12 --&gt; 13\nend\n\nsubgraph \"`**\u5efa\u7acb\u8fde\u63a5**`\"\n  14[\"`\u5efa\u7acb\u8fde\u63a5`\"]\n\n  14 &lt;--&gt; 8\n\nend\n\nsubgraph \"`**\u5efa\u7acb\u901a\u4fe1**`\"\n  15[\"`socket-A\u5957\u63a5\u5b57`\"]\n  15&lt;--&gt;9\nend\n\nsubgraph \"`**\u5ba2\u6237\u7aef**`\"\n  1[\"`socket()\n  \u521b\u5efa\u6d41\u5f0fsocket-A`\"]\n  2[\"`connect()\n  \u8fde\u63a5\u670d\u52a1\u5668`\"]\n  3[\"`send()\n  \u53d1\u9001\u6570\u636e\u670d\u52a1\u5668\u7aef`\"]\n  4[\"`recv()\n  \u63a5\u6536\u6570\u636e\u670d\u52a1\u5668\u7aef`\"]\n  5[\"`close()\n  \u5173\u95edsocket\u8fde\u63a5\n  \u91ca\u653e\u8d44\u6e90\u5ba2\u6237\u7aef`\"]\n\n  1 --&gt; 2\n  2 --&gt; 3\n  3 --&gt; 4\n  4 --&gt; 5\nend\n  2&lt;--&gt;14\n  3--&gt;10\n  11--&gt;4\n  5--&gt;12\n\n</code></pre>"},{"location":"Project/Backend%20server/Network/Internet%20communication/#socket-","title":"Socket-\u5ba2\u6237\u7aef","text":"<ol> <li>\u521b\u5efa\u4e00\u4e2a\u7528\u4e8e\u901a\u4fe1\u7684\u5957\u63a5\u5b57\uff08fd\uff09</li> <li>\u8fde\u63a5\u670d\u52a1\u5668\uff0c\u9700\u8981\u6307\u5b9a\u8fde\u63a5\u7684\u670d\u52a1\u5668\u7684 IP \u548c \u7aef\u53e3</li> <li>\u8fde\u63a5\u6210\u529f\u4e86\uff0c\u5ba2\u6237\u7aef\u53ef\u4ee5\u76f4\u63a5\u548c\u670d\u52a1\u5668\u901a\u4fe1<ul> <li>\u63a5\u6536\u6570\u636e</li> <li>\u53d1\u9001\u6570\u636e</li> </ul> </li> <li>\u901a\u4fe1\u7ed3\u675f\uff0c\u65ad\u5f00\u8fde\u63a5</li> </ol> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;cstring&gt;\n#include &lt;cstdlib&gt;\n#include &lt;unistd.h&gt;\n#include &lt;netdb.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;sys/socket.h&gt;\n#include &lt;arpa/inet.h&gt;\nusing namespace std;\n\nint main(int argc,char *argv[])\n{\n  if (argc!=3)\n  {\n    cout &lt;&lt; \"Using:./demo5 \u670d\u52a1\u7aef\u7684IP \u670d\u52a1\u7aef\u7684\u7aef\u53e3\\nExample:./demo5 192.168.101.138 5005\\n\\n\"; \n    return -1;\n  }\n\n  // \u7b2c1\u6b65\uff1a\u521b\u5efa\u5ba2\u6237\u7aef\u7684socket\u3002  \n  int sockfd = socket(AF_INET,SOCK_STREAM,0);\n  if (sockfd==-1)\n  {\n    perror(\"socket\"); return -1;\n  }\n\n  // \u7b2c2\u6b65\uff1a\u5411\u670d\u52a1\u5668\u53d1\u8d77\u8fde\u63a5\u8bf7\u6c42\u3002 \n  struct sockaddr_in servaddr;               // \u7528\u4e8e\u5b58\u653e\u534f\u8bae\u3001\u7aef\u53e3\u548cIP\u5730\u5740\u7684\u7ed3\u6784\u4f53\u3002\n  memset(&amp;servaddr,0,sizeof(servaddr));\n  servaddr.sin_family = AF_INET;             // \u2460\u534f\u8bae\u65cf\uff0c\u56fa\u5b9a\u586bAF_INET\u3002\n  servaddr.sin_port = htons(atoi(argv[2]));  // \u2461\u6307\u5b9a\u670d\u52a1\u7aef\u7684\u901a\u4fe1\u7aef\u53e3\u3002\n\n  struct hostent* h;                         // \u7528\u4e8e\u5b58\u653e\u670d\u52a1\u7aefIP\u5730\u5740(\u5927\u7aef\u5e8f)\u7684\u7ed3\u6784\u4f53\u7684\u6307\u9488\u3002\n  if ( (h = gethostbyname(argv[1])) == nullptr )  // \u628a\u57df\u540d/\u4e3b\u673a\u540d/\u5b57\u7b26\u4e32\u683c\u5f0f\u7684IP\u8f6c\u6362\u6210\u7ed3\u6784\u4f53\u3002\n  { \n    cout &lt;&lt; \"gethostbyname failed.\\n\" &lt;&lt; endl; close(sockfd); return -1;\n  }\n  memcpy(&amp;servaddr.sin_addr,h-&gt;h_addr,h-&gt;h_length); // \u2462\u6307\u5b9a\u670d\u52a1\u7aef\u7684IP(\u5927\u7aef\u5e8f)\u3002\n\n  //servaddr.sin_addr.s_addr=inet_addr(argv[1]); // \u2462\u6307\u5b9a\u670d\u52a1\u7aef\u7684IP\uff0c\u53ea\u80fd\u7528IP\uff0c\u4e0d\u80fd\u7528\u57df\u540d\u548c\u4e3b\u673a\u540d\u3002\n  if (connect(sockfd,(struct sockaddr *)&amp;servaddr,sizeof(servaddr))==-1)  // \u5411\u670d\u52a1\u7aef\u53d1\u8d77\u8fde\u63a5\u6e05\u6c42\u3002\n  { \n    perror(\"connect\"); close(sockfd); return -1; \n  }\n\n  // \u7b2c3\u6b65\uff1a\u4e0e\u670d\u52a1\u7aef\u901a\u8baf\uff0c\u5ba2\u6237\u53d1\u9001\u4e00\u4e2a\u8bf7\u6c42\u62a5\u6587\u540e\u7b49\u5f85\u670d\u52a1\u7aef\u7684\u56de\u590d\uff0c\u6536\u5230\u56de\u590d\u540e\uff0c\u518d\u53d1\u4e0b\u4e00\u4e2a\u8bf7\u6c42\u62a5\u6587\u3002\n  char buffer[1024];\n  for (int ii=0;ii&lt;10;ii++)  // \u5faa\u73af3\u6b21\uff0c\u5c06\u4e0e\u670d\u52a1\u7aef\u8fdb\u884c\u4e09\u6b21\u901a\u8baf\u3002\n  {\n    int iret;\n    memset(buffer,0,sizeof(buffer));\n    sprintf(buffer,\"\u8fd9\u662f\u7b2c%d\u4e2a\u8d85\u7ea7\u5973\u751f\uff0c\u7f16\u53f7%03d\u3002\",ii+1,ii+1);  // \u751f\u6210\u8bf7\u6c42\u62a5\u6587\u5185\u5bb9\u3002\n    // \u5411\u670d\u52a1\u7aef\u53d1\u9001\u8bf7\u6c42\u62a5\u6587\u3002\n    if ( (iret=send(sockfd,buffer,strlen(buffer),0))&lt;=0)\n    { \n      perror(\"send\"); break; \n    }\n    cout &lt;&lt; \"\u53d1\u9001\uff1a\" &lt;&lt; buffer &lt;&lt; endl;\n\n    memset(buffer,0,sizeof(buffer));\n    // \u63a5\u6536\u670d\u52a1\u7aef\u7684\u56de\u5e94\u62a5\u6587\uff0c\u5982\u679c\u670d\u52a1\u7aef\u6ca1\u6709\u53d1\u9001\u56de\u5e94\u62a5\u6587\uff0crecv()\u51fd\u6570\u5c06\u963b\u585e\u7b49\u5f85\u3002\n    if ( (iret=recv(sockfd,buffer,sizeof(buffer),0))&lt;=0)\n    {\n       cout &lt;&lt; \"iret=\" &lt;&lt; iret &lt;&lt; endl; break;\n    }\n    cout &lt;&lt; \"\u63a5\u6536\uff1a\" &lt;&lt; buffer &lt;&lt; endl;\n\n    sleep(1);\n  }\n\n  // \u7b2c4\u6b65\uff1a\u5173\u95edsocket\uff0c\u91ca\u653e\u8d44\u6e90\u3002\n  close(sockfd);\n}\n</code></pre>"},{"location":"Project/Backend%20server/Network/Internet%20communication/#socket-_1","title":"Socket-\u670d\u52a1\u7aef","text":"<ol> <li>\u521b\u5efa\u4e00\u4e2a\u7528\u4e8e\u76d1\u542c\u7684\u5957\u63a5\u5b57<ul> <li>\u76d1\u542c\uff1a\u76d1\u542c\u6709\u5ba2\u6237\u7aef\u7684\u8fde\u63a5</li> <li>\u5957\u63a5\u5b57\uff1a\u8fd9\u4e2a\u5957\u63a5\u5b57\u5176\u5b9e\u5c31\u662f\u4e00\u4e2a\u6587\u4ef6\u63cf\u8ff0\u7b26</li> </ul> </li> <li>\u5c06\u8fd9\u4e2a\u76d1\u542c\u6587\u4ef6\u63cf\u8ff0\u7b26\u548c\u672c\u5730\u7684IP\u548c\u7aef\u53e3\u7ed1\u5b9a\uff08IP\u548c\u7aef\u53e3\u5c31\u662f\u670d\u52a1\u5668\u7684\u5730\u5740\u4fe1\u606f\uff09<ul> <li>\u5ba2\u6237\u7aef\u8fde\u63a5\u670d\u52a1\u5668\u7684\u65f6\u5019\u4f7f\u7528\u7684\u5c31\u662f\u8fd9\u4e2aIP\u548c\u7aef\u53e3</li> </ul> </li> <li>\u8bbe\u7f6e\u76d1\u542c\uff0c\u76d1\u542c\u7684fd\u5f00\u59cb\u5de5\u4f5c</li> <li>\u963b\u585e\u7b49\u5f85\uff0c\u5f53\u6709\u5ba2\u6237\u7aef\u53d1\u8d77\u8fde\u63a5\uff0c\u89e3\u9664\u963b\u585e\uff0c\u63a5\u53d7\u5ba2\u6237\u7aef\u7684\u8fde\u63a5\uff0c\u4f1a\u5f97\u5230\u4e00\u4e2a\u548c\u5ba2\u6237\u7aef\u901a\u4fe1\u7684\u5957\u63a5\u5b57 \uff08fd\uff09</li> <li>\u901a\u4fe1         - \u63a5\u6536\u6570\u636e         - \u53d1\u9001\u6570\u636e</li> <li>\u901a\u4fe1\u7ed3\u675f\uff0c\u65ad\u5f00\u8fde\u63a5</li> </ol> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;cstring&gt;\n#include &lt;cstdlib&gt;\n#include &lt;unistd.h&gt;\n#include &lt;netdb.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;sys/socket.h&gt;\n#include &lt;arpa/inet.h&gt;\nusing namespace std;\n\nint main(int argc,char *argv[])\n{\n  if (argc!=2)\n  {\n    cout &lt;&lt; \"Using:./demo6 \u901a\u8baf\u7aef\u53e3\\nExample:./demo6 5005\\n\\n\";   // \u7aef\u53e3\u5927\u4e8e1024\uff0c\u4e0d\u4e0e\u5176\u5b83\u7684\u91cd\u590d\u3002\n    cout &lt;&lt; \"\u6ce8\u610f\uff1a\u8fd0\u884c\u670d\u52a1\u7aef\u7a0b\u5e8f\u7684Linux\u7cfb\u7edf\u7684\u9632\u706b\u5899\u5fc5\u987b\u8981\u5f00\u901a5005\u7aef\u53e3\u3002\\n\";\n    cout &lt;&lt; \"      \u5982\u679c\u662f\u4e91\u670d\u52a1\u5668\uff0c\u8fd8\u8981\u5f00\u901a\u4e91\u5e73\u53f0\u7684\u8bbf\u95ee\u7b56\u7565\u3002\\n\\n\";\n    return -1;\n  }\n\n  // \u7b2c1\u6b65\uff1a\u521b\u5efa\u670d\u52a1\u7aef\u7684socket\u3002 \n  int listenfd = socket(AF_INET,SOCK_STREAM,0);\n  if (listenfd==-1) \n  { \n    perror(\"socket\"); return -1; \n  }\n\n  // \u7b2c2\u6b65\uff1a\u628a\u670d\u52a1\u7aef\u7528\u4e8e\u901a\u4fe1\u7684IP\u548c\u7aef\u53e3\u7ed1\u5b9a\u5230socket\u4e0a\u3002 \n  struct sockaddr_in servaddr;                // \u7528\u4e8e\u5b58\u653e\u534f\u8bae\u3001\u7aef\u53e3\u548cIP\u5730\u5740\u7684\u7ed3\u6784\u4f53\u3002\n  memset(&amp;servaddr,0,sizeof(servaddr));\n  servaddr.sin_family=AF_INET;                // \u2460\u534f\u8bae\u65cf\uff0c\u56fa\u5b9a\u586bAF_INET\u3002\n  servaddr.sin_port=htons(atoi(argv[1]));     // \u2461\u6307\u5b9a\u670d\u52a1\u7aef\u7684\u901a\u4fe1\u7aef\u53e3\u3002\n  servaddr.sin_addr.s_addr=htonl(INADDR_ANY); // \u2462\u5982\u679c\u64cd\u4f5c\u7cfb\u7edf\u6709\u591a\u4e2aIP\uff0c\u5168\u90e8\u7684IP\u90fd\u53ef\u4ee5\u7528\u4e8e\u901a\u8baf\u3002\n  //servaddr.sin_addr.s_addr=inet_addr(\"192.168.101.138\"); // \u2462\u6307\u5b9a\u670d\u52a1\u7aef\u7528\u4e8e\u901a\u8baf\u7684IP(\u5927\u7aef\u5e8f)\u3002\n  // \u7ed1\u5b9a\u670d\u52a1\u7aef\u7684IP\u548c\u7aef\u53e3\u3002\n  if (bind(listenfd,(struct sockaddr *)&amp;servaddr,sizeof(servaddr))==-1)\n  { \n    perror(\"bind\"); close(listenfd); return -1; \n  }\n\n  // \u7b2c3\u6b65\uff1a\u628asocket\u8bbe\u7f6e\u4e3a\u53ef\u8fde\u63a5\uff08\u76d1\u542c\uff09\u7684\u72b6\u6001\u3002\n  if (listen(listenfd,5) == -1 ) \n  { \n    perror(\"listen\"); close(listenfd); return -1; \n  }\n\n  // \u7b2c4\u6b65\uff1a\u53d7\u7406\u5ba2\u6237\u7aef\u7684\u8fde\u63a5\u8bf7\u6c42\uff0c\u5982\u679c\u6ca1\u6709\u5ba2\u6237\u7aef\u8fde\u4e0a\u6765\uff0caccept()\u51fd\u6570\u5c06\u963b\u585e\u7b49\u5f85\u3002\n  int clientfd=accept(listenfd,0,0);\n  if (clientfd==-1)\n  {\n    perror(\"accept\"); close(listenfd); return -1; \n  }\n\n  cout &lt;&lt; \"\u5ba2\u6237\u7aef\u5df2\u8fde\u63a5\u3002\\n\";\n\n  // \u7b2c5\u6b65\uff1a\u4e0e\u5ba2\u6237\u7aef\u901a\u4fe1\uff0c\u63a5\u6536\u5ba2\u6237\u7aef\u53d1\u8fc7\u6765\u7684\u62a5\u6587\u540e\uff0c\u56de\u590dok\u3002\n  char buffer[1024];\n  while (true)\n  {\n    int iret;\n    memset(buffer,0,sizeof(buffer));\n    // \u63a5\u6536\u5ba2\u6237\u7aef\u7684\u8bf7\u6c42\u62a5\u6587\uff0c\u5982\u679c\u5ba2\u6237\u7aef\u6ca1\u6709\u53d1\u9001\u8bf7\u6c42\u62a5\u6587\uff0crecv()\u51fd\u6570\u5c06\u963b\u585e\u7b49\u5f85\u3002\n    // \u5982\u679c\u5ba2\u6237\u7aef\u5df2\u65ad\u5f00\u8fde\u63a5\uff0crecv()\u51fd\u6570\u5c06\u8fd4\u56de0\u3002\n    if ( (iret=recv(clientfd,buffer,sizeof(buffer),0))&lt;=0) \n    {\n       cout &lt;&lt; \"iret=\" &lt;&lt; iret &lt;&lt; endl;  break;   \n    }\n    cout &lt;&lt; \"\u63a5\u6536\uff1a\" &lt;&lt; buffer &lt;&lt; endl;\n\n    strcpy(buffer,\"ok\");  // \u751f\u6210\u56de\u5e94\u62a5\u6587\u5185\u5bb9\u3002\n    // \u5411\u5ba2\u6237\u7aef\u53d1\u9001\u56de\u5e94\u62a5\u6587\u3002\n    if ( (iret=send(clientfd,buffer,strlen(buffer),0))&lt;=0) \n    { \n      perror(\"send\"); break; \n    }\n    cout &lt;&lt; \"\u53d1\u9001\uff1a\" &lt;&lt; buffer &lt;&lt; endl;\n  }\n\n  // \u7b2c6\u6b65\uff1a\u5173\u95edsocket\uff0c\u91ca\u653e\u8d44\u6e90\u3002\n  close(listenfd);   // \u5173\u95ed\u670d\u52a1\u7aef\u7528\u4e8e\u76d1\u542c\u7684socket\u3002\n  close(clientfd);   // \u5173\u95ed\u5ba2\u6237\u7aef\u8fde\u4e0a\u6765\u7684socket\u3002\n}\n</code></pre>"},{"location":"Project/Backend%20server/Network/Socket/","title":"Socket\u5957\u63a5\u5b57","text":""},{"location":"Project/Backend%20server/Network/Socket/#_1","title":"\u7b80\u4ecb","text":"<ul> <li> <p>\u5bf9\u7f51\u7edc\u4e2d\u4e0d\u540c\u4e3b\u673a\u4e0a\u7684\u5e94\u7528\u8fdb\u7a0b\u4e4b\u95f4\u8fdb\u884c\u53cc\u5411\u901a\u4fe1\u7684\u7aef\u70b9\u7684\u62bd\u8c61\u3002 \u4e00\u4e2a\u5957\u63a5\u5b57\u5c31\u662f\u7f51\u7edc\u4e0a\u8fdb\u7a0b\u901a\u4fe1\u7684\u4e00\u7aef\uff0c\u63d0\u4f9b\u4e86\u5e94\u7528\u5c42\u8fdb\u7a0b\u5229\u7528\u7f51\u7edc\u534f\u8bae\u4ea4\u6362\u6570\u636e\u7684\u673a\u5236\u3002\u4ece\u6240\u5904\u7684\u5730\u4f4d\u6765\u8bb2\uff0c\u5957\u63a5\u5b57\u4e0a\u8054\u5e94\u7528\u8fdb\u7a0b\uff0c\u4e0b\u8054\u7f51\u7edc\u534f\u8bae\u6808\uff0c\u662f\u5e94\u7528\u7a0b\u5e8f\u901a\u8fc7\u7f51\u7edc\u534f\u8bae\u8fdb\u884c\u901a\u4fe1\u7684\u63a5\u53e3\uff0c \u662f\u5e94\u7528\u7a0b\u5e8f\u4e0e\u7f51\u7edc\u534f\u8bae\u6839\u8fdb\u884c\u4ea4\u4e92\u7684\u63a5\u53e3\u3002</p> </li> <li> <p>socket \u53ef\u4ee5\u770b\u6210\u662f\u4e24\u4e2a\u7f51\u7edc\u5e94\u7528\u7a0b\u5e8f\u8fdb\u884c\u901a\u4fe1\u65f6\uff0c\u5404\u81ea\u901a\u4fe1\u8fde\u63a5\u4e2d\u7684\u7aef\u70b9\uff0c\u8fd9\u662f\u4e00\u4e2a\u903b\u8f91\u4e0a\u7684\u6982\u5ff5\u3002</p> </li> <li>\u5b83\u662f\u7f51\u7edc\u73af\u5883\u4e2d\u8fdb\u7a0b\u95f4\u901a\u4fe1\u7684API\uff0c\u4e5f\u662f\u53ef\u4ee5\u88ab\u547d\u540d\u548c\u5bfb\u5740\u7684\u901a\u4fe1\u7aef\u70b9\uff0c\u4f7f\u7528\u4e2d\u7684\u6bcf\u4e00\u4e2a\u5957\u63a5\u5b57\u90fd\u6709\u5176\u7c7b\u578b\u548c\u4e00\u4e2a\u4e0e\u4e4b\u76f8\u8fde\u8fdb\u7a0b\u3002</li> <li>\u901a\u4fe1\u65f6\u5176\u4e2d\u4e00\u4e2a\u7f51\u7edc\u5e94\u7528\u7a0b\u5e8f\u5c06\u8981\u4f20\u8f93\u7684\u4e00\u6bb5\u4fe1\u606f\u5199\u5165\u5b83\u6240\u5728\u4e3b\u673a\u7684socket\u4e2d\uff0c\u8be5socket\u901a\u8fc7\u4e0e\u7f51\u7edc\u63a5\u53e3\u5361(NIC)\u76f8\u8fde\u7684\u4f20\u8f93\u4ecb\u8d28\u5c06\u8fd9\u6bb5\u4fe1\u606f\u9001\u5230\u53e6\u5916\u4e00\u53f0\u4e3b\u673a\u7684socket\u4e2d\uff0c\u4f7f\u5bf9\u65b9\u80fd\u591f\u63a5\u6536\u5230\u8fd9\u6bb5\u4fe1\u606f\u3002socket \u662f\u7531 IP \u5730\u5740\u548c\u7aef\u53e3\u7ed3\u5408\u7684\uff0c\u63d0\u4f9b\u5411\u5e94\u7528\u5c42\u8fdb\u7a0b\u4f20\u9001\u6570\u636e\u5305\u7684\u673a\u5236</li> <li>socket\u672c\u8eab\u6709\u201c\u63d2\u5ea7\u201d\u7684\u610f\u601d\uff0c\u5728Linux\u73af\u5883\u4e0b\uff0c\u7528\u4e8e\u8868\u793a\u8fdb\u7a0b\u95f4\u7f51\u7edc\u901a\u4fe1\u7684\u7279\u6b8a\u6587\u4ef6\u7c7b\u578b\u3002\u672c\u8d28\u4e3a\u5185\u6838\u501f\u52a9\u7f13\u51b2\u533a\u5f62\u6210\u7684\u4f2a\u6587\u4ef6\u3002\u65e2\u7136\u662f\u6587\u4ef6\uff0c\u90a3\u4e48\u7406\u6240\u5f53\u7136\u7684\uff0c\u6211\u4eec\u53ef\u4ee5\u4f7f\u7528\u6587\u4ef6\u63cf\u8ff0\u7b26\u5f15\u7528\u5957\u63a5\u5b57<ul> <li>\u4e0e\u7ba1\u9053\u7c7b\u4f3c\u7684\uff0cLinux \u7cfb\u7edf\u5c06\u5176\u5c01\u88c5\u6210\u6587\u4ef6\u7684\u76ee\u7684\u662f\u4e3a\u4e86\u7edf\u4e00\u63a5\u53e3\uff0c\u4f7f\u5f97\u8bfb\u5199\u5957\u63a5\u5b57\u548c\u8bfb\u5199\u6587\u4ef6\u7684\u64cd\u4f5c\u4e00\u81f4\u3002\u533a\u522b\u662f\u7ba1\u9053\u4e3b\u8981\u5e94\u7528\u4e8e\u672c\u5730\u8fdb\u7a0b\u95f4\u901a\u4fe1\uff0c\u800c\u5957\u63a5\u5b57\u591a\u5e94\u7528\u4e8e\u7f51\u7edc\u8fdb\u7a0b\u95f4\u6570\u636e\u7684\u4f20\u9012\u3002</li> </ul> </li> </ul>"},{"location":"Project/Backend%20server/Network/Socket/#socket_1","title":"\u521b\u5efasocket","text":"<ul> <li><code>int socket(int domain, int type, int protocol);</code><ul> <li>\u6210\u529f\u8fd4\u56de\u4e00\u4e2a\u6709\u6548\u7684<code>socket</code>\uff0c\u5931\u8d25\u8fd4\u56de<code>-1</code>\uff0c<code>errno</code>\u88ab\u8bbe\u7f6e</li> <li>\u5168\u90e8\u7f51\u7edc\u7f16\u7a0b\u7684\u51fd\u6570\uff0c\u5931\u8d25\u65f6\u57fa\u672c\u4e0a\u90fd\u662f\u8fd4\u56de<code>-1</code>\uff0c<code>errno</code>\u88ab\u8bbe\u7f6e</li> <li>\u53ea\u8981\u53c2\u6570\u6ca1\u586b\u9519\uff0c\u57fa\u672c\u4e0a\u4e0d\u4f1a\u5931\u8d25</li> <li>\u4e0d\u8fc7\uff0c\u5355\u4e2a\u8fdb\u7a0b\u4e2d\u521b\u5efa\u7684<code>socket</code>\u6570\u91cf\u4e0e\u53d7\u7cfb\u7edf\u53c2\u6570<code>open files</code>\u7684\u9650\u5236<code>\uff08ulimit -a \uff09</code></li> </ul> </li> <li><code>domain</code> \u901a\u8baf\u7684\u534f\u8bae\u5bb6\u65cf<ul> <li><code>PF_INET</code> <code>IPv4</code>\u4e92\u8054\u7f51\u534f\u8bae\u65cf</li> <li><code>PF_INET6</code> <code>IPv6</code>\u4e92\u8054\u7f51\u534f\u8bae\u65cf</li> <li><code>PF_LOCAL</code>        \u672c\u5730\u901a\u4fe1\u7684\u534f\u8bae\u65cf</li> <li><code>PF_PACKET</code>       \u5185\u6838\u5e95\u5c42\u7684\u534f\u8bae\u65cf</li> <li><code>PF_IPX</code> <code>IPX Novell</code>\u534f\u8bae\u65cf</li> <li><code>IPv6</code>\u5c1a\u672a\u666e\u53ca\uff0c\u5176\u5b83\u7684\u4e0d\u5e38\u7528</li> </ul> </li> <li><code>type</code> \u6570\u636e\u4f20\u8f93\u7684\u7c7b\u578b<ul> <li><code>SOCK_STREAM</code>     \u9762\u5411\u8fde\u63a5\u7684socket\uff1a<ul> <li>\u6570\u636e\u4e0d\u4f1a\u4e22\u5931</li> <li>\u6570\u636e\u7684\u987a\u5e8f\u4e0d\u4f1a\u9519\u4e71</li> <li>\u53cc\u5411\u901a\u9053</li> </ul> </li> <li><code>SOCK_DGRAM</code>      \u65e0\u8fde\u63a5\u7684socket\uff1a<ul> <li>\u6570\u636e\u53ef\u80fd\u4f1a\u4e22\u5931</li> <li>\u6570\u636e\u7684\u987a\u5e8f\u53ef\u80fd\u4f1a\u9519\u4e71</li> <li>\u4f20\u8f93\u7684\u6548\u7387\u66f4\u9ad8</li> </ul> </li> </ul> </li> <li><code>protocol</code> \u6700\u7ec8\u4f7f\u7528\u7684\u534f\u8bae<ul> <li>\u5728<code>IPv4</code>\u7f51\u7edc\u534f\u8bae\u5bb6\u65cf\u4e2d\uff0c\u6570\u636e\u4f20\u8f93\u65b9\u5f0f\u4e3a<code>SOCK_STREAM</code>\u7684\u534f\u8bae\u53ea\u6709<code>IPPROTO_TCP</code>\uff0c\u6570\u636e\u4f20\u8f93\u65b9\u5f0f\u4e3a<code>SOCK_DGRAM</code>\u7684\u534f\u8bae\u53ea\u6709<code>IPPROTO_UDP</code></li> <li>\u672c\u53c2\u6570\u4e5f\u53ef\u4ee5\u586b<code>0</code></li> <li><code>socket(PF_INET, SOCK_STREAM, IPPROTO_TCP);</code>    // \u521b\u5efa<code>tcp</code>\u7684<code>sock</code></li> <li><code>socket(PF_INET, SOCK_DGRAM, IPPROTO_UDP);</code>    // \u521b\u5efa<code>udp</code>\u7684<code>sock</code></li> </ul> </li> </ul>"},{"location":"Project/Backend%20server/Network/Socket/#socket_2","title":"Socket\u51fd\u6570","text":"<pre><code>#include &lt;sys/types.h&gt;\n#include &lt;sys/socket.h&gt;\n#include &lt;arpa/inet.h&gt; // \u5305\u542b\u4e86\u8fd9\u4e2a\u5934\u6587\u4ef6\uff0c\u4e0a\u9762\u4e24\u4e2a\u5c31\u53ef\u4ee5\u7701\u7565\n</code></pre> <pre><code>int socket(int domain, int type, int protocol); \n    - \u529f\u80fd:\u521b\u5efa\u4e00\u4e2a\u5957\u63a5\u5b57\n    - \u53c2\u6570:\n        - domain: \u534f\u8bae\u65cf \n                AF_INET : ipv4\n                AF_INET6 : ipv6\n                AF_UNIX, AF_LOCAL : \u672c\u5730\u5957\u63a5\u5b57\u901a\u4fe1(\u8fdb\u7a0b\u95f4\u901a\u4fe1) \n        - type: \u901a\u4fe1\u8fc7\u7a0b\u4e2d\u4f7f\u7528\u7684\u534f\u8bae\u7c7b\u578b\n                SOCK_STREAM : \u6d41\u5f0f\u534f\u8bae\n                SOCK_DGRAM : \u62a5\u5f0f\u534f\u8bae\n        - protocol : \u5177\u4f53\u7684\u4e00\u4e2a\u534f\u8bae\u3002\u4e00\u822c\u51990\n            - SOCK_STREAM : \u6d41\u5f0f\u534f\u8bae\u9ed8\u8ba4\u4f7f\u7528 TCP\n            - SOCK_DGRAM : \u62a5\u5f0f\u534f\u8bae\u9ed8\u8ba4\u4f7f\u7528 UDP \n        - \u8fd4\u56de\u503c:\n            - \u6210\u529f:\u8fd4\u56de\u6587\u4ef6\u63cf\u8ff0\u7b26\uff0c\u64cd\u4f5c\u7684\u5c31\u662f\u5185\u6838\u7f13\u51b2\u533a\u3002 \n            - \u5931\u8d25:-1\n</code></pre> <pre><code>int bind(int sockfd, const struct sockaddr *addr, socklen_t addrlen);//socket\u547d\u540d\n    - \u529f\u80fd:\u7ed1\u5b9a\uff0c\u5c06fd \u548c\u672c\u5730\u7684IP + \u7aef\u53e3\u8fdb\u884c\u7ed1\u5b9a \n    - \u53c2\u6570:\n        - sockfd : \u901a\u8fc7socket\u51fd\u6570\u5f97\u5230\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\n        - addr : \u9700\u8981\u7ed1\u5b9a\u7684socket\u5730\u5740\uff0c\u8fd9\u4e2a\u5730\u5740\u5c01\u88c5\u4e86ip\u548c\u7aef\u53e3\u53f7\u7684\u4fe1\u606f \n        - addrlen : \u7b2c\u4e8c\u4e2a\u53c2\u6570\u7ed3\u6784\u4f53\u5360\u7684\u5185\u5b58\u5927\u5c0f\n</code></pre> <pre><code>int listen(int sockfd, int backlog); // /proc/sys/net/core/somaxconn \n    - \u529f\u80fd:\u76d1\u542c\u8fd9\u4e2asocket\u4e0a\u7684\u8fde\u63a5\n    - \u53c2\u6570:\n        - sockfd : \u901a\u8fc7socket()\u51fd\u6570\u5f97\u5230\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\n        - backlog : \u672a\u8fde\u63a5\u7684\u548c\u5df2\u7ecf\u8fde\u63a5\u7684\u548c\u7684\u6700\u5927\u503c\uff0c 5\n</code></pre> <pre><code>int accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen); \n    - \u529f\u80fd:\u63a5\u6536\u5ba2\u6237\u7aef\u8fde\u63a5\uff0c\u9ed8\u8ba4\u662f\u4e00\u4e2a\u963b\u585e\u7684\u51fd\u6570\uff0c\u963b\u585e\u7b49\u5f85\u5ba2\u6237\u7aef\u8fde\u63a5\n    - \u53c2\u6570:\n        - sockfd : \u7528\u4e8e\u76d1\u542c\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\n        - addr : \u4f20\u51fa\u53c2\u6570\uff0c\u8bb0\u5f55\u4e86\u8fde\u63a5\u6210\u529f\u540e\u5ba2\u6237\u7aef\u7684\u5730\u5740\u4fe1\u606f(ip\uff0cport) \n        - addrlen : \u6307\u5b9a\u7b2c\u4e8c\u4e2a\u53c2\u6570\u7684\u5bf9\u5e94\u7684\u5185\u5b58\u5927\u5c0f\n    - \u8fd4\u56de\u503c:\n        - \u6210\u529f :\u7528\u4e8e\u901a\u4fe1\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\n        - -1 : \u5931\u8d25\n</code></pre> <pre><code>int connect(int sockfd, const struct sockaddr *addr, socklen_t addrlen);\n    - \u529f\u80fd: \u5ba2\u6237\u7aef\u8fde\u63a5\u670d\u52a1\u5668 \n    - \u53c2\u6570:\n        - sockfd : \u7528\u4e8e\u901a\u4fe1\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\n        - addr : \u5ba2\u6237\u7aef\u8981\u8fde\u63a5\u7684\u670d\u52a1\u5668\u7684\u5730\u5740\u4fe1\u606f \n        - addrlen : \u7b2c\u4e8c\u4e2a\u53c2\u6570\u7684\u5185\u5b58\u5927\u5c0f\n    - \u8fd4\u56de\u503c:\u6210\u529f 0\uff0c \u5931\u8d25 -1\n</code></pre> <pre><code>ssize_t write(int fd, const void *buf, size_t count);// \u5199\u6570\u636e\nssize_t read(int fd, void *buf, size_t count); // \u8bfb\u6570\u636e\n</code></pre>"},{"location":"Project/Backend%20server/Network/Socket/#socket_3","title":"Socket \u5730\u5740","text":"<ul> <li>socket\u5730\u5740\u5176\u5b9e\u662f\u4e00\u4e2a\u7ed3\u6784\u4f53\uff0c\u5c01\u88c5\u7aef\u53e3\u53f7\u548cIP\u7b49\u4fe1\u606f\u3002\u540e\u9762\u7684socket\u76f8\u5173\u7684api\u4e2d\u9700\u8981\u4f7f\u7528\u5230\u8fd9\u4e2asocket\u5730\u5740</li> <li>\u5ba2\u6237\u7aef -&gt; \u670d\u52a1\u5668(IP, Port)</li> </ul>"},{"location":"Project/Backend%20server/Network/Socket/#socket_4","title":"\u901a\u7528 socket \u5730\u5740","text":"<ul> <li> <p>socket \u7f51\u7edc\u7f16\u7a0b\u63a5\u53e3\u4e2d\u8868\u793a socket \u5730\u5740\u7684\u662f\u7ed3\u6784\u4f53 sockaddr\uff0c\u5176\u5b9a\u4e49\u5982\u4e0b: <pre><code>#include &lt;bits/socket.h&gt;\nstruct sockaddr {\n    sa_family_t sa_family;\n    char        sa_data[14];\n};\ntypedef unsigned short int sa_family_t;\n</code></pre></p> </li> <li> <p>sa_family \u6210\u5458\u662f\u5730\u5740\u65cf\u7c7b\u578b(sa_family_t)\u7684\u53d8\u91cf\u3002\u5730\u5740\u65cf\u7c7b\u578b\u901a\u5e38\u4e0e\u534f\u8bae\u65cf\u7c7b\u578b\u5bf9\u5e94\u3002\u5e38\u89c1\u7684\u534f\u8bae \u65cf(protocol family\uff0c\u4e5f\u79f0 domain)\u548c\u5bf9\u5e94\u7684\u5730\u5740\u65cf\u5165\u4e0b\u6240\u793a</p> <ul> <li> <p>\u5b8f PF_* \u548c AF_* \u90fd\u5b9a\u4e49\u5728 bits/socket.h \u5934\u6587\u4ef6\u4e2d\uff0c\u4e14\u540e\u8005\u4e0e\u524d\u8005\u6709\u5b8c\u5168\u76f8\u540c\u7684\u503c\uff0c\u6240\u4ee5\u4e8c\u8005\u901a\u5e38\u6df7 \u7528\u3002</p> \u534f\u8bae\u65cf \u5730\u5740\u65cf \u63cf\u8ff0 PF_UNIX AF_UNIX UNIX\u672c\u5730\u57df\u534f\u8bae\u65cf PF_INET AF_INET TCP/IPv4\u534f\u8bae\u65cf PF_INET6 AF_INET6 TCP/IPv6\u534f\u8bae\u65cf </li> </ul> </li> <li> <p>sa_data \u6210\u5458\u7528\u4e8e\u5b58\u653e socket \u5730\u5740\u503c\u3002\u4f46\u662f\uff0c\u4e0d\u540c\u7684\u534f\u8bae\u65cf\u7684\u5730\u5740\u503c\u5177\u6709\u4e0d\u540c\u7684\u542b\u4e49\u548c\u957f\u5ea6\uff0c\u5982\u4e0b\u6240\u793a:</p> \u534f\u8bae\u65cf \u5730\u5740\u503c\u542b\u4e49\u548c\u957f\u5ea6 PF_UNIX \u6587\u4ef6\u7684\u8def\u5f84\u540d\uff0c\u957f\u5ea6\u53ef\u8fbe\u5230108\u5b57\u8282 PF_INET 16 bit \u7aef\u53e3\u53f7\u548c 32 bit IPv4 \u5730\u5740\uff0c\u5171 6 \u5b57\u8282 PF_INET6 16 bit \u7aef\u53e3\u53f7\uff0c32 bit \u6d41\u6807\u8bc6\uff0c128 bit IPv6 \u5730\u5740\uff0c32 bit \u8303\u56f4 ID\uff0c\u5171 26 \u5b57\u8282 </li> <li> <p>14 \u5b57\u8282\u7684 sa_data \u6839\u672c\u65e0\u6cd5\u5bb9\u7eb3\u591a\u6570\u534f\u8bae\u65cf\u7684\u5730\u5740\u503c\u3002\u56e0\u6b64\uff0cLinux \u5b9a\u4e49\u4e86\u4e0b\u9762\u8fd9\u4e2a\u65b0\u7684\u901a\u7528\u7684 socket \u5730\u5740\u7ed3\u6784\u4f53\uff0c\u8fd9\u4e2a\u7ed3\u6784\u4f53\u4e0d\u4ec5\u63d0\u4f9b\u4e86\u8db3\u591f\u5927\u7684\u7a7a\u95f4\u7528\u4e8e\u5b58\u653e\u5730\u5740\u503c\uff0c\u800c\u4e14\u662f\u5185\u5b58\u5bf9\u9f50\u7684</p> <pre><code>#include &lt;bits/socket.h&gt;\nstruct sockaddr_storage\n{\n    sa_family_t sa_family;\n    unsigned long int __ss_align;\n    char __ss_padding[ 128 - sizeof(__ss_align) ];\n};\ntypedef unsigned short int sa_family_t;\n</code></pre> </li> </ul>"},{"location":"Project/Backend%20server/Network/Socket/#socket_5","title":"\u4e13\u7528 socket \u5730\u5740","text":"<ul> <li> <p>\u5f88\u591a\u7f51\u7edc\u7f16\u7a0b\u51fd\u6570\u8bde\u751f\u65e9\u4e8e IPv4 \u534f\u8bae\uff0c\u90a3\u65f6\u5019\u90fd\u4f7f\u7528\u7684\u662f struct sockaddr \u7ed3\u6784\u4f53\uff0c\u4e3a\u4e86\u5411\u524d\u517c\u5bb9\uff0c\u73b0 \u5728sockaddr \u9000\u5316\u6210\u4e86(void *)\u7684\u4f5c\u7528\uff0c\u4f20\u9012\u4e00\u4e2a\u5730\u5740\u7ed9\u51fd\u6570\uff0c\u81f3\u4e8e\u8fd9\u4e2a\u51fd\u6570\u662f sockaddr_in \u8fd8\u662f sockaddr_in6\uff0c\u7531\u5730\u5740\u65cf\u786e\u5b9a\uff0c\u7136\u540e\u51fd\u6570\u5185\u90e8\u518d\u5f3a\u5236\u7c7b\u578b\u8f6c\u5316\u4e3a\u6240\u9700\u7684\u5730\u5740\u7c7b\u578b</p> </li> <li> <p>UNIX \u672c\u5730\u57df\u534f\u8bae\u65cf\u4f7f\u7528\u5982\u4e0b\u4e13\u7528\u7684 socket \u5730\u5740\u7ed3\u6784\u4f53:</p> <pre><code>#include &lt;sys/un.h&gt;\nstruct sockaddr_un\n{\n    sa_family_t sin_family;\n    char sun_path[108];\n};\n</code></pre> </li> <li> <p>TCP/IP \u534f\u8bae\u65cf\u6709 sockaddr_in \u548c sockaddr_in6 \u4e24\u4e2a\u4e13\u7528\u7684 socket \u5730\u5740\u7ed3\u6784\u4f53\uff0c\u5b83\u4eec\u5206\u522b\u7528\u4e8e IPv4 \u548c IPv6:</p> <pre><code>#include &lt;netinet/in.h&gt;\nstruct sockaddr_in\n{\n    sa_family_t sin_family; /* __SOCKADDR_COMMON(sin_) */\n    in_port_t sin_port; /* Port number.  */\n    struct in_addr sin_addr; /* Internet address.  */\n    /* Pad to size of `struct sockaddr'. */\n    unsigned char sin_zero[sizeof (struct sockaddr) - __SOCKADDR_COMMON_SIZE - sizeof (in_port_t) - sizeof (struct in_addr)];\n};\nstruct in_addr\n{\n    in_addr_t s_addr;\n};\nstruct sockaddr_in6\n{\n    sa_family_t sin6_family;\n    in_port_t sin6_port;    /* Transport layer port # */\n    uint32_t sin6_flowinfo; /* IPv6 flow information */\n    struct in6_addr sin6_addr;  /* IPv6 address */\n    uint32_t sin6_scope_id; /* IPv6 scope-id */\n};\ntypedef unsigned short  uint16_t;\ntypedef unsigned int    uint32_t;\ntypedef uint16_t in_port_t;\ntypedef uint32_t in_addr_t;\n#define __SOCKADDR_COMMON_SIZE (sizeof (unsigned short int))\n</code></pre> </li> <li> <p>\u6240\u6709\u4e13\u7528 socket \u5730\u5740(\u4ee5\u53ca sockaddr_storage)\u7c7b\u578b\u7684\u53d8\u91cf\u5728\u5b9e\u9645\u4f7f\u7528\u65f6\u90fd\u9700\u8981\u8f6c\u5316\u4e3a\u901a\u7528 socket \u5730 \u5740\u7c7b\u578b sockaddr(\u5f3a\u5236\u8f6c\u5316\u5373\u53ef)\uff0c\u56e0\u4e3a\u6240\u6709 socket \u7f16\u7a0b\u63a5\u53e3\u4f7f\u7528\u7684\u5730\u5740\u53c2\u6570\u7c7b\u578b\u90fd\u662f sockaddr</p> </li> </ul>"},{"location":"Project/Backend%20server/Network/Structure/","title":"Structure","text":""},{"location":"Project/Backend%20server/Network/Structure/#sockaddr","title":"Sockaddr\u7ed3\u6784\u4f53","text":"<ul> <li>\u5b58\u653e\u534f\u8bae\u65cf\u3001\u7aef\u53e3\u548c\u5730\u5740\u4fe1\u606f\uff0c\u5ba2\u6237\u7aef\u548cconnect()\u51fd\u6570\u548c\u670d\u52a1\u7aef\u7684bind()\u51fd\u6570\u9700\u8981\u8fd9\u4e2a\u7ed3\u6784\u4f53</li> </ul> <pre><code>struct sockaddr {\n  unsigned short sa_family; // \u534f\u8bae\u65cf\uff0c\u4e0esocket()\u51fd\u6570\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u76f8\u540c\uff0c\u586bAF_INET\u3002\n  unsigned char sa_data[14];    // 14\u5b57\u8282\u7684\u7aef\u53e3\u548c\u5730\u5740\u3002\n};\ntypedef unsigned short int sa_family_t;\n</code></pre>"},{"location":"Project/Backend%20server/Network/Structure/#sockaddr_in","title":"Sockaddr_in\u7ed3\u6784\u4f53","text":"<ul> <li>sockaddr\u7ed3\u6784\u4f53\u662f\u4e3a\u4e86\u7edf\u4e00\u5730\u5740\u7ed3\u6784\u7684\u8868\u793a\u65b9\u6cd5\uff0c\u7edf\u4e00\u63a5\u53e3\u51fd\u6570\uff0c\u4f46\u662f\uff0c\u64cd\u4f5c\u4e0d\u65b9\u4fbf\uff0c\u6240\u4ee5\u5b9a\u4e49\u4e86\u7b49\u4ef7\u7684sockaddr_in\u7ed3\u6784\u4f53\uff0c\u5b83\u7684\u5927\u5c0f\u4e0esockaddr\u76f8\u540c\uff0c\u53ef\u4ee5\u5f3a\u5236\u8f6c\u6362\u6210sockaddr</li> </ul> <pre><code>struct sockaddr_in {  \n  unsigned short sin_family;    // \u534f\u8bae\u65cf\uff0c\u4e0esocket()\u51fd\u6570\u7684\u7b2c\u4e00\u4e2a\u53c2\u6570\u76f8\u540c\uff0c\u586bAF_INET\u3002\n  unsigned short sin_port;      // 16\u4f4d\u7aef\u53e3\u53f7\uff0c\u5927\u7aef\u5e8f\u3002\u7528htons(\u6574\u6570\u7684\u7aef\u53e3)\u8f6c\u6362\u3002\n  struct in_addr sin_addr;      // IP\u5730\u5740\u7684\u7ed3\u6784\u4f53\u3002192.168.101.138\n  unsigned char sin_zero[8];    // \u672a\u4f7f\u7528\uff0c\u4e3a\u4e86\u4fdd\u6301\u4e0estruct sockaddr\u4e00\u6837\u7684\u957f\u5ea6\u800c\u6dfb\u52a0\u3002\n};\nstruct in_addr {                // IP\u5730\u5740\u7684\u7ed3\u6784\u4f53\u3002\n  unsigned int s_addr;      // 32\u4f4d\u7684IP\u5730\u5740\uff0c\u5927\u7aef\u5e8f\u3002\n};\n</code></pre>"},{"location":"Project/Backend%20server/Network/Structure/#ipip","title":"\u5b57\u7b26\u4e32IP\u4e0e\u5927\u7aef\u5e8fIP\u7684\u8f6c\u6362","text":""},{"location":"Project/Backend%20server/Network/Structure/#_1","title":"\u5ba2\u6237\u7aef","text":"<ul> <li> <p>Gethostbyname\u51fd\u6570\uff0c\u6839\u636e\u57df\u540d/\u4e3b\u673a\u540d/\u5b57\u7b26\u4e32IP\u83b7\u53d6\u5927\u7aef\u5e8fIP</p> <pre><code>struct hostent *gethostbyname(const char *name);\nstruct hostent { \n  char *h_name;         // \u4e3b\u673a\u540d\u3002\n  char **h_aliases;     // \u4e3b\u673a\u6240\u6709\u522b\u540d\u6784\u6210\u7684\u5b57\u7b26\u4e32\u6570\u7ec4\uff0c\u540c\u4e00IP\u53ef\u7ed1\u5b9a\u591a\u4e2a\u57df\u540d\u3002 \n  short h_addrtype;     // \u4e3b\u673aIP\u5730\u5740\u7684\u7c7b\u578b\uff0c\u4f8b\u5982IPV4\uff08AF_INET\uff09\u8fd8\u662fIPV6\u3002\n  short h_length;       // \u4e3b\u673aIP\u5730\u5740\u957f\u5ea6\uff0cIPV4\u5730\u5740\u4e3a4\uff0cIPV6\u5730\u5740\u5219\u4e3a16\u3002\n  char **h_addr_list;   // \u4e3b\u673a\u7684ip\u5730\u5740\uff0c\u4ee5\u7f51\u7edc\u5b57\u8282\u5e8f\u5b58\u50a8\u3002 \n};\n#define h_addr h_addr_list[0]   // for backward compatibility.\n</code></pre> </li> <li> <p>\u8f6c\u6362\u540e\uff0c\u7528\u4ee5\u4e0b\u4ee3\u7801\u628a\u5927\u7aef\u5e8f\u7684\u5730\u5740\u590d\u5236\u5230<code>sockaddr_in</code>\u7ed3\u6784\u4f53\u7684<code>sin_addr</code>\u6210\u5458\u4e2d\u3002</p> <ul> <li><code>memcpy(&amp;servaddr.sin_addr,h-&gt;h_addr,h-&gt;h_length);</code></li> </ul> </li> </ul>"},{"location":"Project/Backend%20server/Network/Structure/#_2","title":"\u670d\u52a1\u7aef","text":"<ul> <li> <p>C\u8bed\u8a00\u63d0\u4f9b\u4e86\u51e0\u4e2a\u5e93\u51fd\u6570\uff0c\u7528\u4e8e\u5b57\u7b26\u4e32\u683c\u5f0f\u7684IP\u548c\u5927\u7aef\u5e8fIP\u7684\u4e92\u76f8\u8f6c\u6362</p> <pre><code>typedef unsigned int in_addr_t;    // 32\u4f4d\u5927\u7aef\u5e8f\u7684IP\u5730\u5740\u3002\n\n// \u628a\u5b57\u7b26\u4e32\u683c\u5f0f\u7684IP\u8f6c\u6362\u6210\u5927\u7aef\u5e8f\u7684IP\uff0c\u8f6c\u6362\u540e\u7684IP\u8d4b\u7ed9sockaddr_in.in_addr.s_addr\u3002\nin_addr_t inet_addr(const char *cp); \n\n// \u628a\u5b57\u7b26\u4e32\u683c\u5f0f\u7684IP\u8f6c\u6362\u6210\u5927\u7aef\u5e8f\u7684IP\uff0c\u8f6c\u6362\u540e\u7684IP\u5c06\u586b\u5145\u5230sockaddr_in.in_addr\u6210\u5458\u3002\nint inet_aton(const char *cp, struct in_addr *inp); \n\n// \u628a\u5927\u7aef\u5e8fIP\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\u683c\u5f0f\u7684IP\uff0c\u7528\u4e8e\u5728\u670d\u52a1\u7aef\u7a0b\u5e8f\u4e2d\u89e3\u6790\u5ba2\u6237\u7aef\u7684IP\u5730\u5740\u3002\nchar *inet_ntoa(struct in_addr in);\n</code></pre> </li> </ul>"},{"location":"Project/Backend%20server/Network/TCP%20Cache/","title":"TCP \u7f13\u5b58","text":"<ul> <li> <p>\u7cfb\u7edf\u4e3a\u6bcf\u4e2asocket\u521b\u5efa\u4e86\u53d1\u9001\u7f13\u51b2\u533a\u548c\u63a5\u6536\u7f13\u51b2\u533a</p> <ul> <li>\u5e94\u7528\u7a0b\u5e8f\u8c03\u7528send()/write()\u51fd\u6570\u53d1\u9001\u6570\u636e\u7684\u65f6\u5019\uff0c\u5185\u6838\u628a\u6570\u636e\u4ece\u5e94\u7528\u8fdb\u7a0b\u62f7\u8d1dsocket\u7684\u53d1\u9001\u7f13\u51b2\u533a\u4e2d\uff1b</li> <li>\u5e94\u7528\u7a0b\u5e8f\u8c03\u7528recv()/read()\u51fd\u6570\u63a5\u6536\u6570\u636e\u7684\u65f6\u5019\uff0c\u5185\u6838\u628a\u6570\u636e\u4ecesocket\u7684\u63a5\u6536\u7f13\u51b2\u533a\u62f7\u8d1d\u5e94\u7528\u8fdb\u7a0b\u4e2d</li> <li>\u53d1\u9001\u6570\u636e\u5373\u628a\u6570\u636e\u653e\u5165\u53d1\u9001\u7f13\u51b2\u533a\u4e2d</li> <li>\u63a5\u6536\u6570\u636e\u5373\u4ece\u63a5\u6536\u7f13\u51b2\u533a\u4e2d\u53d6\u6570\u636e</li> </ul> <p></p> </li> <li> <p>\u67e5\u770bsocket\u7f13\u5b58\u7684\u5927\u5c0f\uff1a     <pre><code>int bufsize = 0;\nsocklen_t optlen = sizeof(bufsize);     \n\ngetsockopt(sockfd, SOL_SOCKET, SO_SNDBUF, &amp;bufsize, &amp;optlen); // \u83b7\u53d6\u53d1\u9001\u7f13\u51b2\u533a\u7684\u5927\u5c0f\u3002\ncout &lt;&lt; \"send bufsize=\" &lt;&lt; bufsize &lt;&lt; endl;\n\ngetsockopt(sockfd, SOL_SOCKET, SO_RCVBUF, &amp;bufsize, &amp;optlen); // \u83b7\u53d6\u63a5\u6536\u7f13\u51b2\u533a\u7684\u5927\u5c0f\u3002\ncout &lt;&lt; \"recv bufsize=\" &lt;&lt; bufsize &lt;&lt; endl;\n</code></pre></p> </li> <li> <p>\u95ee\u9898\uff1a</p> <ol> <li>send()\u51fd\u6570\u6709\u53ef\u80fd\u4f1a\u963b\u585e\u5417\uff1f <ul> <li>\u5982\u679c\u81ea\u5df1\u7684\u53d1\u9001\u7f13\u51b2\u533a\u548c\u5bf9\u7aef\u7684\u63a5\u6536\u7f13\u51b2\u533a\u90fd\u6ee1\u4e86\uff0c\u4f1a\u963b\u585e\u3002</li> </ul> </li> <li>\u5411socket\u4e2d\u5199\u5165\u6570\u636e\u540e\uff0c\u5982\u679c\u5173\u95ed\u4e86socket\uff0c\u5bf9\u7aef\u8fd8\u80fd\u63a5\u6536\u5230\u6570\u636e\u5417\uff1f<ul> <li>\u53ef\u4ee5\uff0c\u5ba2\u6237\u7aef\u53d1\u9001\u7684\u6570\u636e\u5b58\u653e\u5728\u670d\u52a1\u7aef\u7684\u63a5\u53d7\u7f13\u51b2\u533a\u4e2d </li> </ul> </li> </ol> </li> </ul>"},{"location":"Project/Backend%20server/Network/TCP%20Cache/#_1","title":"\u5206\u5305/\u7c98\u5305","text":"<ul> <li> <p>\u5206\u5305\uff1a</p> <ul> <li>tcp\u62a5\u6587\u7684\u5927\u5c0f\u7f3a\u7701\u662f 1460 \u5b57\u8282\uff0c\u5982\u679c\u53d1\u9001\u7f13\u51b2\u533a\u4e2d\u7684\u6570\u636e\u8d85\u8fc71460\u5b57\u8282\uff0ctcp\u5c06\u62c6\u5206\u6210\u591a\u4e2a\u5305\u53d1\u9001\uff0c\u5982\u679c\u63a5\u6536\u65b9\u53ca\u65f6\u7684\u4ece\u63a5\u6536\u7f13\u51b2\u533a\u4e2d\u53d6\u8d70\u4e86\u6570\u636e\uff0c\u770b\u4e0a\u53bb\u50cf\u5c31\u63a5\u6536\u5230\u4e86\u591a\u4e2a\u62a5\u6587</li> <li>\u53d1\u9001\u65b9\u53d1\u9001\u5b57\u7b26\u4e32  \"helloworld\"\uff0c\u63a5\u6536\u65b9\u5374\u63a5\u6536\u5230\u4e86\u4e24\u4e2a\u5b57\u7b26\u4e32 \"hello\" \u548c \u201cworld\"</li> </ul> </li> <li> <p>\u7c98\u5305\uff1a</p> <ul> <li>tcp\u63a5\u6536\u5230\u6570\u636e\u4e4b\u540e\uff0c\u6709\u5e8f\u653e\u5728\u63a5\u6536\u7f13\u51b2\u533a\u4e2d\uff0c\u6570\u636e\u4e4b\u95f4\u4e0d\u5b58\u5728\u5206\u9694\u7b26\u7684\u8bf4\u6cd5\uff0c\u5982\u679c\u63a5\u6536\u65b9\u6ca1\u6709\u53ca\u65f6\u7684\u4ece\u7f13\u51b2\u533a\u4e2d\u53d6\u8d70\u6570\u636e\uff0c\u770b\u4e0a\u53bb\u5c31\u8c61\u7c98\u5728\u4e86\u4e00\u8d77</li> <li>\u53d1\u9001\u65b9\u53d1\u9001\u4e24\u4e2a\u5b57\u7b26\u4e32 \"hello\" \u548c \u201cworld\"\uff0c\u63a5\u6536\u65b9\u5374\u4e00\u6b21\u6027\u63a5\u6536\u5230\u4e86\"helloworld\"</li> </ul> </li> <li> <p>\u533a\u5206\u62a5\u6587\uff1a</p> <ul> <li>\u62a5\u6587\u957f\u5ea6 (4\u5b57\u8282\u7684\u6574\u6570) +\u62a5\u6587\u5185\u5bb9</li> </ul> </li> <li> <p>\u53d1\u9001\u62a5\u6587\u7684\u65b9\u6cd5\uff1a</p> <ul> <li>\u5148\u53d1\u9001\u62a5\u6587\u957f\u5ea6\uff0c\u518d\u53d1\u9001\u62a5\u6587\u5185\u5bb9</li> <li>\u4f8b\u5982\uff1aHello world\uff0c\u5148\u53d1\u900111\uff0c\u518d\u53d1\u9001Hello world</li> </ul> </li> </ul>"},{"location":"Project/Backend%20server/Network/TCP%20Cache/#nagle","title":"Nagle\u7b97\u6cd5","text":"<ul> <li>\u5728TCP\u534f\u8bae\u4e2d\uff0c\u65e0\u8bba\u53d1\u9001\u591a\u5c11\u6570\u636e\uff0c\u90fd\u8981\u5728\u6570\u636e\u524d\u9762\u52a0\u4e0a\u534f\u8bae\u5934\uff0c\u540c\u65f6\uff0c\u5bf9\u65b9\u6536\u5230\u6570\u636e\u540e\uff0c\u4e5f\u9700\u8981\u56de\u590dACK\u8868\u793a\u786e\u8ba4\u3002\u4e3a\u4e86\u5c3d\u53ef\u80fd\u7684\u5229\u7528\u7f51\u7edc\u5e26\u5bbd\uff0cTCP\u5e0c\u671b\u6bcf\u6b21\u90fd\u80fd\u591f\u4ee5MSS\uff08Maximum Segment Size\uff0c\u6700\u5927\u62a5\u6587\u957f\u5ea6\uff09\u7684\u6570\u636e\u5757\u6765\u53d1\u9001\u6570\u636e</li> <li>Nagle\u7b97\u6cd5\u5c31\u662f\u4e3a\u4e86\u5c3d\u53ef\u80fd\u53d1\u9001\u5927\u5757\u7684\u6570\u636e\uff0c\u907f\u514d\u7f51\u7edc\u4e2d\u5145\u65a5\u7740\u5c0f\u6570\u636e\u5757</li> <li>Nagle\u7b97\u6cd5\u7684\u5b9a\u4e49\u662f\uff1a\u4efb\u610f\u65f6\u523b\uff0c\u6700\u591a\u53ea\u80fd\u6709\u4e00\u4e2a\u672a\u88ab\u786e\u8ba4\u7684\u5c0f\u6bb5\uff0c\u5c0f\u6bb5\u662f\u6307\u5c0f\u4e8eMSS\u7684\u6570\u636e\u5757\uff0c\u672a\u88ab\u786e\u8ba4\u662f\u6307\u4e00\u4e2a\u6570\u636e\u5757\u53d1\u9001\u51fa\u53bb\u540e\uff0c\u6ca1\u6709\u6536\u5230\u5bf9\u7aef\u56de\u590d\u7684ACK</li> <li>\u4e3e\u4e2a\u4f8b\u5b50\uff1a<ul> <li>\u53d1\u9001\u7aef\u8c03\u7528send()\u51fd\u6570\u5c06\u4e00\u4e2aint\u578b\u6570\u636e\uff08\u79f0\u4e4b\u4e3aA\u6570\u636e\u5757\uff09\u5199\u5165\u5230socket\u4e2d\uff0cA\u6570\u636e\u5757\u4f1a\u88ab\u9a6c\u4e0a\u53d1\u9001\u5230\u63a5\u6536\u7aef\uff0c\u63a5\u7740\uff0c\u53d1\u9001\u7aef\u53c8\u8c03\u7528send()\u51fd\u6570\u5199\u5165\u4e00\u4e2aint\u578b\u6570\u636e\uff08\u79f0\u4e4b\u4e3aB\u6570\u636e\u5757\uff09\uff0c\u8fd9\u65f6\u5019\uff0cA\u5757\u7684ACK\u6ca1\u6709\u8fd4\u56de\uff08\u5df2\u7ecf\u5b58\u5728\u4e86\u4e00\u4e2a\u672a\u88ab\u786e\u8ba4\u7684\u5c0f\u6bb5\uff09\uff0c\u6240\u4ee5B\u5757\u4e0d\u4f1a\u7acb\u5373\u88ab\u53d1\u9001\uff0c\u800c\u662f\u7b49A\u5757\u7684ACK\u8fd4\u56de\u4e4b\u540e\uff08\u5927\u698240ms\uff09\u624d\u53d1\u9001</li> <li>TCP\u534f\u8bae\u4e2d\u4e0d\u4ec5\u4ec5\u6709Nagle\u7b97\u6cd5\uff0c\u8fd8\u6709\u4e00\u4e2aACK\u5ef6\u8fdf\u673a\u5236\uff1a\u5f53\u63a5\u6536\u7aef\u6536\u5230\u6570\u636e\u4e4b\u540e\uff0c\u5e76\u4e0d\u4f1a\u9a6c\u4e0a\u5411\u53d1\u9001\u7aef\u56de\u590dACK\uff0c\u800c\u662f\u5ef6\u8fdf40ms\u540e\u518d\u56de\u590d\uff0c\u5b83\u5e0c\u671b\u572840ms\u5185\u63a5\u6536\u7aef\u4f1a\u5411\u53d1\u9001\u7aef\u56de\u590d\u5e94\u7b54\u6570\u636e\uff0c\u8fd9\u6837ACK\u5c31\u53ef\u4ee5\u548c\u5e94\u7b54\u6570\u636e\u4e00\u8d77\u53d1\u9001\uff0c\u628aACK\u634e\u5e26\u8fc7\u53bb</li> <li>\u5982\u679cTCP\u8fde\u63a5\u7684\u4e00\u7aef\u542f\u7528\u4e86Nagle\u7b97\u6cd5\uff0c\u53e6\u4e00\u7aef\u542f\u7528\u4e86ACK\u5ef6\u65f6\u673a\u5236\uff0c\u800c\u53d1\u9001\u7684\u6570\u636e\u5305\u53c8\u6bd4\u8f83\u5c0f\uff0c\u5219\u53ef\u80fd\u4f1a\u51fa\u73b0\u8fd9\u6837\u7684\u60c5\u51b5\uff1a\u53d1\u9001\u7aef\u5728\u7b49\u5f85\u4e0a\u4e00\u4e2a\u5305\u7684ACK\uff0c\u800c\u63a5\u6536\u7aef\u6b63\u597d\u5ef6\u8fdf\u4e86\u6b64ACK\uff0c\u90a3\u4e48\u8fd9\u4e2a\u6b63\u8981\u88ab\u53d1\u9001\u7684\u5305\u5c31\u4f1a\u5ef6\u8fdf40ms</li> </ul> </li> <li> <p>\u89e3\u51b3\u65b9\u6848</p> <ul> <li> <p>\u5f00\u542fTCP_NODELAY\u9009\u9879\uff0c\u8fd9\u4e2a\u9009\u9879\u7684\u4f5c\u7528\u5c31\u662f\u7981\u7528Nagle\u7b97\u6cd5 <pre><code>#include &lt;netinet/tcp.h&gt;   // \u6ce8\u610f\uff0c\u8981\u5305\u542b\u8fd9\u4e2a\u5934\u6587\u4ef6\u3002\nint opt = 1;   \nsetsockopt(sockfd, IPPROTO_TCP, TCP_NODELAY,&amp;opt,sizeof(opt));\n</code></pre></p> </li> <li> <p>\u5bf9\u65f6\u6548\u8981\u6c42\u5f88\u9ad8\u7684\u7cfb\u7edf\uff0c\u4f8b\u5982\u8054\u673a\u6e38\u620f\u3001\u8bc1\u5238\u4ea4\u6613\uff0c\u4e00\u822c\u4f1a\u7981\u7528Nagle\u7b97\u6cd5</p> </li> </ul> </li> </ul>"},{"location":"Project/Backend%20server/Network/TCP%20Reliable%20connection/","title":"\u4e09\u6b21\u63e1\u624b\u4e0e\u56db\u6b21\u6325\u624b","text":"<ul> <li>TCP\u662f\u9762\u5411\u8fde\u63a5\u7684\u3001\u53ef\u9760\u7684\u534f\u8bae\uff0c\u5efa\u7acbTCP\u8fde\u63a5\u9700\u8981\u4e09\u6b21\u5bf9\u8bdd\uff08\u4e09\u6b21\u63e1\u624b\uff09\uff0c\u62c6\u9664TCP\u8fde\u63a5\u9700\u8981\u56db\u6b21\u5bf9\u8bdd\uff08\u56db\u6b21\u63e1/\u6325\u624b\uff09</li> </ul>"},{"location":"Project/Backend%20server/Network/TCP%20Reliable%20connection/#_2","title":"\u4e09\u6b21\u63e1\u624b","text":"<ul> <li> <p>\u670d\u52a1\u7aef\u8c03\u7528listen()\u51fd\u6570\u540e\u8fdb\u5165\u76d1\u542c\uff08\u7b49\u5f85\u8fde\u63a5\uff09\u72b6\u6001\uff0c\u8fd9\u65f6\u5019\uff0c\u5ba2\u6237\u7aef\u5c31\u53ef\u4ee5\u8c03\u7528connect()\u51fd\u6570\u53d1\u8d77TCP\u8fde\u63a5\u8bf7\u6c42\uff0c</p> <ul> <li> <p>connect()\u51fd\u6570\u4f1a\u89e6\u53d1\u4e09\u6b21\u63e1\u624b\uff0c\u4e09\u6b21\u63e1\u624b\u5b8c\u6210\u540e\uff0c\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u7aef\u5c06\u5efa\u7acb\u4e00\u4e2a\u53cc\u5411\u7684\u4f20\u8f93\u901a\u9053</p> <p></p> </li> <li> <p>\u60c5\u666f\u7c7b\u4f3c\uff1a</p> <ol> <li>\u5ba2\u6237\u7aef\u5bf9\u670d\u52a1\u7aef\u8bf4\uff1a\u6211\u53ef\u4ee5\u7ed9\u4f60\u53d1\u9001\u6570\u636e\u5417\uff1f (\u8bf7\u6c42\u5efa\u7acb\u5ba2\u6237\u7aef\u5230\u670d\u52a1\u7aef\u7684\u5355\u5411\u4f20\u8f93\u901a\u9053)</li> <li>\u670d\u52a1\u7aef\u56de\u590d\uff1aok\uff0c\u4e0d\u8fc7\uff0c\u6211\u4e5f\u8981\u7ed9\u4f60\u53d1\u9001\u6570\u636e\u3002\uff08\u5bf9\u8bf7\u6c42\u5efa\u7acb\u901a\u9053\u7684\u56de\u5e94\uff0c\u5ba2\u6237\u7aef\u81f3\u670d\u52a1\u7aef\u7684\u5355\u5411\u4f20\u8f93\u901a\u9053\u5df2\u5efa\u7acb\uff0c\u8bf7\u6c42\u5efa\u7acb\u670d\u52a1\u5230\u7aef\u5ba2\u6237\u7aef\u7684\u5355\u5411\u4f20\u8f93\u901a\u9053\uff09</li> <li>\u5ba2\u6237\u7aef\u56de\u590d\uff1aok\u3002\uff08\u5bf9\u8bf7\u6c42\u5efa\u7acb\u901a\u9053\u7684\u56de\u5e94\uff0c\u670d\u52a1\u7aef\u81f3\u5ba2\u6237\u7aef\u7684\u5355\u5411\u4f20\u8f93\u901a\u9053\u5df2\u5efa\u7acb\uff09</li> </ol> </li> <li>\u4e09\u6b21\u63e1\u624b\u540e\uff0c\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u7aef\u7684\u53cc\u5411\u4f20\u8f93\u901a\u9053\u5c31\u5efa\u7acb\u4e86\uff0c\u53ef\u4ee5\u5f00\u59cb\u8fdb\u884c\u6570\u636e\u4f20\u8f93\u4e86</li> <li>\u7ec6\u8282\uff1a<ol> <li>\u5ba2\u6237\u7aef\u7684socket\u4e5f\u6709\u7aef\u53e3\u53f7\uff0c\u5bf9\u7a0b\u5e8f\u5458\u6765\u8bf4\uff0c\u4e0d\u5fc5\u5173\u5fc3\u5ba2\u6237\u7aefsocket\u7684\u7aef\u53e3\u53f7\uff0c\u6240\u4ee5\u7cfb\u7edf\u968f\u673a\u5206\u914d\u3002\uff08socket\u901a\u8baf\u4e2d\u7684\u5730\u5740\u5305\u62ecip\u548c\u7aef\u53e3\u53f7\uff0c\u4f46\u662f\uff0c\u4e60\u60ef\u4e2d\u7684\u5730\u5740\u4ec5\u6307ip\u5730\u5740\uff09</li> <li>\u670d\u52a1\u7aef\u7684bind()\u51fd\u6570\uff0c\u666e\u901a\u7528\u6237\u53ea\u80fd\u4f7f\u75281024\u4ee5\u4e0a\u7684\u7aef\u53e3\uff0croot\u7528\u6237\u53ef\u4ee5\u4f7f\u7528\u4efb\u610f\u7aef\u53e3\u3002</li> <li>listen()\u51fd\u6570\u7684\u7b2c\u4e8c\u4e2a\u53c2\u6570+1\u4e3a\u5df2\u8fde\u63a5\u961f\u5217\uff08ESTABLISHED\u72b6\u6001\uff0c\u4e09\u6b21\u63e1\u624b\u5df2\u5b8c\u6210\u4f46\u662f\u6ca1\u6709\u88abaccept()\u7684socket\uff0c\u53ea\u5b58\u5728\u4e8e\u670d\u52a1\u7aef\uff09\u7684\u5927\u5c0f\u3002\uff08\u5728\u9ad8\u5e76\u53d1\u7684\u670d\u52a1\u7a0b\u5e8f\u4e2d\uff0c\u8be5\u53c2\u6570\u5e94\u8be5\u8c03\u5927\u4e00\u4e9b\uff09</li> <li>SYN_RECV\u72b6\u6001\u7684\u8fde\u63a5\u4e5f\u79f0\u4e3a\u534a\u8fde\u63a5\u3002</li> <li>CLOSED\u662f\u5047\u60f3\u72b6\u6001\uff0c\u5b9e\u9645\u4e0a\u4e0d\u5b58\u5728\u3002</li> </ol> </li> </ul> </li> </ul>"},{"location":"Project/Backend%20server/Network/TCP%20Reliable%20connection/#_3","title":"\u56db\u6b21\u6325\u624b","text":"<ul> <li> <p>\u65ad\u5f00\u4e00\u4e2aTCP\u8fde\u63a5\u65f6\uff0c\u5ba2\u6237\u7aef\u548c\u670d\u52a1\u7aef\u9700\u8981\u76f8\u4e92\u603b\u5171\u53d1\u9001\u56db\u4e2a\u5305\u4ee5\u786e\u8ba4\u8fde\u63a5\u7684\u65ad\u5f00</p> <ul> <li> <p>\u5728socket\u7f16\u7a0b\u4e2d\uff0c\u8fd9\u4e00\u8fc7\u7a0b\u7531\u5ba2\u6237\u7aef\u6216\u670d\u52a1\u7aef\u4efb\u4e00\u65b9\u6267\u884cclose()\u51fd\u6570\u89e6\u53d1</p> <p></p> </li> </ul> </li> <li> <p>\u60c5\u666f\u7c7b\u4f3c\uff1a</p> <ol> <li>\u4e00\u7aef\uff08A\uff09\u5bf9\u53e6\u4e00\u7aef\uff08B\uff09\u8bf4\uff1a\u6211\u4e0d\u4f1a\u7ed9\u4f60\u53d1\u6570\u636e\u4e86\uff0c\u65ad\u5f00\u8fde\u63a5\u5427</li> <li>B\u56de\u590d\uff1aok\u3002\uff08\u8fd9\u65f6\u5019A\u4e0d\u80fd\u5bf9B\u53d1\u6570\u636e\u4e86\uff0c\u4f46\u662f\uff0cB\u4ecd\u53ef\u4ee5\u5bf9A\u53d1\u6570\u636e\uff09</li> <li>B\u53d1\u5b8c\u6570\u636e\u4e86\uff0c\u5bf9A\u8bf4\uff1a\u6211\u4e5f\u4e0d\u4f1a\u7ed9\u4f60\u53d1\u6570\u636e\u4e86\u3002\uff08\u8fd9\u65f6\u5019B\u4e5f\u4e0d\u80fd\u5bf9A\u53d1\u6570\u636e\u4e86\uff09</li> <li>A\u56de\u590d\uff1aok</li> </ol> </li> <li> <p>\u7ec6\u8282\uff1a</p> <ol> <li>\u4e3b\u52a8\u65ad\u5f00\u7684\u7aef\u5728\u56db\u6b21\u6325\u624b\u540e\uff0csocket\u7684\u72b6\u6001\u4e3aTIME_WAIT\uff0c\u8be5\u72b6\u6001\u5c06\u6301\u7eed2MSL\uff0830\u79d2/1\u5206\u949f/2\u5206\u949f\uff09\u3002 MSL\uff08Maximum Segment Lifetime\uff09\u62a5\u6587\u5728\u7f51\u7edc\u4e0a\u5b58\u5728\u7684\u6700\u957f\u65f6\u95f4\uff0c\u8d85\u8fc7\u8fd9\u4e2a\u65f6\u95f4\u62a5\u6587\u5c06\u88ab\u4e22\u5f03\u3002</li> <li>\u5982\u679c\u662f\u5ba2\u6237\u7aef\u4e3b\u52a8\u65ad\u5f00\uff0cTIME_WAIT\u72b6\u6001\u7684socket\u51e0\u4e4e\u4e0d\u4f1a\u9020\u6210\u5371\u5bb3<ol> <li>\u5ba2\u6237\u7aef\u7a0b\u5e8f\u7684socket\u5f88\u5c11\uff0c\u670d\u52a1\u7aef\u7a0b\u5e8f\u7684socket\u5f88\u591a\uff08\u6210\u5343\u4e0a\u4e07\uff09</li> <li>\u5ba2\u6237\u7aef\u7684\u7aef\u53e3\u662f\u968f\u673a\u5206\u914d\u7684\uff0c\u4e0d\u5b58\u5728\u91cd\u7528\u7684\u95ee\u9898\u3002</li> </ol> </li> <li>\u5982\u679c\u662f\u670d\u52a1\u7aef\u4e3b\u52a8\u65ad\u5f00\uff0c\u6709\u4e24\u65b9\u9762\u7684\u5371\u5bb3\uff1aa\uff09socket\u6ca1\u6709\u7acb\u5373\u91ca\u653e\uff1bb\uff09\u7aef\u53e3\u53f7\u53ea\u80fd\u57282MSL\u540e\u624d\u80fd\u91cd\u7528\u3002</li> </ol> </li> <li> <p>\u5728\u670d\u52a1\u7aef\u7a0b\u5e8f\u4e2d\uff0c\u89e3\u51b3\u7aef\u53e3\u91cd\u7528\u95ee\u9898\uff0c\u7528setsockopt()\u51fd\u6570\u8bbe\u7f6esocket\u7684\u5c5e\u6027\uff08\u4e00\u5b9a\u8981\u653e\u5728bind()\u4e4b\u524d\uff09     <pre><code>int opt = 1;   \nsetsockopt(m_listenfd,SOL_SOCKET,SO_REUSEADDR,&amp;opt,sizeof(opt));\n</code></pre></p> </li> </ul>"},{"location":"Project/Backend%20server/Network/TCP-UPD/","title":"TCP/UPD","text":""},{"location":"Project/Backend%20server/Network/TCP-UPD/#_1","title":"\u533a\u522b","text":"<ul> <li>TCP:<ul> <li>TCP\u9762\u5411\u8fde\u63a5\uff0c\u901a\u8fc7\u4e09\u6b21\u63e1\u624b\u5efa\u7acb\u8fde\u63a5\uff0c\u56db\u6b21\u6325\u624b\u65ad\u5f00\u8fde\u63a5\uff1b  \u9762\u8bd5\u7684\u91cd\u70b9</li> <li>TCP\u662f\u53ef\u9760\u7684\u901a\u4fe1\u65b9\u5f0f\uff0c\u901a\u8fc7\u8d85\u65f6\u91cd\u4f20\u3001\u6570\u636e\u6821\u9a8c\u7b49\u65b9\u5f0f\u6765\u786e\u4fdd\u6570\u636e\u65e0\u5dee\u9519\uff0c\u4e0d\u4e22\u5931\uff0c\u4e0d\u91cd\u590d\uff0c\u5e76\u4e14\u6309\u5e8f\u5230\u8fbe\uff1b</li> <li>TCP\u628a\u6570\u636e\u5f53\u6210\u5b57\u8282\u6d41\uff0c\u5f53\u7f51\u7edc\u51fa\u73b0\u6ce2\u52a8\u65f6\uff0c\u8fde\u63a5\u53ef\u80fd\u51fa\u73b0\u54cd\u5e94\u5ef6\u8fdf\u7684\u95ee\u9898\uff1b</li> <li>TCP\u53ea\u652f\u6301\u70b9\u5bf9\u70b9\u901a\u4fe1\uff1b</li> <li>TCP\u62a5\u6587\u7684\u9996\u90e8\u8f83\u5927\uff0c\u4e3a20\u5b57\u8282\uff1b</li> <li>TCP\u662f\u5168\u53cc\u5de5\u7684\u53ef\u9760\u4fe1\u9053</li> </ul> </li> <li>UDP:<ul> <li>UDP\u662f\u65e0\u8fde\u63a5\u7684\uff0c\u5373\u53d1\u9001\u6570\u636e\u4e4b\u524d\u4e0d\u9700\u8981\u5efa\u7acb\u8fde\u63a5\uff0c\u8fd9\u79cd\u65b9\u5f0f\u4e3aUDP\u5e26\u6765\u4e86\u9ad8\u6548\u7684\u4f20\u8f93\u6548\u7387\uff0c\u4f46\u4e5f\u5bfc\u81f4\u65e0\u6cd5\u786e\u4fdd\u6570\u636e\u7684\u53d1\u9001\u6210\u529f\uff1b</li> <li>UDP\u4ee5\u6700\u5927\u7684\u901f\u7387\u8fdb\u884c\u4f20\u8f93\uff0c\u4f46\u4e0d\u4fdd\u8bc1\u53ef\u9760\u4ea4\u4ed8\uff0c\u4f1a\u51fa\u73b0\u4e22\u5931\u3001\u91cd\u590d\u7b49\u7b49\u95ee\u9898\uff1b</li> <li>UDP\u6ca1\u6709\u62e5\u585e\u63a7\u5236\uff0c\u5f53\u7f51\u7edc\u51fa\u73b0\u62e5\u585e\u65f6\uff0c\u53d1\u9001\u65b9\u4e0d\u4f1a\u964d\u4f4e\u53d1\u9001\u901f\u7387\uff1b</li> <li>UDP\u652f\u6301\u4e00\u5bf9\u4e00\uff0c\u4e00\u5bf9\u591a\uff0c\u591a\u5bf9\u4e00\u548c\u591a\u5bf9\u591a\u7684\u901a\u4fe1\uff1b</li> <li>UDP\u62a5\u6587\u7684\u9996\u90e8\u6bd4\u8f83\u5c0f\uff0c\u53ea\u67098\u5b57\u8282\uff1b</li> <li>UDP\u662f\u4e0d\u53ef\u9760\u4fe1\u9053</li> </ul> </li> </ul>"},{"location":"Project/Backend%20server/Network/TCP-UPD/#tcp","title":"TCP\u4fdd\u8bc1\u81ea\u8eab\u53ef\u9760\u7684\u65b9\u5f0f","text":"<ul> <li>\u6570\u636e\u5206\u7247\uff1a\u5728\u53d1\u9001\u7aef\u5bf9\u7528\u6237\u6570\u636e\u8fdb\u884c\u5206\u7247\uff0c\u5728\u63a5\u6536\u7aef\u8fdb\u884c\u91cd\u7ec4\uff0c\u7531TCP\u786e\u5b9a\u5206\u7247\u7684\u5927\u5c0f\u5e76\u63a7\u5236\u5206\u7247\u548c\u91cd\u7ec4\uff1b</li> <li>\u5230\u8fbe\u786e\u8ba4\uff1a\u63a5\u6536\u7aef\u63a5\u6536\u5230\u5206\u7247\u6570\u636e\u65f6\uff0c\u6839\u636e\u5206\u7247\u7684\u5e8f\u53f7\u5411\u5bf9\u7aef\u56de\u590d\u4e00\u4e2a\u786e\u8ba4\u5305\uff1b</li> <li>\u8d85\u65f6\u91cd\u53d1\uff1a\u53d1\u9001\u65b9\u5728\u53d1\u9001\u5206\u7247\u540e\u5f00\u59cb\u8ba1\u65f6\uff0c\u82e5\u8d85\u65f6\u5374\u6ca1\u6709\u6536\u5230\u5bf9\u7aef\u7684\u786e\u8ba4\u5305\uff0c\u5c06\u4f1a\u91cd\u53d1\u5206\u7247\uff1b</li> <li>\u6ed1\u52a8\u7a97\u53e3\uff1aTCP \u4e2d\u91c7\u7528\u6ed1\u52a8\u7a97\u53e3\u6765\u8fdb\u884c\u4f20\u8f93\u63a7\u5236\uff0c\u53d1\u9001\u65b9\u53ef\u4ee5\u901a\u8fc7\u6ed1\u52a8\u7a97\u53e3\u7684\u5927\u5c0f\u6765\u786e\u5b9a\u5e94\u8be5\u53d1\u9001\u591a\u5c11\u5b57\u8282\u7684\u6570\u636e\u3002\u5f53\u6ed1\u52a8\u7a97\u53e3\u4e3a 0 \u65f6\uff0c\u53d1\u9001\u65b9\u4e0d\u4f1a\u518d\u53d1\u9001\u6570\u636e\uff1b</li> <li>\u5931\u5e8f\u5904\u7406\uff1aTCP\u7684\u63a5\u6536\u7aef\u4f1a\u628a\u63a5\u6536\u5230\u7684\u6570\u636e\u91cd\u65b0\u6392\u5e8f\uff1b</li> <li>\u91cd\u590d\u5904\u7406\uff1a\u5982\u679c\u4f20\u8f93\u7684\u5206\u7247\u51fa\u73b0\u91cd\u590d\uff0cTCP\u7684\u63a5\u6536\u7aef\u4f1a\u4e22\u5f03\u91cd\u590d\u7684\u6570\u636e\uff1b</li> <li>\u6570\u636e\u6821\u9a8c\uff1aTCP\u901a\u8fc7\u6570\u636e\u7684\u68c0\u9a8c\u548c\u6765\u5224\u65ad\u6570\u636e\u5728\u4f20\u8f93\u8fc7\u7a0b\u4e2d\u662f\u5426\u6b63\u786e\u3002</li> </ul>"},{"location":"Project/Backend%20server/Network/TCP-UPD/#udp","title":"UDP\u4e0d\u53ef\u9760\u7684\u539f\u56e0","text":"<ul> <li>\u6ca1\u6709\u4e0a\u8ff0TCP\u7684\u673a\u5236\uff0c\u5982\u679c\u6821\u9a8c\u548c\u51fa\u9519\uff0cUDP\u4f1a\u5c06\u8be5\u62a5\u6587\u4e22\u5f03</li> </ul>"},{"location":"Project/Backend%20server/Network/TCP-UPD/#_2","title":"\u4f7f\u7528\u573a\u666f","text":"<ul> <li>TCP \u4f7f\u7528\u573a\u666f<ul> <li>TCP\u5b9e\u73b0\u4e86\u6570\u636e\u4f20\u8f93\u8fc7\u7a0b\u4e2d\u7684\u5404\u79cd\u63a7\u5236\uff0c\u9002\u5408\u5bf9\u53ef\u9760\u6027\u6709\u8981\u6c42\u7684\u573a\u666f\u3002</li> </ul> </li> <li>UDP \u4f7f\u7528\u573a\u666f<ul> <li>\u53ef\u4ee5\u5bb9\u5fcd\u6570\u636e\u4e22\u5931\u7684\u573a\u666f\uff1a</li> <li>\u89c6\u9891\u3001\u97f3\u9891\u7b49\u591a\u5a92\u4f53\u901a\u4fe1\uff08\u5373\u65f6\u901a\u4fe1\uff09\uff1b</li> <li>\u5e7f\u64ad\u4fe1\u606f</li> </ul> </li> </ul>"},{"location":"Project/Backend%20server/Network/TCP-UPD/#udp_1","title":"UDP\u80fd\u5b9e\u73b0\u53ef\u9760\u4f20\u8f93\u5417\uff1f","text":"<ul> <li>\u8fd9\u662f\u4e2a\u4f2a\u547d\u9898\uff0c\u5982\u679c\u7528UDP\u5b9e\u73b0\u53ef\u9760\u4f20\u8f93\uff0c\u90a3\u4e48\uff0c\u5e94\u7528\u7a0b\u5e8f\u5fc5\u987b\u5b9e\u73b0\u91cd\u4f20\u548c\u6392\u5e8f\u7b49\u529f\u80fd\uff0c\u975e\u5e38\u9ebb\u70e6\uff0c\u8fd8\u4e0d\u5982\u76f4\u63a5\u7528TCP</li> </ul>"},{"location":"Project/Backend%20server/Network/multi-process%20network%20server/","title":"\u591a\u8fdb\u7a0b\u7684socket\u670d\u52a1\u7aef","text":"<ul> <li>\u7236\u8fdb\u7a0b\u53ea\u53d7\u7406\u5ba2\u6237\u7aef\u7684\u8fde\u63a5, \u4e0d\u4e0e\u5ba2\u6237\u7aef\u901a\u8baf </li> <li>\u5b50\u8fdb\u7a0b\u8d1f\u8d23\u4e0e\u5ba2\u6237\u7aef\u901a\u8baf, \u4e0d\u53d7\u7406\u5ba2\u6237\u7aef\u7684\u8fde\u63a5</li> <li>fork\u4e4b\u540e\uff0c\u7236\u8fdb\u7a0b\u4e0d\u9700\u8981tcpserver.m_clientfd\uff0c \u5b50\u8fdb\u7a0b\u4e0d\u9700\u8981tcpserver.m_listenfd </li> </ul> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;cstring&gt;\n#include &lt;cstdlib&gt;\n#include &lt;unistd.h&gt;\n#include &lt;netdb.h&gt;\n#include &lt;signal.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;sys/socket.h&gt;\n#include &lt;arpa/inet.h&gt;\nusing namespace std;\n\nclass ctcpserver         // TCP\u901a\u8baf\u7684\u670d\u52a1\u7aef\u7c7b\u3002\n{\nprivate:\n  int    m_listenfd;        // \u76d1\u542c\u7684socket\uff0c-1\u8868\u793a\u672a\u521d\u59cb\u5316\u3002\n  int    m_clientfd;        // \u5ba2\u6237\u7aef\u8fde\u4e0a\u6765\u7684socket\uff0c-1\u8868\u793a\u5ba2\u6237\u7aef\u672a\u8fde\u63a5\u3002\n  string m_clientip;        // \u5ba2\u6237\u7aef\u5b57\u7b26\u4e32\u683c\u5f0f\u7684IP\u3002\n  unsigned short m_port;    // \u670d\u52a1\u7aef\u7528\u4e8e\u901a\u8baf\u7684\u7aef\u53e3\u3002\npublic:\n  ctcpserver():m_listenfd(-1),m_clientfd(-1) {}\n\n  // \u521d\u59cb\u5316\u670d\u52a1\u7aef\u7528\u4e8e\u76d1\u542c\u7684socket\u3002\n  bool initserver(const unsigned short in_port)\n  {\n    // \u7b2c1\u6b65\uff1a\u521b\u5efa\u670d\u52a1\u7aef\u7684socket\u3002 \n    if ( (m_listenfd=socket(AF_INET,SOCK_STREAM,0))==-1) return false;\n\n    m_port=in_port;\n\n    // \u7b2c2\u6b65\uff1a\u628a\u670d\u52a1\u7aef\u7528\u4e8e\u901a\u4fe1\u7684IP\u548c\u7aef\u53e3\u7ed1\u5b9a\u5230socket\u4e0a\u3002 \n    struct sockaddr_in servaddr;                // \u7528\u4e8e\u5b58\u653e\u534f\u8bae\u3001\u7aef\u53e3\u548cIP\u5730\u5740\u7684\u7ed3\u6784\u4f53\u3002\n    memset(&amp;servaddr,0,sizeof(servaddr));\n    servaddr.sin_family=AF_INET;                // \u2460\u534f\u8bae\u65cf\uff0c\u56fa\u5b9a\u586bAF_INET\u3002\n    servaddr.sin_port=htons(m_port);            // \u2461\u6307\u5b9a\u670d\u52a1\u7aef\u7684\u901a\u4fe1\u7aef\u53e3\u3002\n    servaddr.sin_addr.s_addr=htonl(INADDR_ANY); // \u2462\u5982\u679c\u64cd\u4f5c\u7cfb\u7edf\u6709\u591a\u4e2aIP\uff0c\u5168\u90e8\u7684IP\u90fd\u53ef\u4ee5\u7528\u4e8e\u901a\u8baf\u3002\n\n    // \u7ed1\u5b9a\u670d\u52a1\u7aef\u7684IP\u548c\u7aef\u53e3\uff08\u4e3asocket\u5206\u914dIP\u548c\u7aef\u53e3\uff09\u3002\n    if (bind(m_listenfd,(struct sockaddr *)&amp;servaddr,sizeof(servaddr))==-1)\n    { \n      close(m_listenfd); m_listenfd=-1; return false; \n    }\n\n    // \u7b2c3\u6b65\uff1a\u628asocket\u8bbe\u7f6e\u4e3a\u53ef\u8fde\u63a5\uff08\u76d1\u542c\uff09\u7684\u72b6\u6001\u3002\n    if (listen(m_listenfd,5) == -1 ) \n    { \n      close(m_listenfd); m_listenfd=-1; return false;\n    }\n\n    return true;\n  }\n\n  // \u53d7\u7406\u5ba2\u6237\u7aef\u7684\u8fde\u63a5\uff08\u4ece\u5df2\u8fde\u63a5\u7684\u5ba2\u6237\u7aef\u4e2d\u53d6\u51fa\u4e00\u4e2a\u5ba2\u6237\u7aef\uff09\uff0c\n  // \u5982\u679c\u6ca1\u6709\u5df2\u8fde\u63a5\u7684\u5ba2\u6237\u7aef\uff0caccept()\u51fd\u6570\u5c06\u963b\u585e\u7b49\u5f85\u3002\n  bool accept()\n  {\n    struct sockaddr_in caddr;        // \u5ba2\u6237\u7aef\u7684\u5730\u5740\u4fe1\u606f\u3002  \n    socklen_t addrlen=sizeof(caddr); // struct sockaddr_in\u7684\u5927\u5c0f\u3002\n    if ((m_clientfd=::accept(m_listenfd,(struct sockaddr *)&amp;caddr,&amp;addrlen))==-1) return false;\n\n    m_clientip=inet_ntoa(caddr.sin_addr);  // \u628a\u5ba2\u6237\u7aef\u7684\u5730\u5740\u4ece\u5927\u7aef\u5e8f\u8f6c\u6362\u6210\u5b57\u7b26\u4e32\u3002\n\n    return true;\n  }\n\n  // \u83b7\u53d6\u5ba2\u6237\u7aef\u7684IP(\u5b57\u7b26\u4e32\u683c\u5f0f)\u3002\n  const string &amp; clientip() const\n  {\n    return m_clientip;\n  }\n\n  // \u5411\u5bf9\u7aef\u53d1\u9001\u62a5\u6587\uff0c\u6210\u529f\u8fd4\u56detrue\uff0c\u5931\u8d25\u8fd4\u56defalse\u3002\n  bool send(const string &amp;buffer)   \n  {\n    if (m_clientfd==-1) return false;\n\n    if ( (::send(m_clientfd,buffer.data(),buffer.size(),0))&lt;=0) return false;\n\n    return true;\n  }\n\n  // \u63a5\u6536\u5bf9\u7aef\u7684\u62a5\u6587\uff0c\u6210\u529f\u8fd4\u56detrue\uff0c\u5931\u8d25\u8fd4\u56defalse\u3002\n  // buffer-\u5b58\u653e\u63a5\u6536\u5230\u7684\u62a5\u6587\u7684\u5185\u5bb9\uff0cmaxlen-\u672c\u6b21\u63a5\u6536\u62a5\u6587\u7684\u6700\u5927\u957f\u5ea6\u3002\n  bool recv(string &amp;buffer,const size_t maxlen)\n  { \n    buffer.clear();         // \u6e05\u7a7a\u5bb9\u5668\u3002\n    buffer.resize(maxlen);  // \u8bbe\u7f6e\u5bb9\u5668\u7684\u5927\u5c0f\u4e3amaxlen\u3002\n    int readn=::recv(m_clientfd,&amp;buffer[0],buffer.size(),0);  // \u76f4\u63a5\u64cd\u4f5cbuffer\u7684\u5185\u5b58\u3002\n    if (readn&lt;=0) { buffer.clear(); return false; }\n    buffer.resize(readn);   // \u91cd\u7f6ebuffer\u7684\u5b9e\u9645\u5927\u5c0f\u3002\n\n    return true;\n  }\n\n  // \u5173\u95ed\u76d1\u542c\u7684socket\u3002\n  bool closelisten()\n  {\n    if (m_listenfd==-1) return false; \n\n    ::close(m_listenfd);\n    m_listenfd=-1;\n    return true;\n  }\n\n  // \u5173\u95ed\u5ba2\u6237\u7aef\u8fde\u4e0a\u6765\u7684socket\u3002\n  bool closeclient()\n  {\n    if (m_clientfd==-1) return false;\n\n    ::close(m_clientfd);\n    m_clientfd=-1;\n    return true;\n  }\n\n ~ctcpserver() { closelisten(); closeclient(); }\n};\n\nctcpserver tcpserver;\n\nvoid FathEXIT(int sig);  // \u7236\u8fdb\u7a0b\u7684\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u3002\nvoid ChldEXIT(int sig);  // \u5b50\u8fdb\u7a0b\u7684\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u3002\n\nint main(int argc,char *argv[])\n{\n  if (argc!=2)\n  {\n    cout &lt;&lt; \"Using:./demo10 \u901a\u8baf\u7aef\u53e3\\nExample:./demo10 5005\\n\\n\";\n    cout &lt;&lt; \"\u6ce8\u610f\uff1a\u8fd0\u884c\u670d\u52a1\u7aef\u7a0b\u5e8f\u7684Linux\u7cfb\u7edf\u7684\u9632\u706b\u5899\u5fc5\u987b\u8981\u5f00\u901a5005\u7aef\u53e3\u3002\\n\";\n    cout &lt;&lt; \"      \u5982\u679c\u662f\u4e91\u670d\u52a1\u5668\uff0c\u8fd8\u8981\u5f00\u901a\u4e91\u5e73\u53f0\u7684\u8bbf\u95ee\u7b56\u7565\u3002\\n\\n\";\n    return -1;\n  }\n\n  // \u5ffd\u7565\u5168\u90e8\u7684\u4fe1\u53f7\uff0c\u4e0d\u5e0c\u671b\u88ab\u6253\u6270\u3002\u987a\u4fbf\u89e3\u51b3\u4e86\u50f5\u5c38\u8fdb\u7a0b\u7684\u95ee\u9898\u3002\n  for (int ii=1;ii&lt;=64;ii++) signal(ii,SIG_IGN);\n\n  // \u8bbe\u7f6e\u4fe1\u53f7,\u5728shell\u72b6\u6001\u4e0b\u53ef\u7528 \"kill \u8fdb\u7a0b\u53f7\" \u6216 \"Ctrl+c\" \u6b63\u5e38\u7ec8\u6b62\u4e9b\u8fdb\u7a0b\n  // \u4f46\u8bf7\u4e0d\u8981\u7528 \"kill -9 +\u8fdb\u7a0b\u53f7\" \u5f3a\u884c\u7ec8\u6b62\n  signal(SIGTERM,FathEXIT); signal(SIGINT,FathEXIT);  // SIGTERM 15 SIGINT 2\n\n  if (tcpserver.initserver(atoi(argv[1]))==false) // \u521d\u59cb\u5316\u670d\u52a1\u7aef\u7528\u4e8e\u76d1\u542c\u7684socket\u3002\n  {\n    perror(\"initserver()\"); return -1;\n  }\n\n  while (true)\n  {\n    // \u53d7\u7406\u5ba2\u6237\u7aef\u7684\u8fde\u63a5\uff08\u4ece\u5df2\u8fde\u63a5\u7684\u5ba2\u6237\u7aef\u4e2d\u53d6\u51fa\u4e00\u4e2a\u5ba2\u6237\u7aef\uff09\uff0c  \n    // \u5982\u679c\u6ca1\u6709\u5df2\u8fde\u63a5\u7684\u5ba2\u6237\u7aef\uff0caccept()\u51fd\u6570\u5c06\u963b\u585e\u7b49\u5f85\u3002\n    if (tcpserver.accept()==false)\n    {\n      perror(\"accept()\"); return -1;\n    }\n\n    int pid=fork();\n    if (pid==-1) { perror(\"fork()\"); return -1; }  // \u7cfb\u7edf\u8d44\u6e90\u4e0d\u8db3\u3002\n    if (pid&gt;  0) \n    { // \u7236\u8fdb\u7a0b\u3002\n      tcpserver.closeclient();  // \u7236\u8fdb\u7a0b\u5173\u95ed\u5ba2\u6237\u7aef\u8fde\u63a5\u7684socket\u3002\n      continue;                 // \u7236\u8fdb\u7a0b\u8fd4\u56de\u5230\u5faa\u73af\u5f00\u59cb\u7684\u4f4d\u7f6e\uff0c\u7ee7\u7eed\u53d7\u7406\u5ba2\u6237\u7aef\u7684\u8fde\u63a5\u3002\n    }\n\n    tcpserver.closelisten();    // \u5b50\u8fdb\u7a0b\u5173\u95ed\u76d1\u542c\u7684socket\u3002\n\n    // \u5b50\u8fdb\u7a0b\u9700\u8981\u91cd\u65b0\u8bbe\u7f6e\u4fe1\u53f7\u3002\n    signal(SIGTERM,ChldEXIT);   // \u5b50\u8fdb\u7a0b\u7684\u9000\u51fa\u51fd\u6570\u4e0e\u7236\u8fdb\u7a0b\u4e0d\u4e00\u6837\u3002\n    signal(SIGINT ,SIG_IGN);    // \u5b50\u8fdb\u7a0b\u4e0d\u9700\u8981\u6355\u83b7SIGINT\u4fe1\u53f7\u3002\n\n    // \u5b50\u8fdb\u7a0b\u8d1f\u8d23\u4e0e\u5ba2\u6237\u7aef\u8fdb\u884c\u901a\u8baf\u3002\n    cout &lt;&lt; \"\u5ba2\u6237\u7aef\u5df2\u8fde\u63a5(\" &lt;&lt; tcpserver.clientip() &lt;&lt; \")\u3002\\n\";\n\n    string buffer;\n    while (true)\n    {\n      // \u63a5\u6536\u5bf9\u7aef\u7684\u62a5\u6587\uff0c\u5982\u679c\u5bf9\u7aef\u6ca1\u6709\u53d1\u9001\u62a5\u6587\uff0crecv()\u51fd\u6570\u5c06\u963b\u585e\u7b49\u5f85\u3002\n      if (tcpserver.recv(buffer,1024)==false)\n      {\n        perror(\"recv()\"); break;\n      }\n      cout &lt;&lt; \"\u63a5\u6536\uff1a\" &lt;&lt; buffer &lt;&lt; endl;\n\n      buffer=\"ok\";  \n      if (tcpserver.send(buffer)==false)  // \u5411\u5bf9\u7aef\u53d1\u9001\u62a5\u6587\u3002\n      {\n        perror(\"send\"); break;\n      }\n      cout &lt;&lt; \"\u53d1\u9001\uff1a\" &lt;&lt; buffer &lt;&lt; endl;\n    }\n\n    return 0;  // \u5b50\u8fdb\u7a0b\u4e00\u5b9a\u8981\u9000\u51fa\uff0c\u5426\u5219\u53c8\u4f1a\u56de\u5230accept()\u51fd\u6570\u7684\u4f4d\u7f6e\u3002\n  }\n}\n\n// \u7236\u8fdb\u7a0b\u7684\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u3002\nvoid FathEXIT(int sig)\n{\n  // \u4ee5\u4e0b\u4ee3\u7801\u662f\u4e3a\u4e86\u9632\u6b62\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u5728\u6267\u884c\u7684\u8fc7\u7a0b\u4e2d\u518d\u6b21\u88ab\u4fe1\u53f7\u4e2d\u65ad\u3002\n  signal(SIGINT,SIG_IGN); signal(SIGTERM,SIG_IGN);\n\n  cout &lt;&lt; \"\u7236\u8fdb\u7a0b\u9000\u51fa\uff0csig=\" &lt;&lt; sig &lt;&lt; endl;\n\n  kill(0,SIGTERM);     // \u5411\u5168\u90e8\u7684\u5b50\u8fdb\u7a0b\u53d1\u900115\u7684\u4fe1\u53f7\uff0c\u901a\u77e5\u5b83\u4eec\u9000\u51fa\u3002\n\n  // \u5728\u8fd9\u91cc\u589e\u52a0\u91ca\u653e\u8d44\u6e90\u7684\u4ee3\u7801\uff08\u5168\u5c40\u7684\u8d44\u6e90\uff09\u3002\n  tcpserver.closelisten();       // \u7236\u8fdb\u7a0b\u5173\u95ed\u76d1\u542c\u7684socket\u3002\n\n  exit(0);\n}\n\n// \u5b50\u8fdb\u7a0b\u7684\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u3002\nvoid ChldEXIT(int sig)\n{\n  // \u4ee5\u4e0b\u4ee3\u7801\u662f\u4e3a\u4e86\u9632\u6b62\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u5728\u6267\u884c\u7684\u8fc7\u7a0b\u4e2d\u518d\u6b21\u88ab\u4fe1\u53f7\u4e2d\u65ad\u3002\n  signal(SIGINT,SIG_IGN); signal(SIGTERM,SIG_IGN);\n\n  cout &lt;&lt; \"\u5b50\u8fdb\u7a0b\" &lt;&lt; getpid() &lt;&lt; \"\u9000\u51fa\uff0csig=\" &lt;&lt; sig &lt;&lt; endl;\n\n  // \u5728\u8fd9\u91cc\u589e\u52a0\u91ca\u653e\u8d44\u6e90\u7684\u4ee3\u7801\uff08\u53ea\u91ca\u653e\u5b50\u8fdb\u7a0b\u7684\u8d44\u6e90\uff09\u3002\n  tcpserver.closeclient();       // \u5b50\u8fdb\u7a0b\u5173\u95ed\u5ba2\u6237\u7aef\u8fde\u4e0a\u6765\u7684socket\u3002\n\n  exit(0);\n}\n</code></pre>"},{"location":"Project/Backend%20server/Oracle/Table/","title":"\u8868","text":"<ul> <li>\u8868\u662f\u6570\u636e\u5e93\u6700\u57fa\u672c\u7684\u903b\u8f91\u7ed3\u6784\uff0c\u4e00\u5207\u6570\u636e\u90fd\u5b58\u653e\u5728\u8868\u4e2d\uff0c\u5176\u5b83\u6570\u636e\u5e93\u5bf9\u8c61\uff08\u7d22\u5f15\u3001\u89c6\u56fe\u3001\u540c\u4e49\u8bcd\u7b49\uff09\u90fd\u662f\u4e3a\u4e86\u66f4\u65b9\u4fbf\u7684\u64cd\u4f5c\u8868\u4e2d\u7684\u6570\u636e\u3002\u6bcf\u4e2a\u8868\u7531\u5217\uff08\u6570\u636e\u9879\u3001\u5b57\u6bb5\uff09\u548c\u884c\uff08\u6570\u636e\u5143\u7d20\u3001\u8bb0\u5f55\uff09\u7ec4\u6210</li> </ul> \u7f16\u53f7 \u59d3\u540d \u989c\u503c \u8eab\u6750 \u4f53\u91cd \u8eab\u9ad8 \u51fa\u751f\u65f6\u95f4 \u5907\u6ce8 0101 \u897f\u65bd \u6f02\u4eae \u706b\u8fa3 48.5 170 2000-01-01 01:12:35 \u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u6f02\u4eae\u59d1\u5a18\uff0c\u8001\u516c\u662f\u592b\u5dee\uff0c\u7537\u670b\u53cb\u662f\u8303\u8821\u3002 0102 \u8c82\u8749 \u6f02\u4eae \u706b\u8fa3 45.2 168 1997-08-02 12:20:38 \u738b\u5141\u771f\u4e0d\u662f\u7537\u4eba\uff0c\u5e72\u4e0d\u8fc7\u8463\u5353\u5c31\u628a\u7f8e\u4eba\u5f80\u706b\u5751\u91cc\u63a8\uff0c\u5343\u53e4\u7f6a\u4eba\u554a\u3002 0103 \u59ba\u5df2 \u6f02\u4eae \u4e30\u6ee1 53.6 172 1998-03-03 10:50:33 \u5982\u679c\u5546\u771f\u7684\u56e0\u6211\u800c\u4ea1\uff0c\u60a8\u4eec\u7537\u4eba\u505a\u4ec0\u4e48\u53bb\u4e86\uff1f 0104 \u8299\u84c9\u59d0\u59d0 \u732a\u6252 \u8170\u80a5 85.8 171 1980-05-05 10:11:55 \u5982\u679c\u4e0d\u52aa\u529b\u5b66\u4e60\u6280\u672f\uff0c\u5c06\u6765\u5c31\u4f1a\u5a36\u4e2a\u8299\u84c9\u59d0\u59d0\uff0c\u54fc\u54fc\u3002 0105 \u795e\u79d8\u732b\u5973 48.5 171 1989-12-08 12:10:35 \u4e0d\u77e5\u9053\u662f\u4ec0\u4e48\u4eba\uff0c\u5979\u8138\u4e0a\u6709\u4e00\u4e2a%\u7b26\u53f7\uff0c\u5f88\u795e\u79d8\u3002 <ol> <li> <p>\u8868\u7684\u5217</p> <ul> <li>\u8868\u7684\u7ed3\u6784\u662f\u7531\u5217\u7ec4\u6210\uff0c\u4e60\u60ef\u4e0a\u628a\u5217\u4e5f\u79f0\u4e4b\u4e3a\u5b57\u6bb5\uff0c\u5b57\u6bb5\u7684\u57fa\u672c\u5c5e\u6027\u5982\u4e0b\uff1a <ul> <li>\u5b57\u6bb5\u540d\uff1a\u5b57\u6bb5\u7684\u540d\u79f0</li> <li>\u6570\u636e\u7c7b\u578b\uff1a\u8be5\u5b57\u6bb5\u5b58\u653e\u6570\u636e\u7684\u7c7b\u578b\u548c\u957f\u5ea6</li> <li>\u662f\u5426\u5141\u8bb8\u7a7a\u503c\uff1a\u8be5\u5b57\u6bb5\u662f\u5426\u4e3a\u5fc5\u586b\uff0c\u5982\u679c\u4e0d\u662f\u5fc5\u586b\uff0c\u8868\u793a\u53ef\u4ee5\u4e3a\u7a7a</li> </ul> </li> </ul> </li> <li> <p>\u5217\u7684\u6570\u636e\u7c7b\u578b</p> <ul> <li>\u8868\u7684\u6bcf\u4e2a\u5217\u4e00\u5b9a\u4f1a\u6709\u5b83\u7684\u6570\u636e\u7c7b\u578b\uff0c\u8868\u793a\u8be5\u5217\u5b58\u653e\u7684\u662f\u4ec0\u4e48\u6570\u636e\uff0c\u5e38\u7528\u7684\u6570\u636e\u7c7b\u578b\u5982\u4e0b\uff1a<ul> <li>\u5b57\u7b26\u4e32\u7c7b\u578b\uff1achar(m)\u6216varchar2(m)\uff0c\u53ef\u8868\u8fbe\u4efb\u4f55\u5b57\u7b26\u4e32\uff0cm\u662f\u5b57\u7b26\u4e32\u7684\u957f\u5ea6\u3002</li> <li>\u6570\u5b57\u7c7b\u578b\uff1anumber(m,n)\uff0c\u53ef\u8868\u8fbe\u4efb\u4f55\u6570\u5b57\uff0cm\u662f\u6570\u5b57\u7684\u603b\u957f\u5ea6\uff0cn\u662f\u5c0f\u6570\u70b9\u540e\u7684\u4f4d\u6570\uff0c\u5982\u679cn\u4e3a0\u5219\u8868\u793a\u662f\u5b58\u653e\u6574\u6570\u3002 number(5,2)  -999.99 ~ 999.99  number(4)  -9999 ~ 9999</li> <li>\u65e5\u671f\u7c7b\u578b\uff1adate\uff0c\u5b58\u653e\u65e5\u671f\u548c\u65f6\u95f4\uff0c\u5305\u62ec\u5e74\uff08yyyy\uff09\u3001\u6708\uff08mm\uff09\u3001\u65e5\uff08dd\uff09\u3001\u5c0f\u65f6\uff08hh24\uff09\u3001\u5206\uff08mi\uff09\u3001\u79d2\uff08ss\uff09\u3002</li> <li>clob\u7c7b\u578b\uff0c\u5b58\u653e\u5355\u5b57\u8282\u5b57\u7b26\u4e32\u6216\u591a\u5b57\u8282\u6587\u672c\u6570\u636e\uff0c\u5982\u6587\u672c\u6587\u4ef6\u3001xml\u6587\u4ef6\u3002</li> <li>blob\u7c7b\u578b\uff0c\u5b58\u653e\u975e\u7ed3\u6784\u5316\u7684\u4e8c\u8fdb\u5236\u6570\u636e\uff0c\u5982\u56fe\u7247\u3001\u97f3\u9891\u3001\u89c6\u9891\u3001office\u6587\u6863\u7b49\u3002</li> <li>rowid\u7c7b\u578b\uff0c\u5b58\u653e\u8868\u4e2d\u8bb0\u5f55\u5728\u6570\u636e\u5e93\u4e2d\u7684\u7269\u7406\u5730\u5740\u3002</li> </ul> </li> </ul> </li> <li>\u8868\u7684\u884c<ul> <li>\u8868\u4e2d\u7684\u6570\u636e\u662f\u7531\u884c\u7ec4\u6210\u7684\uff0c\u6bcf\u4e00\u884c\u5c31\u662f\u4e00\u6761\u6570\u636e\uff0c\u4e5f\u79f0\u4e4b\u4e3a\u8bb0\u5f55\uff0c\u6570\u636e\u8d8a\u591a\uff0c\u8bb0\u5f55\u5c31\u8d8a\u591a</li> </ul> </li> </ol>"},{"location":"Project/Backend%20server/Oracle/Table/#_2","title":"\u521b\u5efa\u8868","text":"<ol> <li> <p>\u521b\u5efa\u8868</p> <ul> <li>Oracle\u6570\u636e\u5e93\u521b\u5efa\u8868\u662f\u7528create table\u547d\u4ee4\u6765\u5b8c\u6210\u7684\uff0c\u6211\u4eec\u901a\u8fc7\u521b\u5efaT_GIRL\u8868\uff08\u8d85\u5973\u57fa\u672c\u4fe1\u606f\u8868\uff09\u6765\u8bb2\u89e3create table \u547d\u4ee4\u7684\u4f7f\u7528</li> <li>\u5efa\u8868\u547d\u4ee4\u5982\u4e0b\uff1a</li> </ul> <pre><code>create table \u8868\u540d\n(\n\u5b57\u6bb5\u540d1 \u6570\u636e\u7c7b\u578b null,\n\u5b57\u6bb5\u540d2 \u6570\u636e\u7c7b\u578b not null,\n......,\n\u5b57\u6bb5\u540dn \u6570\u636e\u7c7b\u578b null\n);\n</code></pre> <ul> <li>\u8868\u540d\u662f\u6807\u8bc6\u7b26\uff0c\u4ece\u8bed\u6cd5\u4e0a\u6765\u8bf4\uff0c\u8868\u540d\u53ea\u8981\u7b26\u5408Oracle\u7684\u89c4\u5b9a\u5c31\u884c\u4e86\uff0c\u4f46\u662f\uff0c\u5728\u5b9e\u9645\u5f00\u53d1\u4e2d\uff0c\u6211\u4f1a\u9075\u5b88\u4e24\u4e2a\u539f\u5219\uff1a1\uff09\u8868\u540d\u4ee5T_\u6253\u5934\uff0c\u53ef\u8bfb\u6027\u6bd4\u8f83\u597d\uff1b2\uff09\u8868\u540d\u5c3d\u53ef\u80fd\u6709\u610f\u4e49\uff0c\u7528\u5b8c\u6574\u7684\u82f1\u6587\u5355\u8bcd\u6216\u7b80\u5199\u3001\u6216\u4e2d\u6587\u62fc\u97f3\u90fd\u53ef\u4ee5\uff0c\u65b9\u4fbf\u7406\u89e3\u548c\u8bb0\u5fc6\u5c31\u597d</li> <li>\u521b\u5efa\u8d85\u5973\u57fa\u672c\u4fe1\u606f\u8868\uff1a</li> </ul> <p><pre><code>create table T_GIRL\n(\nid        char(4)         not null,   -- \u7f16\u53f7\nname      varchar2(30)    not null,   -- \u59d3\u540d\nyz        varchar2(20)        null,   -- \u989c\u503c\nsc        varchar2(20)        null,   -- \u8eab\u6750\nweight    number(4,1)     not null,   -- \u4f53\u91cd\uff0c\u5355\u4f4d\uff1akg\nheight    number(3)       not null,   -- \u8eab\u9ad8\uff0c\u5355\u4f4d\uff1acm\nbirthday  date            not null,   -- \u51fa\u751f\u65f6\u95f4\uff0c\u53ef\u7cbe\u786e\u5230\u79d2\u3002\nmemo      varchar2(1000)      null    -- \u5907\u6ce8\n);\n</code></pre> - \u6ce8\u610f\uff1a     - \u5728Oracle\u6570\u636e\u5e93\u7684SQL\u8bed\u53e5\u4e2d\uff0c\u5173\u952e\u5b57\u3001\u8868\u540d\u548c\u5b57\u6bb5\u540d\u90fd\u4e0d\u533a\u5206\u5927\u5c0f\u5199\uff0cCREATE\u548ccreate\u6ca1\u6709\u533a\u522b\uff0c\u8868\u540dT_GIRL\u548ct_girl\u4e5f\u6ca1\u6709\u533a\u522b\uff0c\u5b57\u6bb5\u540dID\u548cid\u4e5f\u6ca1\u6709\u533a\u522b\uff1b     - \u4e24\u6839\u77ed\u7ebf\u201c--\u201d\u662f\u8bf4\u660e\u6587\u5b57\uff0c\u5c31\u50cfC/C++\u8bed\u8a00\u4e2d\u7684\u201c//\u201d</p> </li> <li> <p>\u521b\u5efa\u8868\u7684\u4e3b\u952e</p> </li> <li>\u5728\u73b0\u5b9e\u4e16\u754c\u4e2d\uff0c\u5f88\u591a\u6570\u636e\u5177\u6709\u552f\u4e00\u7684\u7279\u6027\uff0c\u4f8b\u5982\u8eab\u4efd\u8bc1\u53f7\u7801\uff0c\u5728\u56fd\u5bb6\u4eba\u53e3\u57fa\u672c\u4fe1\u606f\u8868\u4e2d\uff0c\u4e00\u5b9a\u4e0d\u4f1a\u5b58\u5728\u591a\u4e2a\u4eba\u7528\u540c\u4e00\u4e2a\u8eab\u4efd\u8bc1\u53f7\u7801\u7684\u60c5\u51b5\uff0c\u518d\u4f8b\u5982\u624b\u673a\u53f7\u7801\u3001QQ\u53f7\u7801\u3001\u94f6\u884c\u5e10\u53f7\u7b49\u7b49\uff0c\u8fd8\u6709\u5b66\u751f\u7ba1\u7406\u7cfb\u7edf\uff0c\u5b66\u751f\u7684\u5e74\u7ea7\u3001\u73ed\u7ea7\u548c\u5b66\u53f7\u4e09\u4e2a\u5b57\u6bb5\u7ec4\u5408\u8d77\u6765\u662f\u552f\u4e00\u7684\u6807\u8bc6</li> <li>\u5982\u679c\u8868\u4e2d\u4e00\u4e2a\u5b57\u6bb5\u6216\u591a\u4e2a\u5b57\u6bb5\u7ec4\u5408\u8d77\u6765\u7684\u503c\u662f\u552f\u4e00\u7684\uff0c\u5c31\u53ef\u4ee5\u4f5c\u4e3a\u8868\u7684\u4e3b\u952e\uff0c\u5728\u521b\u5efa\u6216\u4fee\u6539\u8868\u65f6\u7528primay key\u5173\u952e\u5b57\u6765\u6307\u5b9a\u4e3b\u952e\u3002\u4e00\u4e2a\u8868\u53ea\u80fd\u6709\u4e00\u4e2a\u4e3b\u952e\uff0c\u5e76\u4e14\u7ec4\u6210\u4e3b\u952e\u7684\u6bcf\u4e2a\u5b57\u6bb5\u503c\u90fd\u4e0d\u80fd\u4e3a\u7a7a</li> <li> <p>\u4e3b\u952e\u7684\u610f\u4e49\uff1a</p> <ul> <li>\u4f53\u73b0\u6570\u636e\u7ed3\u6784\u8bbe\u8ba1\u7684\u5408\u7406\u6027\u3002</li> <li>\u63d0\u5347\u64cd\u4f5c\u6570\u636e\u7684\u6548\u7387\u3002</li> <li>\u4fdd\u8bc1\u6570\u636e\u7684\u5b8c\u6574\u6027\uff0c\u5728\u8868\u4e2d\u6dfb\u52a0\u6216\u4fee\u6539\u8bb0\u5f55\u65f6\uff0c\u6570\u636e\u5e93\u4f1a\u68c0\u67e5\u8be5\u8bb0\u5f55\u4e3b\u952e\u7684\u503c\uff0c\u4e0d\u5141\u8bb8\u4e0e\u5176\u5b83\u8bb0\u5f55\u4e3b\u952e\u7684\u503c\u91cd\u590d\uff0c\u8fd9\u79cd\u505a\u6cd5\u6709\u4e2a\u4e13\u4e1a\u7684\u540d\u8bcd\uff1a\u4e3b\u952e\u7ea6\u675f</li> <li>\u4f8b\u5982\u8d85\u5973\u57fa\u672c\u4fe1\u606f\u8868\uff0c\u7f16\u53f7\u7684\u5b57\u6bb5\u540d\u662fid\uff0c\u5728\u8d85\u5973\u9009\u79c0\u6d3b\u52a8\u4e2d\uff0c\u6bcf\u4e2a\u8d85\u5973\u7684\u7f16\u53f7\u80af\u5b9a\u662f\u552f\u4e00\u7684\uff0c\u4e0d\u53ef\u80fd\u5b58\u5728\u4e24\u4e2a\u7f16\u53f7\u76f8\u540c\u7684\u8d85\u5973\uff0c\u5426\u5219\u4f1a\u5f15\u8d77\u6df7\u4e71\uff0c\u6211\u4eec\u53ef\u4ee5\u628aid\u5b57\u6bb5\u8bbe\u7f6e\u4e3aT_GIRL\u8868\u7684\u4e3b\u952e\uff0c\u540e\u9762\u7684\u5de5\u4f5c\u4ea4\u7ed9\u6570\u636e\u5e93\uff0c\u5982\u679c\u8bd5\u56fe\u5f80\u8868\u4e2d\u63d2\u5165\u591a\u6761id\u76f8\u540c\u7684\u8bb0\u5f55\uff0c\u6570\u636e\u5e93\u5c06\u62d2\u7edd</li> </ul> </li> <li> <p>\u6307\u5b9a\u8868\u7684\u4e3b\u5efa\u6709\u4e24\u79cd\u65b9\u6cd5:</p> <ul> <li>\u5728create table\u65f6\u6307\u5b9a</li> </ul> <pre><code>create table T_GIRL\n(\nid        char(4)         not null,   -- \u7f16\u53f7\nname      varchar2(30)    not null,   -- \u59d3\u540d\nyz        varchar2(20)        null,   -- \u989c\u503c\nsc        varchar2(20)        null,   -- \u8eab\u6750\nweight    number(4,1)     not null,   -- \u4f53\u91cd\nheight    number(3)       not null,   -- \u8eab\u9ad8\nbirthday  date            not null,   -- \u51fa\u751f\u65f6\u95f4\nmemo      varchar2(1000)      null,   -- \u5907\u6ce8\nprimary key(id)                       -- \u6307\u5b9aid\u4e3a\u8868\u7684\u4e3b\u952e\n);\n</code></pre> <ul> <li>\u4fee\u6539\u5df2\u7ecf\u5efa\u597d\u7684\u8868\uff0c\u589e\u52a0\u4e3b\u952e\u7ea6\u675f</li> </ul> <pre><code>alter table \u8868\u540d add constraint \u4e3b\u952e\u540d primary key(\u5b57\u6bb5\u540d1,\u5b57\u6bb5\u540d2,......\u5b57\u6bb5\u540dn);\n</code></pre> <ul> <li>\u4f8b\u5982\uff1a</li> </ul> <pre><code>alter table T_GIRL add constraint PK_GIRL primary key(id);\n</code></pre> <ul> <li>\u5728Oracle\u6570\u636e\u5e93\u4e2d\uff0c\u867d\u7136\u4e3b\u952e\u4e0d\u662f\u5fc5\u9700\u7684\uff0c\u4f46\u662f\u6700\u597d\u4e3a\u6bcf\u4e2a\u8868\u90fd\u8bbe\u7f6e\u4e00\u4e2a\u4e3b\u952e\uff0c\u4e0d\u7ba1\u662f\u5355\u5b57\u6bb5\u4e3b\u952e\u8fd8\u662f\u591a\u5b57\u6bb5\u4e3b\u952e\uff08\u590d\u5408\u4e3b\u952e\uff09\uff0c\u5b83\u7684\u5b58\u5728\u4ee3\u8868\u4e86\u8868\u7ed3\u6784\u7684\u5b8c\u6574\u6027\uff0c\u4e3b\u952e\u8fd8\u53ef\u4ee5\u7528\u4e8e\u5176\u4ed6\u8868\u7684\u5916\u952e\u5173\u8054</li> </ul> </li> </ol>"},{"location":"Project/Backend%20server/Oracle/Table/#_3","title":"\u8868\u8bb0\u5f55\u7684\u63d2\u5165\u3001\u4fee\u6539\u548c\u5220\u9664","text":"<ol> <li> <p>\u5411\u8868\u4e2d\u63d2\u5165\u8bb0\u5f55</p> <ul> <li>insert into\u547d\u4ee4\u7528\u4e8e\u5411\u8868\u4e2d\u63d2\u5165\u8bb0\u5f55\uff0c\u8bed\u6cd5\u5982\u4e0b\uff1a <pre><code>insert into \u8868\u540d (\u5b57\u6bb5\u540d1, \u5b57\u6bb5\u540d2,...... \u5b57\u6bb5\u540dn) values (\u5b57\u6bb51\u7684\u503c, \u5b57\u6bb52\u7684\u503c,..... \u5b57\u6bb5n\u7684\u503c);\n</code></pre></li> <li>\u6ce8\u610f\uff0c\u8868\u540d\u540e\u7684\u5b57\u6bb5\u540d\u5217\u8868\u4e0evalues\u540e\u9762\u5b57\u6bb5\u503c\u5217\u8868\u5fc5\u987b\u4e00\u4e00\u5bf9\u5e94</li> <li>\u4f8b\u5982\uff1a <pre><code>insert into T_GIRL(id,name,yz,birthday,sc,weight,height,memo)\n  values('0101','\u897f\u65bd','\u6f02\u4eae',to_date('2000-01-01 01:12:35','yyyy-mm-dd hh24:mi:ss'),\n         '\u706b\u8fa3',48.5,170,'\u8fd9\u662f\u4e00\u4e2a\u975e\u5e38\u6f02\u4eae\u59d1\u5a18\uff0c\u8001\u516c\u662f\u592b\u5dee\uff0c\u7537\u670b\u53cb\u662f\u8303\u8821\u3002');\ninsert into T_GIRL(id,name,yz,birthday,sc,weight,height,memo)\n  values('0102','\u8c82\u7985','\u6f02\u4eae',to_date('1997-08-02 12:20:38','yyyy-mm-dd hh24:mi:ss'),\n         '\u82d7\u6761',45.2,168,'\u738b\u5141\u771f\u4e0d\u662f\u7537\u4eba\uff0c\u5e72\u4e0d\u8fc7\u8463\u5353\u5c31\u628a\u7f8e\u4eba\u5f80\u706b\u5751\u91cc\u63a8\uff0c\u5343\u53e4\u7f6a\u4eba\u554a\u3002');\ninsert into T_GIRL(id,name,yz,birthday,sc,weight,height,memo)\n  values('0103','\u59b2\u5df2','\u6f02\u4eae',to_date('1998-03-03 10:50:33','yyyy-mm-dd hh24:mi:ss'),\n         '\u706b\u8fa3',53.6,172,'\u5982\u679c\u5546\u771f\u7684\u56e0\u6211\u800c\u4ea1\uff0c\u60a8\u4eec\u7537\u4eba\u505a\u4ec0\u4e48\u53bb\u4e86\uff1f');\ninsert into T_GIRL(id,name,yz,birthday,sc,weight,height,memo)\n  values('0104','\u8299\u84c9\u59d0\u59d0','\u732a\u6252',to_date('1980-05-05 10:11:55','yyyy-mm-dd hh24:mi:ss'),\n         '\u8198\u80a5\u4f53\u58ee',85.8,166,'\u5982\u679c\u4e0d\u52aa\u529b\u5b66\u4e60\u6280\u672f\uff0c\u5c06\u6765\u5c31\u4f1a\u5a36\u4e2a\u8299\u84c9\u59d0\u59d0\uff0c\u54fc\u54fc\u3002');\ninsert into T_GIRL(id,name,yz,birthday,sc,weight,height,memo)\n  values('0105','\u795e\u5bc6\u732b\u5973',null,to_date('1989-12-08 12:10:35','yyyy-mm-dd hh24:mi:ss'),\n         null,48.5,171,'\u4e0d\u77e5\u9053\u662f\u4ec0\u4e48\u4eba\uff0c\u5979\u8138\u4e0a\u6709\u4e00\u4e2a%\u7b26\u53f7\uff0c\u5f88\u795e\u5bc6\u3002');\n</code></pre></li> <li>\u5728\u4e0a\u9762\u7684insert\u8bed\u53e5\u4e2d\uff0c\u5b57\u6bb5\u7684\u503c\u5982\u679c\u662f\u5b57\u7b26\u4e32\uff0c\u8981\u7528\u5355\u5f15\u53f7\u5305\u542b\u8d77\u6765\uff0c\u65e5\u671f\u5b57\u6bb5\u8981\u7528to_date\u51fd\u6570\u8f6c\u6362\uff0c\u6570\u5b57\u76f4\u63a5\u4e66\u5199</li> <li>\u63d2\u5165\u6570\u636e\u7684SQL\u8bed\u53e5\u8fd8\u6709\u4e00\u79cd\u5199\u6cd5\uff0c\u5982\u4e0b\uff1a <pre><code>insert into \u8868\u540d values (\u5b57\u6bb51\u7684\u503c, \u5b57\u6bb52\u7684\u503c,..... \u5b57\u6bb5n\u7684\u503c);\n</code></pre></li> <li>\u8fd9\u79cd\u5199\u6cd5\u7701\u7565\u4e86\u5b57\u6bb5\u540d\u5217\u8868\uff0c\u4f46\u662f\uff0c\u8fd9\u79cd\u5199\u6cd5\u4e00\u5b9a\u4e0d\u80fd\u51fa\u73b0\u5728\u7a0b\u5e8f\u4e2d\uff0c\u56e0\u4e3a\u53ea\u8981\u8868\u7ed3\u6784\u53d1\u751f\u6539\u53d8\uff0c\u6216\u5b57\u6bb5\u7684\u4f4d\u7f6e\u6539\u53d8\uff0cSQL\u8bed\u53e5\u5c31\u4f1a\u51fa\u9519</li> </ul> </li> <li> <p>\u67e5\u8be2\u8868\u4e2d\u7684\u8bb0\u5f55</p> <ul> <li>select\u547d\u4ee4\u7528\u4e8e\u4ece\u8868\u4e2d\u67e5\u8be2\u8bb0\u5f55\uff0c\u8bed\u6cd5\u5982\u4e0b\uff1a <pre><code>select \u5b57\u6bb5\u540d1,\u5b57\u6bb5\u540d2,......\u5b57\u6bb5\u540dn from \u8868\u540d where \u6761\u4ef61 and \u6761\u4ef62 ...... \u6761\u4ef6n;\nselect * from \u8868\u540d where \u6761\u4ef61 and \u6761\u4ef62 ...... \u6761\u4ef6n;\n</code></pre></li> <li>\u4f8b\u5982\uff1a <pre><code>select name,to_char(birthday,'yyyy-mm-dd hh24:mi:ss') from T_GIRL where yz='\u6f02\u4eae' and sc='\u706b\u8fa3';\n</code></pre></li> <li>\u5728select\u5173\u952e\u5b57\u4e4b\u540e\uff0c\u53ef\u4ee5\u7528\u661f\u53f7\u8868\u793a\u5168\u90e8\u7684\u5b57\u6bb5 <pre><code>select * from T_GIRL where yz='\u6f02\u4eae' and sc='\u706b\u8fa3';\n</code></pre></li> <li>\u5728\u4e0a\u9762\u7684SQL\u8bed\u53e5\u4e2d\uff0c\u7528\u661f\u53f7*\u8868\u793a\u5217\u51fa\u5168\u90e8\u7684\u5b57\u6bb5\uff0c\u8fd9\u79cd\u5199\u6cd5\u4e00\u5b9a\u4e0d\u80fd\u51fa\u73b0\u5728\u7a0b\u5e8f\u4e2d\uff0c\u56e0\u4e3a\u53ea\u8981\u8868\u7ed3\u6784\u53d1\u751f\u6539\u53d8\uff0c\u6216\u5b57\u6bb5\u7684\u4f4d\u7f6e\u6539\u53d8\uff0c\u7a0b\u5e8f\u5c31\u4f1a\u51fa\u73b0\u6df7\u4e71</li> </ul> </li> <li> <p>\u4fee\u6539\u8868\u4e2d\u7684\u8bb0\u5f55</p> <ul> <li>update\u547d\u4ee4\u7528\u4e8e\u4fee\u6539\u8868\u4e2d\u7684\u8bb0\u5f55\uff0c\u8bed\u6cd5\u5982\u4e0b\uff1a <pre><code>update \u8868\u540d set \u5b57\u6bb5\u540d1=\u503c1,\u5b57\u6bb5\u540d2=\u503c2,......\u5b57\u6bb5\u540dn=\u503cn where \u6761\u4ef61 and \u6761\u4ef62 ...... \u6761\u4ef6n;\n</code></pre></li> <li>\u5728set\u5173\u952e\u5b57\u4e4b\u540e\u628a\u9700\u8981\u4fee\u6539\u7684\u5b57\u6bb5\u540d\u548c\u65b0\u7684\u503c\u4e00\u4e00\u5217\u51fa\u6765</li> <li>where\u5173\u952e\u5b57\u540e\u9762\u662f\u6761\u4ef6\u8868\u8fbe\u5f0f\uff0c\u5982\u679c\u6ca1\u6709\u6761\u4ef6\u8868\u8fbe\u5f0f\uff0c\u5c31\u4f1a\u66f4\u65b0\u8868\u4e2d\u5168\u90e8\u7684\u8bb0\u5f55</li> <li>\u8d85\u5973\u9009\u79c0\u6d3b\u52a8\u5f00\u59cb\u540e\uff0c\u8299\u84c9\u59d0\u59d0\u4f53\u91cd\u53cd\u5f39\u4e863\u516c\u65a4\uff0c\u50cf\u4e2a\u5927\u6050\u9f99\uff0c\u51fa\u751f\u65e5\u671f\u4e5f\u6709\u9690\u7792\uff0c\u7ec4\u59d4\u4f1a\u4fee\u6539\u4e86\u5979\u7684\u57fa\u672c\u8d44\u6599\uff0c\u5982\u4e0b\uff1a <pre><code>update T_GIRL set weight=89.5,yz='\u6050\u9f99',birthday=to_date('1978-01-01 01:12:35','yyyy-mm-dd hh24:mi:ss') where name='\u8299\u84c9\u59d0\u59d0';\n</code></pre></li> </ul> </li> <li> <p>\u5220\u9664\u8868\u4e2d\u7684\u8bb0\u5f55</p> <ul> <li>delete\u547d\u4ee4\u7528\u4e8e\u5220\u9664\u8868\u4e2d\u7684\u8bb0\u5f55\uff0c\u8bed\u6cd5\u5982\u4e0b\uff1a <pre><code>delete from \u8868\u540d where \u6761\u4ef61 and \u6761\u4ef62 ...... \u6761\u4ef6n;\n</code></pre></li> <li>where\u5173\u952e\u5b57\u540e\u9762\u662f\u6761\u4ef6\u8868\u8fbe\u5f0f\uff0c\u5982\u679c\u6ca1\u6709\u6761\u4ef6\u8868\u8fbe\u5f0f\uff0c\u5c31\u5220\u9664\u8868\u4e2d\u5168\u90e8\u7684\u8bb0\u5f55\u3002</li> <li>\u968f\u7740\u8d85\u5973\u9009\u79c0\u6d3b\u52a8\u7684\u7ee7\u7eed\uff0c\u8299\u84c9\u59d0\u59d0\u7684\u4f53\u91cd\u5728\u6301\u7eed\u53cd\u5f39\u4e2d\uff0c\u7ec4\u59d4\u4f1a\u5b9e\u5728\u53d7\u4e0d\u4e86\u4e86\uff0c\u51b3\u5b9a\u628a\u8299\u84c9\u59d0\u59d0\u9664\u540d\u3002 <pre><code>delete from T_GIRL where name='\u8299\u84c9\u59d0\u59d0';\n</code></pre></li> </ul> </li> </ol>"},{"location":"Project/Backend%20server/Oracle/Table/#_4","title":"\u8868\u7684\u7ea6\u675f","text":"<ul> <li> <p>\u8868\u7684\u7ea6\u675f\u6709\u975e\u7a7a\u7ea6\u675f\u3001\u552f\u4e00\u6027\u7ea6\u675f\u3001\u68c0\u67e5\u7ea6\u675f\u3001\u5916\u952e\u7ea6\u675f\u56db\u79cd</p> </li> <li> <p>\u975e\u7a7a\u7ea6\u675f</p> <ul> <li>\u521b\u5efa\u8868\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u6307\u5b9a\u5b57\u6bb5\u7684\u503c\u662f\u5426\u5141\u8bb8\u4e3a\u7a7a\uff0c\u7f3a\u7701\u662fnull\u5141\u8bb8\u4e3a\u7a7a\uff08\u8868\u793a\u662f\u53ef\u9009\u5b57\u6bb5\uff09\uff0cnot null\u4e0d\u5141\u8bb8\u4e3a\u7a7a\uff08\u8868\u793a\u662f\u5fc5\u586b\u5b57\u6bb5\uff09</li> <li> <p>\u4f8b\u793a\uff1a <pre><code>create table tt (c1 varchar2(10),c2 varchar2(10) not null);\n</code></pre></p> <p></p> </li> </ul> </li> <li> <p>\u552f\u4e00\u6027\u7ea6\u675f</p> <ul> <li>\u552f\u4e00\u6027\u7ea6\u675f\u6709\u4e24\u79cd\uff0c\u4e00\u79cd\u662f\u8868\u7684\u4e3b\u952e\uff0c\u53e6\u4e00\u79cd\u662f\u8868\u7684\u552f\u4e00\u7d22\u5f15</li> <li>\u8868\u7684\u4e3b\u952e\u5b57\u6bb5\u4e0d\u5141\u8bb8\u5b58\u5728\u503c\u76f8\u540c\u7684\u8bb0\u5f55 <pre><code>create table tt (id varchar2(10),name varchar2(10),primary key(id));\n</code></pre></li> <li> <p>\u521b\u5efa\u8868tt\uff0cid\u5b57\u6bb5\u662f\u4e3b\u952e</p> <p></p> </li> </ul> </li> <li> <p>\u68c0\u67e5\u7ea6\u675f</p> <ul> <li>\u68c0\u67e5\u7ea6\u675f\u662f\u6307\u68c0\u67e5\u5b57\u6bb5\u7684\u503c\u662f\u5426\u5408\u6cd5</li> <li>\u793a\u4f8b\uff1a <pre><code>create table TT  \n(\n    c1   number(6) constraint CKC_C1_TT check (c1 &gt;= 10), \n    c2   number(6) constraint CKC_C2_TT check (c2 &lt;= 20), \n    c3   number(6) constraint CKC_C3_TT check (c3 in (1,2,3))\n);\n</code></pre></li> <li>\u521b\u5efa\u8868TT\uff0cc1\u5b57\u6bb5\u7684\u6700\u5c0f\u503c\u662f10\uff0cc2\u5b57\u6bb5\u7684\u6700\u5927\u503c\u662f20\uff0cC3\u5b57\u6bb5\u7684\u53d6\u503c\u5fc5\u987b\u5728(1,2,3)\u4e2d\u53d6\u5176\u4e00      </li> </ul> </li> </ul>"},{"location":"Project/Backend%20server/Oracle/Table/#_5","title":"\u5b57\u6bb5\u7684\u7f3a\u7701\u503c","text":"<ul> <li>\u5728\u521b\u5efa\u8868\u7684\u65f6\u5019\uff0c\u53ef\u4ee5\u4e3a\u5b57\u6bb5\u6307\u5b9a\u7f3a\u7701\u503c\u3002</li> <li> <p>\u793a\u4f8b\uff1a</p> <p><pre><code>create table TT\n(\n    name     varchar2(10) not null,\n    crttime  date         default sysdate not null,\n    rsts     number(1)    default 1 not null constraint CKC_RSTS_TT check (rsts in (1,2))\n);\n</code></pre> - \u521b\u5efa\u8868\uff0c\u5b57\u6bb5crttime\u7684\u7f3a\u7701\u503c\u662fsysdate\uff08\u5f53\u524d\u65f6\u95f4\uff09\uff0crsts\u7684\u7f3a\u7701\u503c\u662f1     </p> </li> </ul>"},{"location":"Project/Backend%20server/Oracle/Table/#_6","title":"\u8868\u7684\u5b58\u50a8\u7a7a\u95f4","text":"<ul> <li> <p>\u6bcf\u4e2a\u6570\u636e\u5e93\u7528\u6237\u6709\u4e00\u4e2a\u7f3a\u7701\u8868\u7a7a\u95f4\uff0c\u521b\u5efa\u7684\u8868\u3001\u4e3b\u952e\u548c\u7d22\u5f15\u5b58\u653e\u5728\u7f3a\u7701\u8868\u7a7a\u95f4\u4e2d\uff0c\u4e5f\u53ef\u4ee5\u6307\u5b9a\u5176\u5b83\u7684\u8868\u7a7a\u95f4</p> </li> <li> <p>\u67e5\u770b\u5f53\u524d\u7528\u6237\u7684\u7f3a\u7701\u8868\u7a7a\u95f4</p> <ul> <li>\u4ece\u6570\u636e\u5b57\u5178USER_USERS\u4e2d\u53ef\u4ee5\u67e5\u770b\u5f53\u524d\u7528\u6237\u7684\u7f3a\u7701\u8868\u7a7a\u95f4     </li> </ul> </li> <li> <p>\u6307\u5b9a\u8868\u7684\u8868\u7a7a\u95f4</p> </li> <li> <p>\u6307\u5b9a\u8868\u7a7a\u95f4\u7684\u8bed\u6cd5\u5982\u4e0b\uff1a     <pre><code>create table \u8868\u540d\n(\n......   -- \u5b57\u6bb5\u5217\u8868\n) tablespace \u8868\u7a7a\u95f4\u540d;\n</code></pre></p> </li> <li> <p>\u4f8b\u5982\u521b\u5efaT_GIRL\u8868\uff0c\u6307\u5b9a\u4f7f\u7528USERS\u8868\u7a7a\u95f4\u3002     <pre><code>create table T_GIRL\n(\nid        char(4)         not null,   -- \u7f16\u53f7\nname      varchar2(30)    not null,   -- \u59d3\u540d\nyz        varchar2(20)        null,   -- \u989c\u503c\nsc        varchar2(20)        null,   -- \u8eab\u6750\nweight    number(4,1)     not null,   -- \u4f53\u91cd\nheight    number(3)       not null,   -- \u8eab\u9ad8\nbirthday  date            not null,   -- \u51fa\u751f\u65f6\u95f4\nmemo      varchar2(1000)      null    -- \u5907\u6ce8\n) tablespace USERS;\n</code></pre></p> </li> </ul>"},{"location":"Project/Backend%20server/Oracle/Table/#_7","title":"\u4fee\u6539\u8868\u7ed3\u6784","text":"<ul> <li> <p>Oracle\u4fee\u6539\u8868\u7684\u547d\u4ee4\u662falter table</p> </li> <li> <p>\u589e\u52a0\u5b57\u6bb5</p> <ul> <li>\u8bed\u6cd5\uff1a <pre><code>alter table \u8868\u540d add \u5b57\u6bb5\u540d \u6570\u636e\u7c7b\u578b \u5176\u5b83\u9009\u9879\n</code></pre></li> <li>\u4f8b\u5982\uff1a <pre><code>alter table T_GIRL add address varchar2(50) null;\nalter table T_GIRL add rsts number(1) constraint CKC_RSTS_GIRL check (rsts in (1,2));\n</code></pre></li> </ul> </li> <li> <p>\u4fee\u6539\u5b57\u6bb5\u7684\u5c5e\u6027</p> <ul> <li>\u8bed\u6cd5\uff1a <pre><code>alter table \u8868\u540d modify \u5b57\u6bb5\u540d \u6570\u636e\u7c7b\u578b \u5176\u5b83\u9009\u9879;\n</code></pre></li> <li> <p>\u4f8b\u5982\uff1a <pre><code>alter table T_GIRL modify address varchar2(100);\nalter table T_GIRL modify address varchar2(100) not null;\nalter table T_GIRL drop constraint CKC_RSTS_GIRL;\nalter table T_GIRL modify rsts constraint CKC_RSTS_GIRL check (rsts in (1,2,3));\n</code></pre></p> </li> <li> <p>\u4fee\u6539\u5b57\u6bb5\u5c5e\u6027\u7684\u65f6\u5019\u8981\u6ce8\u610f\u4e00\u4e2a\u95ee\u9898\uff0c\u5982\u679c\u8868\u4e2d\u5df2\u5b58\u5728\u6570\u636e\uff0c\u4fee\u6539\u53ef\u80fd\u4f1a\u5931\u8d25\uff0c\u5305\u62ec\u4f46\u4e0d\u9650\u4e8e\u4ee5\u4e0b\u7684\u60c5\u51b5\uff1a</p> <ul> <li>\u628a\u5b57\u6bb5\u7531null\u6539\u4e3anot null\u65f6\uff0c\u8868\u4e2d\u8bb0\u5f55\u5b58\u5728null\u7684\u60c5\u51b5</li> <li>\u628a\u5b57\u6bb5\u7684\u53d6\u503c\u8303\u56f4\u7531\u8f83\u5927\uff08\u4f8b\u5982number(10)\uff09\u6539\u8f83\u5c0f\uff08\u4f8b\u5982number(5)\uff09\uff0c\u8868\u4e2d\u8bb0\u5f55\u5b58\u5728\u5927\u4e8e\u8f83\u5c0f\u53d6\u503c\u8303\u56f4\u7684\u60c5\u51b5\uff0c\u4f8b\u5982\u5df2\u7ecf\u5b58\u5728123456\u7684\u503c\uff0c\u5982\u679c\u628a\u6570\u636e\u7c7b\u578b\u6539\u4e3anumber(5)\uff0c\u65e0\u6cd5\u5b58\u653e123456</li> <li>\u628a\u5b57\u6bb5\u7684\u6570\u636e\u7c7b\u578b\u65f6\uff0c\u8868\u4e2d\u5b58\u5728\u8bb0\u5f55\u5e76\u4e14\u65b0\u65e7\u6570\u636e\u7c7b\u578b\u4e0d\u517c\u5bb9\u7684\u60c5\u51b5\u3002\u4f8b\u5982\u539f\u6765\u7684\u6570\u636e\u7c7b\u578b\u662fvarchar2(10)\uff0c\u8868\u4e2d\u5b58\u5728\u8bb0\u5f55\u7684\u503c\u662f'freecplus'\uff0c\u5982\u679c\u8981\u4fee\u6539\u4e3anumber(10)\uff0cOracle\u65e0\u6cd5\u628a'freecplus'\u8f6c\u6362\u4e3anumber(10)</li> </ul> </li> </ul> </li> <li> <p>\u4fee\u6539\u5b57\u6bb5\u540d</p> <ul> <li>\u8bed\u6cd5\uff1a</li> </ul> <p><pre><code>alter table \u8868\u540d rename column \u5217\u540d to \u65b0\u5217\u540d;\n</code></pre> - \u4f8b\u5982\uff1a <pre><code>alter table T_GIRL rename column memo to remark;\n</code></pre></p> </li> <li> <p>\u5220\u9664\u5b57\u6bb5</p> <ul> <li>\u8bed\u6cd5\uff1a</li> </ul> <p><pre><code>alter table \u8868\u540d dorp column \u5b57\u6bb5\u540d;\n</code></pre> - \u4f8b\u5982\uff1a <pre><code>alter table T_GIRL drop column rsts;\nalter table T_GIRL drop column address;\n</code></pre></p> </li> </ul>"},{"location":"Project/Backend%20server/Oracle/Table/#_8","title":"\u4fee\u6539\u8868\u540d","text":"<ul> <li>\u8bed\u6cd5\uff1a</li> </ul> <p><pre><code>alter table \u8868\u540d rename to \u65b0\u8868\u540d;\n</code></pre> - \u4f8b\u5982\uff1a <pre><code>alter table T_GIRL rename to T_BEAUTY;\n</code></pre> - \u6ce8\u610f\uff0c\u5982\u679c\u4fee\u6539\u4e86\u8868\u540d\uff0c\u8868\u7684\u7ea6\u675f\u3001\u7d22\u5f15\u3001\u4e3b\u952e\u7684\u540d\u79f0\u4e0d\u4f1a\u6539\u53d8\u3002</p>"},{"location":"Project/Backend%20server/Oracle/Table/#_9","title":"\u5220\u9664\u8868","text":"<ul> <li> <p>\u8bed\u6cd5\uff1a</p> <pre><code>drop table \u8868\u540d;\n</code></pre> </li> <li> <p>\u4f8b\u5982\uff1a</p> <pre><code>drop table T_GIRL;\n</code></pre> </li> </ul>"},{"location":"Project/Backend%20server/Oracle/Type%20of%20data/","title":"\u6570\u636e\u7c7b\u578b","text":"<ol> <li>\u5b57\u7b26\u4e32\u7c7b\u578b\uff1achar\u548cvarchar2\uff0c\u53ef\u8868\u8fbe\u4efb\u4f55\u5b57\u7b26\u4e32</li> <li>\u6570\u5b57\u7c7b\u578b\uff1anumber(m,n)\uff0c\u53ef\u8868\u8fbe\u4efb\u4f55\u6570\u5b57\uff0cm\u662f\u6570\u5b57\u7684\u603b\u957f\u5ea6\uff0cn\u662f\u5c0f\u6570\u70b9\u540e\u7684\u4f4d\u6570\uff0c\u5982\u679cn\u4e3a0\u5219\u8868\u793a\u662f\u4e00\u4e2a\u6574\u6570</li> <li>\u65e5\u671f\u7c7b\u578b\uff1adate\uff0c\u5b58\u653e\u65e5\u671f\u548c\u65f6\u95f4\uff0c\u5305\u62ec\u5e74\uff08yyyy\uff09\u3001\u6708\uff08mm\uff09\u3001\u65e5\uff08dd\uff09\u3001\u5c0f\u65f6\uff08hh24\uff09\u3001\u5206\uff08mi\uff09\u3001\u79d2\uff08ss\uff09</li> <li>clob\u7c7b\u578b\uff0c\u5b58\u653e\u5355\u5b57\u8282\u5b57\u7b26\u4e32\u6216\u591a\u5b57\u8282\u5b57\u7b26\u4e32\u6570\u636e\uff0c\u5982\u6587\u672c\u6587\u4ef6\u3001xml\u6587\u4ef6</li> <li>blob\u7c7b\u578b\uff0c\u5b58\u653e\u975e\u7ed3\u6784\u5316\u7684\u4e8c\u8fdb\u5236\u6570\u636e\uff0c\u5982\u56fe\u7247\u3001\u97f3\u9891\u3001\u89c6\u9891\u3001office\u6587\u6863\u7b49</li> <li>rowid\u7c7b\u578b\uff0c\u5b58\u653e\u8868\u4e2d\u8bb0\u5f55\u5728\u6570\u636e\u5e93\u4e2d\u7684\u7269\u7406\u5730\u5740</li> </ol>"},{"location":"Project/Backend%20server/Oracle/Type%20of%20data/#_2","title":"\u5b57\u7b26\u4e32\u7c7b\u578b","text":"<ul> <li>\u5728C/C++\u8bed\u8a00\u4e2d\u7528\uff0c\u5b57\u7b26\u4e32\u7528\u53cc\u5f15\u53f7\u5305\u542b\u8d77\u6765\uff0c\u5728Oracle\u6570\u636e\u5e93\u4e2d\uff0c\u5b57\u7b26\u4e32\u7528\u5355\u5f15\u53f7\u5305\u542b\u8d77\u6765</li> </ul> <pre><code>'www.freecplus.net'\n'\u4e00\u53ea\u50bb\u50bb\u9e1f'\n</code></pre> <ol> <li> <p>\u56fa\u5b9a\u957f\u5ea6\u7684\u5b57\u7b26\u4e32</p> <ul> <li>\u56fa\u5b9a\u957f\u5ea6\u5b57\u7b26\u4e32\u7528char\u8868\u793a\uff0c\u5f53\u5b58\u5165\u6570\u636e\u5185\u5bb9\u7684\u957f\u5ea6\u4e0d\u591f\u65f6\uff0cOracle\u5c06\u5728\u6570\u636e\u5185\u5bb9\u540e\u9762\u81ea\u52a8\u586b\u5145\u7a7a\u683c\u4ee5\u8fbe\u5230\u5176\u56fa\u5b9a\u7684\u957f\u5ea6\uff0c\u4f8b\u5982char(10)\u603b\u662f\u5305\u542b10\u5b57\u8282\u4fe1\u606f</li> <li>char\u5b57\u6bb5\u6700\u591a\u53ef\u4ee5\u5b58\u50a82000\u5b57\u8282\u7684\u5185\u5bb9</li> </ul> </li> <li> <p>\u53ef\u53d8\u957f\u5ea6\u7684\u5b57\u7b26\u4e32</p> <ul> <li>\u53d8\u957f\u5ea6\u5b57\u7b26\u4e32\u7528varchar2\u8868\u793a\uff0c\u4e0echar\u7c7b\u578b\u4e0d\u540c\uff0cOracle\u4e0d\u4f1a\u5728\u6570\u636e\u5185\u5bb9\u540e\u9762\u586b\u5145\u4efb\u4f55\u5185\u5bb9</li> <li>varchar2\u5b57\u6bb5\u6700\u591a\u53ef\u4ee5\u5b58\u50a84000\u5b57\u8282\u7684\u5185\u5bb9\uff0c\u4eceOracle 12c\u7248\u672c\u5f00\u59cb\uff0c\u53ef\u4ee5\u5b58\u50a832767\u5b57\u8282\u7684\u5185\u5bb9</li> </ul> </li> <li> <p>char\u548cvarchar2\u7684\u6bd4\u8f83</p> <ul> <li>char(10)\uff0c\u5982\u679c\u5b58\u5165'freecplus'\uff0c\u5728\u6570\u636e\u5e93\u4e2d\u5c06\u5b58\u50a8'freecplus '\uff0c\u5728\u6700\u540e\u8865\u4e86\u4e00\u4e2a\u7a7a\u683c\u3002</li> <li>varchar2(10)\uff0c\u5982\u679c\u5b58\u5165'freecplus'\uff0c\u5728\u6570\u636e\u5e93\u4e2d\u5c06\u5b58\u50a8'freecplus'\uff0c\u4ec0\u4e48\u4e5f\u4e0d\u4f1a\u8865\u3002</li> <li>\u5728\u5b9e\u9645\u5f00\u53d1\u4e2d\uff0c\u6211\u4eec\u5e76\u4e0d\u5e0c\u671bOracle\u7ed9\u5b57\u7b26\u4e32\u540e\u9762\u8865\u7a7a\u683c\uff0c\u90a3\u662f\u4e0d\u662f\u53ef\u4ee5\u5f03\u7528char\u7c7b\u578b\u5462\uff1f\u4e0d\u662f\uff0c\u6211\u4eec\u4e00\u822c\u7528char\u7c7b\u578b\u5b58\u653e\u56fa\u5b9a\u5927\u5c0f\u7684\u6570\u636e\u5185\u5bb9\uff0c\u4f8b\u5982\u8eab\u4efd\u8bc1\u53f7\u7801\uff0c\u56fa\u5b9a\u662f18\u4f4d\u7684\uff0c\u7528char(18)\u5c31\u975e\u5e38\u5408\u9002\uff0c\u80fd\u7528varchar2(18)\u53ef\u4ee5\u5b58\u653e\u8eab\u4efd\u8bc1\u53f7\u7801\u5417\uff1f\u5f53\u7136\u53ef\u4ee5\uff0c\u4f46\u662f\uff0cchar(18)\u7684\u6548\u7387\u6bd4varchar2(18)\u7684\u6548\u7387\u8981\u9ad8\u5f88\u591a\uff0c\u56e0\u4e3avarchar2(18)\u9700\u8981\u5728\u6570\u636e\u5e93\u4e2d\u5b58\u50a8\u4e24\u6b21\uff0c\u4e00\u6b21\u662f\u5b58\u50a8\u6570\u636e\u5185\u5bb9\uff0c\u4e00\u6b21\u662f\u5b58\u50a8\u6570\u636e\u957f\u5ea6\uff0c\u800cchar(18)\u53ea\u9700\u8981\u5b58\u50a8\u4e00\u6b21\u3002</li> <li>\u6240\u4ee5\uff0c\u5728\u5b9e\u9645\u5f00\u53d1\u4e2d\uff0c\u6211\u4eec\u4e00\u822c\u7528char\u7c7b\u578b\u5b58\u653e\u56fa\u5b9a\u5927\u5c0f\u7684\u6570\u636e\u5185\u5bb9\uff0c\u7528varchar2\u7c7b\u578b\u5b58\u653e\u53ef\u53d8\u5927\u5c0f\u7684\u6570\u636e\u5185\u5bb9</li> </ul> </li> <li> <p>\u6c49\u5b57\u7684\u5b58\u50a8</p> <ul> <li>\u6bcf\u4e2a\u6c49\u5b57\u5360\u591a\u5c11\u5b57\u8282\u8981\u770b\u5177\u4f53\u7684\u7f16\u7801\u65b9\u5f0f\uff0c\u5982UTF-8\uff081-3\u5b57\u8282\uff09\u3001GB2312\uff082\u5b57\u8282\uff09\u3001GBK\uff082\u5b57\u8282\uff09\u3001GB18030\uff081\u30012\u30014\u5b57\u8282\uff09</li> </ul> </li> </ol>"},{"location":"Project/Backend%20server/Oracle/Type%20of%20data/#_3","title":"\u6570\u5b57\u7c7b\u578b","text":"<ul> <li>Oracle\u7528number\u7c7b\u578b\u6765\u5b58\u653e\u6570\u5b57\uff0c\u8be5\u7c7b\u578b\u80fd\u5b58\u50a8\u7cbe\u5ea6\u6700\u591a\u8fbe38\u4f4d\uff0c\u8fdc\u8fdc\u9ad8\u4e8e\u7f16\u7a0b\u8bed\u8a00\u4e2d\u5e38\u89c4\u7684long int\u548cdouble\u7c7b\u578b\u3002</li> <li>number( m,n )\uff0cm\u8868\u793a\u603b\u957f\u5ea6\uff0cn\u8868\u793a\u5c0f\u6570\u4f4d\u7684\u7cbe\u5ea6\uff0c\u5982\u679c\u5b58\u5165\u7684\u6570\u636e\u7684\u5c0f\u6570\u4f4d\u7684\u7cbe\u5ea6\u8d85\u8fc7\u4e86n\uff0c\u5219\u53d6\u56db\u820d\u4e94\u5165\u540e\u7684\u503c\u3002</li> <li>\u4f8b\u5982\uff1a<ul> <li>number(10,3)\uff0c10\u662f\u603b\u957f\u5ea6\uff0c3\u662f\u5c0f\u6570\u540e\u7684\u4f4d\u6570\uff0c\u5982123.456\u3002</li> <li>\u5982\u679c\u5b58\u5165123.4567\uff0c\u5b9e\u9645\u9645\u5c06\u662f123.457\u3002</li> <li>\u5982\u679c\u5b58\u516512345679.899\uff0c\u603b\u957f\u5ea6\u8d85\u51fa\u4e8610\uff0cOracle\u5c06\u63d0\u793a\u9519\u8bef\u3002</li> <li>\u5982\u679c\u6253\u7b97\u5b58\u5165\u6574\u6570\uff0c\u7528number(m)\u5c31\u53ef\u4ee5\u4e86\uff0cm\u8868\u793a\u53ef\u4ee5\u5b58\u5165\u6570\u636e\u7684\u6700\u5927\u4f4d\u6570\u3002</li> </ul> </li> </ul>"},{"location":"Project/Backend%20server/Oracle/Type%20of%20data/#_4","title":"\u65e5\u671f\u7c7b\u578b","text":"<ul> <li>Oracle\u91c7\u7528date\u7c7b\u578b\u8868\u793a\u65e5\u671f\u548c\u65f6\u95f4\uff0c\u8fd9\u662f\u4e00\u4e2a7\u5b57\u8282\u7684\u56fa\u5b9a\u5bbd\u5ea6\u7684\u6570\u636e\u7c7b\u578b\uff0c\u67097\u4e2a\u5c5e\u6027\uff0c\u5305\u62ec\uff1a\u4e16\u7eaa\u3001\u4e16\u7eaa\u4e2d\u54ea\u4e00\u5e74\u3001\u6708\u4efd\u3001\u6708\u4e2d\u7684\u54ea\u4e00\u5929\u3001\u5c0f\u65f6\u3001\u5206\u949f\u548c\u79d2</li> <li>\u5bf9\u7f16\u7a0b\u8bed\u8a00\u6765\u8bf4\uff0c\u65e5\u671f\u548c\u65f6\u95f4\u662f\u7528\u5b57\u7b26\u4e32\u6765\u663e\u793a\u548c\u4e66\u5199\u7684\uff0cOracle\u63d0\u4f9b\u4e86to_date\u548cto_char\u4e24\u4e2a\u51fd\u6570\u5728date\u7c7b\u578b\u548c\u5b57\u7b26\u4e32\u7c7b\u578b\u4e4b\u95f4\u8f6c\u6362</li> <li>\u4f8b\u5982\uff1a</li> </ul> <pre><code>insert into T_GIRL(name,birthday) values('\u897f\u65bd',to_date('2000-01-01 01:12:35','yyyy-mm-dd hh24:mi:ss'));\nselect name,to_char(birthday,'yyyy-mm-dd hh24:mi:ss') from T_GIRL where name='\u897f\u65bd';\n</code></pre>"},{"location":"Project/Backend%20server/Oracle/Type%20of%20data/#clobblob","title":"clob\u548cblob\u7c7b\u578b","text":"<ul> <li>clob\u7c7b\u578b\uff0c\u53d8\u957f\u7684\u5b57\u7b26\u4e32\u5927\u5bf9\u8c61\uff0c\u6700\u957f\u53ef\u8fbe4GB\uff0cclob\u53ef\u4ee5\u5b58\u50a8\u5355\u5b57\u8282\u5b57\u7b26\u4e32\u6216\u591a\u5b57\u8282\u5b57\u7b26\u4e32\u6570\u636e\uff0cclob\u88ab\u8ba4\u4e3a\u662f\u4e00\u4e2a\u66f4\u5927\u7684\u5b57\u7b26\u4e32\u3002\u5f53\u6570\u636e\u5e93\u7684\u5b57\u7b26\u96c6\u53d1\u751f\u8f6c\u6362\u65f6\uff0cclob\u7c7b\u578b\u4f1a\u53d7\u5230\u5f71\u54cd\u3002</li> <li>blob\u7c7b\u578b\uff0c\u53d8\u957f\u7684\u4e8c\u8fdb\u5236\u5927\u5bf9\u8c61\uff0c\u6700\u957f\u53ef\u8fbe4GB\uff0cblob\u4e3b\u8981\u7528\u4e8e\u4fdd\u5b58\u5e26\u683c\u5f0f\u7684\u975e\u7ed3\u6784\u5316\u6570\u636e\uff0c\u5982\u56fe\u7247\u3001\u97f3\u9891\u3001\u89c6\u9891\u3001Office\u6587\u6863\u7b49\u3002\u5f53\u6570\u636e\u5e93\u7684\u5b57\u7b26\u96c6\u53d1\u751f\u8f6c\u6362\u65f6\uff0cblob\u7c7b\u578b\u4e0d\u4f1a\u53d7\u5230\u5f71\u54cd\uff0cOracle\u6570\u636e\u5e93\u4e0d\u5173\u5fc3\u5b58\u653e\u7684\u662f\u4ec0\u4e48\u5185\u5bb9\u3002</li> </ul>"},{"location":"Project/Backend%20server/Oracle/Type%20of%20data/#rowid","title":"rowid\u7c7b\u578b","text":"<ul> <li>Oracle\u6570\u636e\u5e93\u4e2d\u6bcf\u4e2a\u8868\u7684\u6bcf\u884c\u8bb0\u5f55\u90fd\u6709\u4e00\u4e2a\u5b58\u50a8\u7684\u7269\u7406\u4f4d\u7f6e\uff0c\u5373\u8868\u7684rowid\u4f2a\u5217\uff0c\u91c7\u7528rowid\u4f5c\u4e3awhere\u6761\u4ef6\u7684\u8bbf\u95ee\u6548\u7387\u6700\u9ad8</li> <li>rowid\u7684\u8bbf\u95ee\u6548\u7387\u867d\u7136\u662f\u6700\u9ad8\u7684\uff0c\u4f46\u662f\uff0c\u5728\u5b9e\u9645\u5e94\u7528\u4e2d\u8981\u8c28\u614e\uff0c\u9700\u8981\u6ce8\u610f\u4e24\u4e2a\u95ee\u9898\uff1a<ul> <li>rowid\u5b58\u653e\u7684\u662f\u8868\u8bb0\u5f55\u7684\u7269\u7406\u4f4d\u7f6e\uff0c\u5728\u6570\u636e\u6574\u7406\u3001\u6570\u636e\u5907\u4efd\u548c\u8fc1\u79fb\u7684\u65f6\u5019\uff0c\u8bb0\u5f55\u7684\u7269\u7406\u4f4d\u7f6e\u4f1a\u53d1\u751f\u6539\u53d8</li> <li>rowid\u662fOracle\u6570\u636e\u5e93\u4e13\u6709\u7684\u6570\u636e\u7c7b\u578b\uff0c\u4e0e\u5176\u5b83\u7684\u6570\u636e\u5e93\u4e0d\u517c\u5bb9</li> </ul> </li> </ul>"},{"location":"Project/Backend%20server/Oracle/Type%20of%20data/#_5","title":"\u5176\u5b83\u6570\u636e\u7c7b\u578b","text":"<ul> <li>char\uff1a\u5b9a\u957f\u5b57\u7b26\u4e32\uff0c\u4f1a\u7528\u7a7a\u683c\u586b\u5145\u6765\u8fbe\u5230\u6700\u5927\u957f\u5ea6\u3002\u975enull\u7684char(10)\u5305\u542b10\u4e2a\u5b57\u8282\u4fe1\u606f\u3002char\u5b57\u6bb5\u6700\u591a\u53ef\u4ee5\u5b58\u50a82000\u4e2a\u5b57\u8282\u4fe1\u606f</li> <li>nchar\uff1a\u5305\u542bunicode\u683c\u5f0f\u6570\u636e\u7684\u5b9a\u957f\u5b57\u7b26\u4e32\u3002nchar\u5b57\u6bb5\u6700\u591a\u53ef\u5b58\u50a82000\u5b57\u8282\u7684\u4fe1\u606f</li> <li>varchar2\uff1a\u662fvarchar\u7684\u540c\u4e49\u8bcd\u3002\u8fd9\u662f\u4e00\u4e2a\u53d8\u957f\u5b57\u7b26\u4e32\uff0c\u4e0echar\u7c7b\u578b\u4e0d\u540c\uff0c\u5b83\u4e0d\u4f1a\u7528\u7a7a\u683c\u5c06\u5b57\u6bb5\u6216\u53d8\u91cf\u586b\u5145\u81f3\u6700\u5927\u957f\u5ea6\u3002varchar(10)\u53ef\u80fd\u5305\u542b0~10\u5b57\u8282\u7684\u4fe1\u606f\uff0c\u6700\u591a\u53ef\u5b58\u50a84000\u5b57\u8282\u4fe1\u606f\u3002\u4ece12c\u8d77\uff0c\u53ef\u4ee5\u5b58\u50a832767\u5b57\u8282\u4fe1\u606f\u3002</li> <li>nvarchar2\uff1a\u5305\u542bunicode\u683c\u5f0f\u6570\u636e\u7684\u53d8\u957f\u5b57\u7b26\u4e32\u3002\u6700\u591a\u53ef\u5b58\u50a84000\u5b57\u8282\u4fe1\u606f\u3002\u4ece12c\u8d77\uff0c\u53ef\u4ee5\u5b58\u50a832767\u5b57\u8282\u4fe1\u606f\u3002</li> <li>raw\uff1a\u4e00\u79cd\u53d8\u957f\u4e8c\u8fdb\u5236\u6570\u636e\u7c7b\u578b\uff0c\u91c7\u7528\u8fd9\u79cd\u6570\u636e\u7c7b\u578b\u5b58\u50a8\u7684\u6570\u636e\u4e0d\u4f1a\u53d1\u751f\u5b57\u7b26\u96c6\u8f6c\u6362\u3002</li> <li>number\uff1a\u80fd\u5b58\u50a8\u7cbe\u5ea6\u6700\u591a\u9ad8\u8fbe38\u4f4d\u7684\u6570\u5b57\u3002\u8fd9\u79cd\u7c7b\u578b\u7684\u6570\u636e\u4f1a\u4ee5\u53d8\u957f\u65b9\u5f0f\u6765\u5b58\u50a8\uff0c\u957f\u5ea6\u57280~22\u5b57\u8282\u3002</li> <li>binary_float\uff1a32\u4f4d\u5355\u7cbe\u5ea6\u6d6e\u70b9\u6570\uff0c\u53ef\u4ee5\u652f\u6301\u81f3\u5c116\u4f4d\u7cbe\u5ea6\uff0c\u5360\u7528\u78c1\u76d8\u4e0a5\u4e2a\u5b57\u8282\u7684\u5b58\u50a8\u7a7a\u95f4\u3002</li> <li>binary_double\uff1a64\u4f4d\u53cc\u7cbe\u5ea6\u6d6e\u70b9\u6570\uff0c\u53ef\u4ee5\u652f\u6301\u81f3\u5c1115\u4f4d\u7cbe\u5ea6\uff0c\u5360\u7528\u78c1\u76d8\u4e0a9\u4e2a\u5b57\u8282\u7684\u5b58\u50a8\u7a7a\u95f4\u3002</li> <li>long\uff1a\u8fd9\u79cd\u7c7b\u578b\u80fd\u5b58\u50a8\u6700\u591a2GB\u7684\u5b57\u7b26\u6570\u636e</li> <li>long raw\uff1along raw\u7c7b\u578b\u80fd\u5b58\u50a8\u591a\u8fbe2GB\u7684\u4e8c\u8fdb\u5236\u4fe1\u606f</li> <li>date\uff1a\u8fd9\u662f\u4e00\u4e2a7\u5b57\u8282\u7684\u5b9a\u5bbd\u65e5\u671f/\u65f6\u95f4\u6570\u636e\u7c7b\u578b\uff0c\u5176\u4e2d\u5305\u542b7\u4e2a\u5c5e\u6027\uff1a\u4e16\u7eaa\u3001\u4e16\u7eaa\u4e2d\u7684\u54ea\u4e00\u5e74\u3001\u6708\u4efd\u3001\u6708\u4e2d\u7684\u54ea\u4e00\u5929\u3001\u5c0f\u65f6\u3001\u5206\u949f\u3001\u79d2\u3002</li> <li>timestamp\uff1a\u8fd9\u662f\u4e00\u4e2a7\u5b57\u8282\u621611\u5b57\u8282\u7684\u5b9a\u5bbd\u65e5\u671f/\u65f6\u95f4\u6570\u636e\u7c7b\u578b\uff0c\u5b83\u5305\u542b\u5c0f\u6570\u79d2\u3002</li> <li>timestamp with time zone\uff1a\u8fd9\u662f\u4e00\u4e2a13\u5b57\u8282\u7684timestamp\uff0c\u63d0\u4f9b\u4e86\u65f6\u533a\u652f\u6301\u3002</li> <li>timestamp with local time zone\uff1a\u8fd9\u662f\u4e00\u4e2a7\u5b57\u8282\u621611\u5b57\u8282\u7684\u5b9a\u5bbd\u65e5\u671f/\u65f6\u95f4\u6570\u636e\u7c7b\u578b\uff0c\u5728\u6570\u636e\u7684\u63d2\u5165\u548c\u8bfb\u53d6\u65f6\u4f1a\u53d1\u751f\u65f6\u533a\u8f6c\u6362\u3002</li> <li>interval year to month\uff1a\u8fd9\u662f\u4e00\u4e2a5\u5b57\u8282\u7684\u5b9a\u5bbd\u6570\u636e\u7c7b\u578b\uff0c\u7528\u4e8e\u5b58\u50a8\u4e00\u4e2a\u65f6\u6bb5\u3002</li> <li>interval day to second\uff1a\u8fd9\u662f\u4e00\u4e2a11\u5b57\u8282\u7684\u5b9a\u5bbd\u6570\u636e\u7c7b\u578b\uff0c\u7528\u4e8e\u5b58\u50a8\u4e00\u4e2a\u65f6\u6bb5\u3002\u5c06\u65f6\u6bb5\u5b58\u50a8\u4e3a\u5929/\u5c0f\u65f6/\u5206\u949f/\u79d2\u6570\uff0c\u8fd8\u53ef\u4ee5\u67099\u4f4d\u5c0f\u6570\u79d2\u3002</li> <li>blob\uff1a\u8fd9\u79cd\u7c7b\u578b\u80fd\u591f\u5b58\u50a8\u6700\u591a4GB\u7684\u6570\u636e\u3002</li> <li>clob\uff1a\u8fd9\u79cd\u7c7b\u578b\u80fd\u591f\u5b58\u50a8\u6700\u591a4GB\u7684\u6570\u636e\u3002\u5f53\u5b57\u7b26\u96c6\u53d1\u751f\u8f6c\u6362\u65f6\uff0c\u8fd9\u79cd\u7c7b\u578b\u4f1a\u53d7\u5230\u5f71\u54cd\u3002</li> <li>nclob\uff1a\u8fd9\u79cd\u7c7b\u578b\u80fd\u591f\u5b58\u50a8\u6700\u591a4GB\u7684\u6570\u636e\u3002\u5f53\u5b57\u7b26\u96c6\u53d1\u751f\u8f6c\u6362\u65f6\uff0c\u8fd9\u79cd\u7c7b\u578b\u4f1a\u53d7\u5230\u5f71\u54cd\u3002</li> <li>bfile\uff1a\u8fd9\u79cd\u6570\u636e\u7c7b\u578b\u53ef\u4ee5\u5728\u6570\u636e\u5e93\u5217\u4e2d\u5b58\u50a8\u4e00\u4e2aoracle\u76ee\u5f55\u5bf9\u8c61\u548c\u4e00\u4e2a\u6587\u4ef6\u540d\uff0c\u6211\u4eec\u53ef\u4ee5\u901a\u8fc7\u5b83\u6765\u8bfb\u53d6\u8fd9\u4e2a\u6587\u4ef6\u3002</li> <li>rowid\uff1a\u5b9e\u9645\u4e0a\u662f\u6570\u636e\u5e93\u8868\u4e2d\u884c\u7684\u5730\u5740\uff0c\u5b83\u670910\u5b57\u8282\u957f\u3002</li> <li>urowid\uff1a\u662f\u4e00\u4e2a\u901a\u7528\u7684rowid\uff0c\u6ca1\u6709\u56fa\u5b9a\u7684rowid\u7684\u8868\u3002</li> </ul>"},{"location":"Project/Backend%20server/Process/Call%20executable%20program/","title":"Call executable program","text":""},{"location":"Project/Backend%20server/Process/Call%20executable%20program/#_1","title":"\u8c03\u7528\u53ef\u6267\u884c\u7a0b\u5e8f","text":"<ul> <li><code>Linux</code>\u63d0\u4f9b\u4e86<code>system()</code>\u51fd\u6570\u548c<code>exec</code>\u51fd\u6570\u65cf\uff0c\u5728<code>C++</code>\u7a0b\u5e8f\u4e2d\uff0c\u53ef\u4ee5\u6267\u884c\u5176\u5b83\u7684\u7a0b\u5e8f\uff08\u4e8c\u8fdb\u5236\u6587\u4ef6\u3001\u64cd\u4f5c\u7cfb\u7edf\u547d\u4ee4\u6216<code>Shell</code>\u811a\u672c\uff09</li> </ul>"},{"location":"Project/Backend%20server/Process/Call%20executable%20program/#system","title":"system()\u51fd\u6570","text":"<ul> <li> <p><code>system()</code>\u51fd\u6570\u63d0\u4f9b\u4e86\u4e00\u79cd\u7b80\u5355\u7684\u6267\u884c\u7a0b\u5e8f\u7684\u65b9\u6cd5\uff0c\u628a\u9700\u8981\u6267\u884c\u7684\u7a0b\u5e8f\u548c\u53c2\u6570\u7528\u4e00\u4e2a\u5b57\u7b26\u4e32\u4f20\u7ed9<code>system()</code>\u51fd\u6570\u5c31\u884c\u4e86</p> <ul> <li>\u51fd\u6570\u7684\u58f0\u660e\uff1a <code>int system(const char * string);</code></li> <li><code>system()</code>\u51fd\u6570\u7684\u8fd4\u56de\u503c<ul> <li>\u5982\u679c\u6267\u884c\u7684\u7a0b\u5e8f\u4e0d\u5b58\u5728\uff0c<code>system()</code>\u51fd\u6570\u8fd4\u56de\u975e<code>0</code>\uff1b</li> <li>\u5982\u679c\u6267\u884c\u7a0b\u5e8f\u6210\u529f\uff0c\u5e76\u4e14\u88ab\u6267\u884c\u7684\u7a0b\u5e8f\u7ec8\u6b62\u72b6\u6001\u662f0\uff0c<code>system()</code>\u51fd\u6570\u8fd4\u56de<code>0</code>\uff1b</li> <li>\u5982\u679c\u6267\u884c\u7a0b\u5e8f\u6210\u529f\uff0c\u5e76\u4e14\u88ab\u6267\u884c\u7684\u7a0b\u5e8f\u7ec8\u6b62\u72b6\u6001\u4e0d\u662f<code>0</code>\uff0c<code>system()</code>\u51fd\u6570\u8fd4\u56de\u975e<code>0</code>;</li> </ul> </li> </ul> <pre><code>#include &lt;unistd.h&gt;\n#include &lt;iostream&gt;\nusing namespace std;\n\nint main(int argc, char *argv[]) {\n    int ret = system(\"/bin/ls -l /tmp\");  \n    cout &lt;&lt; \"ret=\" &lt;&lt; ret &lt;&lt; endl;\n    perror(\"system\");\n}\n</code></pre> </li> </ul>"},{"location":"Project/Backend%20server/Process/Call%20executable%20program/#exec","title":"exec\u51fd\u6570\u65cf","text":"<ul> <li> <p><code>exec</code>\u51fd\u6570\u65cf\u63d0\u4f9b\u4e86\u53e6\u4e00\u79cd\u5728\u8fdb\u7a0b\u4e2d\u8c03\u7528\u7a0b\u5e8f\uff08\u4e8c\u8fdb\u5236\u6587\u4ef6\u6216<code>Shell</code>\u811a\u672c\uff09\u7684\u65b9\u6cd5</p> <ul> <li><code>exec</code>\u51fd\u6570\u65cf\u7684\u58f0\u660e\u5982\u4e0b\uff1a<ul> <li><code>int execl(const char *path, const char *arg, ...);</code></li> <li><code>int execlp(const char *file, const char *arg, ...);</code></li> <li><code>int execle(const char *path, const char *arg,...,char * const envp[]);</code></li> <li><code>int execv(const char *path, char *const argv[]);</code></li> <li><code>int execvp(const char *file, char *const argv[]);</code></li> <li><code>int execvpe(const char *file, char *const argv[],char *const envp[]);</code></li> </ul> </li> <li>\u6ce8\u610f\uff1a<ul> <li>\u5982\u679c\u6267\u884c\u7a0b\u5e8f\u5931\u8d25\u5219\u76f4\u63a5\u8fd4\u56de<code>-1</code>\uff0c\u5931\u8d25\u539f\u56e0\u5b58\u4e8e<code>errno</code>\u4e2d</li> <li>\u65b0\u8fdb\u7a0b\u7684\u8fdb\u7a0b\u7f16\u53f7\u4e0e\u539f\u8fdb\u7a0b\u76f8\u540c\uff0c\u4f46\u662f\uff0c\u65b0\u8fdb\u7a0b\u53d6\u4ee3\u4e86\u539f\u8fdb\u7a0b\u7684\u4ee3\u7801\u6bb5\u3001\u6570\u636e\u6bb5\u548c\u5806\u6808</li> <li>\u5982\u679c\u6267\u884c\u6210\u529f\u5219\u51fd\u6570\u4e0d\u4f1a\u8fd4\u56de\uff0c\u5f53\u5728\u4e3b\u7a0b\u5e8f\u4e2d\u6210\u529f\u8c03\u7528<code>exec</code>\u540e\uff0c\u88ab\u8c03\u7528\u7684\u7a0b\u5e8f\u5c06\u53d6\u4ee3\u8c03\u7528\u8005\u7a0b\u5e8f\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c<code>exec</code>\u51fd\u6570\u4e4b\u540e\u7684\u4ee3\u7801\u90fd\u4e0d\u4f1a\u88ab\u6267\u884c</li> <li>\u5728\u5b9e\u9645\u5f00\u53d1\u4e2d\uff0c\u6700\u5e38\u7528\u7684\u662f<code>execl()</code>\u548c<code>execv()</code>\uff0c\u5176\u5b83\u7684\u6781\u5c11\u4f7f\u7528</li> </ul> </li> <li> <p><code>execl()</code> \u51fd\u6570\u7684\u53c2\u6570\u89e3\u91ca\u5982\u4e0b\uff1a</p> <ul> <li> <p>\u7b2c\u4e00\u4e2a\u53c2\u6570\uff1a\u8981\u6267\u884c\u7684\u7a0b\u5e8f\u7684\u8def\u5f84\u3002\u8fd9\u4e2a\u53c2\u6570\u6307\u660e\u4e86\u53ef\u6267\u884c\u7a0b\u5e8f\u7684\u5b8c\u6574\u8def\u5f84</p> </li> <li> <p>\u7b2c\u4e8c\u4e2a\u53c2\u6570\uff1a\u7a0b\u5e8f\u7684\u540d\u79f0\u3002\u8fd9\u4e2a\u53c2\u6570\u662f\u4f20\u9012\u7ed9\u65b0\u7a0b\u5e8f\u7684 <code>argv[0]</code>\uff0c\u6309\u7167\u60ef\u4f8b\uff0c\u5b83\u5e94\u8be5\u662f\u7a0b\u5e8f\u7684\u540d\u79f0\uff0c\u4f46\u5b9e\u9645\u4e0a\u53ef\u4ee5\u662f\u4efb\u4f55\u5b57\u7b26\u4e32</p> </li> <li> <p>\u7b2c\u4e09\u4e2a\u53c2\u6570\u53ca\u4e4b\u540e\u7684\u53c2\u6570\uff1a\u8fd9\u4e9b\u53c2\u6570\u662f\u4f20\u9012\u7ed9\u65b0\u7a0b\u5e8f\u7684\u547d\u4ee4\u884c\u53c2\u6570\uff0c\u4e5f\u5c31\u662f <code>argv[1]\u3001argv[2]</code> \u7b49\u7b49\u3002\u8fd9\u4e9b\u53c2\u6570\u5fc5\u987b\u662f\u5b57\u7b26\u4e32\uff0c\u5e76\u4e14\u6bcf\u4e2a\u53c2\u6570\u90fd\u5fc5\u987b\u5355\u72ec\u4f20\u9012</p> </li> <li> <p>\u6700\u540e\u4e00\u4e2a\u53c2\u6570\uff1a\u5fc5\u987b\u662f\u4e00\u4e2a\u7a7a\u6307\u9488<code>0</code>\u6216 <code>NULL</code>\uff0c\u8868\u793a\u53c2\u6570\u5217\u8868\u7684\u7ed3\u675f</p> </li> </ul> </li> </ul> <pre><code>#include &lt;iostream&gt;\n#include &lt;string.h&gt;\n#include &lt;unistd.h&gt;\nusing namespace std;\n\nint main(int argc,char *argv[])\n{\n  int ret=execl(\"/bin/ls\",\"/bin/ls\",\"-lt\",\"/tmp\",0);  // \u6700\u540e\u4e00\u4e2a\u53c2\u65700\u4e0d\u80fd\u7701\u7565\u3002\n  cout &lt;&lt; \"ret=\" &lt;&lt; ret &lt;&lt; endl;\n  perror(\"execl\");\n\n  /*\n    char *args[10];\n    args[0]=(char *)\"/bin/ls\";\n    args[1]=(char *)\"-lt\";\n    args[2]=(char *)\"/tmp\";\n    args[3]=0;     // \u8fd9\u884c\u4ee3\u7801\u4e0d\u80fd\u7701\u7565\u3002\n\n    int ret=execv(\"/bin/ls\",args);\n    cout &lt;&lt; \"ret=\" &lt;&lt; ret &lt;&lt; endl;\n    perror(\"execv\");\n  */\n}\n</code></pre> </li> </ul>"},{"location":"Project/Backend%20server/Process/Circular%20queue/","title":"Circular queue signal","text":""},{"location":"Project/Backend%20server/Process/Circular%20queue/#_publich","title":"_public.h","text":"<pre><code>#ifndef __PUBLIC_HH\n#define __PUBLIC_HH 1\n\n#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;cstdlib&gt;\n#include &lt;cstring&gt;\n#include &lt;unistd.h&gt;\n#include &lt;sys/ipc.h&gt;\n#include &lt;sys/shm.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;sys/sem.h&gt;\nusing namespace std;\n\n// \u5faa\u73af\u961f\u5217\u3002\ntemplate &lt;class TT, int MaxLength&gt;\nclass squeue\n{\nprivate:\n  bool m_inited;              // \u961f\u5217\u88ab\u521d\u59cb\u5316\u6807\u5fd7\uff0ctrue-\u5df2\u521d\u59cb\u5316\uff1bfalse-\u672a\u521d\u59cb\u5316\u3002\n  TT   m_data[MaxLength];     // \u7528\u6570\u7ec4\u5b58\u50a8\u5faa\u73af\u961f\u5217\u4e2d\u7684\u5143\u7d20\u3002\n  int  m_head;                // \u961f\u5217\u7684\u5934\u6307\u9488\u3002\n  int  m_tail;                // \u961f\u5217\u7684\u5c3e\u6307\u9488\uff0c\u6307\u5411\u961f\u5c3e\u5143\u7d20\u3002\n  int  m_length;              // \u961f\u5217\u7684\u5b9e\u9645\u957f\u5ea6\u3002    \n  squeue(const squeue &amp;) = delete;             // \u7981\u7528\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u3002\n  squeue &amp;operator=(const squeue &amp;) = delete;  // \u7981\u7528\u8d4b\u503c\u51fd\u6570\u3002\npublic:\n\n  squeue() { init(); }  // \u6784\u9020\u51fd\u6570\u3002\n\n  // \u5faa\u73af\u961f\u5217\u7684\u521d\u59cb\u5316\u64cd\u4f5c\u3002\n  // \u6ce8\u610f\uff1a\u5982\u679c\u7528\u4e8e\u5171\u4eab\u5185\u5b58\u7684\u961f\u5217\uff0c\u4e0d\u4f1a\u8c03\u7528\u6784\u9020\u51fd\u6570\uff0c\u5fc5\u987b\u8c03\u7528\u6b64\u51fd\u6570\u521d\u59cb\u5316\u3002\n  void init()  \n  { \n    if (m_inited!=true)      // \u5faa\u73af\u961f\u5217\u7684\u521d\u59cb\u5316\u53ea\u80fd\u6267\u884c\u4e00\u6b21\u3002\n    { \n      m_head=0;              // \u5934\u6307\u9488\u3002\n      m_tail=MaxLength-1;    // \u4e3a\u4e86\u65b9\u4fbf\u5199\u4ee3\u7801\uff0c\u521d\u59cb\u5316\u65f6\uff0c\u5c3e\u6307\u9488\u6307\u5411\u961f\u5217\u7684\u6700\u540e\u4e00\u4e2a\u4f4d\u7f6e\u3002\n      m_length=0;            // \u961f\u5217\u7684\u5b9e\u9645\u957f\u5ea6\u3002\n      memset(m_data,0,sizeof(m_data));  // \u6570\u7ec4\u5143\u7d20\u6e05\u96f6\u3002\n      m_inited=true; \n    }\n  }\n\n  // \u5143\u7d20\u5165\u961f\uff0c\u8fd4\u56de\u503c\uff1afalse-\u5931\u8d25\uff1btrue-\u6210\u529f\u3002\n  bool push(const TT &amp;ee)\n  {\n    if (full() == true)\n    {\n      cout &lt;&lt; \"\u5faa\u73af\u961f\u5217\u5df2\u6ee1\uff0c\u5165\u961f\u5931\u8d25\u3002\\n\"; return false;\n    }\n\n    // \u5148\u79fb\u52a8\u961f\u5c3e\u6307\u9488\uff0c\u7136\u540e\u518d\u62f7\u8d1d\u6570\u636e\u3002\n    m_tail=(m_tail+1)%MaxLength;  // \u961f\u5c3e\u6307\u9488\u540e\u79fb\u3002\n    m_data[m_tail]=ee;\n    m_length++;    \n\n    return true;\n  }\n\n  // \u6c42\u5faa\u73af\u961f\u5217\u7684\u957f\u5ea6\uff0c\u8fd4\u56de\u503c\uff1a&gt;=0-\u961f\u5217\u4e2d\u5143\u7d20\u7684\u4e2a\u6570\u3002\n  int  size()                   \n  {\n    return m_length;    \n  }\n\n  // \u5224\u65ad\u5faa\u73af\u961f\u5217\u662f\u5426\u4e3a\u7a7a\uff0c\u8fd4\u56de\u503c\uff1atrue-\u7a7a\uff0cfalse-\u975e\u7a7a\u3002\n  bool empty()                    \n  {\n    if (m_length == 0) return true;    \n\n    return false;\n  }\n\n  // \u5224\u65ad\u5faa\u73af\u961f\u5217\u662f\u5426\u5df2\u6ee1\uff0c\u8fd4\u56de\u503c\uff1atrue-\u5df2\u6ee1\uff0cfalse-\u672a\u6ee1\u3002\n  bool full()\n  {\n    if (m_length == MaxLength) return true;    \n\n    return false;\n  }\n\n  // \u67e5\u770b\u961f\u5934\u5143\u7d20\u7684\u503c\uff0c\u5143\u7d20\u4e0d\u51fa\u961f\u3002\n  TT&amp; front()\n  {\n    return m_data[m_head];\n  }\n\n  // \u5143\u7d20\u51fa\u961f\uff0c\u8fd4\u56de\u503c\uff1afalse-\u5931\u8d25\uff1btrue-\u6210\u529f\u3002\n  bool pop()\n  {\n    if (empty() == true) return false;\n\n    m_head=(m_head+1)%MaxLength;  // \u961f\u5217\u5934\u6307\u9488\u540e\u79fb\u3002\n    m_length--;    \n\n    return true;\n  }\n\n  // \u663e\u793a\u5faa\u73af\u961f\u5217\u4e2d\u5168\u90e8\u7684\u5143\u7d20\u3002\n  // \u8fd9\u662f\u4e00\u4e2a\u4e34\u65f6\u7684\u7528\u4e8e\u8c03\u8bd5\u7684\u51fd\u6570\uff0c\u961f\u5217\u4e2d\u5143\u7d20\u7684\u6570\u636e\u7c7b\u578b\u652f\u6301cout\u8f93\u51fa\u624d\u53ef\u7528\u3002\n  void printqueue()                    \n  {\n    for (int ii = 0; ii &lt; size(); ii++)\n    {\n      cout &lt;&lt; \"m_data[\" &lt;&lt; (m_head+ii)%MaxLength &lt;&lt; \"],value=\" \\\n           &lt;&lt; m_data[(m_head+ii)%MaxLength] &lt;&lt; endl;\n    }\n  }\n};\n\n// \u4fe1\u53f7\u91cf\u3002\nclass csemp\n{\nprivate:\n  union semun  // \u7528\u4e8e\u4fe1\u53f7\u91cf\u64cd\u4f5c\u7684\u5171\u540c\u4f53\u3002\n  {\n    int val;\n    struct semid_ds *buf;\n    unsigned short  *arry;\n  };\n\n  int   m_semid;         // \u4fe1\u53f7\u91cfid\uff08\u63cf\u8ff0\u7b26\uff09\u3002\n\n  // \u5982\u679c\u628asem_flg\u8bbe\u7f6e\u4e3aSEM_UNDO\uff0c\u64cd\u4f5c\u7cfb\u7edf\u5c06\u8ddf\u8e2a\u8fdb\u7a0b\u5bf9\u4fe1\u53f7\u91cf\u7684\u4fee\u6539\u60c5\u51b5\uff0c\n  // \u5728\u5168\u90e8\u4fee\u6539\u8fc7\u4fe1\u53f7\u91cf\u7684\u8fdb\u7a0b\uff08\u6b63\u5e38\u6216\u5f02\u5e38\uff09\u7ec8\u6b62\u540e\uff0c\u64cd\u4f5c\u7cfb\u7edf\u5c06\u628a\u4fe1\u53f7\u91cf\u6062\u590d\u4e3a\u521d\u59cb\u503c\u3002\n  // \u5982\u679c\u4fe1\u53f7\u91cf\u7528\u4e8e\u4e92\u65a5\u9501\uff0c\u8bbe\u7f6e\u4e3aSEM_UNDO\u3002\n  // \u5982\u679c\u4fe1\u53f7\u91cf\u7528\u4e8e\u751f\u4ea7\u6d88\u8d39\u8005\u6a21\u578b\uff0c\u8bbe\u7f6e\u4e3a0\uff0c\u64cd\u4f5c\u7cfb\u7edf\u4e0d\u4f1a\u628a\u4fe1\u53f7\u91cf\u6062\u590d\u4e3a\u521d\u59cb\u503c\n  short m_sem_flg;\n\n  csemp(const csemp &amp;) = delete;             // \u7981\u7528\u62f7\u8d1d\u6784\u9020\u51fd\u6570\u3002\n  csemp &amp;operator=(const csemp &amp;) = delete;  // \u7981\u7528\u8d4b\u503c\u51fd\u6570\u3002\npublic:\n  csemp():m_semid(-1){}                     //\u6784\u9020\u51fd\u6570\u521d\u59cb\u5316\u4fe1\u53f7\u91cfid=-1,\u8868\u793a\u4fe1\u53f7\u91cf\u6ca1\u6709\u521d\u59cb\u5316\n  // \u5982\u679c\u4fe1\u53f7\u91cf\u5df2\u5b58\u5728\uff0c\u83b7\u53d6\u4fe1\u53f7\u91cf\uff1b\u5982\u679c\u4fe1\u53f7\u91cf\u4e0d\u5b58\u5728\uff0c\u5219\u521b\u5efa\u5b83\u5e76\u521d\u59cb\u5316\u4e3avalue\u3002\n  // \u5982\u679c\u7528\u4e8e\u4e92\u65a5\u9501\uff0cvalue\u586b1\uff0csem_flg\u586bSEM_UNDO\u3002\n  // \u5982\u679c\u7528\u4e8e\u751f\u4ea7\u6d88\u8d39\u8005\u6a21\u578b\uff0cvalue\u586b0\uff0csem_flg\u586b0\u3002\n  bool init(key_t key,unsigned short value=1,short sem_flg=SEM_UNDO);\n  bool wait(short value=-1);// \u4fe1\u53f7\u91cf\u7684P\u64cd\u4f5c\uff0c\u5982\u679c\u4fe1\u53f7\u91cf\u7684\u503c\u662f0\uff0c\u5c06\u963b\u585e\u7b49\u5f85\uff0c\u76f4\u5230\u4fe1\u53f7\u91cf\u7684\u503c\u5927\u4e8e0\u3002\n  bool post(short value=1); // \u4fe1\u53f7\u91cf\u7684V\u64cd\u4f5c\u3002\n  int  getvalue();           // \u83b7\u53d6\u4fe1\u53f7\u91cf\u7684\u503c\uff0c\u6210\u529f\u8fd4\u56de\u4fe1\u53f7\u91cf\u7684\u503c\uff0c\u5931\u8d25\u8fd4\u56de-1\u3002\n  bool destroy();            // \u9500\u6bc1\u4fe1\u53f7\u91cf\u3002\n ~csemp();\n};\n\n#endif\n</code></pre>"},{"location":"Project/Backend%20server/Process/Circular%20queue/#_publiccpp","title":"_public.cpp","text":"<pre><code>#include \"_public.h\"\n\n// \u5982\u679c\u4fe1\u53f7\u91cf\u5df2\u5b58\u5728\uff0c\u83b7\u53d6\u4fe1\u53f7\u91cf\uff1b\u5982\u679c\u4fe1\u53f7\u91cf\u4e0d\u5b58\u5728\uff0c\u5219\u521b\u5efa\u5b83\u5e76\u521d\u59cb\u5316\u4e3avalue\u3002\n// \u5982\u679c\u7528\u4e8e\u4e92\u65a5\u9501\uff0cvalue\u586b1\uff0csem_flg\u586bSEM_UNDO\u3002\n// \u5982\u679c\u7528\u4e8e\u751f\u4ea7\u6d88\u8d39\u8005\u6a21\u578b\uff0cvalue\u586b0\uff0csem_flg\u586b0\u3002\nbool csemp::init(key_t key, unsigned short value, short sem_flg) {\n  if (m_semid != -1) return false;  // \u5982\u679c\u5df2\u7ecf\u521d\u59cb\u5316\u4e86\uff0c\u4e0d\u5fc5\u518d\u6b21\u521d\u59cb\u5316\u3002\n\n  m_sem_flg = sem_flg;\n\n  // \u4fe1\u53f7\u91cf\u7684\u521d\u59cb\u5316\u4e0d\u80fd\u76f4\u63a5\u7528semget(key,1,0666|IPC_CREAT)\n  // \u56e0\u4e3a\u4fe1\u53f7\u91cf\u521b\u5efa\u540e\uff0c\u521d\u59cb\u503c\u662f0\uff0c\u5982\u679c\u7528\u4e8e\u4e92\u65a5\u9501\uff0c\u9700\u8981\u628a\u5b83\u7684\u521d\u59cb\u503c\u8bbe\u7f6e\u4e3a1\uff0c\n  // \u800c\u83b7\u53d6\u4fe1\u53f7\u91cf\u5219\u4e0d\u9700\u8981\u8bbe\u7f6e\u521d\u59cb\u503c\uff0c\u6240\u4ee5\uff0c\u521b\u5efa\u4fe1\u53f7\u91cf\u548c\u83b7\u53d6\u4fe1\u53f7\u91cf\u7684\u6d41\u7a0b\u4e0d\u540c\u3002\n\n  // \u4fe1\u53f7\u91cf\u7684\u521d\u59cb\u5316\u5206\u4e09\u4e2a\u6b65\u9aa4\uff1a\n  // 1\uff09\u83b7\u53d6\u4fe1\u53f7\u91cf\uff0c\u5982\u679c\u6210\u529f\uff0c\u51fd\u6570\u8fd4\u56de\u3002\n  // 2\uff09\u5982\u679c\u5931\u8d25\uff0c\u5219\u521b\u5efa\u4fe1\u53f7\u91cf\u3002\n  // 3) \u8bbe\u7f6e\u4fe1\u53f7\u91cf\u7684\u521d\u59cb\u503c\u3002\n\n  // \u83b7\u53d6\u4fe1\u53f7\u91cf\u3002\n  if ((m_semid = semget(key, 1, 0666)) == -1) {\n    // \u5982\u679c\u4fe1\u53f7\u91cf\u4e0d\u5b58\u5728\uff0c\u521b\u5efa\u5b83\u3002\n    if (errno == ENOENT) {\n      // \u7528IPC_EXCL\u6807\u5fd7\u786e\u4fdd\u53ea\u6709\u4e00\u4e2a\u8fdb\u7a0b\u521b\u5efa\u5e76\u521d\u59cb\u5316\u4fe1\u53f7\u91cf\uff0c\u5176\u5b83\u8fdb\u7a0b\u53ea\u80fd\u83b7\u53d6\u3002\n      if ((m_semid = semget(key, 1, 0666 | IPC_CREAT | IPC_EXCL)) == -1) {\n        if (errno == EEXIST)  // \u5982\u679c\u9519\u8bef\u4ee3\u7801\u662f\u4fe1\u53f7\u91cf\u5df2\u5b58\u5728\uff0c\u5219\u518d\u6b21\u83b7\u53d6\u4fe1\u53f7\u91cf\u3002\n        {\n          if ((m_semid = semget(key, 1, 0666)) == -1) {\n            perror(\"init 1 semget()\");\n            return false;\n          }\n          return true;\n        } else  // \u5982\u679c\u662f\u5176\u5b83\u9519\u8bef\uff0c\u8fd4\u56de\u5931\u8d25\u3002\n        {\n          perror(\"init 2 semget()\");\n          return false;\n        }\n      }\n\n      // \u4fe1\u53f7\u91cf\u521b\u5efa\u6210\u529f\u540e\uff0c\u8fd8\u9700\u8981\u628a\u5b83\u521d\u59cb\u5316\u6210value\u3002\n      union semun sem_union;\n      sem_union.val = value;  // \u8bbe\u7f6e\u4fe1\u53f7\u91cf\u7684\u521d\u59cb\u503c\u3002\n      if (semctl(m_semid, 0, SETVAL, sem_union) &lt; 0) {\n        perror(\"init semctl()\");\n        return false;\n      }\n    } else {\n      perror(\"init 3 semget()\");\n      return false;\n    }\n  }\n\n  return true;\n}\n\n// \u4fe1\u53f7\u91cf\u7684P\u64cd\u4f5c\uff08\u628a\u4fe1\u53f7\u91cf\u7684\u503c\u51cfvalue\uff09\uff0c\u5982\u679c\u4fe1\u53f7\u91cf\u7684\u503c\u662f0\uff0c\u5c06\u963b\u585e\u7b49\u5f85\uff0c\u76f4\u5230\u4fe1\u53f7\u91cf\u7684\u503c\u5927\u4e8e0\u3002\nbool csemp::wait(short value) {\n  if (m_semid == -1) return false;\n\n  struct sembuf sem_b;\n  sem_b.sem_num = 0;     // \u4fe1\u53f7\u91cf\u7f16\u53f7\uff0c0\u4ee3\u8868\u7b2c\u4e00\u4e2a\u4fe1\u53f7\u91cf\u3002\n  sem_b.sem_op = value;  // P\u64cd\u4f5c\u7684value\u5fc5\u987b\u5c0f\u4e8e0\u3002\n  sem_b.sem_flg = m_sem_flg;\n  if (semop(m_semid, &amp;sem_b, 1) == -1) {\n    perror(\"p semop()\");\n    return false;\n  }\n\n  return true;\n}\n\n// \u4fe1\u53f7\u91cf\u7684V\u64cd\u4f5c\uff08\u628a\u4fe1\u53f7\u91cf\u7684\u503c\u51cfvalue\uff09\u3002\nbool csemp::post(short value) {\n  if (m_semid == -1) return false;\n\n  struct sembuf sem_b;\n  sem_b.sem_num = 0;     // \u4fe1\u53f7\u91cf\u7f16\u53f7\uff0c0\u4ee3\u8868\u7b2c\u4e00\u4e2a\u4fe1\u53f7\u91cf\u3002\n  sem_b.sem_op = value;  // V\u64cd\u4f5c\u7684value\u5fc5\u987b\u5927\u4e8e0\u3002\n  sem_b.sem_flg = m_sem_flg;\n  if (semop(m_semid, &amp;sem_b, 1) == -1) {\n    perror(\"V semop()\");\n    return false;\n  }\n\n  return true;\n}\n\n// \u83b7\u53d6\u4fe1\u53f7\u91cf\u7684\u503c\uff0c\u6210\u529f\u8fd4\u56de\u4fe1\u53f7\u91cf\u7684\u503c\uff0c\u5931\u8d25\u8fd4\u56de-1\u3002\nint csemp::getvalue() { return semctl(m_semid, 0, GETVAL); }\n\n// \u9500\u6bc1\u4fe1\u53f7\u91cf\u3002\nbool csemp::destroy() {\n  if (m_semid == -1) return false;\n\n  if (semctl(m_semid, 0, IPC_RMID) == -1) {\n    perror(\"destroy semctl()\");\n    return false;\n  }\n\n  return true;\n}\n\ncsemp::~csemp() {}\n</code></pre>"},{"location":"Project/Backend%20server/Process/Circular%20queue/#-demo1","title":"\u5faa\u73af\u961f\u5217-demo1","text":"<pre><code>#include \"_public.h\"\n\nint main()\n{\n  using ElemType=int;\n\n  squeue&lt;ElemType,5&gt; QQ;\n\n  ElemType ee;      // \u521b\u5efa\u4e00\u4e2a\u6570\u636e\u5143\u7d20\u3002\n\n  cout &lt;&lt; \"\u5143\u7d20\uff081\u30012\u30013\uff09\u5165\u961f\u3002\\n\";\n  ee=1;  QQ.push(ee);\n  ee=2;  QQ.push(ee);\n  ee=3;  QQ.push(ee);\n\n  cout &lt;&lt; \"\u961f\u5217\u7684\u957f\u5ea6\u662f\" &lt;&lt; QQ.size() &lt;&lt; endl;\n  QQ.printqueue();\n\n  ee=QQ.front(); QQ.pop(); cout &lt;&lt; \"\u51fa\u961f\u7684\u5143\u7d20\u503c\u4e3a\" &lt;&lt; ee &lt;&lt; endl;\n  ee=QQ.front(); QQ.pop(); cout &lt;&lt; \"\u51fa\u961f\u7684\u5143\u7d20\u503c\u4e3a\" &lt;&lt; ee &lt;&lt; endl;\n\n  cout &lt;&lt; \"\u961f\u5217\u7684\u957f\u5ea6\u662f\" &lt;&lt; QQ.size() &lt;&lt; endl;\n  QQ.printqueue();\n\n  cout &lt;&lt; \"\u5143\u7d20\uff0811\u300112\u300113\u300114\u300115\uff09\u5165\u961f\u3002\\n\";\n  ee=11;  QQ.push(ee);\n  ee=12;  QQ.push(ee);\n  ee=13;  QQ.push(ee);\n  ee=14;  QQ.push(ee);\n  ee=15;  QQ.push(ee);\n\n  cout &lt;&lt; \"\u961f\u5217\u7684\u957f\u5ea6\u662f\" &lt;&lt; QQ.size() &lt;&lt; endl;\n  QQ.printqueue();\n}\n</code></pre>"},{"location":"Project/Backend%20server/Process/Circular%20queue/#-demo2","title":"\u5171\u4eab\u5185\u5b58\u5faa\u73af\u961f\u5217-demo2","text":"<pre><code>#include \"_public.h\"\n\nint main()\n{\n  using ElemType=int;\n\n  // \u521d\u59cb\u5316\u5171\u4eab\u5185\u5b58\u3002\n  int shmid=shmget(0x5005, sizeof(squeue&lt;ElemType,5&gt;), 0640|IPC_CREAT);\n  if ( shmid ==-1 )\n  {\n    cout &lt;&lt; \"shmget(0x5005) failed.\\n\"; return -1;\n  }\n\n  // \u628a\u5171\u4eab\u5185\u5b58\u8fde\u63a5\u5230\u5f53\u524d\u8fdb\u7a0b\u7684\u5730\u5740\u7a7a\u95f4\u3002\n  squeue&lt;ElemType,5&gt; *QQ=(squeue&lt;ElemType,5&gt; *)shmat(shmid,0,0);\n  if ( QQ==(void *)-1 )\n  {\n    cout &lt;&lt; \"shmat() failed\\n\"; return -1;\n  }\n\n  QQ-&gt;init();       // \u521d\u59cb\u5316\u5faa\u73af\u961f\u5217\u3002\n\n  ElemType ee;      // \u521b\u5efa\u4e00\u4e2a\u6570\u636e\u5143\u7d20\u3002\n\n  cout &lt;&lt; \"\u5143\u7d20\uff081\u30012\u30013\uff09\u5165\u961f\u3002\\n\";\n  ee=1;  QQ-&gt;push(ee);\n  ee=2;  QQ-&gt;push(ee);\n  ee=3;  QQ-&gt;push(ee);\n\n  cout &lt;&lt; \"\u961f\u5217\u7684\u957f\u5ea6\u662f\" &lt;&lt; QQ-&gt;size() &lt;&lt; endl;\n  QQ-&gt;printqueue();\n\n  ee=QQ-&gt;front(); QQ-&gt;pop(); cout &lt;&lt; \"\u51fa\u961f\u7684\u5143\u7d20\u503c\u4e3a\" &lt;&lt; ee &lt;&lt; endl;\n  ee=QQ-&gt;front(); QQ-&gt;pop(); cout &lt;&lt; \"\u51fa\u961f\u7684\u5143\u7d20\u503c\u4e3a\" &lt;&lt; ee &lt;&lt; endl;\n\n  cout &lt;&lt; \"\u961f\u5217\u7684\u957f\u5ea6\u662f\" &lt;&lt; QQ-&gt;size() &lt;&lt; endl;\n  QQ-&gt;printqueue();\n\n  cout &lt;&lt; \"\u5143\u7d20\uff0811\u300112\u300113\u300114\u300115\uff09\u5165\u961f\u3002\\n\";\n  ee=11;  QQ-&gt;push(ee);\n  ee=12;  QQ-&gt;push(ee);\n  ee=13;  QQ-&gt;push(ee);\n  ee=14;  QQ-&gt;push(ee);\n  ee=15;  QQ-&gt;push(ee);\n\n  cout &lt;&lt; \"\u961f\u5217\u7684\u957f\u5ea6\u662f\" &lt;&lt; QQ-&gt;size() &lt;&lt; endl;\n  QQ-&gt;printqueue();\n\n  shmdt(QQ);  // \u628a\u5171\u4eab\u5185\u5b58\u4ece\u5f53\u524d\u8fdb\u7a0b\u4e2d\u5206\u79bb\u3002\n}\n</code></pre>"},{"location":"Project/Backend%20server/Process/Circular%20queue/#_1","title":"\u4fe1\u53f7\u91cf","text":"<ul> <li>\u64cd\u4f5c\uff1a<ul> <li><code>P</code>\u64cd\u4f5c wait \u5c06\u4fe1\u53f7\u91cf\u7684\u503c\u51cf <code>1</code> \uff0c\u5982\u679c\u4fe1\u53f7\u91cf\u7684\u503c\u4e3a <code>0</code> \uff0c\u5c06\u963b\u585e\u7b49\u5f85 \uff0c\u76f4\u5230\u4fe1\u53f7\u91cf\u7684\u503c\u5927\u4e8e <code>0</code></li> <li><code>V</code>\u64cd\u4f5c post \u5c06\u4fe1\u53f7\u91cf\u7684\u503c\u52a0<code>1</code>\uff0c\u4efb\u4f55\u65f6\u5019\u90fd\u4e0d\u4f1a\u963b\u585e</li> <li>\u7528<code>ipcs -s</code>\u53ef\u4ee5\u67e5\u770b\u7cfb\u7edf\u7684\u4fe1\u53f7\u91cf<ul> <li>\u952e\u503c<code>\uff08key\uff09</code>\uff0c\u5171\u4eab\u5185\u5b58<code>id\uff08shmid\uff09</code>\uff0c\u62e5\u6709\u8005<code>\uff08owner\uff09</code>\uff0c\u6743\u9650<code>\uff08perms\uff09</code>\uff0c\u4fe1\u53f7\u91cf\u6570\u7ec4\u4e2d\u4fe1\u53f7\u91cf\u7684\u6570\u91cf<code>\uff08nsems\uff09</code></li> </ul> </li> <li>\u7528<code>ipcrm -sem id</code>\u53ef\u4ee5\u624b\u5de5\u5220\u9664\u4fe1\u53f7\u91cf</li> </ul> </li> <li>\u5e94\u7528\uff1a<ul> <li>\u5982\u679c\u7ea6\u5b9a\u4fe1\u53f7\u91cf\u7684\u53d6\u503c\u53ea\u662f <code>0</code> \u548c <code>1</code> \uff08<code>0</code>-\u8d44\u6e90\u4e0d\u53ef\u7528\uff1b<code>1</code>-\u8d44\u6e90\u53ef\u7528\uff09\uff0c\u53ef\u4ee5\u5b9e\u73b0\u4e92\u65a5\u9501</li> <li>\u5982\u679c\u7ea6\u5b9a\u4fe1\u53f7\u91cf\u7684\u53d6\u503c\u8868\u793a\u53ef\u7528\u8d44\u6e90\u7684\u6570\u91cf\uff0c\u53ef\u4ee5\u5b9e\u73b0\u751f\u4ea7<code>/</code>\u6d88\u8d39\u8005\u6a21\u578b</li> </ul> </li> </ul>"},{"location":"Project/Backend%20server/Process/Circular%20queue/#-demo3","title":"\u5171\u4eab\u5185\u5b58\u52a0\u9501-\u4fe1\u53f7\u91cf-demo3","text":"<pre><code>#include \"_public.h\"\n\nstruct stgirl     // \u8d85\u5973\u7ed3\u6784\u4f53\u3002\n{\n  int  no;        // \u7f16\u53f7\u3002\n  char name[51];  // \u59d3\u540d\uff0c\u6ce8\u610f\uff0c\u4e0d\u80fd\u7528string\u3002\n};\n\nint main(int argc,char *argv[])\n{\n  if (argc!=3) { cout &lt;&lt; \"Using:./demo no name\\n\"; return -1; }\n\n  // \u7b2c1\u6b65\uff1a\u521b\u5efa/\u83b7\u53d6\u5171\u4eab\u5185\u5b58\uff0c\u952e\u503ckey\u4e3a0x5005\uff0c\u4e5f\u53ef\u4ee5\u7528\u5176\u5b83\u7684\u503c\u3002\n  int shmid=shmget(0x5005, sizeof(stgirl), 0640|IPC_CREAT);\n  if ( shmid ==-1 )\n  { \n    cout &lt;&lt; \"shmget(0x5005) failed.\\n\"; return -1; \n  }\n\n  cout &lt;&lt; \"shmid=\" &lt;&lt; shmid &lt;&lt; endl;\n\n  // \u7b2c2\u6b65\uff1a\u628a\u5171\u4eab\u5185\u5b58\u8fde\u63a5\u5230\u5f53\u524d\u8fdb\u7a0b\u7684\u5730\u5740\u7a7a\u95f4\u3002\n  stgirl *ptr=(stgirl *)shmat(shmid,0,0);\n  if ( ptr==(void *)-1 )\n  { \n    cout &lt;&lt; \"shmat() failed\\n\"; return -1; \n  }\n\n  // \u521b\u5efa\u3001\u521d\u59cb\u5316\u4e8c\u5143\u4fe1\u53f7\u91cf\u3002\n  csemp mutex;\n  if (mutex.init(0x5005)==false)\n  {\n    cout &lt;&lt; \"mutex.init(0x5005) failed.\\n\"; return -1;\n  }\n\n  cout &lt;&lt; \"\u7533\u8bf7\u52a0\u9501...\\n\";\n  mutex.wait(); // \u7533\u8bf7\u52a0\u9501\u3002\n  cout &lt;&lt; \"\u7533\u8bf7\u52a0\u9501\u6210\u529f\u3002\\n\";\n\n  // \u7b2c3\u6b65\uff1a\u4f7f\u7528\u5171\u4eab\u5185\u5b58\uff0c\u5bf9\u5171\u4eab\u5185\u5b58\u8fdb\u884c\u8bfb/\u5199\u3002\n  cout &lt;&lt; \"\u539f\u503c\uff1ano=\" &lt;&lt; ptr-&gt;no &lt;&lt; \",name=\" &lt;&lt; ptr-&gt;name &lt;&lt; endl;  // \u663e\u793a\u5171\u4eab\u5185\u5b58\u4e2d\u7684\u539f\u503c\u3002\n  ptr-&gt;no=atoi(argv[1]);        // \u5bf9\u8d85\u5973\u7ed3\u6784\u4f53\u7684no\u6210\u5458\u8d4b\u503c\u3002\n  strcpy(ptr-&gt;name,argv[2]);    // \u5bf9\u8d85\u5973\u7ed3\u6784\u4f53\u7684name\u6210\u5458\u8d4b\u503c\u3002\n  cout &lt;&lt; \"\u65b0\u503c\uff1ano=\" &lt;&lt; ptr-&gt;no &lt;&lt; \",name=\" &lt;&lt; ptr-&gt;name &lt;&lt; endl;  // \u663e\u793a\u5171\u4eab\u5185\u5b58\u4e2d\u7684\u5f53\u524d\u503c\u3002\n  sleep(10);\n\n  mutex.post(); // \u89e3\u9501\u3002\n  cout &lt;&lt; \"\u89e3\u9501\u3002\\n\";\n\n  // \u67e5\u770b\u4fe1\u53f7\u91cf  \uff1aipcs -s    // \u5220\u9664\u4fe1\u53f7\u91cf  \uff1aipcrm sem \u4fe1\u53f7\u91cfid\n  // \u67e5\u770b\u5171\u4eab\u5185\u5b58\uff1aipcs -m    // \u5220\u9664\u5171\u4eab\u5185\u5b58\uff1aipcrm -m  \u5171\u4eab\u5185\u5b58id\n\n  // \u7b2c4\u6b65\uff1a\u628a\u5171\u4eab\u5185\u5b58\u4ece\u5f53\u524d\u8fdb\u7a0b\u4e2d\u5206\u79bb\u3002\n  shmdt(ptr);\n\n  // \u7b2c5\u6b65\uff1a\u5220\u9664\u5171\u4eab\u5185\u5b58\u3002\n  // if (shmctl(shmid,IPC_RMID,0)==-1)\n  // { \n  //  cout &lt;&lt; \"shmctl failed\\n\"; return -1; \n  // }\n}\n</code></pre>"},{"location":"Project/Backend%20server/Process/Circular%20queue/#-incache","title":"\u591a\u8fdb\u7a0b-\u751f\u6d88\u8005\u6a21\u578b-\u751f\u4ea7-incache","text":"<pre><code>#include \"_public.h\"\n\nint main()\n{\n  struct stgirl  // \u5faa\u73af\u961f\u5217\u7684\u6570\u636e\u5143\u7d20\u662f\u8d85\u5973\u7ed3\u6784\u4f53\u3002\n  {\n    int no;\n    char name[51];\n  };\n\n  using ElemType=stgirl;\n\n  // \u521d\u59cb\u5316\u5171\u4eab\u5185\u5b58\u3002\n  int shmid=shmget(0x5005, sizeof(squeue&lt;ElemType,5&gt;), 0640|IPC_CREAT);\n  if ( shmid ==-1 )\n  {\n    cout &lt;&lt; \"shmget(0x5005) failed.\\n\"; return -1;\n  }\n\n  // \u628a\u5171\u4eab\u5185\u5b58\u8fde\u63a5\u5230\u5f53\u524d\u8fdb\u7a0b\u7684\u5730\u5740\u7a7a\u95f4\u3002\n  squeue&lt;ElemType,5&gt; *QQ=(squeue&lt;ElemType,5&gt; *)shmat(shmid,0,0);\n  if ( QQ==(void *)-1 )\n  {\n    cout &lt;&lt; \"shmat() failed\\n\"; return -1;\n  }\n\n  QQ-&gt;init();       // \u521d\u59cb\u5316\u5faa\u73af\u961f\u5217\u3002\n\n  ElemType ee;      // \u521b\u5efa\u4e00\u4e2a\u6570\u636e\u5143\u7d20\u3002\n\n  csemp mutex; mutex.init(0x5001);     // \u7528\u4e8e\u7ed9\u5171\u4eab\u5185\u5b58\u52a0\u9501\u3002\n  csemp cond;  cond.init(0x5002,0,0);  // \u4fe1\u53f7\u91cf\u7684\u503c\u7528\u4e8e\u8868\u793a\u961f\u5217\u4e2d\u6570\u636e\u5143\u7d20\u7684\u4e2a\u6570\u3002\n\n  mutex.wait();  // \u52a0\u9501\u3002\n  // \u751f\u4ea73\u4e2a\u6570\u636e\u3002\n  ee.no=3; strcpy(ee.name,\"\u897f\u65bd\"); QQ-&gt;push(ee);\n  ee.no=7; strcpy(ee.name,\"\u51b0\u51b0\"); QQ-&gt;push(ee);\n  ee.no=8; strcpy(ee.name,\"\u5e42\u5e42\"); QQ-&gt;push(ee);\n  mutex.post();  // \u89e3\u9501\u3002\n  cond.post(3);  // \u5b9e\u53c2\u662f3\uff0c\u8868\u793a\u751f\u4ea7\u4e863\u4e2a\u6570\u636e\u3002\n\n  shmdt(QQ);  // \u628a\u5171\u4eab\u5185\u5b58\u4ece\u5f53\u524d\u8fdb\u7a0b\u4e2d\u5206\u79bb\u3002\n}\n</code></pre>"},{"location":"Project/Backend%20server/Process/Circular%20queue/#-outcache","title":"\u591a\u8fdb\u7a0b-\u751f\u6d88\u8005\u6a21\u578b-\u6d88\u8d39-outcache","text":"<pre><code>#include \"_public.h\"\n\nint main()\n{\n  struct stgirl  // \u5faa\u73af\u961f\u5217\u7684\u6570\u636e\u5143\u7d20\u662f\u8d85\u5973\u7ed3\u6784\u4f53\u3002\n  {\n    int no;\n    char name[51];\n  };\n\n  using ElemType=stgirl;\n\n  // \u521d\u59cb\u5316\u5171\u4eab\u5185\u5b58\u3002\n  int shmid=shmget(0x5005, sizeof(squeue&lt;ElemType,5&gt;), 0640|IPC_CREAT);\n  if ( shmid ==-1 )\n  {\n    cout &lt;&lt; \"shmget(0x5005) failed.\\n\"; return -1;\n  }\n\n  // \u628a\u5171\u4eab\u5185\u5b58\u8fde\u63a5\u5230\u5f53\u524d\u8fdb\u7a0b\u7684\u5730\u5740\u7a7a\u95f4\u3002\n  squeue&lt;ElemType,5&gt; *QQ=(squeue&lt;ElemType,5&gt; *)shmat(shmid,0,0);\n  if ( QQ==(void *)-1 )\n  {\n    cout &lt;&lt; \"shmat() failed\\n\"; return -1;\n  }\n\n  QQ-&gt;init();       // \u521d\u59cb\u5316\u5faa\u73af\u961f\u5217\u3002\n\n  ElemType ee;      // \u521b\u5efa\u4e00\u4e2a\u6570\u636e\u5143\u7d20\u3002\n\n  csemp mutex; mutex.init(0x5001);     // \u7528\u4e8e\u7ed9\u5171\u4eab\u5185\u5b58\u52a0\u9501\u3002\n  csemp cond;  cond.init(0x5002,0,0);  // \u4fe1\u53f7\u91cf\u7684\u503c\u7528\u4e8e\u8868\u793a\u961f\u5217\u4e2d\u6570\u636e\u5143\u7d20\u7684\u4e2a\u6570\u3002\n\n  while (true)\n  {\n    mutex.wait();  // \u52a0\u9501\u3002\n\n    while (QQ-&gt;empty())    // \u5982\u679c\u961f\u5217\u7a7a\uff0c\u8fdb\u5165\u5faa\u73af\uff0c\u5426\u5219\u76f4\u63a5\u5904\u7406\u6570\u636e\u3002\u5fc5\u987b\u7528\u5faa\u73af\uff0c\u4e0d\u80fd\u7528if\n    {\n      mutex.post();   // \u89e3\u9501\u3002\n      cond.wait();    // \u7b49\u5f85\u751f\u4ea7\u8005\u7684\u5524\u9192\u4fe1\u53f7\u3002\n      mutex.wait();   // \u52a0\u9501\u3002\n    }\n\n    // \u6570\u636e\u5143\u7d20\u51fa\u961f\u3002\n    ee = QQ-&gt;front();  QQ-&gt;pop();\n    mutex.post(); // \u89e3\u9501\u3002\n\n    // \u5904\u7406\u51fa\u961f\u7684\u6570\u636e\uff08\u628a\u6570\u636e\u6d88\u8d39\u6389\uff09\u3002\n    cout &lt;&lt; \"no=\" &lt;&lt; ee.no &lt;&lt; \",name=\" &lt;&lt; ee.name &lt;&lt; endl;\n    usleep(100);    // \u5047\u8bbe\u5904\u7406\u6570\u636e\u9700\u8981\u65f6\u95f4\uff0c\u65b9\u4fbf\u6f14\u793a\u3002\n  }\n\n  shmdt(QQ);\n}\n</code></pre>"},{"location":"Project/Backend%20server/Process/Circular%20queue/#makefile","title":"makefile","text":"<pre><code>all:demo1 demo2 demo3 incache outcache\n\ndemo1:demo1.cpp _public.h _public.cpp\n    g++ -g -o demo1 demo1.cpp _public.cpp\n\ndemo2:demo2.cpp _public.h _public.cpp\n    g++ -g -o demo2 demo2.cpp _public.cpp\n\ndemo3:demo3.cpp _public.h _public.cpp\n    g++ -g -o demo3 demo3.cpp _public.cpp\n\nincache:incache.cpp _public.h _public.cpp\n    g++ -g -o incache incache.cpp _public.cpp\n\noutcache:outcache.cpp _public.h _public.cpp\n    g++ -g -o outcache outcache.cpp _public.cpp\n\nclean:\n    rm -f demo1 demo2 demo3 incache outcache\n</code></pre>"},{"location":"Project/Backend%20server/Process/Create%20process/","title":"Create process","text":""},{"location":"Project/Backend%20server/Process/Create%20process/#linux012","title":"Linux\u76840\u30011\u548c2\u53f7\u8fdb\u7a0b","text":"<ul> <li>\u6574\u4e2a<code>linux</code>\u7cfb\u7edf\u5168\u90e8\u7684\u8fdb\u7a0b\u662f\u4e00\u4e2a\u6811\u5f62\u7ed3\u6784\u3002</li> <li><code>0</code>\u53f7\u8fdb\u7a0b\uff08\u7cfb\u7edf\u8fdb\u7a0b\uff09\u662f\u6240\u6709\u8fdb\u7a0b\u7684\u7956\u5148\uff0c\u5b83\u521b\u5efa\u4e86<code>1</code>\u53f7\u548c<code>2</code>\u53f7\u8fdb\u7a0b\u3002</li> <li><code>1</code>\u53f7\u8fdb\u7a0b\uff08<code>systemd\uff09</code>\u8d1f\u8d23\u6267\u884c\u5185\u6838\u7684\u521d\u59cb\u5316\u5de5\u4f5c\u548c\u8fdb\u884c\u7cfb\u7edf\u914d\u7f6e\u3002</li> <li><code>2</code>\u53f7\u8fdb\u7a0b<code>\uff08kthreadd\uff09</code>\u8d1f\u8d23\u6240\u6709\u5185\u6838\u7ebf\u7a0b\u7684\u8c03\u5ea6\u548c\u7ba1\u7406\u3002</li> <li>\u7528<code>pstree</code>\u547d\u4ee4\u53ef\u4ee5\u67e5\u770b\u8fdb\u7a0b\u6811<code>\uff08yum -y install psmisc\uff09</code></li> <li><code>pstree -p</code> \u8fdb\u7a0b\u7f16\u53f7</li> </ul>"},{"location":"Project/Backend%20server/Process/Create%20process/#_1","title":"\u8fdb\u7a0b\u6807\u8bc6","text":"<ul> <li>\u6bcf\u4e2a\u8fdb\u7a0b\u90fd\u6709\u4e00\u4e2a\u975e\u8d1f\u6574\u6570\u8868\u793a\u7684\u552f\u4e00\u7684\u8fdb\u7a0b<code>ID</code>\u3002\u867d\u7136\u662f\u552f\u4e00\u7684\uff0c\u4f46\u662f\u8fdb\u7a0bID\u53ef\u4ee5\u590d\u7528\u3002\u5f53\u4e00\u4e2a\u8fdb\u7a0b\u7ec8\u6b62\u540e\uff0c\u5176\u8fdb\u7a0b<code>ID</code>\u5c31\u6210\u4e86\u590d\u7528\u7684\u5019\u9009\u8005</li> <li><code>Linux</code>\u91c7\u7528\u5ef6\u8fdf\u590d\u7528\u7b97\u6cd5\uff0c\u8ba9\u65b0\u5efa\u8fdb\u7a0b\u7684<code>ID</code>\u4e0d\u540c\u4e8e\u6700\u8fd1\u7ec8\u6b62\u7684\u8fdb\u7a0b\u6240\u4f7f\u7528\u7684<code>ID</code>\u3002\u8fd9\u6837\u9632\u6b62\u4e86\u65b0\u8fdb\u7a0b\u88ab\u8bef\u8ba4\u4e3a\u662f\u4f7f\u7528\u4e86\u540c\u4e00ID\u7684\u67d0\u4e2a\u5df2\u7ec8\u6b62\u7684\u8fdb\u7a0b<ul> <li>pid_t getpid(void);     // \u83b7\u53d6\u5f53\u524d\u8fdb\u7a0b\u7684ID</li> <li>pid_t getppid(void);    // \u83b7\u53d6\u7236\u8fdb\u7a0b\u7684ID</li> </ul> </li> </ul>"},{"location":"Project/Backend%20server/Process/Create%20process/#fork","title":"fork()\u51fd\u6570","text":"<ul> <li>\u4e00\u4e2a\u73b0\u6709\u7684\u8fdb\u7a0b\u53ef\u4ee5\u8c03\u7528fork()\u51fd\u6570\u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u8fdb\u7a0b</li> <li><code>pid_t fork(void);</code></li> <li>\u7531<code>fork()</code>\u521b\u5efa\u7684\u65b0\u8fdb\u7a0b\u88ab\u79f0\u4e3a\u5b50\u8fdb\u7a0b\u3002\u5b50\u8fdb\u662f\u7236\u8fdb\u7a0b\u7684\u526f\u672c\uff0c\u7236\u8fdb\u7a0b\u548c\u5b50\u8fdb\u7a0b\u90fd\u4ece\u8c03\u7528<code>fork()</code>\u4e4b\u540e\u7684\u4ee3\u7801\u5f00\u59cb\u6267\u884c</li> <li><code>fork()</code>\u51fd\u6570\u88ab\u8c03\u7528\u4e00\u6b21\uff0c\u4f46\u8fd4\u56de\u4e24\u6b21\u3002\u4e24\u6b21\u8fd4\u56de\u7684\u533a\u522b\u662f\u5b50\u8fdb\u7a0b\u7684\u8fd4\u56de\u503c\u662f<code>0</code>\uff0c\u800c\u7236\u8fdb\u7a0b\u7684\u8fd4\u56de\u503c\u5219\u662f\u5b50\u8fdb\u7a0b\u7684\u8fdb\u7a0b<code>ID</code></li> <li> <p>\u5b50\u8fdb\u7a0b\u83b7\u5f97\u4e86\u7236\u8fdb\u7a0b\u6570\u636e\u7a7a\u95f4\u3001\u5806\u548c\u6808\u7684\u526f\u672c\uff08\u6ce8\u610f\uff1a\u5b50\u8fdb\u7a0b\u62e5\u6709\u7684\u662f\u526f\u672c\uff0c\u4e0d\u662f\u548c\u7236\u8fdb\u7a0b\u5171\u4eab\uff09</p> <ul> <li>\u5f53\u8c03\u7528fork()\u65f6\uff0c\u64cd\u4f5c\u7cfb\u7edf\u4f1a\u4e3a\u5b50\u8fdb\u7a0b\u5206\u914d\u4e00\u4e2a\u65b0\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\u5e76\u5c06\u7236\u8fdb\u7a0b\u7684\u5185\u5b58\u7a7a\u95f4\u590d\u5236\u5230\u5b50\u8fdb\u7a0b\u4e2d</li> <li>\u8fd9\u79cd\u590d\u5236\u662f\u901a\u8fc7\u201c\u5199\u65f6\u590d\u5236\u201d\uff08copy-on-write\uff09\u673a\u5236\u5b9e\u73b0\u7684\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u53ea\u6709\u5f53\u5b50\u8fdb\u7a0b\u8bd5\u56fe\u4fee\u6539\u8fd9\u4e9b\u6570\u636e\u65f6\uff0c\u624d\u4f1a\u771f\u6b63\u5730\u590d\u5236\u8fd9\u4e9b\u6570\u636e\u5230\u5b50\u8fdb\u7a0b\u7684\u72ec\u7acb\u7a7a\u95f4\u4e2d</li> <li>\u867d\u7136\u5b50\u8fdb\u7a0b\u83b7\u5f97\u4e86\u7236\u8fdb\u7a0b\u53d8\u91cfbh\u548cmessage\u7684\u526f\u672c\uff0c\u4f46\u662f\u5728\u6253\u5370\u8fd9\u4e9b\u53d8\u91cf\u7684\u5730\u5740\u4e4b\u524d\uff0c\u5b50\u8fdb\u7a0b\u5e76\u6ca1\u6709\u5bf9\u5b83\u4eec\u8fdb\u884c\u4fee\u6539\u3002\u56e0\u6b64\uff0c\u8fd9\u4e9b\u53d8\u91cf\u7684\u5730\u5740\u4ecd\u7136\u6307\u5411\u7236\u8fdb\u7a0b\u7684\u6570\u636e\u7a7a\u95f4\u3002</li> <li>\u53ea\u6709\u5f53\u5b50\u8fdb\u7a0b\u5bf9\u8fd9\u4e9b\u53d8\u91cf\u8fdb\u884c\u4fee\u6539\u65f6\uff0c\u5b83\u4eec\u7684\u5730\u5740\u624d\u4f1a\u53d8\u5f97\u4e0d\u540c\uff0c\u56e0\u4e3a\u8fd9\u65f6\u5019\u5b50\u8fdb\u7a0b\u4f1a\u5728\u81ea\u5df1\u7684\u6570\u636e\u7a7a\u95f4\u4e2d\u521b\u5efa\u8fd9\u4e9b\u53d8\u91cf\u7684\u526f\u672c</li> <li>\u8fd9\u610f\u5473\u7740\u7236\u8fdb\u7a0b\u548c\u5b50\u8fdb\u7a0b\u90fd\u6709\u76f8\u540c\u7684\u4ee3\u7801\u3001\u6570\u636e\u548c\u5806\u6808\uff0c\u4f46\u5b83\u4eec\u662f\u72ec\u7acb\u7684\u8fdb\u7a0b\uff0c\u62e5\u6709\u4e0d\u540c\u7684PID\u548c\u5185\u5b58\u5730\u5740\u7a7a\u95f4\u3002\u56e0\u6b64\uff0c\u5c3d\u7ba1\u5b83\u4eec\u6267\u884c\u76f8\u540c\u7684\u4ee3\u7801\uff0c\u4f46\u5b83\u4eec\u662f\u4e24\u4e2a\u4e0d\u540c\u7684\u8fdb\u7a0b\u5b9e\u4f8b</li> </ul> </li> <li> <p><code>fork()</code>\u4e4b\u540e\uff0c\u7236\u8fdb\u7a0b\u548c\u5b50\u8fdb\u7a0b\u7684\u6267\u884c\u987a\u5e8f\u662f\u4e0d\u786e\u5b9a\u7684</p> </li> </ul> <pre><code>#include &lt;iostream&gt;\n#include &lt;unistd.h&gt;\nusing namespace std;\n\nint main()\n{\n  int bh=8;\n  string message=\"\u6211\u662f\u4e00\u53ea\u50bb\u50bb\u9e1f\u3002\";\n\n  pid_t pid=fork();\n\n  if (pid&gt;0)\n  { // \u7236\u8fdb\u7a0b\u5c06\u6267\u884c\u8fd9\u6bb5\u4ee3\u7801\u3002\n    sleep(1);\n    cout &lt;&lt; \"\u7236\uff1apid=\" &lt;&lt; pid &lt;&lt; endl;\n    cout &lt;&lt; \"\u7236\uff1a\u4eb2\u7231\u7684\" &lt;&lt; bh &lt;&lt; \"\u53f7\uff1a\" &lt;&lt; message &lt;&lt; endl;\n  }\n  else\n  { // \u5b50\u8fdb\u7a0b\u5c06\u6267\u884c\u8fd9\u6bb5\u4ee3\u7801\u3002\n    bh=3; message=\"\u4f60\u662f\u4e00\u53ea\u50bb\u50bb\u9e1f\u3002\";\n    cout &lt;&lt; \"\u5b50\uff1apid=\" &lt;&lt; pid &lt;&lt; endl;\n    cout &lt;&lt; \"\u5b50\uff1a\u4eb2\u7231\u7684\" &lt;&lt; bh &lt;&lt; \"\u53f7\uff1a\" &lt;&lt; message &lt;&lt; endl;\n  }\n}\n</code></pre>"},{"location":"Project/Backend%20server/Process/Create%20process/#fork_1","title":"fork()\u4e24\u79cd\u7528\u6cd5","text":"<ol> <li>\u7236\u8fdb\u7a0b\u590d\u5236\u81ea\u5df1\uff0c\u7136\u540e\uff0c\u7236\u8fdb\u7a0b\u548c\u5b50\u8fdb\u7a0b\u5206\u522b\u6267\u884c\u4e0d\u540c\u7684\u4ee3\u7801\u3002\u8fd9\u79cd\u7528\u6cd5\u5728\u7f51\u7edc\u670d\u52a1\u7a0b\u5e8f\u4e2d\u5f88\u5e38\u89c1\uff0c\u7236\u8fdb\u7a0b\u7b49\u5f85\u5ba2\u6237\u7aef\u7684\u8fde\u63a5\u8bf7\u6c42\uff0c\u5f53\u8bf7\u6c42\u5230\u8fbe\u65f6\uff0c\u7236\u8fdb\u7a0b\u8c03\u7528<code>fork()</code>\uff0c\u8ba9\u5b50\u8fdb\u7a0b\u5904\u7406\u4e9b\u8bf7\u6c42\uff0c\u800c\u7236\u8fdb\u7a0b\u5219\u7ee7\u7eed\u7b49\u5f85\u4e0b\u4e00\u4e2a\u8fde\u63a5\u8bf7\u6c42\u3002</li> <li>\u8fdb\u7a0b\u8981\u6267\u884c\u53e6\u4e00\u4e2a\u7a0b\u5e8f\u3002\u8fd9\u79cd\u7528\u6cd5\u5728<code>Shell</code>\u4e2d\u5f88\u5e38\u89c1\uff0c\u5b50\u8fdb\u7a0b\u4ece<code>fork()</code>\u8fd4\u56de\u540e\u7acb\u5373\u8c03\u7528<code>exec</code>,<code>\uff08system()\u51fd\u6570\uff09</code></li> </ol> <pre><code>#include &lt;iostream&gt;\n#include &lt;unistd.h&gt;\nusing namespace std;\n\nint main()\n{\n  if (fork()&gt;0)\n  { // \u7236\u8fdb\u7a0b\u5c06\u6267\u884c\u8fd9\u6bb5\u4ee3\u7801\u3002\n    while (true)\n    {\n      sleep(1);\n      cout &lt;&lt; \"\u7236\u8fdb\u7a0b\u8fd0\u884c\u4e2d...\\n\";\n    }\n  }\n  else\n  { // \u5b50\u8fdb\u7a0b\u5c06\u6267\u884c\u8fd9\u6bb5\u4ee3\u7801\u3002\n    sleep(10);\n    cout &lt;&lt; \"\u5b50\u8fdb\u7a0b\u5f00\u59cb\u6267\u884c\u4efb\u52a1...\\n\";\n    execl(\"/bin/ls\",\"/bin/ls\",\"-lt\",\"/tmp\",0); //\u65b0\u8fdb\u7a0b\u53d6\u4ee3\u5b50\u8fdb\u7a0b\n    cout &lt;&lt; \"\u5b50\u8fdb\u7a0b\u6267\u884c\u4efb\u52a1\u7ed3\u675f\uff0c\u9000\u51fa\u3002\\n\";\n  }\n}\n</code></pre>"},{"location":"Project/Backend%20server/Process/Create%20process/#_2","title":"\u5171\u4eab\u6587\u4ef6","text":"<ul> <li><code>fork()</code>\u7684\u4e00\u4e2a\u7279\u6027\u662f\u5728\u7236\u8fdb\u7a0b\u4e2d\u6253\u5f00\u7684\u6587\u4ef6\u63cf\u8ff0\u7b26\u90fd\u4f1a\u88ab\u590d\u5236\u5230\u5b50\u8fdb\u7a0b\u4e2d\uff0c\u7236\u8fdb\u7a0b\u548c\u5b50\u8fdb\u7a0b\u5171\u4eab\u540c\u4e00\u4e2a\u6587\u4ef6\u504f\u79fb\u91cf</li> <li>\u5982\u679c\u7236\u8fdb\u7a0b\u548c\u5b50\u8fdb\u7a0b\u5199\u540c\u4e00\u63cf\u8ff0\u7b26\u6307\u5411\u7684\u6587\u4ef6\uff0c\u4f46\u53c8\u6ca1\u6709\u4efb\u4f55\u5f62\u5f0f\u7684\u540c\u6b65\uff0c\u90a3\u4e48\u5b83\u4eec\u7684\u8f93\u51fa\u53ef\u80fd\u4f1a\u76f8\u4e92\u6df7\u5408</li> </ul> <pre><code>#include &lt;unistd.h&gt;\n#include &lt;fstream&gt;\n#include &lt;iostream&gt;\nusing namespace std;\n\nint main() {\n  ofstream fout;\n  fout.open(\"/home/Linux/01/a.txt\");\n  fork();\n  for (int i = 0; i &lt; 100; i++)\n    fout &lt;&lt; \"\u8fdb\u7a0bID: \" &lt;&lt; getpid() &lt;&lt; \"\u5c0f\u5c0f\" &lt;&lt; i &lt;&lt; \"x\" &lt;&lt; endl;\n  fout.close();\n}\n</code></pre>"},{"location":"Project/Backend%20server/Process/Create%20process/#vfork","title":"vfork()\u51fd\u6570","text":"<ul> <li><code>vfork()</code>\u51fd\u6570\u7684\u8c03\u7528\u548c\u8fd4\u56de\u503c\u4e0e<code>fork()</code>\u76f8\u540c\uff0c\u4f46\u4e24\u8005\u7684\u8bed\u4e49\u4e0d\u540c\u3002</li> <li><code>vfork()</code>\u51fd\u6570\u7528\u4e8e\u521b\u5efa\u4e00\u4e2a\u65b0\u8fdb\u7a0b\uff0c\u800c\u8be5\u65b0\u8fdb\u7a0b\u7684\u76ee\u7684\u662f<code>exec</code>\u4e00\u4e2a\u65b0\u7a0b\u5e8f\uff0c\u5b83\u4e0d\u590d\u5236\u7236\u8fdb\u7a0b\u7684\u5730\u5740\u7a7a\u95f4\uff0c\u56e0\u4e3a\u5b50\u8fdb\u7a0b\u4f1a\u7acb\u5373\u8c03\u7528<code>exec</code>\uff0c\u4e8e\u662f\u4e5f\u5c31\u4e0d\u4f1a\u4f7f\u7528\u7236\u8fdb\u7a0b\u7684\u5730\u5740\u7a7a\u95f4\u3002\u5982\u679c\u5b50\u8fdb\u7a0b\u4f7f\u7528\u4e86\u7236\u8fdb\u7a0b\u7684\u5730\u5740\u7a7a\u95f4\uff0c\u53ef\u80fd\u4f1a\u5e26\u6765\u672a\u77e5\u7684\u7ed3\u679c</li> <li><code>vfork()</code>\u548c<code>fork()</code>\u7684\u53e6\u4e00\u4e2a\u533a\u522b\u662f\uff1a<code>vfork()</code>\u4fdd\u8bc1\u5b50\u8fdb\u7a0b\u5148\u8fd0\u884c\uff0c\u5728\u5b50\u8fdb\u7a0b\u8c03\u7528<code>exec</code>\u6216<code>exit()</code>\u4e4b\u540e\u7236\u8fdb\u7a0b\u624d\u6062\u590d\u8fd0\u884c</li> </ul>"},{"location":"Project/Backend%20server/Process/Multiple%20processes%20and%20signals/","title":"Multiple processes signals","text":""},{"location":"Project/Backend%20server/Process/Multiple%20processes%20and%20signals/#_1","title":"\u591a\u8fdb\u7a0b\u4e0e\u4fe1\u53f7","text":"<ul> <li>\u5728\u591a\u8fdb\u7a0b\u7684\u670d\u52a1\u7a0b\u5e8f\u4e2d\uff0c\u5982\u679c\u5b50\u8fdb\u7a0b\u6536\u5230\u9000\u51fa\u4fe1\u53f7\uff0c\u5b50\u8fdb\u7a0b\u81ea\u884c\u9000\u51fa\uff0c\u5982\u679c\u7236\u8fdb\u7a0b\u6536\u5230\u9000\u51fa\u4fe1\u53f7\uff0c\u5219\u5e94\u8be5\u5148\u5411\u5168\u90e8\u7684\u5b50\u8fdb\u7a0b\u53d1\u9001\u9000\u51fa\u4fe1\u53f7\uff0c\u7136\u540e\u81ea\u5df1\u518d\u9000\u51fa</li> </ul> <pre><code>#include &lt;iostream&gt;\n#include &lt;unistd.h&gt;\n#include &lt;signal.h&gt;\nusing  namespace std;\n\nvoid FathEXIT(int sig);  // \u7236\u8fdb\u7a0b\u7684\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u3002\nvoid ChldEXIT(int sig);  // \u5b50\u8fdb\u7a0b\u7684\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u3002\n\nint main()\n{\n  // \u5ffd\u7565\u5168\u90e8\u7684\u4fe1\u53f7\uff0c\u4e0d\u5e0c\u671b\u88ab\u6253\u6270\u3002\n  for (int ii=1;ii&lt;=64;ii++) signal(ii,SIG_IGN);\n\n  // \u8bbe\u7f6e\u4fe1\u53f7,\u5728shell\u72b6\u6001\u4e0b\u53ef\u7528 \"kill \u8fdb\u7a0b\u53f7\" \u6216 \"Ctrl+c\" \u6b63\u5e38\u7ec8\u6b62\u4e9b\u8fdb\u7a0b\n  // \u4f46\u8bf7\u4e0d\u8981\u7528 \"kill -9 +\u8fdb\u7a0b\u53f7\" \u5f3a\u884c\u7ec8\u6b62\n  signal(SIGTERM,FathEXIT); signal(SIGINT,FathEXIT);  // SIGTERM 15 SIGINT 2\n\n  while (true)\n  {\n    if (fork()&gt;0) // \u7236\u8fdb\u7a0b\u7684\u6d41\u7a0b\u3002\n    {\n      sleep(5); continue;\n    }\n    else          // \u5b50\u8fdb\u7a0b\u7684\u6d41\u7a0b\u3002\n    {\n      // \u5b50\u8fdb\u7a0b\u9700\u8981\u91cd\u65b0\u8bbe\u7f6e\u4fe1\u53f7\u3002\n      signal(SIGTERM,ChldEXIT);   // \u5b50\u8fdb\u7a0b\u7684\u9000\u51fa\u51fd\u6570\u4e0e\u7236\u8fdb\u7a0b\u4e0d\u4e00\u6837\u3002\n      signal(SIGINT ,SIG_IGN);    // \u5b50\u8fdb\u7a0b\u4e0d\u9700\u8981\u6355\u83b7SIGINT\u4fe1\u53f7\u3002\n\n      while (true)\n      {\n        cout &lt;&lt; \"\u5b50\u8fdb\u7a0b\" &lt;&lt; getpid() &lt;&lt; \"\u6b63\u5728\u8fd0\u884c\u4e2d\u3002\\n\"; sleep(3); continue;\n      }\n    }\n  }\n}\n\n// \u7236\u8fdb\u7a0b\u7684\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u3002\nvoid FathEXIT(int sig)\n{\n  // \u4ee5\u4e0b\u4ee3\u7801\u662f\u4e3a\u4e86\u9632\u6b62\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u5728\u6267\u884c\u7684\u8fc7\u7a0b\u4e2d\u518d\u6b21\u88ab\u4fe1\u53f7\u4e2d\u65ad\u3002\n  signal(SIGINT,SIG_IGN); signal(SIGTERM,SIG_IGN);\n\n  cout &lt;&lt; \"\u7236\u8fdb\u7a0b\u9000\u51fa\uff0csig=\" &lt;&lt; sig &lt;&lt; endl;\n\n  kill(0,SIGTERM);     // \u5411\u5168\u90e8\u7684\u5b50\u8fdb\u7a0b\u53d1\u900115\u7684\u4fe1\u53f7\uff0c\u901a\u77e5\u5b83\u4eec\u9000\u51fa\u3002\n\n  // \u5728\u8fd9\u91cc\u589e\u52a0\u91ca\u653e\u8d44\u6e90\u7684\u4ee3\u7801\uff08\u5168\u5c40\u7684\u8d44\u6e90\uff09\u3002\n\n  exit(0);\n}\n\n// \u5b50\u8fdb\u7a0b\u7684\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u3002\nvoid ChldEXIT(int sig)\n{\n  // \u4ee5\u4e0b\u4ee3\u7801\u662f\u4e3a\u4e86\u9632\u6b62\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u5728\u6267\u884c\u7684\u8fc7\u7a0b\u4e2d\u518d\u6b21\u88ab\u4fe1\u53f7\u4e2d\u65ad\u3002\n  signal(SIGINT,SIG_IGN); signal(SIGTERM,SIG_IGN);\n\n  cout &lt;&lt; \"\u5b50\u8fdb\u7a0b\" &lt;&lt; getpid() &lt;&lt; \"\u9000\u51fa\uff0csig=\" &lt;&lt; sig &lt;&lt; endl;\n\n  // \u5728\u8fd9\u91cc\u589e\u52a0\u91ca\u653e\u8d44\u6e90\u7684\u4ee3\u7801\uff08\u53ea\u91ca\u653e\u5b50\u8fdb\u7a0b\u7684\u8d44\u6e90\uff09\u3002\n\n  exit(0);\n}\n</code></pre>"},{"location":"Project/Backend%20server/Process/Shared%20memory/","title":"Shared memory","text":""},{"location":"Project/Backend%20server/Process/Shared%20memory/#_1","title":"\u5171\u4eab\u5185\u5b58","text":"<ul> <li>\u7ebf\u7a0b\u5171\u4eab\u8fdb\u7a0b\u7684\u5730\u5740\u7a7a\u95f4\uff0c\u5982\u679c\u591a\u4e2a\u7ebf\u7a0b\u9700\u8981\u8bbf\u95ee\u540c\u4e00\u5757\u5185\u5b58\uff0c\u7528\u5168\u5c40\u53d8\u91cf\u5c31\u53ef\u4ee5\u4e86</li> <li>\u5728\u591a\u8fdb\u7a0b\u4e2d\uff0c\u6bcf\u4e2a\u8fdb\u7a0b\u7684\u5730\u5740\u7a7a\u95f4\u662f\u72ec\u7acb\u7684\uff0c\u4e0d\u5171\u4eab\u7684\uff0c\u5982\u679c\u591a\u4e2a\u8fdb\u7a0b\u9700\u8981\u8bbf\u95ee\u540c\u4e00\u5757\u5185\u5b58\uff0c\u4e0d\u80fd\u7528\u5168\u5c40\u53d8\u91cf\uff0c\u53ea\u80fd\u7528\u5171\u4eab\u5185\u5b58</li> <li>\u5171\u4eab\u5185\u5b58\uff08Shared Memory\uff09\u5141\u8bb8\u591a\u4e2a\u8fdb\u7a0b\uff08\u4e0d\u8981\u6c42\u8fdb\u7a0b\u4e4b\u95f4\u6709\u8840\u7f18\u5173\u7cfb\uff09\u8bbf\u95ee\u540c\u4e00\u5757\u5185\u5b58\u7a7a\u95f4\uff0c\u662f\u591a\u4e2a\u8fdb\u7a0b\u4e4b\u95f4\u5171\u4eab\u548c\u4f20\u9012\u6570\u636e\u6700\u9ad8\u6548\u7684\u65b9\u5f0f\u3002\u8fdb\u7a0b\u53ef\u4ee5\u5c06\u5171\u4eab\u5185\u5b58\u8fde\u63a5\u5230\u5b83\u4eec\u81ea\u5df1\u7684\u5730\u5740\u7a7a\u95f4\u4e2d\uff0c\u5982\u679c\u67d0\u4e2a\u8fdb\u7a0b\u4fee\u6539\u4e86\u5171\u4eab\u5185\u5b58\u4e2d\u7684\u6570\u636e\uff0c\u5176\u5b83\u7684\u8fdb\u7a0b\u8bfb\u5230\u7684\u6570\u636e\u4e5f\u4f1a\u6539\u53d8</li> <li>\u5171\u4eab\u5185\u5b58\u6ca1\u6709\u63d0\u4f9b\u9501\u673a\u5236\uff0c\u4e5f\u5c31\u662f\u8bf4\uff0c\u5728\u67d0\u4e00\u4e2a\u8fdb\u7a0b\u5bf9\u5171\u4eab\u5185\u5b58\u8fdb\u884c\u8bfb/\u5199\u7684\u65f6\u5019\uff0c\u4e0d\u4f1a\u963b\u6b62\u5176\u5b83\u8fdb\u7a0b\u5bf9\u5b83\u7684\u8bfb/\u5199\u3002\u5982\u679c\u8981\u5bf9\u5171\u4eab\u5185\u5b58\u7684\u8bfb/\u5199\u52a0\u9501\uff0c\u53ef\u4ee5\u4f7f\u7528\u4fe1\u53f7\u91cf</li> <li>Linux\u4e2d\u63d0\u4f9b\u4e86\u4e00\u7ec4\u51fd\u6570\u7528\u4e8e\u64cd\u4f5c\u5171\u4eab\u5185\u5b58</li> </ul>"},{"location":"Project/Backend%20server/Process/Shared%20memory/#shmget","title":"shmget\u51fd\u6570","text":"<ul> <li>\u8be5\u51fd\u6570\u7528\u4e8e\u521b\u5efa/\u83b7\u53d6\u5171\u4eab\u5185\u5b58</li> <li><code>int shmget(key_t key, size_t size, int shmflg);</code><ul> <li><code>key</code>     \u5171\u4eab\u5185\u5b58\u7684\u952e\u503c\uff0c\u662f\u4e00\u4e2a\u6574\u6570<code>\uff08typedef unsigned int key_t\uff09</code>\uff0c\u4e00\u822c\u91c7\u7528\u5341\u516d\u8fdb\u5236\uff0c\u4f8b\u5982<code>0x5005</code>\uff0c\u4e0d\u540c\u5171\u4eab\u5185\u5b58\u7684<code>key</code>\u4e0d\u80fd\u76f8\u540c</li> <li><code>size</code>    \u5171\u4eab\u5185\u5b58\u7684\u5927\u5c0f\uff0c\u4ee5\u5b57\u8282\u4e3a\u5355\u4f4d</li> <li><code>shmflg</code>  \u5171\u4eab\u5185\u5b58\u7684\u8bbf\u95ee\u6743\u9650\uff0c\u4e0e\u6587\u4ef6\u7684\u6743\u9650\u4e00\u6837\uff0c\u4f8b\u5982<code>0666|IPC_CREAT</code>\uff0c<code>0666</code>\u8868\u793a\u5168\u90e8\u7528\u6237\u5bf9\u5b83\u53ef\u8bfb\u5199\uff0c<code>IPC_CREAT</code>\u8868\u793a\u5982\u679c\u5171\u4eab\u5185\u5b58\u4e0d\u5b58\u5728\uff0c\u5c31\u521b\u5efa\u5b83</li> <li>\u8fd4\u56de\u503c\uff1a\u6210\u529f\u8fd4\u56de\u5171\u4eab\u5185\u5b58\u7684<code>id</code>\uff08\u4e00\u4e2a\u975e\u8d1f\u7684\u6574\u6570\uff09\uff0c\u5931\u8d25\u8fd4\u56de<code>-1</code>\uff08\u7cfb\u7edf\u5185\u5b58\u4e0d\u8db3\u3001\u6ca1\u6709\u6743\u9650\uff09</li> <li>\u7528<code>ipcs -m</code>\u53ef\u4ee5\u67e5\u770b\u7cfb\u7edf\u7684\u5171\u4eab\u5185\u5b58\uff0c\u5305\u62ec\uff1a\u952e\u503c<code>\uff08key\uff09</code>\uff0c\u5171\u4eab\u5185\u5b58<code>id\uff08shmid\uff09</code>\uff0c\u62e5\u6709\u8005<code>\uff08owner\uff09</code>\uff0c\u6743\u9650<code>\uff08perms\uff09</code>\uff0c\u5927\u5c0f<code>\uff08bytes\uff09</code></li> <li>\u7528<code>ipcrm -m \u5171\u4eab\u5185\u5b58 id</code>\u53ef\u4ee5\u624b\u5de5\u5220\u9664\u5171\u4eab\u5185\u5b58</li> </ul> </li> </ul>"},{"location":"Project/Backend%20server/Process/Shared%20memory/#shmat","title":"shmat\u51fd\u6570","text":"<ul> <li>\u8be5\u51fd\u6570\u7528\u4e8e\u628a\u5171\u4eab\u5185\u5b58\u8fde\u63a5\u5230\u5f53\u524d\u8fdb\u7a0b\u7684\u5730\u5740\u7a7a\u95f4\u3002</li> <li><code>void *shmat(int shmid, const void *shmaddr, int shmflg);</code><ul> <li><code>shmid</code>       \u7531<code>shmget()</code>\u51fd\u6570\u8fd4\u56de\u7684\u5171\u4eab\u5185\u5b58\u6807\u8bc6</li> <li><code>shmaddr</code>     \u6307\u5b9a\u5171\u4eab\u5185\u5b58\u8fde\u63a5\u5230\u5f53\u524d\u8fdb\u7a0b\u4e2d\u7684\u5730\u5740\u4f4d\u7f6e\uff0c\u901a\u5e38\u586b0\uff0c\u8868\u793a\u8ba9\u7cfb\u7edf\u6765\u9009\u62e9\u5171\u4eab\u5185\u5b58\u7684\u5730\u5740</li> <li><code>shmflg</code>      \u6807\u5fd7\u4f4d\uff0c\u901a\u5e38\u586b0</li> <li>\u8c03\u7528\u6210\u529f\u65f6\u8fd4\u56de\u5171\u4eab\u5185\u5b58\u8d77\u59cb\u5730\u5740\uff0c\u5931\u8d25\u8fd4\u56de<code>(void*)-1</code></li> </ul> </li> </ul>"},{"location":"Project/Backend%20server/Process/Shared%20memory/#shmdt","title":"shmdt\u51fd\u6570","text":"<ul> <li>\u8be5\u51fd\u6570\u7528\u4e8e\u5c06\u5171\u4eab\u5185\u5b58\u4ece\u5f53\u524d\u8fdb\u7a0b\u4e2d\u5206\u79bb\uff0c\u76f8\u5f53\u4e8e<code>shmat()</code>\u51fd\u6570\u7684\u53cd\u64cd\u4f5c\u3002</li> <li><code>int shmdt(const void *shmaddr);</code><ul> <li><code>shmaddr</code> <code>shmat()</code>\u51fd\u6570\u8fd4\u56de\u7684\u5730\u5740</li> <li>\u8c03\u7528\u6210\u529f\u65f6\u8fd4\u56de<code>0</code>\uff0c\u5931\u8d25\u65f6\u8fd4\u56de<code>-1</code></li> </ul> </li> </ul>"},{"location":"Project/Backend%20server/Process/Shared%20memory/#shmctl","title":"shmctl\u51fd\u6570","text":"<ul> <li>\u8be5\u51fd\u6570\u7528\u4e8e\u64cd\u4f5c\u5171\u4eab\u5185\u5b58\uff0c\u6700\u5e38\u7528\u7684\u64cd\u4f5c\u662f\u5220\u9664\u5171\u4eab\u5185\u5b58\u3002</li> <li><code>int shmctl(int shmid, int command, struct shmid_ds *buf);</code><ul> <li><code>shmid</code> <code>shmget()</code>\u51fd\u6570\u8fd4\u56de\u7684\u5171\u4eab\u5185\u5b58<code>id</code></li> <li><code>command</code> \u64cd\u4f5c\u5171\u4eab\u5185\u5b58\u7684\u6307\u4ee4\uff0c\u5982\u679c\u8981\u5220\u9664\u5171\u4eab\u5185\u5b58\uff0c\u586b<code>IPC_RMID</code></li> <li><code>buf</code>         \u64cd\u4f5c\u5171\u4eab\u5185\u5b58\u7684\u6570\u636e\u7ed3\u6784\u7684\u5730\u5740\uff0c\u5982\u679c\u8981\u5220\u9664\u5171\u4eab\u5185\u5b58\uff0c\u586b<code>0</code></li> <li>\u8c03\u7528\u6210\u529f\u65f6\u8fd4\u56de<code>0</code>\uff0c\u5931\u8d25\u65f6\u8fd4\u56de<code>-1</code></li> <li>\u6ce8\u610f\uff0c\u7528<code>root</code>\u521b\u5efa\u7684\u5171\u4eab\u5185\u5b58\uff0c\u4e0d\u7ba1\u521b\u5efa\u7684\u6743\u9650\u662f\u4ec0\u4e48\uff0c\u666e\u901a\u7528\u6237\u65e0\u6cd5\u5220\u9664</li> </ul> </li> </ul> <pre><code>#include &lt;iostream&gt;\n#include &lt;cstdio&gt;\n#include &lt;cstdlib&gt;\n#include &lt;cstring&gt;\n#include &lt;unistd.h&gt;\n#include &lt;sys/ipc.h&gt;\n#include &lt;sys/shm.h&gt;\nusing  namespace std;\n\nstruct stgirl     // \u8d85\u5973\u7ed3\u6784\u4f53\u3002\n{\n  int  no;        // \u7f16\u53f7\u3002\n  char name[51];  // \u59d3\u540d\uff0c\u6ce8\u610f\uff0c\u4e0d\u80fd\u7528string\uff0c\u56e0\u4e3a\u5176\u4f1a\u52a8\u6001\u5728\u5806\u4e0a\u5206\u914d\u5185\u5b58\uff0c\u4e0d\u5c5e\u4e8e\u5171\u4eab\u5185\u5b58\u3002\n                  //string\u5bf9\u8c61\u5728\u52a8\u6001\u5206\u914d\u5185\u5b58\u65f6\uff0c\u5b83\u4f1a\u5728\u5806\u4e0a\u4e3a\u81ea\u5df1\u7684\u6570\u636e\u5206\u914d\u4e00\u5757\u5185\u5b58\u7a7a\u95f4\u3002\n                  //\u8fd9\u5757\u5185\u5b58\u7a7a\u95f4\u662f\u7531string\u5bf9\u8c61\u6240\u5c5e\u7684\u8fdb\u7a0b\u6216\u7ebf\u7a0b\u72ec\u5360\u7684\uff0c\u5e76\u4e0d\u662f\u5171\u4eab\u7684\u3002\u5176\u4ed6\u8fdb\u7a0b\u6216\u7ebf\u7a0b\u65e0\u6cd5\u76f4\u63a5\u8bbf\u95ee\u8fd9\u4e2astring\u5bf9\u8c61\u7684\u5185\u5b58\u7a7a\u95f4\uff0c\n};\n\nint main(int argc,char *argv[])\n{\n  // if (argc!=3) { cout &lt;&lt; \"Using:./demo no name\\n\"; return -1; }\n\n  // \u7b2c1\u6b65\uff1a\u521b\u5efa/\u83b7\u53d6\u5171\u4eab\u5185\u5b58\uff0c\u952e\u503ckey\u4e3a0x5005\uff0c\u4e5f\u53ef\u4ee5\u7528\u5176\u5b83\u7684\u503c\u3002\n  int shmid=shmget(0x5005, sizeof(stgirl), 0640|IPC_CREAT);\n  if ( shmid ==-1 )\n  {\n    cout &lt;&lt; \"shmget(0x5005) failed.\\n\"; return -1;\n  }\n\n  cout &lt;&lt; \"shmid=\" &lt;&lt; shmid &lt;&lt; endl;\n\n  // \u7b2c2\u6b65\uff1a\u628a\u5171\u4eab\u5185\u5b58\u8fde\u63a5\u5230\u5f53\u524d\u8fdb\u7a0b\u7684\u5730\u5740\u7a7a\u95f4\u3002\n  stgirl *ptr=(stgirl *)shmat(shmid,0,0);\n  if ( ptr==(void *)-1 )\n  {\n    cout &lt;&lt; \"shmat() failed\\n\"; return -1;\n  }\n\n  // // \u7b2c3\u6b65\uff1a\u4f7f\u7528\u5171\u4eab\u5185\u5b58\uff0c\u5bf9\u5171\u4eab\u5185\u5b58\u8fdb\u884c\u8bfb/\u5199\u3002\n  cout &lt;&lt; \"\u539f\u503c\uff1ano=\" &lt;&lt; ptr-&gt;no &lt;&lt; \",name=\" &lt;&lt; ptr-&gt;name &lt;&lt; endl;  // \u663e\u793a\u5171\u4eab\u5185\u5b58\u4e2d\u7684\u539f\u503c\u3002\n  ptr-&gt;no=atoi(argv[1]);        // \u5bf9\u8d85\u5973\u7ed3\u6784\u4f53\u7684no\u6210\u5458\u8d4b\u503c\u3002\n  strcpy(ptr-&gt;name,argv[2]);    // \u5bf9\u8d85\u5973\u7ed3\u6784\u4f53\u7684name\u6210\u5458\u8d4b\u503c\u3002\n  // ptr-&gt;name=argv[2];\n  cout &lt;&lt; \"\u65b0\u503c\uff1ano=\" &lt;&lt; ptr-&gt;no &lt;&lt; \",name=\" &lt;&lt; ptr-&gt;name &lt;&lt; endl;  // \u663e\u793a\u5171\u4eab\u5185\u5b58\u4e2d\u7684\u5f53\u524d\u503c\u3002\n\n  // // \u7b2c4\u6b65\uff1a\u628a\u5171\u4eab\u5185\u5b58\u4ece\u5f53\u524d\u8fdb\u7a0b\u4e2d\u5206\u79bb\u3002\n  shmdt(ptr);\n\n  // // \u7b2c5\u6b65\uff1a\u5220\u9664\u5171\u4eab\u5185\u5b58\u3002\n  if (shmctl(shmid,IPC_RMID,0)==-1)\n  {\n   cout &lt;&lt; \"shmctl failed\\n\"; return -1;\n  }\n}\n</code></pre>"},{"location":"Project/Backend%20server/Process/Signal/","title":"Signal","text":""},{"location":"Project/Backend%20server/Process/Signal/#_1","title":"\u4fe1\u53f7","text":"<ul> <li>\u4fe1\u53f7<code>\uff08signal\uff09</code>\u662f\u8f6f\u4ef6\u4e2d\u65ad\uff0c\u662f\u8fdb\u7a0b\u4e4b\u95f4\u76f8\u4e92\u4f20\u9012\u6d88\u606f\u7684\u4e00\u79cd\u65b9\u6cd5\uff0c\u7528\u4e8e\u901a\u77e5\u8fdb\u7a0b\u53d1\u751f\u4e86\u4e8b\u4ef6\uff0c\u4f46\u662f\uff0c\u4e0d\u80fd\u7ed9\u8fdb\u7a0b\u4f20\u9012\u4efb\u4f55\u6570\u636e<ul> <li>\u4fe1\u53f7\u4ea7\u751f\u7684\u539f\u56e0\u6709\u5f88\u591a\uff0c\u5728Shell\u4e2d\uff0c\u53ef\u4ee5\u7528kill\u548ckillall\u547d\u4ee4\u53d1\u9001\u4fe1\u53f7\uff1a<ul> <li><code>kill - \u4fe1\u53f7\u7684\u7c7b\u578b \u8fdb\u7a0b\u7f16\u53f7</code></li> <li><code>killall - \u4fe1\u53f7\u7684\u7c7b\u578b \u8fdb\u7a0b\u540d</code></li> </ul> </li> </ul> </li> </ul>"},{"location":"Project/Backend%20server/Process/Signal/#_2","title":"\u4fe1\u53f7\u7684\u7c7b\u578b","text":"\u4fe1\u53f7\u540d \u4fe1\u53f7\u503c \u9ed8\u8ba4\u5904\u7406\u52a8\u4f5c \u53d1\u51fa\u4fe1\u53f7\u7684\u539f\u56e0 SIGHUP 1 A \u7ec8\u7aef\u6302\u8d77\u6216\u8005\u63a7\u5236\u8fdb\u7a0b\u7ec8\u6b62 SIGINT 2 A \u952e\u76d8\u4e2d\u65ad Ctrl+c SIGQUIT 3 C \u952e\u76d8\u7684\u9000\u51fa\u952e\u88ab\u6309\u4e0b SIGILL 4 C \u975e\u6cd5\u6307\u4ee4 SIGABRT 6 C \u7531 abort(3) \u53d1\u51fa\u7684\u9000\u51fa\u6307\u4ee4 SIGFPE 8 C \u6d6e\u70b9\u5f02\u5e38 SIGKILL 9 AEF \u91c7\u7528 kill -9 \u8fdb\u7a0b\u7f16\u53f7 \u5f3a\u5236\u6740\u6b7b\u7a0b\u5e8f SIGSEGV 11 CEF \u65e0\u6548\u7684\u5185\u5b58\u5f15\u7528\uff08\u6570\u7ec4\u8d8a\u754c\u3001\u64cd\u4f5c\u7a7a\u6307\u9488\u548c\u91ce\u6307\u9488\u7b49\uff09 SIGPIPE 13 A \u7ba1\u9053\u7834\u88c2\uff0c\u5199\u4e00\u4e2a\u6ca1\u6709\u8bfb\u7aef\u53e3\u7684\u7ba1\u9053 SIGALRM 14 A \u7531\u95f9\u949f alarm() \u51fd\u6570\u53d1\u51fa\u7684\u4fe1\u53f7 SIGTERM 15 A \u91c7\u7528\u201ckill \u8fdb\u7a0b\u7f16\u53f7\u201d\u6216\u201ckillall \u7a0b\u5e8f\u540d\u201d\u901a\u77e5\u7a0b\u5e8f SIGUSR1 10 A \u7528\u6237\u81ea\u5b9a\u4e49\u4fe1\u53f7 1 SIGUSR2 12 A \u7528\u6237\u81ea\u5b9a\u4e49\u4fe1\u53f7 2 SIGCHLD 17 B \u5b50\u8fdb\u7a0b\u7ed3\u675f\u4fe1\u53f7 SIGCONT 18 - \u8fdb\u7a0b\u7ee7\u7eed\uff08\u66fe\u88ab\u505c\u6b62\u7684\u8fdb\u7a0b\uff09 SIGSTOP 19 DEF \u7ec8\u6b62\u8fdb\u7a0b SIGTSTP 20 D \u63a7\u5236\u7ec8\u7aef\uff08tty\uff09\u4e0a\u6309\u4e0b\u505c\u6b62\u952e SIGTTIN 21 D \u540e\u53f0\u8fdb\u7a0b\u4f01\u56fe\u4ece\u63a7\u5236\u7ec8\u7aef\u8bfb SIGTTOU 22 D \u540e\u53f0\u8fdb\u7a0b\u4f01\u56fe\u4ece\u63a7\u5236\u7ec8\u7aef\u5199 \u5176\u5b83 &lt;=64 A \u81ea\u5b9a\u4e49\u4fe1\u53f7 <ul> <li>\u5904\u7406\u52a8\u4f5c\u4e00\u9879\u4e2d\u7684\u5b57\u6bcd\u542b\u4e49\u5982\u4e0b\uff1a</li> </ul> \u5904\u7406\u52a8\u4f5c \u63cf\u8ff0 A \u7f3a\u7701\u7684\u52a8\u4f5c\u662f\u7ec8\u6b62\u8fdb\u7a0b B \u7f3a\u7701\u7684\u52a8\u4f5c\u662f\u5ffd\u7565\u6b64\u4fe1\u53f7\uff0c\u5c06\u8be5\u4fe1\u53f7\u4e22\u5f03\uff0c\u4e0d\u505a\u5904\u7406 C \u7f3a\u7701\u7684\u52a8\u4f5c\u662f\u7ec8\u6b62\u8fdb\u7a0b\u5e76\u8fdb\u884c\u5185\u6838\u6620\u50cf\u8f6c\u50a8\uff08core dump\uff09 D \u7f3a\u7701\u7684\u52a8\u4f5c\u662f\u505c\u6b62\u8fdb\u7a0b\uff0c\u8fdb\u5165\u505c\u6b62\u72b6\u6001\u7684\u7a0b\u5e8f\u8fd8\u80fd\u91cd\u65b0\u7ee7\u7eed\uff0c\u4e00\u822c\u662f\u5728\u8c03\u8bd5\u7684\u8fc7\u7a0b\u4e2d E \u4fe1\u53f7\u4e0d\u80fd\u88ab\u6355\u83b7 F \u4fe1\u53f7\u4e0d\u80fd\u88ab\u5ffd\u7565"},{"location":"Project/Backend%20server/Process/Signal/#_3","title":"\u4fe1\u53f7\u7684\u5904\u7406","text":"<ul> <li>\u8fdb\u7a0b\u5bf9\u4fe1\u53f7\u7684\u5904\u7406\u65b9\u6cd5\u6709\u4e09\u79cd\uff1a<ol> <li>\u5bf9\u8be5\u4fe1\u53f7\u7684\u5904\u7406\u91c7\u7528\u7cfb\u7edf\u7684\u9ed8\u8ba4\u64cd\u4f5c\uff0c\u5927\u90e8\u5206\u7684\u4fe1\u53f7\u7684\u9ed8\u8ba4\u64cd\u4f5c\u662f\u7ec8\u6b62\u8fdb\u7a0b</li> <li>\u8bbe\u7f6e\u4fe1\u53f7\u7684\u5904\u7406\u51fd\u6570\uff0c\u6536\u5230\u4fe1\u53f7\u540e\uff0c\u7531\u8be5\u51fd\u6570\u6765\u5904\u7406</li> <li>\u5ffd\u7565\u67d0\u4e2a\u4fe1\u53f7\uff0c\u5bf9\u8be5\u4fe1\u53f7\u4e0d\u505a\u4efb\u4f55\u5904\u7406\uff0c\u5c31\u50cf\u672a\u53d1\u751f\u8fc7\u4e00\u6837</li> </ol> </li> <li> <p>signal()\u51fd\u6570\u53ef\u4ee5\u8bbe\u7f6e\u7a0b\u5e8f\u5bf9\u4fe1\u53f7\u7684\u5904\u7406\u65b9\u5f0f</p> <ul> <li>\u51fd\u6570\u58f0\u660e\uff1a<code>sighandler_t signal(int signum, sighandler_t handler);</code></li> <li>\u53c2\u6570<code>signum</code>\u8868\u793a\u4fe1\u53f7\u7684\u7f16\u53f7\uff08\u4fe1\u53f7\u7684\u503c\uff09<ul> <li>\u53c2\u6570<code>handler</code>\u8868\u793a\u4fe1\u53f7\u7684\u5904\u7406\u65b9\u5f0f\uff0c\u6709\u4e09\u79cd\u60c5\u51b5\uff1a<ol> <li><code>SIG_DFL</code>\uff1a\u6062\u590d\u53c2\u6570<code>signum</code>\u4fe1\u53f7\u7684\u5904\u7406\u65b9\u6cd5\u4e3a\u9ed8\u8ba4\u884c\u4e3a</li> <li>\u4e00\u4e2a\u81ea\u5b9a\u4e49\u7684\u5904\u7406\u4fe1\u53f7\u7684\u51fd\u6570\uff0c\u51fd\u6570\u7684\u5f62\u53c2\u662f\u4fe1\u53f7\u7684\u7f16\u53f7</li> <li><code>SIG_IGN</code>\uff1a\u5ffd\u7565\u53c2\u6570<code>signum</code>\u6240\u6307\u7684\u4fe1\u53f7</li> </ol> </li> </ul> </li> </ul> <pre><code>#include&lt;iostream&gt;\n#include&lt;unistd.h&gt;\n#include&lt;signal.h&gt;\nusing namespace std;\n\nvoid func(int signum)\n{\n    cout&lt;&lt;\"\u6536\u5230\u4fe1\u53f7\uff1a\"&lt;&lt;signum&lt;&lt;endl;\n    signal(signum,SIG_DFL);  //\u6062\u590d\u4fe1\u53f7\u7684\u5904\u7406\u65b9\u6cd5\u4e3a\u9ed8\u8ba4\u884c\u4e3a\n}\nint main()\n{\n    signal(1,func);     //\u6ce8\u518c\u56de\u8c03\u51fd\u6570func()\uff0c\u6536\u5230\u4fe1\u53f7\u540e\uff0c\u56de\u8c03func()\u51fd\u6570\n    signal(15,func);    //\u56de\u8c03func()\u51fd\u6570\u7684\u65f6\u5019\uff0c\u628a\u4fe1\u53f7\u7684\u7f16\u53f7\u4f20\u7ed9func()\u51fd\u6570\n    signal(2,SIG_IGN);  //\u5ffd\u7565\u4fe1\u53f72\n    while(1)\n    {\n        cout&lt;&lt;\"\u6267\u884c\u4e86\u4e00\u6b21\u4efb\u52a1\"&lt;&lt;endl;\n        sleep(1);\n    }\n}\n</code></pre> </li> </ul>"},{"location":"Project/Backend%20server/Process/Signal/#_4","title":"\u4fe1\u53f7\u6709\u4ec0\u4e48\u7528","text":"<ul> <li>\u670d\u52a1\u7a0b\u5e8f\u8fd0\u884c\u5728\u540e\u53f0\uff0c\u5982\u679c\u60f3\u8ba9\u4e2d\u6b62\u5b83\uff0c\u6740\u6389\u4e0d\u662f\u4e2a\u597d\u529e\u6cd5\uff0c\u56e0\u4e3a\u8fdb\u7a0b\u88ab\u6740\u7684\u65f6\u5019\uff0c\u662f\u7a81\u7136\u6b7b\u4ea1\uff0c\u6ca1\u6709\u5b89\u6392\u5584\u540e\u5de5\u4f5c\u3002</li> <li>\u5982\u679c\u5411\u670d\u52a1\u7a0b\u5e8f\u53d1\u9001\u4e00\u4e2a\u4fe1\u53f7\uff0c\u670d\u52a1\u7a0b\u5e8f\u6536\u5230\u4fe1\u53f7\u540e\uff0c\u8c03\u7528\u4e00\u4e2a\u51fd\u6570\uff0c\u5728\u51fd\u6570\u4e2d\u7f16\u5199\u5584\u540e\u7684\u4ee3\u7801\uff0c\u7a0b\u5e8f\u5c31\u53ef\u4ee5\u6709\u8ba1\u5212\u7684\u9000\u51fa\u3002</li> <li>\u5982\u679c\u5411\u670d\u52a1\u7a0b\u5e8f\u53d1\u90010\u7684\u4fe1\u53f7\uff0c\u53ef\u4ee5\u68c0\u6d4b\u7a0b\u5e8f\u662f\u5426\u5b58\u6d3b  </li> <li> <p>\u793a\u4f8b</p> <pre><code>#include &lt;signal.h&gt;\n#include &lt;unistd.h&gt;\n\n#include &lt;iostream&gt;\nusing namespace std;\n\nvoid EXIT(int sig) {\ncout &lt;&lt; \"\u6536\u5230\u4e86\u4fe1\u53f7\uff1a\" &lt;&lt; sig &lt;&lt; endl;\ncout &lt;&lt; \"\u6b63\u5728\u91ca\u653e\u8d44\u6e90\uff0c\u7a0b\u5e8f\u5c06\u9000\u51fa......\\n\";\n\n// \u4ee5\u4e0b\u662f\u91ca\u653e\u8d44\u6e90\u7684\u4ee3\u7801\u3002\n\ncout &lt;&lt; \"\u7a0b\u5e8f\u9000\u51fa\u3002\\n\";\nexit(0);  // \u8fdb\u7a0b\u9000\u51fa\u3002\n}\n\nint main(int argc, char *argv[]) {\n// \u5ffd\u7565\u5168\u90e8\u7684\u4fe1\u53f7\uff0c\u9632\u6b62\u7a0b\u5e8f\u88ab\u4fe1\u53f7\u5f02\u5e38\u4e2d\u6b62\u3002\nfor (int ii = 1; ii &lt;= 64; ii++) signal(ii, SIG_IGN);\n\n// \u5982\u679c\u6536\u52302\u548c15\u7684\u4fe1\u53f7\uff08Ctrl+c\u548ckill\u3001killall\uff09\uff0c\u672c\u7a0b\u5e8f\u5c06\u4e3b\u52a8\u9000\u51fa\u3002\nsignal(2, EXIT);\nsignal(15, EXIT);\n\nwhile (true) {\n    cout &lt;&lt; \"\u6267\u884c\u4e86\u4e00\u6b21\u4efb\u52a1\u3002\\n\";\n    sleep(1);\n}\n}   \n</code></pre> </li> </ul>"},{"location":"Project/Backend%20server/Process/Signal/#_5","title":"\u53d1\u9001\u4fe1\u53f7","text":"<ul> <li><code>Linux</code>\u64cd\u4f5c\u7cfb\u7edf\u63d0\u4f9b\u4e86<code>kill</code>\u548c<code>killall</code>\u547d\u4ee4\u5411\u8fdb\u7a0b\u53d1\u9001\u4fe1\u53f7\uff0c\u5728\u7a0b\u5e8f\u4e2d\uff0c\u53ef\u4ee5\u7528<code>kill()</code>\u51fd\u6570\u5411\u5176\u5b83\u8fdb\u7a0b\u53d1\u9001\u4fe1\u53f7<ul> <li>\u51fd\u6570\u58f0\u660e\uff1a<code>int kill(pid_t pid, int sig);</code><ul> <li><code>kill()</code>\u51fd\u6570\u5c06\u53c2\u6570<code>sig</code>\u6307\u5b9a\u7684\u4fe1\u53f7\u7ed9\u53c2\u6570<code>pid</code> \u6307\u5b9a\u7684\u8fdb\u7a0b</li> <li>\u53c2\u6570<code>pid</code> \u6709\u51e0\u79cd\u60c5\u51b5\uff1a<ol> <li><code>pid&gt;0</code> \u5c06\u4fe1\u53f7\u4f20\u7ed9\u8fdb\u7a0b\u53f7\u4e3a<code>pid</code> \u7684\u8fdb\u7a0b</li> <li><code>pid=0</code> \u5c06\u4fe1\u53f7\u4f20\u7ed9\u548c\u5f53\u524d\u8fdb\u7a0b\u76f8\u540c\u8fdb\u7a0b\u7ec4\u7684\u6240\u6709\u8fdb\u7a0b\uff0c\u5e38\u7528\u4e8e\u7236\u8fdb\u7a0b\u7ed9\u5b50\u8fdb\u7a0b\u53d1\u9001\u4fe1\u53f7\uff0c\u6ce8\u610f\uff0c\u53d1\u9001\u4fe1\u53f7\u8005\u8fdb\u7a0b\u4e5f\u4f1a\u6536\u5230\u81ea\u5df1\u53d1\u51fa\u7684\u4fe1\u53f7</li> <li><code>pid=-1</code> \u5c06\u4fe1\u53f7\u5e7f\u64ad\u4f20\u9001\u7ed9\u7cfb\u7edf\u5185\u6240\u6709\u7684\u8fdb\u7a0b\uff0c\u4f8b\u5982\u7cfb\u7edf\u5173\u673a\u65f6\uff0c\u4f1a\u5411\u6240\u6709\u7684\u767b\u5f55\u7a97\u53e3\u5e7f\u64ad\u5173\u673a\u4fe1\u606f</li> </ol> </li> <li><code>sig</code>\uff1a\u51c6\u5907\u53d1\u9001\u7684\u4fe1\u53f7\u4ee3\u7801\uff0c\u5047\u5982\u5176\u503c\u4e3a<code>0</code>\u5219\u6ca1\u6709\u4efb\u4f55\u4fe1\u53f7\u9001\u51fa\uff0c\u4f46\u662f\u7cfb\u7edf\u4f1a\u6267\u884c\u9519\u8bef\u68c0\u67e5\uff0c\u901a\u5e38\u4f1a\u5229\u7528<code>sig</code>\u503c\u4e3a\u96f6\u6765\u68c0\u9a8c\u67d0\u4e2a\u8fdb\u7a0b\u662f\u5426\u4ecd\u5728\u8fd0\u884c<ul> <li>\u8fd4\u56de\u503c\u8bf4\u660e\uff1a \u6210\u529f\u6267\u884c\u65f6\uff0c\u8fd4\u56de<code>0</code>\uff1b\u5931\u8d25\u8fd4\u56de<code>-1</code>\uff0c<code>errno</code>\u88ab\u8bbe\u7f6e</li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"Project/Backend%20server/Process/Termination/","title":"Termination","text":""},{"location":"Project/Backend%20server/Process/Termination/#_1","title":"\u8fdb\u7a0b\u7ec8\u6b62","text":"<ul> <li> <p>8\u79cd\u65b9\u5f0f\u4e2d\u6b62\u8fdb\u7a0b</p> <ul> <li>5\u79cd\u6b63\u5e38\u7ec8\u6b62<ol> <li>\u5728<code>main()</code>\u51fd\u6570\u7528<code>return 0(10)</code>\u8fd4\u56de\uff1b</li> <li>\u5728\u4efb\u610f\u51fd\u6570\u4e2d\u8c03\u7528<code>exit(0/1)</code>\u51fd\u6570\uff1b  </li> <li>\u5728\u4efb\u610f\u51fd\u6570\u4e2d\u8c03\u7528<code>_exit()</code>\u6216<code>_Exit()</code>\u51fd\u6570\uff1b</li> <li>\u6700\u540e\u4e00\u4e2a\u7ebf\u7a0b\u4ece\u5176\u542f\u52a8\u4f8b\u7a0b\uff08\u7ebf\u7a0b\u4e3b\u51fd\u6570\uff09\u7528<code>return</code>\u8fd4\u56de\uff1b</li> <li>\u5728\u6700\u540e\u4e00\u4e2a\u7ebf\u7a0b\u4e2d\u8c03\u7528<code>pthread_exit()</code>\u8fd4\u56de\uff1b</li> </ol> </li> <li>3\u79cd\u5f02\u5e38\u7ec8\u6b62<ol> <li>\u8c03\u7528<code>abort()</code>\u51fd\u6570\u4e2d\u6b62\uff1b</li> <li>\u63a5\u6536\u5230\u4e00\u4e2a\u4fe1\u53f7\uff1bkill -9 ...,  \u5185\u5b58\u6cc4\u9732</li> <li>\u6700\u540e\u4e00\u4e2a\u7ebf\u7a0b\u5bf9\u53d6\u6d88\u8bf7\u6c42\u505a\u51fa\u54cd\u5e94;</li> </ol> </li> </ul> <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nvoid func2() {\ncout &lt;&lt; \"\u8fdb\u5165func2\u51fd\u6570\" &lt;&lt; endl;\n//exit(0);         //(\u7ec8\u6b62\u8fdb\u7a0b\uff0c\u4e0d\u4f1a\u56de\u5230man\u51fd\u6570\u4e2d)\nreturn;           //(\u4e00\u7ea7\u4e00\u7ea7\u8fd4\u56de\uff0c\u56de\u5230mian\u51fd\u6570\u4e2d)\n}\n\nvoid func1() {\ncout &lt;&lt; \"\u8fdb\u5165func1\u51fd\u6570\" &lt;&lt; endl;\nfunc2();\ncout &lt;&lt; \"\u56de\u5230\u4e86func1\u51fd\u6570\" &lt;&lt; endl;\n}\n\nint main() {\nfunc1();\ncout &lt;&lt; \"\u56de\u5230\u4e86main\u51fd\u6570\" &lt;&lt; endl;\n}\n</code></pre> </li> </ul>"},{"location":"Project/Backend%20server/Process/Termination/#_2","title":"\u8fdb\u7a0b\u7ec8\u6b62\u72b6\u6001","text":"<ul> <li>\u5728<code>main()</code>\u51fd\u6570\u4e2d\uff0c<code>return</code>\u7684\u8fd4\u56de\u503c\u5373\u7ec8\u6b62\u72b6\u6001\uff0c\u5982\u679c\u6ca1\u6709<code>return</code>\u8bed\u53e5\u6216\u8c03\u7528<code>exit()</code>\uff0c\u90a3\u4e48\u8be5\u8fdb\u7a0b\u7684\u7ec8\u6b62\u72b6\u6001\u662f0\u3002</li> <li>\u5728<code>Shell</code>\u4e2d\uff0c\u67e5\u770b\u8fdb\u7a0b\u7ec8\u6b62\u7684\u72b6\u6001\uff1aecho $?</li> <li>\u6b63\u5e38\u7ec8\u6b62\u8fdb\u7a0b\u76843\u4e2a\u51fd\u6570<code>exit()</code>\u548c<code>_Exit()</code>\u662f\u7531<code>ISO C</code>\u8bf4\u660e\u7684\uff0c<code>_exit()</code>\u662f\u7531<code>POSIX</code>\u8bf4\u660e\u7684\uff1a<ul> <li><code>void exit(int status);</code></li> <li><code>void _exit(int status);</code></li> <li><code>void _Exit(int status);</code></li> <li><code>status</code>\u4e5f\u662f\u8fdb\u7a0b\u7ec8\u6b62\u7684\u72b6\u6001</li> <li>\u5982\u679c\u8fdb\u7a0b\u88ab\u5f02\u5e38\u7ec8\u6b62\uff0c\u7ec8\u6b62\u72b6\u6001\u4e3a\u975e<code>0</code></li> </ul> </li> <li>\u4f5c\u7528\uff1a \u670d\u52a1\u7a0b\u5e8f\u7684\u8c03\u5ea6\u3001\u65e5\u5fd7\u548c\u76d1\u63a7</li> </ul>"},{"location":"Project/Backend%20server/Process/Termination/#_3","title":"\u8d44\u6e90\u91ca\u653e\u95ee\u9898","text":"<ul> <li><code>retun</code>\u8868\u793a\u51fd\u6570\u8fd4\u56de\uff0c\u4f1a\u8c03\u7528\u5c40\u90e8\u5bf9\u8c61\u7684\u6790\u6784\u51fd\u6570\uff0c<code>main()</code>\u51fd\u6570\u4e2d\u7684<code>return</code>\u8fd8\u4f1a\u8c03\u7528\u5168\u5c40\u5bf9\u8c61\u7684\u6790\u6784\u51fd\u6570</li> <li><code>exit()</code>\u8868\u793a\u7ec8\u6b62\u8fdb\u7a0b\uff0c\u4e0d\u4f1a\u8c03\u7528\u5c40\u90e8\u5bf9\u8c61\u7684\u6790\u6784\u51fd\u6570\uff0c\u53ea\u8c03\u7528\u5168\u5c40\u5bf9\u8c61\u7684\u6790\u6784\u51fd\u6570</li> <li><code>exit()</code>\u4f1a\u6267\u884c\u6e05\u7406\u5de5\u4f5c(\u4f8b\u5982\u628a\u7f13\u51b2\u533a\u7684\u6570\u636e\u5199\u5165\u78c1\u76d8\uff0c\u5173\u95ed\u6587\u4ef6\u7b49\u7b49)\uff0c\u7136\u540e\u9000\u51fa</li> <li><code>_exit()</code>\u548c<code>_Exit()</code>\u76f4\u63a5\u9000\u51fa\uff0c\u4e0d\u4f1a\u6267\u884c\u4efb\u4f55\u6e05\u7406\u5de5\u4f5c <pre><code>#include &lt;iostream&gt;\nusing namespace std;\n\nstruct AA {\n  string name;\n  AA(const string &amp;n) : name(n) {}\n  ~AA() { cout &lt;&lt; name &lt;&lt; \"\u8c03\u7528\u4e86\u6790\u6784\u51fd\u6570\" &lt;&lt; endl; }\n};\n\nAA a1(\"a1\");\nint main() {\n  AA a2(\"a2\");\n  // return 0;\n  exit(0);\n}\n</code></pre></li> </ul>"},{"location":"Project/Backend%20server/Process/Termination/#_4","title":"\u8fdb\u7a0b\u7684\u7ec8\u6b62\u51fd\u6570","text":"<ul> <li>\u8fdb\u7a0b\u53ef\u4ee5\u7528<code>atexit()</code>\u51fd\u6570\u767b\u8bb0\u7ec8\u6b62\u51fd\u6570\uff08\u6700\u591a32\u4e2a\uff09\uff0c\u8fd9\u4e9b\u51fd\u6570\u5c06\u7531<code>exit()</code>\u81ea\u52a8\u8c03\u7528\u3002</li> <li><code>int atexit(void (*function)(void));</code></li> <li><code>exit()</code>\u8c03\u7528\u7ec8\u6b62\u51fd\u6570\u7684\u987a\u5e8f\u4e0e\u767b\u8bb0\u65f6\u76f8\u53cd\u3002 \u8fdb\u7a0b\u9000\u51fa\u524d\u7684\u6536\u5c3e\u5de5\u4f5c   <pre><code>#include &lt;iostream&gt;\n\nusing namespace std;\n\nvoid func2() { cout &lt;&lt; \"\u8fdb\u5165func2\u51fd\u6570\" &lt;&lt; endl; }\n\nvoid func1() { cout &lt;&lt; \"\u8fdb\u5165func1\u51fd\u6570\" &lt;&lt; endl; }\n\nint main() {\n  atexit(func1);     //\u767b\u8bb0\u7b2c\u4e00\u4e2a\u8fdb\u7a0b\u7ec8\u6b62\u51fd\u6570\n  atexit(func2);     //\u767b\u8bb0\u7b2c\u4e8c\u4e2a\u8fdb\u7a0b\u7ec8\u6b62\u51fd\u6570\n  exit(1);\n}\n</code></pre></li> </ul>"},{"location":"Project/Backend%20server/Process/Zombie%20process/","title":"Zombie process","text":""},{"location":"Project/Backend%20server/Process/Zombie%20process/#_1","title":"\u50f5\u5c38\u8fdb\u7a0b","text":"<ul> <li>\u5982\u679c\u7236\u8fdb\u7a0b\u6bd4\u5b50\u8fdb\u7a0b\u5148\u9000\u51fa\uff0c\u5b50\u8fdb\u7a0b\u5c06\u88ab1\u53f7\u8fdb\u7a0b\u6258\u7ba1\uff08\u8fd9\u4e5f\u662f\u4e00\u79cd\u8ba9\u7a0b\u5e8f\u5728\u540e\u53f0\u8fd0\u884c\u7684\u65b9\u6cd5\uff09\u3002</li> <li>\u5982\u679c\u5b50\u8fdb\u7a0b\u6bd4\u7236\u8fdb\u7a0b\u5148\u9000\u51fa\uff0c\u800c\u7236\u8fdb\u7a0b\u6ca1\u6709\u5904\u7406\u5b50\u8fdb\u7a0b\u9000\u51fa\u7684\u4fe1\u606f\uff0c\u90a3\u4e48\uff0c\u5b50\u8fdb\u7a0b\u5c06\u6210\u4e3a\u50f5\u5c38\u8fdb\u7a0b\u3002     <pre><code>#include &lt;unistd.h&gt;\n#include &lt;iostream&gt;\nusing namespace std;\n\nint main() {\nif (fork() == 0) {\n    return 0;\n}\n\nwhile (1) {\n    cout &lt;&lt; \"hello\" &lt;&lt; endl;\n    sleep(1);\n }\n}\n</code></pre></li> <li>\u50f5\u5c38\u8fdb\u7a0b\u6709\u4ec0\u4e48\u5371\u5bb3\uff1f<ul> <li>\u5185\u6838\u4e3a\u6bcf\u4e2a\u5b50\u8fdb\u7a0b\u4fdd\u7559\u4e86\u4e00\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u5305\u62ec\u8fdb\u7a0b\u7f16\u53f7\u3001\u7ec8\u6b62\u72b6\u6001\u3001\u4f7f\u7528CPU\u65f6\u95f4\u7b49</li> <li>\u7236\u8fdb\u7a0b\u5982\u679c\u5904\u7406\u4e86\u5b50\u8fdb\u7a0b\u9000\u51fa\u7684\u4fe1\u606f\uff0c\u5185\u6838\u5c31\u4f1a\u91ca\u653e\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u7236\u8fdb\u7a0b\u5982\u679c\u6ca1\u6709\u5904\u7406\u5b50\u8fdb\u7a0b\u9000\u51fa\u7684\u4fe1\u606f\uff0c\u5185\u6838\u5c31\u4e0d\u4f1a\u91ca\u653e\u8fd9\u4e2a\u6570\u636e\u7ed3\u6784\uff0c\u5b50\u8fdb\u7a0b\u7684\u8fdb\u7a0b\u7f16\u53f7\u5c06\u4e00\u76f4\u88ab\u5360\u7528</li> <li>\u7cfb\u7edf\u53ef\u7528\u7684\u8fdb\u7a0b\u7f16\u53f7\u662f\u6709\u9650\u7684\uff0c\u5982\u679c\u4ea7\u751f\u4e86\u5927\u91cf\u7684\u50f5\u5c38\u8fdb\u7a0b\uff0c\u5c06\u56e0\u4e3a\u6ca1\u6709\u53ef\u7528\u7684\u8fdb\u7a0b\u7f16\u53f7\u800c\u5bfc\u81f4\u7cfb\u7edf\u4e0d\u80fd\u4ea7\u751f\u65b0\u7684\u8fdb\u7a0b</li> </ul> </li> </ul>"},{"location":"Project/Backend%20server/Process/Zombie%20process/#_2","title":"\u50f5\u5c38\u8fdb\u7a0b\u7684\u907f\u514d","text":"<ul> <li>\u5b50\u8fdb\u7a0b\u9000\u51fa\u7684\u65f6\u5019\uff0c\u5185\u6838\u4f1a\u5411\u7236\u8fdb\u7a0b\u53d1\u5934<code>SIGCHLD</code>\u4fe1\u53f7\uff0c\u5982\u679c\u7236\u8fdb\u7a0b\u7528<code>signal(SIGCHLD,SIG_IGN)</code>\u901a\u77e5\u5185\u6838\uff0c\u8868\u793a\u81ea\u5df1\u5bf9\u5b50\u8fdb\u7a0b\u7684\u9000\u51fa\u4e0d\u611f\u5174\u8da3\uff0c\u90a3\u4e48\u5b50\u8fdb\u7a0b\u9000\u51fa\u540e\u4f1a\u7acb\u5373\u91ca\u653e\u6570\u636e\u7ed3\u6784\uff0c\u4f46\u662f\u7236\u8fdb\u7a0b\u5f97\u4e0d\u5230\u5b50\u8fdb\u7a0b\u9000\u51fa\u7684\u4fe1\u606f     <pre><code>#include &lt;signal.h&gt;\n#include &lt;unistd.h&gt;\n#include &lt;iostream&gt;\nusing namespace std;\n\nint main() {\nsignal(SIGCHLD, SIG_IGN);  // \u5ffd\u7565\u5b50\u8fdb\u7a0b\u9000\u51fa\u7684\u4fe1\u53f7\nif (fork() == 0) {\n    return 0;\n}\n\nwhile (1) {\n    cout &lt;&lt; \"hello\" &lt;&lt; endl;\n    sleep(1);\n }\n}\n</code></pre></li> <li> <p>\u7236\u8fdb\u7a0b\u901a\u8fc7<code>wait()/waitpid()</code>\u7b49\u51fd\u6570\u7b49\u5f85\u5b50\u8fdb\u7a0b\u7ed3\u675f\uff0c\u5728\u5b50\u8fdb\u7a0b\u9000\u51fa\u4e4b\u524d\uff0c\u7236\u8fdb\u7a0b\u5c06\u88ab\u963b\u585e\u5f85</p> <ul> <li><code>pid_t wait(int *stat_loc);</code></li> <li><code>pid_t waitpid(pid_t pid, int *stat_loc, int options);</code></li> <li><code>pid_t wait3(int *status, int options, struct rusage *rusage);</code></li> <li><code>pid_t wait4(pid_t pid, int *status, int options, struct rusage *rusage);</code></li> <li>\u8fd4\u56de\u503c\u662f\u5b50\u8fdb\u7a0b\u7684\u7f16\u53f7</li> <li> <p><code>stat_loc</code>\u662f\u5b50\u8fdb\u7a0b\u7ec8\u6b62\u7684\u4fe1\u606f\uff1a</p> <ul> <li>\u5982\u679c\u662f\u6b63\u5e38\u7ec8\u6b62\uff0c\u5b8f<code>WIFEXITED(stat_loc)</code>\u8fd4\u56de\u771f\uff0c\u5b8f<code>WEXITSTATUS(stat_loc)</code>\u53ef\u83b7\u53d6\u7ec8\u6b62\u72b6\u6001\uff1b</li> <li>\u5982\u679c\u662f\u5f02\u5e38\u7ec8\u6b62\uff0c\u5b8f<code>WTERMSIG(stat_loc)</code>\u53ef\u83b7\u53d6\u7ec8\u6b62\u8fdb\u7a0b\u7684\u4fe1\u53f7</li> </ul> <pre><code>#include &lt;iostream&gt;\n#include &lt;unistd.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;sys/wait.h&gt;\nusing  namespace std;\n\nint main()\n{\nif (fork()&gt;0)\n{ // \u7236\u8fdb\u7a0b\u7684\u6d41\u7a0b\u3002\n    int sts;\n    pid_t pid=wait(&amp;sts);\n\n    cout &lt;&lt; \"\u5df2\u7ec8\u6b62\u7684\u5b50\u8fdb\u7a0b\u7f16\u53f7\u662f\uff1a\" &lt;&lt; pid &lt;&lt; endl;\n\n    if (WIFEXITED(sts)) { cout &lt;&lt; \"\u5b50\u8fdb\u7a0b\u662f\u6b63\u5e38\u9000\u51fa\u7684\uff0c\u9000\u51fa\u72b6\u6001\u662f\uff1a\" &lt;&lt; WEXITSTATUS(sts) &lt;&lt; endl; }\n    else { cout &lt;&lt; \"\u5b50\u8fdb\u7a0b\u662f\u5f02\u5e38\u9000\u51fa\u7684\uff0c\u7ec8\u6b62\u5b83\u7684\u4fe1\u53f7\u662f\uff1a\" &lt;&lt; WTERMSIG(sts) &lt;&lt; endl; }\n}\nelse\n{ // \u5b50\u8fdb\u7a0b\u7684\u6d41\u7a0b\u3002\n    //sleep(100);\n    int *p=0; *p=10;\n    exit(1);\n }\n}\n</code></pre> </li> <li> <p>\u5982\u679c\u7236\u8fdb\u7a0b\u5f88\u5fd9\uff0c\u53ef\u4ee5\u6355\u83b7<code>SIGCHLD</code>\u4fe1\u53f7\uff0c\u5728\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u4e2d\u8c03\u7528<code>wait()/waitpid()</code></p> <pre><code>#include &lt;iostream&gt;\n#include &lt;unistd.h&gt;\n#include &lt;sys/types.h&gt;\n#include &lt;sys/wait.h&gt;\nusing  namespace std;\n\nvoid func(int sig)   // \u5b50\u8fdb\u7a0b\u9000\u51fa\u7684\u4fe1\u53f7\u5904\u7406\u51fd\u6570\u3002\n{\n  int sts;\n  pid_t pid=wait(&amp;sts);\n\n  cout &lt;&lt; \"\u5df2\u7ec8\u6b62\u7684\u5b50\u8fdb\u7a0b\u7f16\u53f7\u662f\uff1a\" &lt;&lt; pid &lt;&lt; endl;\n\n  if (WIFEXITED(sts)) { cout &lt;&lt; \"\u5b50\u8fdb\u7a0b\u662f\u6b63\u5e38\u9000\u51fa\u7684\uff0c\u9000\u51fa\u72b6\u6001\u662f\uff1a\" &lt;&lt; WEXITSTATUS(sts) &lt;&lt; endl; }\n  else { cout &lt;&lt; \"\u5b50\u8fdb\u7a0b\u662f\u5f02\u5e38\u9000\u51fa\u7684\uff0c\u7ec8\u6b62\u5b83\u7684\u4fe1\u53f7\u662f\uff1a\" &lt;&lt; WTERMSIG(sts) &lt;&lt; endl; }\n}\n\nint main()\n{\n  signal(SIGCHLD,func);  // \u6355\u83b7\u5b50\u8fdb\u7a0b\u9000\u51fa\u7684\u4fe1\u53f7\u3002\n\n  if (fork()&gt;0)\n  { // \u7236\u8fdb\u7a0b\u7684\u6d41\u7a0b\u3002\n    while (true)\n    {\n      cout &lt;&lt; \"\u7236\u8fdb\u7a0b\u5fd9\u7740\u6267\u884c\u4efb\u52a1\u3002\\n\";\n      sleep(1);\n    }\n  }\n  else\n  { // \u5b50\u8fdb\u7a0b\u7684\u6d41\u7a0b\u3002\n    sleep(5);\n    // int *p=0; *p=10;\n    exit(1);\n  }\n}\n</code></pre> </li> </ul> </li> </ul>"},{"location":"Project/Introduce/v/","title":"xvf","text":"<pre><code>---\nhide:\n  - toc\n  - feedback\n  - navigation\n---\n</code></pre>"},{"location":"Project/Linux/Base/GCC/","title":"GCC","text":""},{"location":"Project/Linux/Base/GCC/#_1","title":"\u7b80\u4ecb","text":"<ul> <li><code>GCC</code> \u539f\u540d\u4e3a <code>GNU</code> <code>C</code>\u8bed\u8a00\u7f16\u8bd1\u5668(<code>GNU C Compiler</code>)</li> <li><code>GCC(GNU Compiler Collection\uff0cGNU\u7f16\u8bd1\u5668\u5957\u4ef6)</code>\u662f\u7531 <code>GNU</code> \u5f00\u53d1\u7684\u7f16\u7a0b\u8bed\u8a00\u8bd1\u5668\u3002<code>GNU</code> \u7f16\u8bd1\u5668\u5957\u4ef6\u5305\u62ec <code>C\u3001C++\u3001Objective-C\u3001Java\u3001Ada \u548c Go</code> \u8bed\u8a00\u524d\u7aef\uff0c\u4e5f\u5305\u62ec\u4e86\u8fd9\u4e9b\u8bed\u8a00\u7684\u5e93(\u5982 <code>libstdc++\uff0clibgcj</code>\u7b49)</li> <li><code>GCC</code> \u4e0d\u4ec5\u652f\u6301 <code>C</code> \u7684\u8bb8\u591a\u201c\u65b9\u8a00\u201d\uff0c\u4e5f\u53ef\u4ee5\u533a\u522b\u4e0d\u540c\u7684 C \u8bed\u8a00\u6807\u51c6;\u53ef\u4ee5\u4f7f\u7528\u547d\u4ee4\u884c\u9009\u9879\u6765\u63a7\u5236\u7f16\u8bd1\u5668\u5728\u7ffb\u8bd1\u6e90\u4ee3\u7801\u65f6\u5e94\u8be5\u9075\u5faa\u54ea\u4e2a C \u6807\u51c6\u3002\u4f8b\u5982\uff0c\u5f53\u4f7f\u7528\u547d\u4ee4\u884c\u53c2\u6570<code>-std=c99</code> \u542f\u52a8 GCC \u65f6\uff0c\u7f16\u8bd1\u5668\u652f\u6301 C99 \u6807\u51c6\u3002</li> <li>\u5b89\u88c5\u547d\u4ee4 <code>sudo apt install gcc g++</code> (\u7248\u672c &gt; 4.8.5)</li> <li>\u67e5\u770b\u7248\u672c <code>gcc/g++ -v/--version</code></li> </ul>"},{"location":"Project/Linux/Base/GCC/#_2","title":"\u7f16\u7a0b\u8bed\u8a00\u7684\u53d1\u5c55","text":""},{"location":"Project/Linux/Base/GCC/#gcc","title":"GCC\u5de5\u4f5c\u6d41\u7a0b","text":""},{"location":"Project/Linux/Base/GCC/#_3","title":"\u7a0b\u5e8f\u7f16\u8bd1\u6210\u53ef\u6267\u884c\u7a0b\u5e8f\u7684\u8fc7\u7a0b","text":""},{"location":"Project/Linux/Base/GCC/#_4","title":"\u4ee3\u7801\u64cd\u4f5c","text":"<ul> <li>\u9884\u7406\uff1a   <code>gcc test.c  -E -o test.i</code></li> <li>\u7f16\u8bd1\uff1a   <code>gcc test.i  -S -o test.s</code></li> <li>\u6c47\u7f16\uff1a   <code>gcc test.s  -c -o test.o</code></li> <li>\u7a0b\u5e8f\uff1a   <code>gcc test.o  -o  test.out</code></li> </ul>"},{"location":"Project/Linux/Base/GCC/#gcc_1","title":"GCC\u5e38\u7528\u53c2\u6570\u9009\u9879","text":"gcc\u7f16\u8bd1\u9009\u9879 \u8bf4\u660e -E \u9884\u5904\u7406\u6307\u5b9a\u7684\u6e90\u6587\u4ef6\uff0c\u4e0d\u8fdb\u884c\u7f16\u8bd1\u9884\u5904\u7406\u6307\u5b9a\u7684\u6e90\u6587\u4ef6\uff0c\u4e0d\u8fdb\u884c\u7f16\u8bd1 -S \u9884\u5904\u7406\u6307\u5b9a\u7684\u6e90\u6587\u4ef6\uff0c\u4e0d\u8fdb\u884c\u7f16\u8bd1 -c \u7f16\u8bd1\u3001\u6c47\u7f16\u6307\u5b9a\u7684\u6e90\u6587\u4ef6\uff0c\u4f46\u662f\u4e0d\u8fdb\u884c\u94fe\u63a5 -o [file1] [file2] / [file2] -o [file1] \u5c06\u6587\u4ef6 file2 \u7f16\u8bd1\u6210\u53ef\u6267\u884c\u6587\u4ef6 file1 -I directory \u6307\u5b9a include \u5305\u542b\u6587\u4ef6\u7684\u641c\u7d22\u76ee\u5f55 -g \u5728\u7f16\u8bd1\u7684\u65f6\u5019\uff0c\u751f\u6210\u8c03\u8bd5\u4fe1\u606f\uff0c\u8be5\u7a0b\u5e8f\u53ef\u4ee5\u88ab\u8c03\u8bd5\u5668\u8c03\u8bd5 -D \u5728\u7a0b\u5e8f\u7f16\u8bd1\u7684\u65f6\u5019\uff0c\u6307\u5b9a\u4e00\u4e2a\u5b8f -w \u4e0d\u751f\u6210\u4efb\u4f55\u8b66\u544a\u4fe1\u606f -Wall \u751f\u6210\u6240\u6709\u8b66\u544a\u4fe1\u606f -On n\u7684\u53d6\u503c\u8303\u56f4:0~3\u3002\u7f16\u8bd1\u5668\u7684\u4f18\u5316\u9009\u9879\u76844\u4e2a\u7ea7\u522b\uff0c-O0\u8868 \u793a\u6ca1\u6709\u4f18\u5316\uff0c-O1\u4e3a\u7f3a\u7701\u503c\uff0c-O3\u4f18\u5316\u7ea7\u522b\u6700\u9ad8 -l \u5728\u7a0b\u5e8f\u7f16\u8bd1\u7684\u65f6\u5019\uff0c\u6307\u5b9a\u4f7f\u7528\u7684\u5e93 -L \u6307\u5b9a\u7f16\u8bd1\u7684\u65f6\u5019\uff0c\u641c\u7d22\u7684\u5e93\u7684\u8def\u5f84\u3002 -fPIC/fpic \u751f\u6210\u4e0e\u4f4d\u7f6e\u65e0\u5173\u7684\u4ee3\u7801 -shared \u751f\u6210\u5171\u4eab\u76ee\u6807\u6587\u4ef6\uff0c\u901a\u5e38\u7528\u5728\u5efa\u7acb\u5171\u4eab\u5e93\u65f6 -std \u6307\u5b9aC\u65b9\u8a00\uff0c\u5982:-std=c99\uff0cgcc\u9ed8\u8ba4\u7684\u65b9\u8a00\u662fGNU C"},{"location":"Project/Linux/Base/GCC/#gccg","title":"GCC/G++ \u533a\u522b","text":"<pre><code>gcc\u548cg++\u90fd\u662fGNU(\u7ec4\u7ec7)\u7684\u4e00\u4e2a\u7f16\u8bd1\u5668\u3002\n</code></pre> \u8bef\u533a\u4e00: <code>gcc</code> \u53ea\u80fd\u7f16\u8bd1 <code>c</code>\u4ee3\u7801\uff0c<code>g++</code> \u53ea\u80fd\u7f16\u8bd1 <code>c++</code>\u4ee3\u7801\u3002\u4e24\u8005\u90fd\u53ef\u4ee5\uff0c\u8bf7\u6ce8\u610f <ul> <li>\u540e\u7f00\u4e3a <code>.c</code> \u7684\uff0c<code>gcc</code> \u628a\u5b83\u5f53\u4f5c\u662f <code>C</code> \u7a0b\u5e8f\uff0c\u800c <code>g++</code> \u5f53\u4f5c\u662f <code>c++</code>\u7a0b\u5e8f</li> </ul> <ul> <li>\u540e\u7f00\u4e3a <code>.cpp</code> \u7684\uff0c\u4e24\u8005\u90fd\u4f1a\u8ba4\u4e3a\u662f <code>C++</code> \u7a0b\u5e8f\uff0c<code>C++</code> \u7684\u8bed\u6cd5\u89c4\u5219\u66f4\u52a0\u4e25\u8c28\u4e00\u4e9b </li> </ul> <ul> <li>\u7f16\u8bd1\u9636\u6bb5\uff0c<code>g++</code> \u4f1a\u8c03\u7528 <code>gcc</code>\uff0c\u5bf9\u4e8e <code>C++</code> \u4ee3\u7801\uff0c\u4e24\u8005\u662f\u7b49\u4ef7\u7684\uff0c\u4f46\u662f\u56e0\u4e3a <code>gcc</code> \u547d\u4ee4\u4e0d\u80fd\u81ea\u52a8\u548c <code>C++</code> \u7a0b\u5e8f\u4f7f\u7528\u7684\u5e93\u8054\u63a5\uff0c\u6240\u4ee5\u901a\u5e38\u7528 <code>g++</code> \u6765\u5b8c\u6210\u94fe\u63a5\uff0c\u4e3a\u4e86\u7edf \u4e00\u8d77\u89c1\uff0c\u5e72\u8106\u7f16\u8bd1/\u94fe\u63a5\u7edf\u7edf\u7528 <code>g++</code> \u4e86</li> </ul> \u8bef\u533a\u4e8c: <code>gcc</code>\u4e0d\u4f1a\u5b9a\u4e49<code>__cplusplus</code>\u5b8f\uff0c\u800c<code>g++</code>\u4f1a <ul> <li>\u5b9e\u9645\u4e0a\uff0c\u8fd9\u4e2a\u5b8f\u53ea\u662f\u6807\u5fd7\u7740\u7f16\u8bd1\u5668\u5c06\u4f1a\u628a\u4ee3\u7801\u6309<code>C</code>\u8fd8\u662f<code>C++</code>\u8bed\u6cd5\u6765\u89e3\u91ca</li> </ul> <ul> <li>\u5982\u4e0a\u6240\u8ff0\uff0c\u5982\u679c\u540e\u7f00\u4e3a<code>.c</code>\uff0c\u5e76\u4e14\u91c7\u7528<code>gcc</code>\u7f16\u8bd1\u5668\uff0c\u5219\u8be5\u5b8f\u5c31\u662f\u672a\u5b9a\u4e49\u7684\uff0c\u5426\u5219\uff0c\u5c31\u662f\u5df2\u5b9a\u4e49</li> </ul> \u8bef\u533a\u4e09: \u7f16\u8bd1\u53ea\u80fd\u7528 gcc\uff0c\u94fe\u63a5\u53ea\u80fd\u7528 g++ <ul> <li>\u4e25\u683c\u6765\u8bf4\uff0c\u8fd9\u53e5\u8bdd\u4e0d\u7b97\u9519\u8bef\uff0c\u4f46\u662f\u5b83\u6df7\u6dc6\u4e86\u6982\u5ff5\uff0c\u5e94\u8be5\u8fd9\u6837\u8bf4:\u7f16\u8bd1\u53ef\u4ee5\u7528<code>gcc/g++</code>\uff0c\u800c\u94fe\u63a5\u53ef\u4ee5\u7528<code>g++</code>\u6216\u8005<code>gcc -lstdc++</code></li> </ul> <ul> <li><code>gcc</code>\u547d\u4ee4\u4e0d\u80fd\u81ea\u52a8\u548c<code>C++</code>\u7a0b\u5e8f\u4f7f\u7528\u7684\u5e93\u8054\u63a5\uff0c\u6240\u4ee5\u901a\u5e38\u4f7f\u7528<code>g++</code>\u6765\u5b8c\u6210\u8054\u63a5\u3002\u4f46\u5728\u7f16\u8bd1\u9636\u6bb5\uff0c<code>g++</code>\u4f1a\u81ea\u52a8\u8c03\u7528<code>gcc</code>\uff0c\u4e8c\u8005\u7b49\u4ef7</li> </ul>"},{"location":"Project/Linux/Base/GDB/","title":"GDB","text":""},{"location":"Project/Linux/Base/GDB/#_1","title":"\u7b80\u4ecb","text":"<ul> <li>GDB \u662f\u7531 GNU \u8f6f\u4ef6\u7cfb\u7edf\u793e\u533a\u63d0\u4f9b\u7684\u8c03\u8bd5\u5de5\u5177\uff0c\u540c GCC \u914d\u5957\u7ec4\u6210\u4e86\u4e00\u5957\u5b8c\u6574\u7684\u5f00\u53d1\u73af \u5883\uff0cGDB \u662f Linux \u548c\u8bb8\u591a\u7c7b Unix \u7cfb\u7edf\u4e2d\u7684\u6807\u51c6\u5f00\u53d1\u73af\u5883\u3002</li> <li>\u4e00\u822c\u6765\u8bf4\uff0cGDB \u4e3b\u8981\u5e2e\u52a9\u4f60\u5b8c\u6210\u4e0b\u9762\u56db\u4e2a\u65b9\u9762\u7684\u529f\u80fd:<ul> <li>\u542f\u52a8\u7a0b\u5e8f\uff0c\u53ef\u4ee5\u6309\u7167\u81ea\u5b9a\u4e49\u7684\u8981\u6c42\u968f\u5fc3\u6240\u6b32\u7684\u8fd0\u884c\u7a0b\u5e8f</li> <li>\u53ef\u8ba9\u88ab\u8c03\u8bd5\u7684\u7a0b\u5e8f\u5728\u6240\u6307\u5b9a\u7684\u8c03\u7f6e\u7684\u65ad\u70b9\u5904\u505c\u4f4f(\u65ad\u70b9\u53ef\u4ee5\u662f\u6761\u4ef6\u8868\u8fbe\u5f0f)</li> <li>\u5f53\u7a0b\u5e8f\u88ab\u505c\u4f4f\u65f6\uff0c\u53ef\u4ee5\u68c0\u67e5\u6b64\u65f6\u7a0b\u5e8f\u4e2d\u6240\u53d1\u751f\u7684\u4e8b</li> <li>\u53ef\u4ee5\u6539\u53d8\u7a0b\u5e8f\uff0c\u5c06\u4e00\u4e2a BUG \u4ea7\u751f\u7684\u5f71\u54cd\u4fee\u6b63\u4ece\u800c\u6d4b\u8bd5\u5176\u4ed6 BUG</li> </ul> </li> </ul>"},{"location":"Project/Linux/Base/GDB/#_2","title":"\u51c6\u5907\u5de5\u4f5c","text":"<ul> <li>\u901a\u5e38\uff0c\u5728\u4e3a\u8c03\u8bd5\u800c\u7f16\u8bd1\u65f6\uff0c\u6211\u4eec\u4f1a<code>()</code>\u5173\u6389\u7f16\u8bd1\u5668\u7684\u4f18\u5316\u9009\u9879<code>(-O)</code>\uff0c \u5e76\u6253\u5f00\u8c03 \u8bd5\u9009\u9879<code>(-g)</code>\u3002\u53e6\u5916\uff0c<code>-Wall</code>\u5728\u5c3d\u91cf\u4e0d\u5f71\u54cd\u7a0b\u5e8f\u884c\u4e3a\u7684\u60c5\u51b5\u4e0b\u9009\u9879\u6253\u5f00\u6240\u6709 warning\uff0c\u4e5f\u53ef\u4ee5\u53d1\u73b0\u8bb8\u591a\u95ee\u9898\uff0c\u907f\u514d\u4e00\u4e9b\u4e0d\u5fc5\u8981\u7684 BUG\u3002</li> <li><code>gcc -g -Wall program.c -o program</code></li> <li><code>-g</code> \u9009\u9879\u7684\u4f5c\u7528\u662f\u5728\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u52a0\u5165\u6e90\u4ee3\u7801\u7684\u4fe1\u606f\uff0c\u6bd4\u5982\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\u7b2c\u51e0\u6761\u673a\u5668\u6307\u4ee4\u5bf9\u5e94\u6e90\u4ee3\u7801\u7684\u7b2c\u51e0\u884c\uff0c\u4f46\u5e76\u4e0d\u662f\u628a\u6574\u4e2a\u6e90\u6587\u4ef6\u5d4c\u5165\u5230\u53ef\u6267\u884c\u6587\u4ef6\u4e2d\uff0c\u6240\u4ee5\u5728\u8c03 \u8bd5\u65f6\u5fc5\u987b\u4fdd\u8bc1<code>gdb</code>\u80fd\u627e\u5230\u6e90\u6587\u4ef6\u3002</li> </ul>"},{"location":"Project/Linux/Base/GDB/#gdb","title":"GDB \u547d\u4ee4","text":"<ol> <li>\u542f\u52a8\u3001\u9000\u51fa\u3001\u67e5\u770b\u4ee3\u7801<ul> <li>\u542f\u52a8\u548c\u9000\u51fa<ul> <li><code>gdb</code> \u53ef\u6267\u884c\u7a0b\u5e8f</li> <li><code>quit</code></li> </ul> </li> <li>\u7ed9\u7a0b\u5e8f\u8bbe\u7f6e\u53c2\u6570/\u83b7\u53d6\u8bbe\u7f6e\u53c2\u6570<ul> <li><code>set args 10 20</code></li> <li><code>show args</code></li> </ul> </li> <li>GDB \u4f7f\u7528\u5e2e\u52a9<ul> <li><code>help</code></li> </ul> </li> <li>\u67e5\u770b\u5f53\u524d\u6587\u4ef6\u4ee3\u7801<ul> <li><code>list/l</code> (\u4ece\u9ed8\u8ba4\u4f4d\u7f6e\u663e\u793a)</li> <li><code>list/l</code> \u884c\u53f7 (\u4ece\u6307\u5b9a\u7684\u884c\u663e\u793a)</li> <li><code>list/l</code> \u51fd\u6570\u540d(\u4ece\u6307\u5b9a\u7684\u51fd\u6570\u663e\u793a)</li> </ul> </li> <li>\u67e5\u770b\u975e\u5f53\u524d\u6587\u4ef6\u4ee3\u7801<ul> <li><code>list/l</code> \u6587\u4ef6\u540d:\u884c\u53f7</li> <li><code>list/l</code> \u6587\u4ef6\u540d:\u51fd\u6570\u540d</li> </ul> </li> <li>\u8bbe\u7f6e\u663e\u793a\u7684\u884c\u6570<ul> <li><code>show list/listsize</code></li> <li><code>set list/listsize</code> \u884c\u6570</li> </ul> </li> </ul> </li> <li>\u65ad\u70b9\u64cd\u4f5c<ul> <li>\u8bbe\u7f6e\u65ad\u70b9<ul> <li><code>b/break</code> \u884c\u53f7</li> <li><code>b/break</code> \u51fd\u6570\u540d</li> <li><code>b/break</code> \u6587\u4ef6\u540d:\u884c\u53f7</li> <li><code>b/break</code> \u6587\u4ef6\u540d:\u51fd\u6570</li> </ul> </li> <li>\u67e5\u770b\u65ad\u70b9<ul> <li><code>i/info b/break</code></li> </ul> </li> <li>\u5220\u9664\u65ad\u70b9<ul> <li><code>d/del/delete</code> \u65ad\u70b9\u7f16\u53f7</li> </ul> </li> <li>\u8bbe\u7f6e\u65ad\u70b9\u65e0\u6548<ul> <li><code>dis/disable</code> \u65ad\u70b9\u7f16\u53f7</li> </ul> </li> <li>\u8bbe\u7f6e\u65ad\u70b9\u751f\u6548<ul> <li><code>ena/enable</code> \u65ad\u70b9\u7f16\u53f7</li> </ul> </li> <li>\u8bbe\u7f6e\u6761\u4ef6\u65ad\u70b9(\u4e00\u822c\u7528\u5728\u5faa\u73af\u7684\u4f4d\u7f6e)<ul> <li><code>b/break 10 if i==5</code></li> </ul> </li> </ul> </li> <li>\u8c03\u8bd5\u547d\u4ee4<ul> <li>\u8fd0\u884cGDB\u7a0b\u5e8f<ul> <li><code>start</code>(\u7a0b\u5e8f\u505c\u5728\u7b2c\u4e00\u884c)</li> <li><code>run</code>(\u9047\u5230\u65ad\u70b9\u624d\u505c)</li> </ul> </li> <li>\u7ee7\u7eed\u8fd0\u884c\uff0c\u5230\u4e0b\u4e00\u4e2a\u65ad\u70b9\u505c<ul> <li><code>c/continue</code></li> </ul> </li> <li>\u5411\u4e0b\u6267\u884c\u4e00\u884c\u4ee3\u7801(\u4e0d\u4f1a\u8fdb\u5165\u51fd\u6570\u4f53) <ul> <li><code>n/next</code></li> </ul> </li> <li>\u53d8\u91cf\u64cd\u4f5c<ul> <li><code>p/print</code> \u53d8\u91cf\u540d(\u6253\u5370\u53d8\u91cf\u503c) </li> <li><code>ptype</code> \u53d8\u91cf\u540d(\u6253\u5370\u53d8\u91cf\u7c7b\u578b)</li> </ul> </li> <li>\u5411\u4e0b\u5355\u6b65\u8c03\u8bd5(\u9047\u5230\u51fd\u6570\u8fdb\u5165\u51fd\u6570\u4f53) <ul> <li><code>s/step</code></li> <li><code>finish</code>(\u8df3\u51fa\u51fd\u6570\u4f53)</li> </ul> </li> <li>\u81ea\u52a8\u53d8\u91cf\u64cd\u4f5c<ul> <li><code>display</code> \u53d8\u91cf\u540d(\u81ea\u52a8\u6253\u5370\u6307\u5b9a\u53d8\u91cf\u7684\u503c) </li> <li><code>i/info display</code></li> <li><code>undisplay</code> \u7f16\u53f7</li> </ul> </li> <li>\u5176\u5b83\u64cd\u4f5c<ul> <li><code>set var</code> \u53d8\u91cf\u540d=\u53d8\u91cf\u503c (\u5faa\u73af\u4e2d\u7528\u7684\u8f83\u591a)</li> <li><code>until</code> (\u8df3\u51fa\u5faa\u73af)</li> </ul> </li> </ul> </li> </ol>"},{"location":"Project/Linux/Base/IO/","title":"IO","text":""},{"location":"Project/Linux/Base/IO/#c-io","title":"\u6807\u51c6 C \u5e93 IO \u51fd\u6570","text":""},{"location":"Project/Linux/Base/IO/#ciolinuxio","title":"\u6807\u51c6C\u5e93IO\u548cLinux\u7cfb\u7edfIO\u7684\u5173\u7cfb","text":""},{"location":"Project/Linux/Base/IO/#_1","title":"\u865a\u62df\u5730\u5740\u7a7a\u95f4","text":""},{"location":"Project/Linux/Base/IO/#_2","title":"\u6587\u4ef6\u63cf\u8ff0\u7b26","text":""},{"location":"Project/Linux/Base/IO/#linux-io","title":"Linux \u7cfb\u7edf IO \u51fd\u6570","text":"<pre><code>int open(const char *pathname, int flags);\nint open(const char *pathname, int flags, mode_t mode); \nint close(int fd);\nssize_t read(int fd, void *buf, size_t count);\nssize_t write(int fd, const void *buf, size_t count); \noff_t lseek(int fd, off_t offset, int whence);\nint stat(const char *pathname, struct stat *statbuf);\nint lstat(const char *pathname, struct stat *statbuf);\n</code></pre>"},{"location":"Project/Linux/Base/IO/#stat","title":"stat \u7ed3\u6784\u4f53","text":"<pre><code>struct stat {\n    dev_t  st_dev; // \u6587\u4ef6\u7684\u8bbe\u5907\u7f16\u53f7\n    ino_t  st_ino;  // \u8282\u70b9\n    mode_t   st_mode;  // \u6587\u4ef6\u7684\u7c7b\u578b\u548c\u5b58\u53d6\u7684\u6743\u9650\n    nlink_t  st_nlink;  // \u8fde\u5230\u8be5\u6587\u4ef6\u7684\u786c\u8fde\u63a5\u6570\u76ee\n    uid_t   st_uid;   // \u7528\u6237ID\n    gid_t   st_gid;   // \u7ec4ID\n    dev_t   st_rdev;  // \u8bbe\u5907\u6587\u4ef6\u7684\u8bbe\u5907\u7f16\u53f7\n    off_t   st_size;  // \u6587\u4ef6\u5b57\u8282\u6570(\u6587\u4ef6\u5927\u5c0f)\n    blksize_t st_blksize;   // \u5757\u5927\u5c0f\n    blkcnt_t   st_blocks;   // \u5757\u6570\n    time_t st_atime;   // \u6700\u540e\u4e00\u6b21\u8bbf\u95ee\u65f6\u95f4\n    time_t st_mtime;   // \u6700\u540e\u4e00\u6b21\u4fee\u6539\u65f6\u95f4\n    time_t  st_ctime;  // \u6700\u540e\u4e00\u6b21\u6539\u53d8\u65f6\u95f4(\u6307\u5c5e\u6027)\n};\n</code></pre>"},{"location":"Project/Linux/Base/IO/#st_mode","title":"st_mode \u53d8\u91cf","text":""},{"location":"Project/Linux/Base/IO/#_3","title":"\u6587\u4ef6\u5c5e\u6027\u64cd\u4f5c\u51fd\u6570","text":"<pre><code>int access(const char *pathname, int mode);\nint chmod(const char *filename, int mode);\nint chown(const char *path, uid_t owner, gid_t group); \nint truncate(const char *path, off_t length);\n</code></pre>"},{"location":"Project/Linux/Base/IO/#_4","title":"\u76ee\u5f55\u64cd\u4f5c\u51fd\u6570","text":"<pre><code>int rename(const char *oldpath, const char *newpath); \nint chdir(const char *path);\nchar *getcwd(char *buf, size_t size);\nint mkdir(const char *pathname, mode_t mode);\nint rmdir(const char *pathname);\n</code></pre>"},{"location":"Project/Linux/Base/IO/#_5","title":"\u76ee\u5f55\u904d\u5386\u51fd\u6570","text":"<pre><code>DIR *opendir(const char *name);\nstruct dirent *readdir(DIR *dirp); \nint closedir(DIR *dirp);\n</code></pre>"},{"location":"Project/Linux/Base/IO/#dirent-d_type","title":"dirent \u7ed3\u6784\u4f53\u548c d_type","text":"<p><pre><code>struct dirent {\n    ino_t d_ino;  // \u6b64\u76ee\u5f55\u8fdb\u5165\u70b9\u7684inode\n    off_t d_off;// \u76ee\u5f55\u6587\u4ef6\u5f00\u5934\u81f3\u6b64\u76ee\u5f55\u8fdb\u5165\u70b9\u7684\u4f4d\u79fb \n    unsigned short int d_reclen; // d_name \u7684\u957f\u5ea6, \u4e0d\u5305\u542bNULL\u5b57\u7b26 \n    unsigned char d_type; // d_name \u6240\u6307\u7684\u6587\u4ef6\u7c7b\u578b \n    char d_name[256];   // \u6587\u4ef6\u540d\n};\n</code></pre> <pre><code>d_type\n    DT_BLK - \u5757\u8bbe\u5907 \n    DT_CHR - \u5b57\u7b26\u8bbe\u5907 \n    DT_DIR - \u76ee\u5f55 \n    DT_LNK - \u8f6f\u8fde\u63a5 \n    DT_FIFO - \u7ba1\u9053 \n    DT_REG - \u666e\u901a\u6587\u4ef6 \n    DT_SOCK - \u5957\u63a5\u5b57 \n    DT_UNKNOWN - \u672a\u77e5\n</code></pre></p>"},{"location":"Project/Linux/Base/IO/#dupdup2","title":"dup\u3001dup2 \u51fd\u6570","text":"<pre><code>int dup(int oldfd); \u590d\u5236\u6587\u4ef6\u63cf\u8ff0\u7b26\nint dup2(int oldfd, int newfd); \u91cd\u5b9a\u5411\u6587\u4ef6\u63cf\u8ff0\u7b26\n</code></pre>"},{"location":"Project/Linux/Base/IO/#fcntl","title":"fcntl \u51fd\u6570","text":"<pre><code>int fcntl(int fd, int cmd, ... /* arg */ ); \n     \u590d\u5236\u6587\u4ef6\u63cf\u8ff0\u7b26\n     \u8bbe\u7f6e/\u83b7\u53d6\u6587\u4ef6\u7684\u72b6\u6001\u6807\u5fd7\n</code></pre>"},{"location":"Project/Linux/Base/Makefile/","title":"Makefile","text":""},{"location":"Project/Linux/Base/Makefile/#_1","title":"\u7b80\u4ecb","text":"<ul> <li>\u4e00\u4e2a\u5de5\u7a0b\u4e2d\u7684\u6e90\u6587\u4ef6\u4e0d\u8ba1\u5176\u6570\uff0c\u5176\u6309\u7c7b\u578b\u3001\u529f\u80fd\u3001\u6a21\u5757\u5206\u522b\u653e\u5728\u82e5\u5e72\u4e2a\u76ee\u5f55\u4e2d\uff0c<code>Makefile</code> \u6587\u4ef6\u5b9a\u4e49\u4e86\u4e00\u7cfb\u5217\u7684\u89c4\u5219\u6765\u6307\u5b9a\u54ea\u4e9b\u6587\u4ef6\u9700\u8981\u5148\u7f16\u8bd1\uff0c\u54ea\u4e9b\u6587\u4ef6\u9700\u8981\u540e\u7f16\u8bd1\uff0c\u54ea\u4e9b\u6587\u4ef6\u9700\u8981\u91cd\u65b0\u7f16\u8bd1\uff0c\u751a\u81f3\u4e8e\u8fdb\u884c\u66f4\u590d\u6742\u7684\u529f\u80fd\u64cd\u4f5c\uff0c\u56e0\u4e3a<code>Makefile</code>\u6587\u4ef6\u5c31 \u50cf\u4e00\u4e2a<code>Shell</code>\u811a\u672c\u4e00\u6837\uff0c\u4e5f\u53ef\u4ee5\u6267\u884c\u64cd\u4f5c\u7cfb\u7edf\u7684\u547d\u4ee4\u3002</li> <li><code>Makefile</code>\u5e26\u6765\u7684\u597d\u5904\u5c31\u662f\u201c\u81ea\u52a8\u5316\u7f16\u8bd1\u201d \uff0c\u4e00\u65e6\u5199\u597d\uff0c\u53ea\u9700\u8981\u4e00\u4e2a<code>make</code>\u547d\u4ee4\uff0c\u6574\u4e2a\u5de5\u7a0b\u5b8c\u5168\u81ea\u52a8\u7f16\u8bd1\uff0c\u6781\u5927\u7684\u63d0\u9ad8\u4e86\u8f6f\u4ef6\u5f00\u53d1\u7684\u6548\u7387\u3002<code>make</code>\u662f\u4e00\u4e2a\u547d\u4ee4\u5de5\u5177\uff0c\u662f\u4e00\u4e2a\u89e3\u91ca<code>Makefile</code>\u6587\u4ef6\u4e2d\u6307\u4ee4\u7684\u547d\u4ee4\u5de5\u5177\uff0c\u4e00\u822c\u6765\u8bf4\uff0c\u5927\u591a\u6570\u7684<code>IDE</code>\u90fd\u6709\u8fd9\u4e2a\u547d\u4ee4\uff0c\u6bd4\u5982<code>Delphi</code>\u7684<code>make</code>\uff0c<code>Visual C++</code>\u7684<code>nmake</code>\uff0c<code>Linux</code>\u4e0b<code>GNU</code>\u7684<code>make</code>\u3002</li> </ul>"},{"location":"Project/Linux/Base/Makefile/#makefile","title":"Makefile \u6587\u4ef6\u547d\u540d\u548c\u89c4\u5219","text":"<p>\u6587\u4ef6\u547d\u540d</p> <ul> <li>makefile \u6216\u8005 Makefile</li> </ul> <p>Makefile \u89c4\u5219</p> <ol> <li>\u4e00\u4e2a Makefile \u6587\u4ef6\u4e2d\u53ef\u4ee5\u6709\u4e00\u4e2a\u6216\u8005\u591a\u4e2a\u89c4\u5219 <pre><code>\u76ee\u6807 ...: \u4f9d\u8d56 ...\n    \u547d\u4ee4(Shell \u547d\u4ee4)\n    ...\n</code></pre><ul> <li>\u76ee\u6807:\u6700\u7ec8\u8981\u751f\u6210\u7684\u6587\u4ef6(\u4f2a\u76ee\u6807\u9664\u5916)</li> <li>\u4f9d\u8d56:\u751f\u6210\u76ee\u6807\u6240\u9700\u8981\u7684\u6587\u4ef6\u6216\u662f\u76ee\u6807</li> <li>\u547d\u4ee4:\u901a\u8fc7\u6267\u884c\u547d\u4ee4\u5bf9\u4f9d\u8d56\u64cd\u4f5c\u751f\u6210\u76ee\u6807(\u547d\u4ee4\u524d\u5fc5\u987b Tab \u7f29\u8fdb)</li> </ul> </li> <li>Makefile \u4e2d\u7684\u5176\u5b83\u89c4\u5219\u4e00\u822c\u90fd\u662f\u4e3a\u7b2c\u4e00\u6761\u89c4\u5219\u670d\u52a1\u7684\u3002<ul> <li>make\u9ed8\u8ba4\u53ea\u6267\u884cMakefile\u7b2c\u4e00\u6761\u8bed\u53e5\uff0c\u5982\u679c\u5176\u4ed6\u8bed\u53e5\u4e0e\u7b2c\u4e00\u6761\u65e0\u5173\uff0c\u5219\u4e0d\u6267\u884c</li> </ul> </li> </ol>"},{"location":"Project/Linux/Base/Makefile/#_2","title":"\u5de5\u4f5c\u539f\u7406","text":"<ol> <li>\u547d\u4ee4\u5728\u6267\u884c\u4e4b\u524d\uff0c\u9700\u8981\u5148\u68c0\u67e5\u89c4\u5219\u4e2d\u7684\u4f9d\u8d56\u662f\u5426\u5b58\u5728<ul> <li>\u5982\u679c\u5b58\u5728\uff0c\u6267\u884c\u547d\u4ee4</li> <li>\u5982\u679c\u4e0d\u5b58\u5728\uff0c\u5411\u4e0b\u68c0\u67e5\u5176\u5b83\u7684\u89c4\u5219\uff0c\u68c0\u67e5\u6709\u6ca1\u6709\u4e00\u4e2a\u89c4\u5219\u662f\u7528\u6765\u751f\u6210\u8fd9\u4e2a\u4f9d\u8d56\u7684\uff0c\u5982\u679c\u627e\u5230\u4e86\uff0c\u5219\u6267\u884c\u8be5\u89c4\u5219\u4e2d\u7684\u547d\u4ee4</li> </ul> </li> <li>\u68c0\u6d4b\u66f4\u65b0\uff0c\u5728\u6267\u884c\u89c4\u5219\u4e2d\u7684\u547d\u4ee4\u65f6\uff0c\u4f1a\u6bd4\u8f83\u76ee\u6807\u548c\u4f9d\u8d56\u6587\u4ef6\u7684\u65f6\u95f4<ul> <li>\u5982\u679c\u4f9d\u8d56\u7684\u65f6\u95f4\u6bd4\u76ee\u6807\u7684\u65f6\u95f4\u665a\uff0c\u9700\u8981\u91cd\u65b0\u751f\u6210\u76ee\u6807</li> <li>\u5982\u679c\u4f9d\u8d56\u7684\u65f6\u95f4\u6bd4\u76ee\u6807\u7684\u65f6\u95f4\u65e9\uff0c\u76ee\u6807\u4e0d\u9700\u8981\u66f4\u65b0\uff0c\u5bf9\u5e94\u89c4\u5219\u4e2d\u7684\u547d\u4ee4\u4e0d\u9700\u8981\u88ab\u6267\u884c</li> </ul> </li> </ol>"},{"location":"Project/Linux/Base/Makefile/#_3","title":"\u53d8\u91cf","text":"<ol> <li>\u81ea\u5b9a\u4e49\u53d8\u91cf<ul> <li>\u53d8\u91cf\u540d=\u53d8\u91cf\u503c <code>var=hello</code> </li> </ul> </li> <li>\u9884\u5b9a\u4e49\u53d8\u91cf<ul> <li><code>AR</code> : \u5f52\u6863\u7ef4\u62a4\u7a0b\u5e8f\u7684\u540d\u79f0\uff0c\u9ed8\u8ba4\u503c\u4e3a <code>ar</code></li> <li><code>CC</code> : <code>C</code> \u7f16\u8bd1\u5668\u7684\u540d\u79f0\uff0c\u9ed8\u8ba4\u503c\u4e3a <code>cc</code></li> <li><code>CXX</code> : <code>C++</code> \u7f16\u8bd1\u5668\u7684\u540d\u79f0\uff0c\u9ed8\u8ba4\u503c\u4e3a <code>g++</code></li> <li><code>$@</code> : \u76ee\u6807\u7684\u5b8c\u6574\u540d\u79f0</li> <li><code>$&lt;</code>: \u7b2c\u4e00\u4e2a\u4f9d\u8d56\u6587\u4ef6\u7684\u540d\u79f0</li> <li><code>$^</code> : \u6240\u6709\u7684\u4f9d\u8d56\u6587\u4ef6</li> </ul> </li> <li>\u83b7\u53d6\u53d8\u91cf\u7684\u503c<ul> <li><code>$(\u53d8\u91cf\u540d)</code> <code>$(var)</code></li> </ul> </li> <li>\u4f8b\u5982<ul> <li><code>app:main.c a.c b.c</code> <ul> <li><code>gcc -c main.c a.c b.c</code></li> </ul> </li> <li><code>app:main.c a.c b.c</code><ul> <li><code>$(CC) -c $^ -o $@</code>      \u81ea\u52a8\u53d8\u91cf\u53ea\u80fd\u5728\u89c4\u5219\u7684\u547d\u4ee4\u4e2d\u4f7f\u7528</li> </ul> </li> </ul> </li> </ol>"},{"location":"Project/Linux/Base/Makefile/#_4","title":"\u6a21\u5f0f\u5339\u914d","text":"<p><pre><code>app:sub.o add.o mult.o div.o main.o\n        gcc sub.o add.o mult.o div.o main.o -o app\nadd.o:add.c\n    gcc -c add.c -o add.o\ndiv.o:div.c\n    gcc -c div.c -o div.o\nsub.o:sub.c\n    gcc -c sub.c -o sub.o\nmult.o:mult.c\n    gcc -c mult.c -o mult.o\nmain.o:main.c\n    gcc -c main.c -o main.o\n</code></pre> <pre><code>%.o:%.c\n    - %: \u901a\u914d\u7b26\uff0c\u5339\u914d\u4e00\u4e2a\u5b57\u7b26\u4e32 \n    - \u4e24\u4e2a%\u5339\u914d\u7684\u662f\u540c\u4e00\u4e2a\u5b57\u7b26\u4e32\n%.o:%.c\n    gcc -c $&lt; -o $@\n</code></pre> <pre><code>src=sub.o add.o mult.o div.o main.o\ntarget=app\n\n$(target):$(src)\n        $(CC) $^ -o $@\n%.o:%.c\n        $(CC) -c $&lt; -o $@\n</code></pre></p>"},{"location":"Project/Linux/Base/Makefile/#_5","title":"\u51fd\u6570","text":"<ol> <li><code>$(wildcard PATTERN...)</code><ul> <li>\u529f\u80fd:\u83b7\u53d6\u6307\u5b9a\u76ee\u5f55\u4e0b\u6307\u5b9a\u7c7b\u578b\u7684\u6587\u4ef6\u5217\u8868</li> <li>\u53c2\u6570:<code>PATTERN</code>\u6307\u7684\u662f\u67d0\u4e2a\u6216\u591a\u4e2a\u76ee\u5f55\u4e0b\u7684\u5bf9\u5e94\u7684\u67d0\u79cd\u7c7b\u578b\u7684\u6587\u4ef6\uff0c\u5982\u679c\u6709\u591a\u4e2a\u76ee\u5f55\uff0c\u4e00\u822c\u4f7f\u7528\u7a7a\u683c\u95f4\u9694</li> <li>\u8fd4\u56de:\u5f97\u5230\u7684\u82e5\u5e72\u4e2a\u6587\u4ef6\u7684\u6587\u4ef6\u5217\u8868\uff0c\u6587\u4ef6\u540d\u4e4b\u95f4\u4f7f\u7528\u7a7a\u683c\u95f4\u9694</li> <li>\u793a\u4f8b:<ul> <li><code>$(wildcard *.c ./sub/*.c)</code></li> <li>\u8fd4\u56de\u503c\u683c\u5f0f: <code>a.c b.c c.c d.c e.c f.c</code></li> </ul> </li> </ul> </li> <li><code>$(patsubst &lt;pattern&gt;,&lt;replacement&gt;,&lt;text&gt;)</code><ul> <li>\u529f\u80fd:\u67e5\u627e<code>&lt;text&gt;</code>\u4e2d\u7684\u5355\u8bcd(\u5355\u8bcd\u4ee5\u201c\u7a7a\u683c\u201d\u3001\u201cTab\u201d\u6216\u201c\u56de\u8f66\u201d\u201c\u6362\u884c\u201d\u5206\u9694)\u662f\u5426\u7b26\u5408\u6a21\u5f0f<code>&lt;pattern&gt;</code>\uff0c\u5982\u679c\u5339\u914d\u7684\u8bdd\uff0c\u5219\u4ee5<code>&lt;replacement&gt;</code>\u66ff\u6362\u3002</li> <li><code>&lt;pattern&gt;</code>\u53ef\u4ee5\u5305\u62ec\u901a\u914d\u7b26<code>%</code>\uff0c\u8868\u793a\u4efb\u610f\u957f\u5ea6\u7684\u5b57\u4e32\u3002\u5982\u679c<code>&lt;replacement&gt;</code>\u4e2d\u4e5f\u5305\u542b<code>%</code>\uff0c\u90a3\u4e48\uff0c<code>&lt;replacement&gt;</code>\u4e2d\u7684\u8fd9\u4e2a<code>%</code>\u5c06\u662f<code>&lt;pattern&gt;</code>\u4e2d\u7684\u90a3\u4e2a<code>%</code>\u6240\u4ee3\u8868\u7684\u5b57\u4e32\u3002(\u53ef\u4ee5\u7528<code>\\</code>\u6765\u8f6c\u4e49\uff0c\u4ee5<code>\\%</code>\u6765\u8868\u793a\u771f\u5b9e\u542b\u4e49\u7684<code>%</code>\u5b57\u7b26)</li> <li>\u8fd4\u56de:\u51fd\u6570\u8fd4\u56de\u88ab\u66ff\u6362\u8fc7\u540e\u7684\u5b57\u7b26\u4e32</li> <li>\u793a\u4f8b:<ul> <li><code>$(patsubst %.c, %.o, x.c bar.c)</code></li> <li>\u8fd4\u56de\u503c\u683c\u5f0f: <code>x.o bar.o</code> <pre><code>src=$(wildcard ./*.c )\nobjs=$(patsubst %.c,%.o,$(src) )\ntarget=app\n\n$(target):$(objs)\n        $(CC) $^ -o $@\n\n%.o:%.c\n        $(CC) -c $&lt; -o $@\n\n.PHONY:clean\nclean:\n        rm $(objs) -f \n</code></pre></li> </ul> </li> </ul> </li> </ol>"},{"location":"Project/Linux/Base/dynamic%20library/","title":"Dynamic Library","text":""},{"location":"Project/Linux/Base/dynamic%20library/#_1","title":"\u547d\u540d\u89c4\u5219","text":"<ol> <li> <p><code>Linux : libxxx.so</code></p> <ul> <li><code>lib</code> : \u524d\u7f00(\u56fa\u5b9a) </li> <li><code>xxx</code> : \u5e93\u7684\u540d\u5b57\uff0c\u81ea\u5df1\u8d77 </li> <li><code>.so</code> : \u540e\u7f00(\u56fa\u5b9a)</li> <li>\u5728<code>Linux</code>\u4e0b\u662f\u4e00\u4e2a\u53ef\u6267\u884c\u6587\u4ef6</li> </ul> </li> <li> <p><code>Windows : libxxx.lib</code></p> </li> </ol>"},{"location":"Project/Linux/Base/dynamic%20library/#_2","title":"\u5de5\u4f5c\u539f\u7406","text":"<ol> <li>\u9759\u6001\u5e93: <code>GCC</code> \u8fdb\u884c\u94fe\u63a5\u65f6\uff0c\u4f1a\u628a\u9759\u6001\u5e93\u4e2d\u4ee3\u7801\u6253\u5305\u5230\u53ef\u6267\u884c\u7a0b\u5e8f\u4e2d</li> <li>\u52a8\u6001\u5e93: <code>GCC</code> \u8fdb\u884c\u94fe\u63a5\u65f6\uff0c\u52a8\u6001\u5e93\u7684\u4ee3\u7801\u4e0d\u4f1a\u88ab\u6253\u5305\u5230\u53ef\u6267\u884c\u7a0b\u5e8f\u4e2d</li> <li>\u7a0b\u5e8f\u542f\u52a8\u4e4b\u540e\uff0c\u52a8\u6001\u5e93\u4f1a\u88ab\u52a8\u6001\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\uff0c\u901a\u8fc7 <code>ldd</code> <code>(list dynamic dependencies)</code>\u547d\u4ee4\u68c0\u67e5\u52a8\u6001\u5e93\u4f9d\u8d56\u5173\u7cfb</li> <li>\u5982\u4f55\u5b9a\u4f4d\u5171\u4eab\u5e93\u6587\u4ef6\u5462?<ul> <li>\u5f53\u7cfb\u7edf\u52a0\u8f7d\u53ef\u6267\u884c\u4ee3\u7801\u65f6\u5019\uff0c\u80fd\u591f\u77e5\u9053\u5176\u6240\u4f9d\u8d56\u7684\u5e93\u7684\u540d\u5b57\uff0c\u4f46\u662f\u8fd8\u9700\u8981\u77e5\u9053\u7edd\u5bf9\u8def\u5f84\uff0c\u6b64\u65f6\u5c31\u9700\u8981\u7cfb\u7edf\u7684\u52a8\u6001\u8f7d\u5165\u5668\u6765\u83b7\u53d6\u8be5\u7edd\u5bf9\u8def\u5f84\u3002\u5bf9\u4e8e<code>elf</code>\u683c\u5f0f\u7684\u53ef\u6267\u884c\u7a0b\u5e8f\uff0c\u662f\u7531<code>ld-linux.so</code>\u6765\u5b8c\u6210\u7684\uff0c\u5b83\u5148\u540e\u641c\u7d22<code>elf</code>\u6587\u4ef6\u7684<code>DT_RPATH</code>\u6bb5 \u2014\u2014&gt; \u73af\u5883\u53d8\u91cf<code>LD_LIBRARY_PATH \u2014\u2014&gt; /etc/ld.so.cache</code>\u6587\u4ef6\u5217\u8868 \u2014\u2014&gt; <code>/lib/</code>\uff0c<code>/usr/lib</code>\u76ee\u5f55\u627e\u5230\u5e93\u6587\u4ef6\u540e\u5c06\u5176\u8f7d\u5165\u5185\u5b58\u3002</li> </ul> </li> </ol>"},{"location":"Project/Linux/Base/dynamic%20library/#_3","title":"\u4f18\u7f3a\u70b9","text":"<ol> <li>\u4f18\u70b9:<ul> <li>\u53ef\u4ee5\u5b9e\u73b0\u8fdb\u7a0b\u95f4\u8d44\u6e90\u5171\u4eab(\u5171\u4eab\u5e93)</li> <li>\u66f4\u65b0\u3001\u90e8\u7f72\u3001\u53d1\u5e03\u7b80\u5355</li> <li>\u53ef\u4ee5\u63a7\u5236\u4f55\u65f6\u52a0\u8f7d\u52a8\u6001\u5e93</li> </ul> </li> <li>\u7f3a\u70b9:<ul> <li>\u6d88\u8017\u7cfb\u7edf\u8d44\u6e90\uff0c\u6d6a\u8d39\u5185\u5b58</li> <li>\u66f4\u65b0\u3001\u90e8\u7f72\u3001\u53d1\u5e03\u9ebb\u70e6</li> </ul> </li> </ol>"},{"location":"Project/Linux/Base/dynamic%20library/#_4","title":"\u52a8\u6001\u5e93\u7684\u5236\u4f5c","text":"<ol> <li>gcc \u5f97\u5230 .o \u6587\u4ef6\uff0c\u5f97\u5230\u548c\u4f4d\u7f6e\u65e0\u5173\u7684\u4ee3\u7801<ul> <li><code>gcc -c -fpic add.c div.c mult.c sub.c</code></li> </ul> </li> <li>gcc \u5f97\u5230\u52a8\u6001\u5e93<ul> <li><code>gcc -shared add.o  div.o mult.o  sub.o -o libcalc.so</code></li> </ul> </li> <li>\u914d\u7f6e\u52a8\u6001\u5e93\u8def\u5f84<ul> <li><code>export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/root/Linux/lesson04/library/lib</code></li> </ul> </li> <li>\u7f16\u8bd1\u4ee3\u7801 <pre><code>    .\n    \u251c\u2500\u2500 include\n    \u2502   \u2514\u2500\u2500 head.h\n    \u251c\u2500\u2500 lib\n    \u2502   \u2514\u2500\u2500 libcalc.so\n    \u251c\u2500\u2500 main\n    \u251c\u2500\u2500 main.c\n    \u2514\u2500\u2500 src\n        \u251c\u2500\u2500 add.c\n        \u251c\u2500\u2500 div.c\n        \u251c\u2500\u2500 mult.c\n        \u2514\u2500\u2500 sub.c\n</code></pre><ul> <li><code>gcc main.c -o main  -I include/  -L lib/ -l calc</code></li> </ul> </li> </ol>"},{"location":"Project/Linux/Base/static%20library/","title":"Static Library","text":""},{"location":"Project/Linux/Base/static%20library/#_1","title":"\u5e93","text":"<ol> <li>\u5e93\u6587\u4ef6\u662f\u8ba1\u7b97\u673a\u4e0a\u7684\u4e00\u7c7b\u6587\u4ef6\uff0c\u53ef\u4ee5\u7b80\u5355\u7684\u628a\u5e93\u6587\u4ef6\u770b\u6210\u4e00\u79cd\u4ee3\u7801\u4ed3\u5e93\uff0c\u5b83\u63d0\u4f9b\u7ed9\u4f7f\u7528\u8005\u4e00\u4e9b\u53ef\u4ee5\u76f4\u63a5\u62ff\u6765\u7528\u7684\u53d8\u91cf\u3001\u51fd\u6570\u6216\u7c7b\u3002</li> <li>\u5e93\u662f\u7279\u6b8a\u7684\u4e00\u79cd\u7a0b\u5e8f\uff0c\u7f16\u5199\u5e93\u7684\u7a0b\u5e8f\u548c\u7f16\u5199\u4e00\u822c\u7684\u7a0b\u5e8f\u533a\u522b\u4e0d\u5927\uff0c\u53ea\u662f\u5e93\u4e0d\u80fd\u5355\u72ec\u8fd0\u884c\u3002</li> <li>\u5e93\u6587\u4ef6\u6709\u4e24\u79cd\uff0c\u9759\u6001\u5e93\u548c\u52a8\u6001\u5e93(\u5171\u4eab\u5e93)\uff0c\u533a\u522b\u662f: \u9759\u6001\u5e93\u5728\u7a0b\u5e8f\u7684\u94fe\u63a5\u9636\u6bb5\u88ab\u590d\u5236\u5230\u4e86\u7a0b\u5e8f\u4e2d;\u52a8\u6001\u5e93\u5728\u94fe\u63a5\u9636\u6bb5\u6ca1\u6709\u88ab\u590d\u5236\u5230\u7a0b\u5e8f\u4e2d\uff0c\u800c\u662f\u7a0b\u5e8f\u5728\u8fd0\u884c\u65f6\u7531\u7cfb\u7edf\u52a8\u6001\u52a0\u8f7d\u5230\u5185\u5b58\u4e2d\u4f9b\u7a0b\u5e8f\u8c03\u7528\u3002</li> <li>\u5e93\u7684\u597d\u5904:<ul> <li>\u4ee3\u7801\u4fdd\u5bc6</li> <li>\u65b9\u4fbf\u90e8\u7f72\u548c\u5206\u53d1</li> </ul> </li> </ol>"},{"location":"Project/Linux/Base/static%20library/#_2","title":"\u547d\u540d\u89c4\u5219","text":"<ol> <li> <p><code>Linux</code> : <code>libxxx.a</code></p> <ul> <li><code>lib</code> : \u524d\u7f00(\u56fa\u5b9a) </li> <li><code>xxx</code> : \u5e93\u7684\u540d\u5b57\uff0c\u81ea\u5df1\u8d77 </li> <li><code>.a</code> : \u540e\u7f00(\u56fa\u5b9a)</li> </ul> </li> <li> <p><code>Windows</code> : <code>libxxx.lib</code></p> </li> </ol>"},{"location":"Project/Linux/Base/static%20library/#_3","title":"\u4f18\u7f3a\u70b9","text":"<ol> <li>\u4f18\u70b9:<ul> <li>\u9759\u6001\u5e93\u88ab\u6253\u5305\u5230\u5e94\u7528\u7a0b\u5e8f\u4e2d\u52a0\u8f7d\u901f\u5ea6\u5feb</li> <li>\u53d1\u5e03\u7a0b\u5e8f\u65e0\u9700\u63d0\u4f9b\u9759\u6001\u5e93\uff0c\u79fb\u690d\u65b9\u4fbf</li> </ul> </li> <li>\u7f3a\u70b9:<ul> <li>\u6d88\u8017\u7cfb\u7edf\u8d44\u6e90\uff0c\u6d6a\u8d39\u5185\u5b58</li> <li>\u66f4\u65b0\u3001\u90e8\u7f72\u3001\u53d1\u5e03\u9ebb\u70e6</li> </ul> </li> </ol>"},{"location":"Project/Linux/Base/static%20library/#_4","title":"\u9759\u6001\u5e93\u7684\u5236\u4f5c","text":"<ol> <li><code>gcc</code> \u83b7\u5f97 <code>.o</code> \u6587\u4ef6</li> <li>\u5c06 <code>.o</code> \u6587\u4ef6\u6253\u5305\uff0c\u4f7f\u7528 <code>ar</code> \u5de5\u5177(<code>archive</code>)</li> <li><code>ar rcs libxxx.a xxx.o xxx.o</code><ul> <li><code>r</code> \u2013 \u5c06\u6587\u4ef6\u63d2\u5165\u5907\u5b58\u6587\u4ef6\u4e2d</li> <li><code>c</code> \u2013 \u5efa\u7acb\u5907\u5b58\u6587\u4ef6</li> <li><code>s</code> \u2013 \u7d22\u5f15 <pre><code>.\n\u251c\u2500\u2500 add.c\n\u251c\u2500\u2500 div.c\n\u251c\u2500\u2500 head.h\n\u251c\u2500\u2500 main.c\n\u251c\u2500\u2500 mult.c\n\u2514\u2500\u2500 sub.c\n</code></pre> <pre><code>gcc -c add.c div.c mult.c sub.c\n</code></pre> <pre><code>.\n\u251c\u2500\u2500 add.c\n\u251c\u2500\u2500 add.o\n\u251c\u2500\u2500 div.c\n\u251c\u2500\u2500 div.o\n\u251c\u2500\u2500 head.h\n\u251c\u2500\u2500 main.c\n\u251c\u2500\u2500 mult.c\n\u251c\u2500\u2500 mult.o\n\u251c\u2500\u2500 sub.c\n</code></pre> <pre><code>.\n\u251c\u2500\u2500 include\n\u2502   \u2514\u2500\u2500 head.h\n\u251c\u2500\u2500 lib\n\u2502   \u2514\u2500\u2500 libcalc.a\n\u251c\u2500\u2500 main.c\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 add.c\n    \u251c\u2500\u2500 div.c\n    \u251c\u2500\u2500 mult.c\n    \u2514\u2500\u2500 sub.c\n</code></pre> <pre><code>gcc main.c -o app -I ./include/ -l calc -L lib\n</code></pre> <pre><code>.\n\u251c\u2500\u2500 app\n\u251c\u2500\u2500 include\n\u2502   \u2514\u2500\u2500 head.h\n\u251c\u2500\u2500 lib\n\u2502   \u2514\u2500\u2500 libcalc.a\n\u251c\u2500\u2500 main.c\n\u2514\u2500\u2500 src\n    \u251c\u2500\u2500 add.c\n    \u251c\u2500\u2500 div.c\n    \u251c\u2500\u2500 mult.c\n    \u2514\u2500\u2500 sub.c\n</code></pre></li> </ul> </li> </ol>"},{"location":"Project/Linux/Multi-process/Process%20Overview/","title":"xvf","text":""},{"location":"Project/Linux/Multi-threaded/Threads%20Overview/","title":"Threads Overview","text":""},{"location":"Project/Linux/Network/Network%20Overview/","title":"Network Overview","text":""},{"location":"Project/Linux/Projects/Architecture/","title":"Architecture","text":""}]}